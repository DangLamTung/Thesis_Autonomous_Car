
C21_Encoder_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080065a8  080065a8  000165a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006888  08006888  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006888  08006888  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001738  200001f0  08006a80  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001928  08006a80  00021928  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f869  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ad  00000000  00000000  0002fa82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00032e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018cf8  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c688  00000000  00000000  0004c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008beac  00000000  00000000  00059038  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4ee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  000e4f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006590 	.word	0x08006590

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08006590 	.word	0x08006590

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d011      	beq.n	8000d8a <lwrb_get_full+0x32>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <lwrb_get_full+0x7c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d10c      	bne.n	8000d8a <lwrb_get_full+0x32>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <lwrb_get_full+0x80>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d107      	bne.n	8000d8a <lwrb_get_full+0x32>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <lwrb_get_full+0x32>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <lwrb_get_full+0x36>
        return 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e01d      	b.n	8000dca <lwrb_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d102      	bne.n	8000da8 <lwrb_get_full+0x50>
        size = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00f      	b.n	8000dc8 <lwrb_get_full+0x70>
    } else if (w > r) {
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d904      	bls.n	8000dba <lwrb_get_full+0x62>
        size = w - r;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e006      	b.n	8000dc8 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	6939      	ldr	r1, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000dc8:	697b      	ldr	r3, [r7, #20]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	deadbeef 	.word	0xdeadbeef
 8000dd8:	21524110 	.word	0x21524110

08000ddc <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d011      	beq.n	8000e0e <lwrb_get_linear_block_read_address+0x32>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <lwrb_get_linear_block_read_address+0x4c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d10c      	bne.n	8000e0e <lwrb_get_linear_block_read_address+0x32>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <lwrb_get_linear_block_read_address+0x50>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d107      	bne.n	8000e0e <lwrb_get_linear_block_read_address+0x32>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <lwrb_get_linear_block_read_address+0x32>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <lwrb_get_linear_block_read_address+0x36>
        return NULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e004      	b.n	8000e1c <lwrb_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	4413      	add	r3, r2
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	deadbeef 	.word	0xdeadbeef
 8000e2c:	21524110 	.word	0x21524110

08000e30 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d011      	beq.n	8000e62 <lwrb_get_linear_block_read_length+0x32>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <lwrb_get_linear_block_read_length+0x78>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d10c      	bne.n	8000e62 <lwrb_get_linear_block_read_length+0x32>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	; (8000eac <lwrb_get_linear_block_read_length+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d107      	bne.n	8000e62 <lwrb_get_linear_block_read_length+0x32>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <lwrb_get_linear_block_read_length+0x32>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <lwrb_get_linear_block_read_length+0x36>
        return 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e01b      	b.n	8000e9e <lwrb_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d904      	bls.n	8000e84 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e00b      	b.n	8000e9c <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d905      	bls.n	8000e98 <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e001      	b.n	8000e9c <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000e9c:	697b      	ldr	r3, [r7, #20]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	371c      	adds	r7, #28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	deadbeef 	.word	0xdeadbeef
 8000eac:	21524110 	.word	0x21524110

08000eb0 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d014      	beq.n	8000eea <lwrb_skip+0x3a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <lwrb_skip+0x98>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10f      	bne.n	8000eea <lwrb_skip+0x3a>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <lwrb_skip+0x9c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d10a      	bne.n	8000eea <lwrb_skip+0x3a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <lwrb_skip+0x3a>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <lwrb_skip+0x3a>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <lwrb_skip+0x3e>
        return 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e027      	b.n	8000f3e <lwrb_skip+0x8e>
    }

    full = lwrb_get_full(buff);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff32 	bl	8000d58 <lwrb_get_full>
 8000ef4:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	bf28      	it	cs
 8000efe:	4613      	movcs	r3, r2
 8000f00:	603b      	str	r3, [r7, #0]
    buff->r += len;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	441a      	add	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d306      	bcc.n	8000f28 <lwrb_skip+0x78>
        buff->r -= buff->size;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <lwrb_skip+0x8c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	2100      	movs	r1, #0
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	4798      	blx	r3
    return len;
 8000f3c:	683b      	ldr	r3, [r7, #0]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	deadbeef 	.word	0xdeadbeef
 8000f4c:	21524110 	.word	0x21524110

08000f50 <substring>:
	float			err_lat;
	float			err_lon;
	float			err_alt;
}GPS;

void substring(char s[], char sub[], int p, int l) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
   int c = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]

   while (c < l) {
 8000f62:	e00d      	b.n	8000f80 <substring+0x30>
      sub[c] = s[p+c-1];
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	441a      	add	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	440b      	add	r3, r1
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
      c++;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
   while (c < l) {
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbed      	blt.n	8000f64 <substring+0x14>
   }
   sub[c] = '\0';
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <process_NMEA>:

void process_NMEA(volatile GPS * gps,char Rx_Buffer[]){
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b09e      	sub	sp, #120	; 0x78
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]

	char buffer[10];
	char temp_1[20];
	char time[8];
    // read GNRMC
    if(strstr (Rx_Buffer,"RMC")!= NULL ){
 8000faa:	49d3      	ldr	r1, [pc, #844]	; (80012f8 <process_NMEA+0x358>)
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f003 fba1 	bl	80046f4 <strstr>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 81bf 	beq.w	8001338 <process_NMEA+0x398>

    char * n = " ";
 8000fba:	4bd0      	ldr	r3, [pc, #832]	; (80012fc <process_NMEA+0x35c>)
 8000fbc:	657b      	str	r3, [r7, #84]	; 0x54
    //HAL_UART_Transmit(&huart2, (uint8_t *) Rx_Buffer, sizeof(Rx_Buffer),1000);

    pch = strtok (Rx_Buffer,",");
 8000fbe:	49d0      	ldr	r1, [pc, #832]	; (8001300 <process_NMEA+0x360>)
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f004 f9e7 	bl	8005394 <strtok>
 8000fc6:	6778      	str	r0, [r7, #116]	; 0x74

    int i = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	673b      	str	r3, [r7, #112]	; 0x70

    while (pch != NULL)
 8000fcc:	e1b0      	b.n	8001330 <process_NMEA+0x390>
      {
    	i++;
 8000fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	673b      	str	r3, [r7, #112]	; 0x70
    	char tem[2];
    	char deg[8];
    	strcpy((char*)temp_1, pch);
 8000fd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 fb82 	bl	80046e4 <strcpy>
    	switch(i){
 8000fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fe2:	3b02      	subs	r3, #2
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	f200 819e 	bhi.w	8001326 <process_NMEA+0x386>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <process_NMEA+0x50>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001011 	.word	0x08001011
 8000ff4:	08001117 	.word	0x08001117
 8000ff8:	08001121 	.word	0x08001121
 8000ffc:	080011d1 	.word	0x080011d1
 8001000:	080011db 	.word	0x080011db
 8001004:	080012b5 	.word	0x080012b5
 8001008:	080012bf 	.word	0x080012bf
 800100c:	08001309 	.word	0x08001309
    	       case 2:
                       for(int j= 0; j<8;j++){
 8001010:	2300      	movs	r3, #0
 8001012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001014:	e008      	b.n	8001028 <process_NMEA+0x88>
                    	   time[j] = NULL;
 8001016:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800101a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800101c:	4413      	add	r3, r2
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
                       for(int j= 0; j<8;j++){
 8001022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001024:	3301      	adds	r3, #1
 8001026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800102a:	2b07      	cmp	r3, #7
 800102c:	ddf3      	ble.n	8001016 <process_NMEA+0x76>
                       }
                       substring(temp_1, tem, 1, 2);
 800102e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001032:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001036:	2302      	movs	r3, #2
 8001038:	2201      	movs	r2, #1
 800103a:	f7ff ff89 	bl	8000f50 <substring>
    	               gps->UTC_Hour = atoi(tem);
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fae4 	bl	8004610 <atoi>
 8001048:	4603      	mov	r3, r0
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	701a      	strb	r2, [r3, #0]
    	               itoa(gps->UTC_Hour,(char*) tem,10);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105c:	220a      	movs	r2, #10
 800105e:	4619      	mov	r1, r3
 8001060:	f003 fb1c 	bl	800469c <itoa>
    	               strcat(time, tem);
 8001064:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fb29 	bl	80046c6 <strcat>
    	               strcat(time, ":");
 8001074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f869 	bl	8000150 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001086:	4413      	add	r3, r2
 8001088:	499e      	ldr	r1, [pc, #632]	; (8001304 <process_NMEA+0x364>)
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	8013      	strh	r3, [r2, #0]

    	               substring(temp_1, tem, 3, 2);
 8001092:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001096:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800109a:	2302      	movs	r3, #2
 800109c:	2203      	movs	r2, #3
 800109e:	f7ff ff57 	bl	8000f50 <substring>
    	               strcat(time, tem);
 80010a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fb0a 	bl	80046c6 <strcat>
    	               strcat(time, ":");
 80010b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f84a 	bl	8000150 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c4:	4413      	add	r3, r2
 80010c6:	498f      	ldr	r1, [pc, #572]	; (8001304 <process_NMEA+0x364>)
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	8013      	strh	r3, [r2, #0]
    	               gps->UTC_Min = atoi((char*)tem);
 80010d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fa9b 	bl	8004610 <atoi>
 80010da:	4603      	mov	r3, r0
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	705a      	strb	r2, [r3, #1]

    	               substring(temp_1, tem, 5, 2);
 80010e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80010ea:	2302      	movs	r3, #2
 80010ec:	2205      	movs	r2, #5
 80010ee:	f7ff ff2f 	bl	8000f50 <substring>
    	               strcat(time, tem);
 80010f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fae2 	bl	80046c6 <strcat>
    	               gps->UTC_Sec = atoi((char*)tem);
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fa82 	bl	8004610 <atoi>
 800110c:	4603      	mov	r3, r0
 800110e:	b2da      	uxtb	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	709a      	strb	r2, [r3, #2]
    	       break;
 8001114:	e107      	b.n	8001326 <process_NMEA+0x386>
    	       case 3:
    	    	       gps->Pos = temp_1[0];
 8001116:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	719a      	strb	r2, [r3, #6]
    	       break;
 800111e:	e102      	b.n	8001326 <process_NMEA+0x386>
    	       case 4:

    	    	       substring(temp_1, tem, 1, 2);
 8001120:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001124:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001128:	2302      	movs	r3, #2
 800112a:	2201      	movs	r2, #1
 800112c:	f7ff ff10 	bl	8000f50 <substring>
    	               gps->Lat_Deg = atoi(tem);
 8001130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fa6b 	bl	8004610 <atoi>
 800113a:	4603      	mov	r3, r0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	71da      	strb	r2, [r3, #7]

    	               substring(temp_1, deg, 3, 4);
 8001142:	f107 0120 	add.w	r1, r7, #32
 8001146:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800114a:	2304      	movs	r3, #4
 800114c:	2203      	movs	r2, #3
 800114e:	f7ff feff 	bl	8000f50 <substring>
    	               gps->Lat_Minute = atoi(deg);
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fa5a 	bl	8004610 <atoi>
 800115c:	4603      	mov	r3, r0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fda6 	bl	8000cb0 <__aeabi_i2f>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]
    	               substring(temp_1, deg, 6, 8);
 800116a:	f107 0120 	add.w	r1, r7, #32
 800116e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001172:	2308      	movs	r3, #8
 8001174:	2206      	movs	r2, #6
 8001176:	f7ff feeb 	bl	8000f50 <substring>
    	               gps->Lat_Minute += (float) atoi(deg)/100000.0;
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fa46 	bl	8004610 <atoi>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fd92 	bl	8000cb0 <__aeabi_i2f>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_f2d>
 8001194:	a354      	add	r3, pc, #336	; (adr r3, 80012e8 <process_NMEA+0x348>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fac7 	bl	800072c <__aeabi_ddiv>
 800119e:	4603      	mov	r3, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	4625      	mov	r5, r4
 80011a4:	461c      	mov	r4, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f93c 	bl	8000428 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7fe ffd8 	bl	800016c <__adddf3>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fc6a 	bl	8000a9c <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]

    	       break;
 80011ce:	e0aa      	b.n	8001326 <process_NMEA+0x386>
    	       case 5:
    	               gps->Lat_Dir = temp_1[0];
 80011d0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	731a      	strb	r2, [r3, #12]
    	               break;
 80011d8:	e0a5      	b.n	8001326 <process_NMEA+0x386>
    	       case 6:
    	    	       for(uint8_t i = 0; i<8; i++){
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80011e0:	e00c      	b.n	80011fc <process_NMEA+0x25c>
    	    	    	   deg[i] = 0;
 80011e2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80011e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80011ea:	4413      	add	r3, r2
 80011ec:	2200      	movs	r2, #0
 80011ee:	f803 2c58 	strb.w	r2, [r3, #-88]
    	    	       for(uint8_t i = 0; i<8; i++){
 80011f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80011f6:	3301      	adds	r3, #1
 80011f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80011fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001200:	2b07      	cmp	r3, #7
 8001202:	d9ee      	bls.n	80011e2 <process_NMEA+0x242>
    	    	       }
    	    	       substring(temp_1, tem, 1, 3);
 8001204:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001208:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800120c:	2303      	movs	r3, #3
 800120e:	2201      	movs	r2, #1
 8001210:	f7ff fe9e 	bl	8000f50 <substring>
    	               gps->Lon_Deg = atoi(tem);
 8001214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001218:	4618      	mov	r0, r3
 800121a:	f003 f9f9 	bl	8004610 <atoi>
 800121e:	4603      	mov	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	735a      	strb	r2, [r3, #13]

    	               substring(temp_1, deg, 4, 5);
 8001226:	f107 0120 	add.w	r1, r7, #32
 800122a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800122e:	2305      	movs	r3, #5
 8001230:	2204      	movs	r2, #4
 8001232:	f7ff fe8d 	bl	8000f50 <substring>
    	               gps->Lon_Minute = atoi(deg);
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4618      	mov	r0, r3
 800123c:	f003 f9e8 	bl	8004610 <atoi>
 8001240:	4603      	mov	r3, r0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd34 	bl	8000cb0 <__aeabi_i2f>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
    	               substring(temp_1, deg, 7, 8);
 800124e:	f107 0120 	add.w	r1, r7, #32
 8001252:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001256:	2308      	movs	r3, #8
 8001258:	2207      	movs	r2, #7
 800125a:	f7ff fe79 	bl	8000f50 <substring>
    	               gps->Lon_Minute += (float) atoi(deg)/100000.0;
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f003 f9d4 	bl	8004610 <atoi>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd20 	bl	8000cb0 <__aeabi_i2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8d8 	bl	8000428 <__aeabi_f2d>
 8001278:	a31b      	add	r3, pc, #108	; (adr r3, 80012e8 <process_NMEA+0x348>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff fa55 	bl	800072c <__aeabi_ddiv>
 8001282:	4603      	mov	r3, r0
 8001284:	460c      	mov	r4, r1
 8001286:	4625      	mov	r5, r4
 8001288:	461c      	mov	r4, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f8ca 	bl	8000428 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe ff66 	bl	800016c <__adddf3>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fbf8 	bl	8000a9c <__aeabi_d2f>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	611a      	str	r2, [r3, #16]

    	              break;
 80012b2:	e038      	b.n	8001326 <process_NMEA+0x386>
    	       case 7:
    	                gps->Lon_Dir = temp_1[0];
 80012b4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	751a      	strb	r2, [r3, #20]
    	              break;
 80012bc:	e033      	b.n	8001326 <process_NMEA+0x386>
    	       case 8:
    	                gps->Speed = atof(temp_1) * 0.514444856;
 80012be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 f9a1 	bl	800460a <atof>
 80012c8:	a309      	add	r3, pc, #36	; (adr r3, 80012f0 <process_NMEA+0x350>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f903 	bl	80004d8 <__aeabi_dmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff fbdf 	bl	8000a9c <__aeabi_d2f>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
    	              break;
 80012e4:	e01f      	b.n	8001326 <process_NMEA+0x386>
 80012e6:	bf00      	nop
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40f86a00 	.word	0x40f86a00
 80012f0:	0f03b199 	.word	0x0f03b199
 80012f4:	3fe07655 	.word	0x3fe07655
 80012f8:	080065a8 	.word	0x080065a8
 80012fc:	080065ac 	.word	0x080065ac
 8001300:	080065b0 	.word	0x080065b0
 8001304:	080065b4 	.word	0x080065b4
    	       case 9:
    	           	    gps->Track = atof(temp_1);
 8001308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f97c 	bl	800460a <atof>
 8001312:	4603      	mov	r3, r0
 8001314:	460c      	mov	r4, r1
 8001316:	4618      	mov	r0, r3
 8001318:	4621      	mov	r1, r4
 800131a:	f7ff fbbf 	bl	8000a9c <__aeabi_d2f>
 800131e:	4602      	mov	r2, r0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	61da      	str	r2, [r3, #28]
    	           	  break;
 8001324:	bf00      	nop

    	}
    	pch = strtok (NULL, ",");
 8001326:	4947      	ldr	r1, [pc, #284]	; (8001444 <process_NMEA+0x4a4>)
 8001328:	2000      	movs	r0, #0
 800132a:	f004 f833 	bl	8005394 <strtok>
 800132e:	6778      	str	r0, [r7, #116]	; 0x74
    while (pch != NULL)
 8001330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001332:	2b00      	cmp	r3, #0
 8001334:	f47f ae4b 	bne.w	8000fce <process_NMEA+0x2e>
      }
    }


    if(strstr (Rx_Buffer,"THS")!= NULL ){
 8001338:	4943      	ldr	r1, [pc, #268]	; (8001448 <process_NMEA+0x4a8>)
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	f003 f9da 	bl	80046f4 <strstr>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d02a      	beq.n	800139c <process_NMEA+0x3fc>

    pch = strtok (Rx_Buffer,",");
 8001346:	493f      	ldr	r1, [pc, #252]	; (8001444 <process_NMEA+0x4a4>)
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f004 f823 	bl	8005394 <strtok>
 800134e:	6778      	str	r0, [r7, #116]	; 0x74

    int i = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	667b      	str	r3, [r7, #100]	; 0x64

    while (pch != NULL)
 8001354:	e01f      	b.n	8001396 <process_NMEA+0x3f6>
      {
       for(int i= 0; i<20;i++){
 8001356:	2300      	movs	r3, #0
 8001358:	663b      	str	r3, [r7, #96]	; 0x60
 800135a:	e008      	b.n	800136e <process_NMEA+0x3ce>
    	   temp_1[i] = 0;
 800135c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001362:	4413      	add	r3, r2
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
       for(int i= 0; i<20;i++){
 8001368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800136a:	3301      	adds	r3, #1
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
 800136e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001370:	2b13      	cmp	r3, #19
 8001372:	ddf3      	ble.n	800135c <process_NMEA+0x3bc>
    	}
    	i++;
 8001374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001376:	3301      	adds	r3, #1
 8001378:	667b      	str	r3, [r7, #100]	; 0x64
    	char tem[2];
    	char deg[8];
    	strcpy(temp_1, pch);
 800137a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800137e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001380:	4618      	mov	r0, r3
 8001382:	f003 f9af 	bl	80046e4 <strcpy>
    	switch(i){
 8001386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001388:	2b02      	cmp	r3, #2

    	       case 2:

    	       break;
 800138a:	bf00      	nop
////    	    	       gps.Pos = temp_11[0];
//    	    	   gps.sat_num = atoi(temp_11);
//    	       break;

    	}
    	pch = strtok (NULL, ",");
 800138c:	492d      	ldr	r1, [pc, #180]	; (8001444 <process_NMEA+0x4a4>)
 800138e:	2000      	movs	r0, #0
 8001390:	f004 f800 	bl	8005394 <strtok>
 8001394:	6778      	str	r0, [r7, #116]	; 0x74
    while (pch != NULL)
 8001396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1dc      	bne.n	8001356 <process_NMEA+0x3b6>
      }
    }

    for(int i= 0; i<20;i++){
 800139c:	2300      	movs	r3, #0
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013a0:	e008      	b.n	80013b4 <process_NMEA+0x414>
             temp_1[i] = 0;
 80013a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80013a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a8:	4413      	add	r3, r2
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    for(int i= 0; i<20;i++){
 80013ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b0:	3301      	adds	r3, #1
 80013b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b6:	2b13      	cmp	r3, #19
 80013b8:	ddf3      	ble.n	80013a2 <process_NMEA+0x402>
        }

    if(strstr (Rx_Buffer,"GGA")!= NULL ){
 80013ba:	4924      	ldr	r1, [pc, #144]	; (800144c <process_NMEA+0x4ac>)
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f003 f999 	bl	80046f4 <strstr>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d038      	beq.n	800143a <process_NMEA+0x49a>

     pch = strtok (Rx_Buffer,",");
 80013c8:	491e      	ldr	r1, [pc, #120]	; (8001444 <process_NMEA+0x4a4>)
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f003 ffe2 	bl	8005394 <strtok>
 80013d0:	6778      	str	r0, [r7, #116]	; 0x74

     int i = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	65bb      	str	r3, [r7, #88]	; 0x58

     while (pch != NULL)
 80013d6:	e02d      	b.n	8001434 <process_NMEA+0x494>
       {
     	i++;
 80013d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013da:	3301      	adds	r3, #1
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
     	char tem[2];
     	char deg[8];
     	strcpy(temp_1, pch);
 80013de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013e2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f97d 	bl	80046e4 <strcpy>
     	switch(i){
 80013ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d002      	beq.n	80013f6 <process_NMEA+0x456>
 80013f0:	2b0a      	cmp	r3, #10
 80013f2:	d00b      	beq.n	800140c <process_NMEA+0x46c>
 80013f4:	e019      	b.n	800142a <process_NMEA+0x48a>

     	       case 8:
     	//    	    	       gps.Pos = temp_1[0];
     	    	  gps->sat_num = atoi(temp_1);
 80013f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 f908 	bl	8004610 <atoi>
 8001400:	4603      	mov	r3, r0
 8001402:	b2da      	uxtb	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
     	       break;
 800140a:	e00e      	b.n	800142a <process_NMEA+0x48a>
     	       case 10:
 //    	    	       gps->Pos = temp_1[0];
     	    	   gps->altitude = atof(temp_1);
 800140c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001410:	4618      	mov	r0, r3
 8001412:	f003 f8fa 	bl	800460a <atof>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	4618      	mov	r0, r3
 800141c:	4621      	mov	r1, r4
 800141e:	f7ff fb3d 	bl	8000a9c <__aeabi_d2f>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
     	       break;
 8001428:	bf00      	nop

     	}
     	pch = strtok (NULL, ",");
 800142a:	4906      	ldr	r1, [pc, #24]	; (8001444 <process_NMEA+0x4a4>)
 800142c:	2000      	movs	r0, #0
 800142e:	f003 ffb1 	bl	8005394 <strtok>
 8001432:	6778      	str	r0, [r7, #116]	; 0x74
     while (pch != NULL)
 8001434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ce      	bne.n	80013d8 <process_NMEA+0x438>
       }
     }

}
 800143a:	bf00      	nop
 800143c:	3778      	adds	r7, #120	; 0x78
 800143e:	46bd      	mov	sp, r7
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	080065b0 	.word	0x080065b0
 8001448:	080065b8 	.word	0x080065b8
 800144c:	080065bc 	.word	0x080065bc

08001450 <UARTTxData>:

void UARTTXInit(void) {
	lwrb_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
}

void UARTTxData(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <UARTTxData+0x48>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d117      	bne.n	800148e <UARTTxData+0x3e>
  txLen=lwrb_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <UARTTxData+0x4c>)
 8001460:	f7ff fce6 	bl	8000e30 <lwrb_get_linear_block_read_length>
 8001464:	4603      	mov	r3, r0
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <UARTTxData+0x48>)
 800146a:	701a      	strb	r2, [r3, #0]
  if(txLen){
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <UARTTxData+0x48>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00d      	beq.n	8001490 <UARTTxData+0x40>
   void* ringData=lwrb_get_linear_block_read_address(&txRing); // Get pointer to read memory
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <UARTTxData+0x4c>)
 8001476:	f7ff fcb1 	bl	8000ddc <lwrb_get_linear_block_read_address>
 800147a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart1,(uint8_t*) ringData,txLen); // Start DMA transfer
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <UARTTxData+0x48>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <UARTTxData+0x50>)
 8001488:	f002 fc00 	bl	8003c8c <HAL_UART_Transmit_DMA>
 800148c:	e000      	b.n	8001490 <UARTTxData+0x40>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800148e:	bf00      	nop
  }
}
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000384 	.word	0x20000384
 800149c:	20000368 	.word	0x20000368
 80014a0:	200006d0 	.word	0x200006d0

080014a4 <UARTTxComplete>:
  UARTTxData();
}



void UARTTxComplete(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  if (txLen) {
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <UARTTxComplete+0x28>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00a      	beq.n	80014c6 <UARTTxComplete+0x22>
   lwrb_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <UARTTxComplete+0x28>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <UARTTxComplete+0x2c>)
 80014b8:	f7ff fcfa 	bl	8000eb0 <lwrb_skip>
   txLen=0; // Reset length = DMA is not active
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <UARTTxComplete+0x28>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
   UARTTxData(); // Try to send more
 80014c2:	f7ff ffc5 	bl	8001450 <UARTTxData>
  }
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000384 	.word	0x20000384
 80014d0:	20000368 	.word	0x20000368

080014d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_UART_TxCpltCallback+0x38>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10d      	bne.n	8001502 <HAL_UART_TxCpltCallback+0x2e>
   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80014f4:	60da      	str	r2, [r3, #12]
   huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   UARTTxComplete();
 80014fe:	f7ff ffd1 	bl	80014a4 <UARTTxComplete>
  }

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40013800 	.word	0x40013800

08001510 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART2)  //current UART
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a41      	ldr	r2, [pc, #260]	; (8001624 <HAL_UART_RxCpltCallback+0x114>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d171      	bne.n	8001606 <HAL_UART_RxCpltCallback+0xf6>
        {
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_UART_RxCpltCallback+0x118>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d111      	bne.n	800154e <HAL_UART_RxCpltCallback+0x3e>
 800152a:	2300      	movs	r3, #0
 800152c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001530:	e009      	b.n	8001546 <HAL_UART_RxCpltCallback+0x36>
 8001532:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001536:	4a3d      	ldr	r2, [pc, #244]	; (800162c <HAL_UART_RxCpltCallback+0x11c>)
 8001538:	2100      	movs	r1, #0
 800153a:	54d1      	strb	r1, [r2, r3]
 800153c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001540:	3301      	adds	r3, #1
 8001542:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001546:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800154a:	2b63      	cmp	r3, #99	; 0x63
 800154c:	d9f1      	bls.n	8001532 <HAL_UART_RxCpltCallback+0x22>

        if (Rx_data[0]!=10) //if received data different from ascii 13 (enter)
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_UART_RxCpltCallback+0x120>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b0a      	cmp	r3, #10
 8001554:	d00b      	beq.n	800156e <HAL_UART_RxCpltCallback+0x5e>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_UART_RxCpltCallback+0x118>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	b2d1      	uxtb	r1, r2
 800155e:	4a32      	ldr	r2, [pc, #200]	; (8001628 <HAL_UART_RxCpltCallback+0x118>)
 8001560:	7011      	strb	r1, [r2, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_UART_RxCpltCallback+0x120>)
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_UART_RxCpltCallback+0x11c>)
 800156a:	5499      	strb	r1, [r3, r2]
 800156c:	e04b      	b.n	8001606 <HAL_UART_RxCpltCallback+0xf6>
            }
        else            //if received data = 13
            {
        	//Rx_Buffer[Rx_indx++] = 13;
            Rx_indx=0;
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_UART_RxCpltCallback+0x118>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
            char * t = "\n";
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_UART_RxCpltCallback+0x124>)
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
            Transfer_cplt=1;//transfer complete, data is ready to read
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_UART_RxCpltCallback+0x128>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]

            process_NMEA(&gps,Rx_Buffer);
 800157e:	492b      	ldr	r1, [pc, #172]	; (800162c <HAL_UART_RxCpltCallback+0x11c>)
 8001580:	482e      	ldr	r0, [pc, #184]	; (800163c <HAL_UART_RxCpltCallback+0x12c>)
 8001582:	f7ff fd0d 	bl	8000fa0 <process_NMEA>
//            UARTAddToTxBuff("helllo\n",7);
        	char buffer[35];
        	char temp[15];

        	float Lat = gps.Lat_Deg + gps.Lat_Minute/100.0;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_UART_RxCpltCallback+0x12c>)
 8001588:	79db      	ldrb	r3, [r3, #7]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff39 	bl	8000404 <__aeabi_i2d>
 8001592:	4604      	mov	r4, r0
 8001594:	460d      	mov	r5, r1
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_UART_RxCpltCallback+0x12c>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff44 	bl	8000428 <__aeabi_f2d>
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_UART_RxCpltCallback+0x130>)
 80015a6:	f7ff f8c1 	bl	800072c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7fe fddb 	bl	800016c <__adddf3>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4618      	mov	r0, r3
 80015bc:	4621      	mov	r1, r4
 80015be:	f7ff fa6d 	bl	8000a9c <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
        	float Lon = gps.Lon_Deg + gps.Lon_Minute/100.0;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_UART_RxCpltCallback+0x12c>)
 80015c8:	7b5b      	ldrb	r3, [r3, #13]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff19 	bl	8000404 <__aeabi_i2d>
 80015d2:	4604      	mov	r4, r0
 80015d4:	460d      	mov	r5, r1
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_UART_RxCpltCallback+0x12c>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff24 	bl	8000428 <__aeabi_f2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_UART_RxCpltCallback+0x130>)
 80015e6:	f7ff f8a1 	bl	800072c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fdbb 	bl	800016c <__adddf3>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	4618      	mov	r0, r3
 80015fc:	4621      	mov	r1, r4
 80015fe:	f7ff fa4d 	bl	8000a9c <__aeabi_d2f>
 8001602:	4603      	mov	r3, r0
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
            }


          //activate UART receive interrupt every time
        }
    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 8001606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <HAL_UART_RxCpltCallback+0x134>)
 800160c:	f001 fb3c 	bl	8002c88 <HAL_GPIO_TogglePin>
//    HAL_UART_Transmit(&huart3,(uint8_t*)"hello",100,100);
    HAL_UART_Receive_IT(&huart2, (uint8_t *) Rx_data, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	4907      	ldr	r1, [pc, #28]	; (8001630 <HAL_UART_RxCpltCallback+0x120>)
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <HAL_UART_RxCpltCallback+0x138>)
 8001616:	f002 fae4 	bl	8003be2 <HAL_UART_Receive_IT>

}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	; 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	20000320 	.word	0x20000320
 800162c:	20000710 	.word	0x20000710
 8001630:	20000388 	.word	0x20000388
 8001634:	080065c4 	.word	0x080065c4
 8001638:	200002c4 	.word	0x200002c4
 800163c:	20000288 	.word	0x20000288
 8001640:	40590000 	.word	0x40590000
 8001644:	40010c00 	.word	0x40010c00
 8001648:	20000878 	.word	0x20000878

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001652:	f000 fdb1 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001656:	f000 f847 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165a:	f000 fa43 	bl	8001ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 800165e:	f000 fa1b 	bl	8001a98 <MX_DMA_Init>
  MX_SPI2_Init();
 8001662:	f000 f8bd 	bl	80017e0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001666:	f000 f885 	bl	8001774 <MX_SPI1_Init>
  MX_FATFS_Init();
 800166a:	f002 ff13 	bl	8004494 <MX_FATFS_Init>
  MX_TIM3_Init();
 800166e:	f000 f941 	bl	80018f4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001672:	f000 f9bd 	bl	80019f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001676:	f000 f8e9 	bl	800184c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800167a:	f000 f9e3 	bl	8001a44 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800167e:	f000 f98d 	bl	800199c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001682:	213c      	movs	r1, #60	; 0x3c
 8001684:	4810      	ldr	r0, [pc, #64]	; (80016c8 <main+0x7c>)
 8001686:	f002 f85b 	bl	8003740 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800168a:	213c      	movs	r1, #60	; 0x3c
 800168c:	480f      	ldr	r0, [pc, #60]	; (80016cc <main+0x80>)
 800168e:	f002 f857 	bl	8003740 <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 8001692:	2201      	movs	r2, #1
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <main+0x84>)
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <main+0x88>)
 8001698:	f002 faa3 	bl	8003be2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) Rx_data, 1);
 800169c:	2201      	movs	r2, #1
 800169e:	490c      	ldr	r1, [pc, #48]	; (80016d0 <main+0x84>)
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <main+0x8c>)
 80016a2:	f002 fa9e 	bl	8003be2 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  UARTAddToTxBuff("helllo\n",7);
	  HAL_UART_Transmit(&huart1,(uint8_t*) "helllo\n",7,100);
 80016a6:	2364      	movs	r3, #100	; 0x64
 80016a8:	2207      	movs	r2, #7
 80016aa:	490c      	ldr	r1, [pc, #48]	; (80016dc <main+0x90>)
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <main+0x94>)
 80016ae:	f002 fa06 	bl	8003abe <HAL_UART_Transmit>
      int enc1 =	  TIM3->CNT;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <main+0x98>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	607b      	str	r3, [r7, #4]
      int enc2 =	  TIM2->CNT;
 80016b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	603b      	str	r3, [r7, #0]
      HAL_Delay(100);
 80016c0:	2064      	movs	r0, #100	; 0x64
 80016c2:	f000 fddb 	bl	800227c <HAL_Delay>
  {
 80016c6:	e7ee      	b.n	80016a6 <main+0x5a>
 80016c8:	20000598 	.word	0x20000598
 80016cc:	20000830 	.word	0x20000830
 80016d0:	20000388 	.word	0x20000388
 80016d4:	20000328 	.word	0x20000328
 80016d8:	20000878 	.word	0x20000878
 80016dc:	080065c8 	.word	0x080065c8
 80016e0:	200006d0 	.word	0x200006d0
 80016e4:	40000400 	.word	0x40000400

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b090      	sub	sp, #64	; 0x40
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 ffdd 	bl	80046b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001726:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fac3 	bl	8002cbc <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800173c:	f000 fa34 	bl	8001ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2302      	movs	r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2102      	movs	r1, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fd2e 	bl	80031bc <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001766:	f000 fa1f 	bl	8001ba8 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3740      	adds	r7, #64	; 0x40
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_SPI1_Init+0x64>)
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <MX_SPI1_Init+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_SPI1_Init+0x64>)
 8001780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_SPI1_Init+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_SPI1_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_SPI1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017a8:	2208      	movs	r2, #8
 80017aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017c0:	220a      	movs	r2, #10
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_SPI1_Init+0x64>)
 80017c6:	f001 fe95 	bl	80034f4 <HAL_SPI_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017d0:	f000 f9ea 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200007d8 	.word	0x200007d8
 80017dc:	40013000 	.word	0x40013000

080017e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_SPI2_Init+0x64>)
 80017e6:	4a18      	ldr	r2, [pc, #96]	; (8001848 <MX_SPI2_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_SPI2_Init+0x64>)
 80017ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_SPI2_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_SPI2_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_SPI2_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_SPI2_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_SPI2_Init+0x64>)
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_SPI2_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_SPI2_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_SPI2_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_SPI2_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_SPI2_Init+0x64>)
 800182c:	220a      	movs	r2, #10
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_SPI2_Init+0x64>)
 8001832:	f001 fe5f 	bl	80034f4 <HAL_SPI_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800183c:	f000 f9b4 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200002c8 	.word	0x200002c8
 8001848:	40003800 	.word	0x40003800

0800184c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f002 ff2b 	bl	80046b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_TIM2_Init+0xa4>)
 800186a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_TIM2_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_TIM2_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_TIM2_Init+0xa4>)
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_TIM2_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM2_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001890:	2301      	movs	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018a8:	2301      	movs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_TIM2_Init+0xa4>)
 80018bc:	f001 fe9e 	bl	80035fc <HAL_TIM_Encoder_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018c6:	f000 f96f 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM2_Init+0xa4>)
 80018d8:	f002 f846 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018e2:	f000 f961 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	; 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000830 	.word	0x20000830

080018f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2224      	movs	r2, #36	; 0x24
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fed7 	bl	80046b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <MX_TIM3_Init+0xa0>)
 8001912:	4a21      	ldr	r2, [pc, #132]	; (8001998 <MX_TIM3_Init+0xa4>)
 8001914:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_TIM3_Init+0xa0>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_TIM3_Init+0xa0>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_TIM3_Init+0xa0>)
 8001924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001928:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_TIM3_Init+0xa0>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_TIM3_Init+0xa0>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001936:	2301      	movs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM3_Init+0xa0>)
 8001962:	f001 fe4b 	bl	80035fc <HAL_TIM_Encoder_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 f91c 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM3_Init+0xa0>)
 800197e:	f001 fff3 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001988:	f000 f90e 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000598 	.word	0x20000598
 8001998:	40000400 	.word	0x40000400

0800199c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_USART1_UART_Init+0x50>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019d4:	f002 f826 	bl	8003a24 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 f8e3 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200006d0 	.word	0x200006d0
 80019ec:	40013800 	.word	0x40013800

080019f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_USART2_UART_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 80019fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a28:	f001 fffc 	bl	8003a24 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f8b9 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000878 	.word	0x20000878
 8001a40:	40004400 	.word	0x40004400

08001a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_USART3_UART_Init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	f001 ffd2 	bl	8003a24 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a86:	f000 f88f 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000328 	.word	0x20000328
 8001a94:	40004800 	.word	0x40004800

08001a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_DMA_Init+0x48>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <MX_DMA_Init+0x48>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6153      	str	r3, [r2, #20]
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <MX_DMA_Init+0x48>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	200e      	movs	r0, #14
 8001abc:	f000 fcd7 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ac0:	200e      	movs	r0, #14
 8001ac2:	f000 fcf0 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	200f      	movs	r0, #15
 8001acc:	f000 fccf 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ad0:	200f      	movs	r0, #15
 8001ad2:	f000 fce8 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_GPIO_Init+0xb8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|LCD_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f241 0184 	movw	r1, #4228	; 0x1084
 8001b46:	4816      	ldr	r0, [pc, #88]	; (8001ba0 <MX_GPIO_Init+0xbc>)
 8001b48:	f001 f886 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_GPIO_Init+0xc0>)
 8001b54:	f001 f880 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 LCD_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LCD_CS_Pin|SD_CS_Pin;
 8001b58:	f241 0384 	movw	r3, #4228	; 0x1084
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <MX_GPIO_Init+0xbc>)
 8001b72:	f000 ff17 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_GPIO_Init+0xc0>)
 8001b90:	f000 ff08 	bl	80029a4 <HAL_GPIO_Init>

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bae:	e7fe      	b.n	8001bae <Error_Handler+0x6>

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_MspInit+0x60>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_MspInit+0x60>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000

08001c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	; 0x30
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_SPI_MspInit+0x114>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d13e      	bne.n	8001cb2 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a36      	ldr	r2, [pc, #216]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001c64:	2328      	movs	r3, #40	; 0x28
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	482e      	ldr	r0, [pc, #184]	; (8001d30 <HAL_SPI_MspInit+0x11c>)
 8001c78:	f000 fe94 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4828      	ldr	r0, [pc, #160]	; (8001d30 <HAL_SPI_MspInit+0x11c>)
 8001c90:	f000 fe88 	bl	80029a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_SPI_MspInit+0x120>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001caa:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <HAL_SPI_MspInit+0x120>)
 8001cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cb0:	e036      	b.n	8001d20 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <HAL_SPI_MspInit+0x124>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d131      	bne.n	8001d20 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc6:	61d3      	str	r3, [r2, #28]
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_SPI_MspInit+0x118>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001cec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <HAL_SPI_MspInit+0x11c>)
 8001d02:	f000 fe4f 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_SPI_MspInit+0x11c>)
 8001d1c:	f000 fe42 	bl	80029a4 <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3730      	adds	r7, #48	; 0x30
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40003800 	.word	0x40003800

08001d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d124      	bne.n	8001da6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	61d3      	str	r3, [r2, #28]
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4819      	ldr	r0, [pc, #100]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001da0:	f000 fe00 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001da4:	e028      	b.n	8001df8 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d123      	bne.n	8001df8 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	61d3      	str	r3, [r2, #28]
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	4619      	mov	r1, r3
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001df4:	f000 fdd6 	bl	80029a4 <HAL_GPIO_Init>
}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40000400 	.word	0x40000400

08001e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a81      	ldr	r2, [pc, #516]	; (800202c <HAL_UART_MspInit+0x220>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d17e      	bne.n	8001f2a <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2c:	4b80      	ldr	r3, [pc, #512]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a7f      	ldr	r2, [pc, #508]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b77      	ldr	r3, [pc, #476]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0320 	add.w	r3, r7, #32
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4870      	ldr	r0, [pc, #448]	; (8002034 <HAL_UART_MspInit+0x228>)
 8001e72:	f000 fd97 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	4619      	mov	r1, r3
 8001e8a:	486a      	ldr	r0, [pc, #424]	; (8002034 <HAL_UART_MspInit+0x228>)
 8001e8c:	f000 fd8a 	bl	80029a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e90:	4b69      	ldr	r3, [pc, #420]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001e92:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_UART_MspInit+0x230>)
 8001e94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e96:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea8:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eae:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001eb4:	4b60      	ldr	r3, [pc, #384]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ec0:	485d      	ldr	r0, [pc, #372]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001ec2:	f000 fb0b 	bl	80024dc <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001ecc:	f7ff fe6c 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a59      	ldr	r2, [pc, #356]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed6:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_UART_MspInit+0x22c>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001ede:	4a59      	ldr	r2, [pc, #356]	; (8002044 <HAL_UART_MspInit+0x238>)
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee8:	4b55      	ldr	r3, [pc, #340]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eee:	4b54      	ldr	r3, [pc, #336]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef4:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001efa:	4b51      	ldr	r3, [pc, #324]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f00:	4b4f      	ldr	r3, [pc, #316]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f06:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f0c:	484c      	ldr	r0, [pc, #304]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001f0e:	f000 fae5 	bl	80024dc <HAL_DMA_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001f18:	f7ff fe46 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
 8001f22:	4a47      	ldr	r2, [pc, #284]	; (8002040 <HAL_UART_MspInit+0x234>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f28:	e07c      	b.n	8002024 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a46      	ldr	r2, [pc, #280]	; (8002048 <HAL_UART_MspInit+0x23c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d138      	bne.n	8001fa6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3e:	61d3      	str	r3, [r2, #28]
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a37      	ldr	r2, [pc, #220]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f64:	2304      	movs	r3, #4
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	4619      	mov	r1, r3
 8001f76:	482f      	ldr	r0, [pc, #188]	; (8002034 <HAL_UART_MspInit+0x228>)
 8001f78:	f000 fd14 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4829      	ldr	r0, [pc, #164]	; (8002034 <HAL_UART_MspInit+0x228>)
 8001f90:	f000 fd08 	bl	80029a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2026      	movs	r0, #38	; 0x26
 8001f9a:	f000 fa68 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f9e:	2026      	movs	r0, #38	; 0x26
 8001fa0:	f000 fa81 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001fa4:	e03e      	b.n	8002024 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a28      	ldr	r2, [pc, #160]	; (800204c <HAL_UART_MspInit+0x240>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d139      	bne.n	8002024 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001fb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fba:	61d3      	str	r3, [r2, #28]
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_UART_MspInit+0x224>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0320 	add.w	r3, r7, #32
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4816      	ldr	r0, [pc, #88]	; (8002050 <HAL_UART_MspInit+0x244>)
 8001ff6:	f000 fcd5 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	4619      	mov	r1, r3
 800200e:	4810      	ldr	r0, [pc, #64]	; (8002050 <HAL_UART_MspInit+0x244>)
 8002010:	f000 fcc8 	bl	80029a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2027      	movs	r0, #39	; 0x27
 800201a:	f000 fa28 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800201e:	2027      	movs	r0, #39	; 0x27
 8002020:	f000 fa41 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8002024:	bf00      	nop
 8002026:	3730      	adds	r7, #48	; 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40013800 	.word	0x40013800
 8002030:	40021000 	.word	0x40021000
 8002034:	40010800 	.word	0x40010800
 8002038:	20000624 	.word	0x20000624
 800203c:	40020058 	.word	0x40020058
 8002040:	200005e0 	.word	0x200005e0
 8002044:	40020044 	.word	0x40020044
 8002048:	40004400 	.word	0x40004400
 800204c:	40004800 	.word	0x40004800
 8002050:	40010c00 	.word	0x40010c00

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 f8d3 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <DMA1_Channel4_IRQHandler+0x10>)
 80020aa:	f000 fb47 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200005e0 	.word	0x200005e0

080020b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <DMA1_Channel5_IRQHandler+0x10>)
 80020be:	f000 fb3d 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000624 	.word	0x20000624

080020cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART2_IRQHandler+0x10>)
 80020d2:	f001 fe47 	bl	8003d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000878 	.word	0x20000878

080020e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <USART3_IRQHandler+0x10>)
 80020e6:	f001 fe3d 	bl	8003d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000328 	.word	0x20000328

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f002 fa78 	bl	8004618 <__errno>
 8002128:	4602      	mov	r2, r0
 800212a:	230c      	movs	r3, #12
 800212c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20005000 	.word	0x20005000
 8002154:	00000400 	.word	0x00000400
 8002158:	2000020c 	.word	0x2000020c
 800215c:	20001928 	.word	0x20001928

08002160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800216c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800216e:	e003      	b.n	8002178 <LoopCopyDataInit>

08002170 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002172:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002174:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002176:	3104      	adds	r1, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002178:	480a      	ldr	r0, [pc, #40]	; (80021a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800217c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800217e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002180:	d3f6      	bcc.n	8002170 <CopyDataInit>
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002184:	e002      	b.n	800218c <LoopFillZerobss>

08002186 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002188:	f842 3b04 	str.w	r3, [r2], #4

0800218c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800218e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002190:	d3f9      	bcc.n	8002186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002192:	f7ff ffe5 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002196:	f002 fa45 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219a:	f7ff fa57 	bl	800164c <main>
  bx lr
 800219e:	4770      	bx	lr
  ldr r3, =_sidata
 80021a0:	08006890 	.word	0x08006890
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021a8:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 80021ac:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 80021b0:	20001928 	.word	0x20001928

080021b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_2_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_Init+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_Init+0x28>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 f945 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fcec 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f95d 	bl	80024c2 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 f925 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000000 	.word	0x20000000
 800223c:	20000008 	.word	0x20000008
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_IncTick+0x1c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x20>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <HAL_IncTick+0x20>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000008 	.word	0x20000008
 8002264:	200008bc 	.word	0x200008bc

08002268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <HAL_GetTick+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	200008bc 	.word	0x200008bc

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff fff0 	bl	8002268 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_Delay+0x40>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffe0 	bl	8002268 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000008 	.word	0x20000008

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4906      	ldr	r1, [pc, #24]	; (8002358 <__NVIC_EnableIRQ+0x34>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff90 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff2d 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff42 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff90 	bl	80023b0 <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5f 	bl	800235c <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff35 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e043      	b.n	800257a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_DMA_Init+0xa8>)
 80024fa:	4413      	add	r3, r2
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_DMA_Init+0xac>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_DMA_Init+0xb0>)
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002526:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800252a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	bffdfff8 	.word	0xbffdfff8
 8002588:	cccccccd 	.word	0xcccccccd
 800258c:	40020000 	.word	0x40020000

08002590 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_DMA_Start_IT+0x20>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e04a      	b.n	8002646 <HAL_DMA_Start_IT+0xb6>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d13a      	bne.n	8002638 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f9ae 	bl	8002948 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 020e 	orr.w	r2, r2, #14
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e00f      	b.n	8002626 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0204 	bic.w	r2, r2, #4
 8002614:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 020a 	orr.w	r2, r2, #10
 8002624:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e005      	b.n	8002644 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002662:	2b02      	cmp	r3, #2
 8002664:	d005      	beq.n	8002672 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e051      	b.n	8002716 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 020e 	bic.w	r2, r2, #14
 8002680:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_DMA_Abort_IT+0xd0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d029      	beq.n	80026f0 <HAL_DMA_Abort_IT+0xa0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_DMA_Abort_IT+0xd4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d022      	beq.n	80026ec <HAL_DMA_Abort_IT+0x9c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_DMA_Abort_IT+0xd8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01a      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x96>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_DMA_Abort_IT+0xdc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x90>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_DMA_Abort_IT+0xe0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00a      	beq.n	80026da <HAL_DMA_Abort_IT+0x8a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_DMA_Abort_IT+0xe4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d102      	bne.n	80026d4 <HAL_DMA_Abort_IT+0x84>
 80026ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026d2:	e00e      	b.n	80026f2 <HAL_DMA_Abort_IT+0xa2>
 80026d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d8:	e00b      	b.n	80026f2 <HAL_DMA_Abort_IT+0xa2>
 80026da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026de:	e008      	b.n	80026f2 <HAL_DMA_Abort_IT+0xa2>
 80026e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e4:	e005      	b.n	80026f2 <HAL_DMA_Abort_IT+0xa2>
 80026e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ea:	e002      	b.n	80026f2 <HAL_DMA_Abort_IT+0xa2>
 80026ec:	2310      	movs	r3, #16
 80026ee:	e000      	b.n	80026f2 <HAL_DMA_Abort_IT+0xa2>
 80026f0:	2301      	movs	r3, #1
 80026f2:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_DMA_Abort_IT+0xe8>)
 80026f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    } 
  }
  return status;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40020008 	.word	0x40020008
 8002724:	4002001c 	.word	0x4002001c
 8002728:	40020030 	.word	0x40020030
 800272c:	40020044 	.word	0x40020044
 8002730:	40020058 	.word	0x40020058
 8002734:	4002006c 	.word	0x4002006c
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2204      	movs	r2, #4
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d04f      	beq.n	8002804 <HAL_DMA_IRQHandler+0xc8>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d04a      	beq.n	8002804 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a66      	ldr	r2, [pc, #408]	; (800292c <HAL_DMA_IRQHandler+0x1f0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d029      	beq.n	80027ea <HAL_DMA_IRQHandler+0xae>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_DMA_IRQHandler+0x1f4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_IRQHandler+0xaa>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a63      	ldr	r2, [pc, #396]	; (8002934 <HAL_DMA_IRQHandler+0x1f8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01a      	beq.n	80027e0 <HAL_DMA_IRQHandler+0xa4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a62      	ldr	r2, [pc, #392]	; (8002938 <HAL_DMA_IRQHandler+0x1fc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d012      	beq.n	80027da <HAL_DMA_IRQHandler+0x9e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a60      	ldr	r2, [pc, #384]	; (800293c <HAL_DMA_IRQHandler+0x200>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00a      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x98>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5f      	ldr	r2, [pc, #380]	; (8002940 <HAL_DMA_IRQHandler+0x204>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d102      	bne.n	80027ce <HAL_DMA_IRQHandler+0x92>
 80027c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027cc:	e00e      	b.n	80027ec <HAL_DMA_IRQHandler+0xb0>
 80027ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027d2:	e00b      	b.n	80027ec <HAL_DMA_IRQHandler+0xb0>
 80027d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d8:	e008      	b.n	80027ec <HAL_DMA_IRQHandler+0xb0>
 80027da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027de:	e005      	b.n	80027ec <HAL_DMA_IRQHandler+0xb0>
 80027e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e4:	e002      	b.n	80027ec <HAL_DMA_IRQHandler+0xb0>
 80027e6:	2340      	movs	r3, #64	; 0x40
 80027e8:	e000      	b.n	80027ec <HAL_DMA_IRQHandler+0xb0>
 80027ea:	2304      	movs	r3, #4
 80027ec:	4a55      	ldr	r2, [pc, #340]	; (8002944 <HAL_DMA_IRQHandler+0x208>)
 80027ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8094 	beq.w	8002922 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002802:	e08e      	b.n	8002922 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2202      	movs	r2, #2
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d056      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x186>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d051      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 020a 	bic.w	r2, r2, #10
 800283a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_DMA_IRQHandler+0x1f0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d029      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x166>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a37      	ldr	r2, [pc, #220]	; (8002930 <HAL_DMA_IRQHandler+0x1f4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d022      	beq.n	800289e <HAL_DMA_IRQHandler+0x162>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a35      	ldr	r2, [pc, #212]	; (8002934 <HAL_DMA_IRQHandler+0x1f8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x15c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <HAL_DMA_IRQHandler+0x1fc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d012      	beq.n	8002892 <HAL_DMA_IRQHandler+0x156>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a32      	ldr	r2, [pc, #200]	; (800293c <HAL_DMA_IRQHandler+0x200>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00a      	beq.n	800288c <HAL_DMA_IRQHandler+0x150>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a31      	ldr	r2, [pc, #196]	; (8002940 <HAL_DMA_IRQHandler+0x204>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d102      	bne.n	8002886 <HAL_DMA_IRQHandler+0x14a>
 8002880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002884:	e00e      	b.n	80028a4 <HAL_DMA_IRQHandler+0x168>
 8002886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288a:	e00b      	b.n	80028a4 <HAL_DMA_IRQHandler+0x168>
 800288c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002890:	e008      	b.n	80028a4 <HAL_DMA_IRQHandler+0x168>
 8002892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002896:	e005      	b.n	80028a4 <HAL_DMA_IRQHandler+0x168>
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	e002      	b.n	80028a4 <HAL_DMA_IRQHandler+0x168>
 800289e:	2320      	movs	r3, #32
 80028a0:	e000      	b.n	80028a4 <HAL_DMA_IRQHandler+0x168>
 80028a2:	2302      	movs	r3, #2
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_DMA_IRQHandler+0x208>)
 80028a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d034      	beq.n	8002922 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028c0:	e02f      	b.n	8002922 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2208      	movs	r2, #8
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d028      	beq.n	8002924 <HAL_DMA_IRQHandler+0x1e8>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020e 	bic.w	r2, r2, #14
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
    }
  }
  return;
 8002922:	bf00      	nop
 8002924:	bf00      	nop
}
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40020008 	.word	0x40020008
 8002930:	4002001c 	.word	0x4002001c
 8002934:	40020030 	.word	0x40020030
 8002938:	40020044 	.word	0x40020044
 800293c:	40020058 	.word	0x40020058
 8002940:	4002006c 	.word	0x4002006c
 8002944:	40020000 	.word	0x40020000

08002948 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b10      	cmp	r3, #16
 8002974:	d108      	bne.n	8002988 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002986:	e007      	b.n	8002998 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b08b      	sub	sp, #44	; 0x2c
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b6:	e127      	b.n	8002c08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029b8:	2201      	movs	r2, #1
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f040 8116 	bne.w	8002c02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b12      	cmp	r3, #18
 80029dc:	d034      	beq.n	8002a48 <HAL_GPIO_Init+0xa4>
 80029de:	2b12      	cmp	r3, #18
 80029e0:	d80d      	bhi.n	80029fe <HAL_GPIO_Init+0x5a>
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d02b      	beq.n	8002a3e <HAL_GPIO_Init+0x9a>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d804      	bhi.n	80029f4 <HAL_GPIO_Init+0x50>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d031      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d01c      	beq.n	8002a2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029f2:	e048      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d043      	beq.n	8002a80 <HAL_GPIO_Init+0xdc>
 80029f8:	2b11      	cmp	r3, #17
 80029fa:	d01b      	beq.n	8002a34 <HAL_GPIO_Init+0x90>
          break;
 80029fc:	e043      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80029fe:	4a89      	ldr	r2, [pc, #548]	; (8002c24 <HAL_GPIO_Init+0x280>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d026      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
 8002a04:	4a87      	ldr	r2, [pc, #540]	; (8002c24 <HAL_GPIO_Init+0x280>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d806      	bhi.n	8002a18 <HAL_GPIO_Init+0x74>
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <HAL_GPIO_Init+0x284>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d020      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
 8002a10:	4a86      	ldr	r2, [pc, #536]	; (8002c2c <HAL_GPIO_Init+0x288>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01d      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
          break;
 8002a16:	e036      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a18:	4a85      	ldr	r2, [pc, #532]	; (8002c30 <HAL_GPIO_Init+0x28c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
 8002a1e:	4a85      	ldr	r2, [pc, #532]	; (8002c34 <HAL_GPIO_Init+0x290>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d016      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
 8002a24:	4a84      	ldr	r2, [pc, #528]	; (8002c38 <HAL_GPIO_Init+0x294>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0xae>
          break;
 8002a2a:	e02c      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	623b      	str	r3, [r7, #32]
          break;
 8002a32:	e028      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e023      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	3308      	adds	r3, #8
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e01e      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	623b      	str	r3, [r7, #32]
          break;
 8002a50:	e019      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e012      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a68:	2308      	movs	r3, #8
 8002a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	611a      	str	r2, [r3, #16]
          break;
 8002a72:	e008      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a74:	2308      	movs	r3, #8
 8002a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	615a      	str	r2, [r3, #20]
          break;
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2bff      	cmp	r3, #255	; 0xff
 8002a8a:	d801      	bhi.n	8002a90 <HAL_GPIO_Init+0xec>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	e001      	b.n	8002a94 <HAL_GPIO_Init+0xf0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d802      	bhi.n	8002aa2 <HAL_GPIO_Init+0xfe>
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x104>
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	3b08      	subs	r3, #8
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	210f      	movs	r1, #15
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	6a39      	ldr	r1, [r7, #32]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8096 	beq.w	8002c02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad6:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_GPIO_Init+0x298>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_GPIO_Init+0x298>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6193      	str	r3, [r2, #24]
 8002ae2:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_GPIO_Init+0x298>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aee:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_GPIO_Init+0x29c>)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <HAL_GPIO_Init+0x2a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x19e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <HAL_GPIO_Init+0x2a4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x19a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <HAL_GPIO_Init+0x2a8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x196>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <HAL_GPIO_Init+0x2ac>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x192>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x1a0>
 8002b36:	2304      	movs	r3, #4
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x1a0>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x1a0>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x1a0>
 8002b42:	2300      	movs	r3, #0
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b54:	493a      	ldr	r1, [pc, #232]	; (8002c40 <HAL_GPIO_Init+0x29c>)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b6e:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4938      	ldr	r1, [pc, #224]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
 8002b7a:	e006      	b.n	8002b8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4933      	ldr	r1, [pc, #204]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	492e      	ldr	r1, [pc, #184]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
 8002ba2:	e006      	b.n	8002bb2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	4929      	ldr	r1, [pc, #164]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	4924      	ldr	r1, [pc, #144]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
 8002bca:	e006      	b.n	8002bda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	491f      	ldr	r1, [pc, #124]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	491a      	ldr	r1, [pc, #104]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	4915      	ldr	r1, [pc, #84]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	3301      	adds	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f47f aed0 	bne.w	80029b8 <HAL_GPIO_Init+0x14>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	372c      	adds	r7, #44	; 0x2c
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	10210000 	.word	0x10210000
 8002c28:	10110000 	.word	0x10110000
 8002c2c:	10120000 	.word	0x10120000
 8002c30:	10310000 	.word	0x10310000
 8002c34:	10320000 	.word	0x10320000
 8002c38:	10220000 	.word	0x10220000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40010800 	.word	0x40010800
 8002c48:	40010c00 	.word	0x40010c00
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	4613      	mov	r3, r2
 8002c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c68:	787b      	ldrb	r3, [r7, #1]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c74:	e003      	b.n	8002c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	041a      	lsls	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43d9      	mvns	r1, r3
 8002ca6:	887b      	ldrh	r3, [r7, #2]
 8002ca8:	400b      	ands	r3, r1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	611a      	str	r2, [r3, #16]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e26c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x12c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e246      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x76>
 8002d24:	4b80      	ldr	r3, [pc, #512]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7f      	ldr	r2, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7a      	ldr	r2, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xbc>
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a71      	ldr	r2, [pc, #452]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d78:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff fa66 	bl	8002268 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff fa62 	bl	8002268 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1fa      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe4>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fa52 	bl	8002268 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff fa4e 	bl	8002268 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1e6      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x10c>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1ba      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4939      	ldr	r1, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7ff fa07 	bl	8002268 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7ff fa03 	bl	8002268 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e19b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff f9e6 	bl	8002268 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7ff f9e2 	bl	8002268 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e17a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03a      	beq.n	8002f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f9c6 	bl	8002268 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7ff f9c2 	bl	8002268 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e15a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 fada 	bl	80034b8 <RCC_Delay>
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7ff f9ac 	bl	8002268 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7ff f9a8 	bl	8002268 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d908      	bls.n	8002f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e140      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	42420000 	.word	0x42420000
 8002f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b9e      	ldr	r3, [pc, #632]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e9      	bne.n	8002f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a6 	beq.w	800309a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a93      	ldr	r2, [pc, #588]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a8a      	ldr	r2, [pc, #552]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7ff f969 	bl	8002268 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7ff f965 	bl	8002268 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0fd      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e02d      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x356>
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a6c      	ldr	r2, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7ff f919 	bl	8002268 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7ff f915 	bl	8002268 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0ab      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x37e>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7ff f903 	bl	8002268 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7ff f8ff 	bl	8002268 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e095      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8081 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d061      	beq.n	8003174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d146      	bne.n	8003146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7ff f8d3 	bl	8002268 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7ff f8cf 	bl	8002268 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e067      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	492d      	ldr	r1, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a19      	ldr	r1, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	430b      	orrs	r3, r1
 8003112:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff f8a3 	bl	8002268 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7ff f89f 	bl	8002268 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e037      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
 8003144:	e02f      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff f88c 	bl	8002268 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7ff f888 	bl	8002268 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e020      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x498>
 8003172:	e018      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420060 	.word	0x42420060

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0d0      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	4965      	ldr	r1, [pc, #404]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b8      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003218:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800323a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	494d      	ldr	r1, [pc, #308]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d040      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d115      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e07f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e073      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4936      	ldr	r1, [pc, #216]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fe ffdc 	bl	8002268 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fe ffd8 	bl	8002268 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e053      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d210      	bcs.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4922      	ldr	r1, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e032      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4916      	ldr	r1, [pc, #88]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800334a:	f000 f821 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800334e:	4601      	mov	r1, r0
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	fa21 f303 	lsr.w	r3, r1, r3
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1cc>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe ff3a 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40022000 	.word	0x40022000
 8003380:	40021000 	.word	0x40021000
 8003384:	080065e4 	.word	0x080065e4
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b490      	push	{r4, r7}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003398:	1d3c      	adds	r4, r7, #4
 800339a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ce:	e02d      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d2:	623b      	str	r3, [r7, #32]
      break;
 80033d4:	e02d      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c5b      	lsrs	r3, r3, #17
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003402:	4413      	add	r3, r2
 8003404:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003408:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 800340e:	fb02 f203 	mul.w	r2, r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	623b      	str	r3, [r7, #32]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 800342e:	623b      	str	r3, [r7, #32]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	6a3b      	ldr	r3, [r7, #32]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc90      	pop	{r4, r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	080065d0 	.word	0x080065d0
 8003444:	080065e0 	.word	0x080065e0
 8003448:	40021000 	.word	0x40021000
 800344c:	007a1200 	.word	0x007a1200
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	080065f4 	.word	0x080065f4

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffde 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003498:	4601      	mov	r1, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	080065f4 	.word	0x080065f4

080034b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <RCC_Delay+0x34>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <RCC_Delay+0x38>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a5b      	lsrs	r3, r3, #9
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d4:	bf00      	nop
  }
  while (Delay --);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <RCC_Delay+0x1c>
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000
 80034f0:	10624dd3 	.word	0x10624dd3

080034f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e076      	b.n	80035f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d009      	beq.n	800352c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	e005      	b.n	800352c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe fb64 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	ea42 0103 	orr.w	r1, r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	0c1a      	lsrs	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f002 0204 	and.w	r2, r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e093      	b.n	8003738 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fe fb89 	bl	8001d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003640:	f023 0307 	bic.w	r3, r3, #7
 8003644:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f000 f903 	bl	800385c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	4313      	orrs	r3, r2
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800369c:	f023 030c 	bic.w	r3, r3, #12
 80036a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	4313      	orrs	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	011a      	lsls	r2, r3, #4
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	031b      	lsls	r3, r3, #12
 80036cc:	4313      	orrs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4313      	orrs	r3, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003750:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003758:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003760:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003768:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d110      	bne.n	8003792 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003776:	7b7b      	ldrb	r3, [r7, #13]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e068      	b.n	8003852 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003790:	e031      	b.n	80037f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d110      	bne.n	80037ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003798:	7bbb      	ldrb	r3, [r7, #14]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800379e:	7b3b      	ldrb	r3, [r7, #12]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e054      	b.n	8003852 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b8:	e01d      	b.n	80037f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d108      	bne.n	80037d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c0:	7bbb      	ldrb	r3, [r7, #14]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c6:	7b7b      	ldrb	r3, [r7, #13]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037cc:	7b3b      	ldrb	r3, [r7, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e03d      	b.n	8003852 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_TIM_Encoder_Start+0xc2>
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d008      	beq.n	8003812 <HAL_TIM_Encoder_Start+0xd2>
 8003800:	e00f      	b.n	8003822 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f888 	bl	8003920 <TIM_CCxChannelCmd>
      break;
 8003810:	e016      	b.n	8003840 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2201      	movs	r2, #1
 8003818:	2104      	movs	r1, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f880 	bl	8003920 <TIM_CCxChannelCmd>
      break;
 8003820:	e00e      	b.n	8003840 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f878 	bl	8003920 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	2104      	movs	r1, #4
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f871 	bl	8003920 <TIM_CCxChannelCmd>
      break;
 800383e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a29      	ldr	r2, [pc, #164]	; (8003914 <TIM_Base_SetConfig+0xb8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a26      	ldr	r2, [pc, #152]	; (8003918 <TIM_Base_SetConfig+0xbc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a25      	ldr	r2, [pc, #148]	; (800391c <TIM_Base_SetConfig+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <TIM_Base_SetConfig+0xb8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <TIM_Base_SetConfig+0xbc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <TIM_Base_SetConfig+0xc0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <TIM_Base_SetConfig+0xb8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800

08003920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2201      	movs	r2, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	43db      	mvns	r3, r3
 8003942:	401a      	ands	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e046      	b.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d009      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10c      	bne.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e03f      	b.n	8003ab6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f9de 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fc85 	bl	8004378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	; 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d17c      	bne.n	8003bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Transmit+0x2c>
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e075      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x3e>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e06e      	b.n	8003bda <HAL_UART_Transmit+0x11c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b12:	f7fe fba9 	bl	8002268 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b50:	e02a      	b.n	8003ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fa94 	bl	800408a <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cf      	bne.n	8003b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fa64 	bl	800408a <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e006      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d140      	bne.n	8003c7e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Receive_IT+0x26>
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e039      	b.n	8003c80 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Receive_IT+0x38>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e032      	b.n	8003c80 <HAL_UART_Receive_IT+0x9e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2222      	movs	r2, #34	; 0x22
 8003c3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0220 	orr.w	r2, r2, #32
 8003c78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d153      	bne.n	8003d4e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Transmit_DMA+0x26>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e04c      	b.n	8003d50 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Transmit_DMA+0x38>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e045      	b.n	8003d50 <HAL_UART_Transmit_DMA+0xc4>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2221      	movs	r2, #33	; 0x21
 8003ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_UART_Transmit_DMA+0xcc>)
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_UART_Transmit_DMA+0xd0>)
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <HAL_UART_Transmit_DMA+0xd4>)
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	461a      	mov	r2, r3
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	f7fe fc34 	bl	8002590 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d48:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	08003f89 	.word	0x08003f89
 8003d5c:	08003fdb 	.word	0x08003fdb
 8003d60:	08003ff7 	.word	0x08003ff7

08003d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_UART_IRQHandler+0x52>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa62 	bl	8004278 <UART_Receive_IT>
      return;
 8003db4:	e0d1      	b.n	8003f5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80b0 	beq.w	8003f1e <HAL_UART_IRQHandler+0x1ba>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x70>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80a5 	beq.w	8003f1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_UART_IRQHandler+0x90>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_UART_IRQHandler+0xb0>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	f043 0202 	orr.w	r2, r3, #2
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_UART_IRQHandler+0xd0>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f043 0204 	orr.w	r2, r3, #4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00f      	beq.n	8003e5e <HAL_UART_IRQHandler+0xfa>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_UART_IRQHandler+0xee>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	f043 0208 	orr.w	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d078      	beq.n	8003f58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_UART_IRQHandler+0x11c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9fc 	bl	8004278 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf14      	ite	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2300      	moveq	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x144>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d031      	beq.n	8003f0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f94d 	bl	8004148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d023      	beq.n	8003f04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_UART_IRQHandler+0x1fc>)
 8003eda:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fbb5 	bl	8002650 <HAL_DMA_Abort_IT>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d016      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efa:	e00e      	b.n	8003f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f83a 	bl	8003f76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f02:	e00a      	b.n	8003f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f836 	bl	8003f76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0a:	e006      	b.n	8003f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f832 	bl	8003f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f18:	e01e      	b.n	8003f58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1a:	bf00      	nop
    return;
 8003f1c:	e01c      	b.n	8003f58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x1d6>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f939 	bl	80041aa <UART_Transmit_IT>
    return;
 8003f38:	e00f      	b.n	8003f5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_UART_IRQHandler+0x1f6>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f97a 	bl	8004248 <UART_EndTransmit_IT>
    return;
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003f58:	bf00      	nop
  }
}
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	08004183 	.word	0x08004183

08003f64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d113      	bne.n	8003fcc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fca:	e002      	b.n	8003fd2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7fd fa81 	bl	80014d4 <HAL_UART_TxCpltCallback>
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff ffbb 	bl	8003f64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b21      	cmp	r3, #33	; 0x21
 8004028:	d108      	bne.n	800403c <UART_DMAError+0x46>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f000 f871 	bl	800411e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b22      	cmp	r3, #34	; 0x22
 800405c:	d108      	bne.n	8004070 <UART_DMAError+0x7a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800406a:	68b8      	ldr	r0, [r7, #8]
 800406c:	f000 f86c 	bl	8004148 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f043 0210 	orr.w	r2, r3, #16
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800407c:	68b8      	ldr	r0, [r7, #8]
 800407e:	f7ff ff7a 	bl	8003f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	e02c      	b.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d028      	beq.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0x30>
 80040aa:	f7fe f8dd 	bl	8002268 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d21d      	bcs.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e00f      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	429a      	cmp	r2, r3
 8004112:	d0c3      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004134:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800415e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff feea 	bl	8003f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b21      	cmp	r3, #33	; 0x21
 80041bc:	d13e      	bne.n	800423c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c6:	d114      	bne.n	80041f2 <UART_Transmit_IT+0x48>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d110      	bne.n	80041f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	1c9a      	adds	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]
 80041f0:	e008      	b.n	8004204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	1c59      	adds	r1, r3, #1
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6211      	str	r1, [r2, #32]
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4619      	mov	r1, r3
 8004212:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10f      	bne.n	8004238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fd f933 	bl	80014d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b22      	cmp	r3, #34	; 0x22
 800428a:	d170      	bne.n	800436e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d117      	bne.n	80042c6 <UART_Receive_IT+0x4e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d113      	bne.n	80042c6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
 80042c4:	e026      	b.n	8004314 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d007      	beq.n	80042ea <UART_Receive_IT+0x72>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <UART_Receive_IT+0x80>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	e008      	b.n	800430a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29b      	uxth	r3, r3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4619      	mov	r1, r3
 8004322:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004324:	2b00      	cmp	r3, #0
 8004326:	d120      	bne.n	800436a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0220 	bic.w	r2, r2, #32
 8004336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fd f8d5 	bl	8001510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e002      	b.n	8004370 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043b2:	f023 030c 	bic.w	r3, r3, #12
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	430b      	orrs	r3, r1
 80043be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	; (800448c <UART_SetConfig+0x114>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d103      	bne.n	80043e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7ff f856 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	e002      	b.n	80043ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043e8:	f7ff f83e 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80043ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <UART_SetConfig+0x118>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	0119      	lsls	r1, r3, #4
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <UART_SetConfig+0x118>)
 8004426:	fba3 0302 	umull	r0, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	fb00 f303 	mul.w	r3, r0, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a15      	ldr	r2, [pc, #84]	; (8004490 <UART_SetConfig+0x118>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004444:	4419      	add	r1, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <UART_SetConfig+0x118>)
 800445e:	fba3 0302 	umull	r0, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2064      	movs	r0, #100	; 0x64
 8004466:	fb00 f303 	mul.w	r3, r0, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	3332      	adds	r3, #50	; 0x32
 8004470:	4a07      	ldr	r2, [pc, #28]	; (8004490 <UART_SetConfig+0x118>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	440a      	add	r2, r1
 8004482:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40013800 	.word	0x40013800
 8004490:	51eb851f 	.word	0x51eb851f

08004494 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004498:	4904      	ldr	r1, [pc, #16]	; (80044ac <MX_FATFS_Init+0x18>)
 800449a:	4805      	ldr	r0, [pc, #20]	; (80044b0 <MX_FATFS_Init+0x1c>)
 800449c:	f000 f8a6 	bl	80045ec <FATFS_LinkDriver>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <MX_FATFS_Init+0x20>)
 80044a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	200008c0 	.word	0x200008c0
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	200008c4 	.word	0x200008c4

080044b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <USER_initialize+0x20>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <USER_initialize+0x20>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000009 	.word	0x20000009

080044dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <USER_status+0x20>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <USER_status+0x20>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	20000009 	.word	0x20000009

08004500 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004510:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800452c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	603a      	str	r2, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
 8004544:	460b      	mov	r3, r1
 8004546:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
    return res;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800456e:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 8004570:	7a5b      	ldrb	r3, [r3, #9]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d831      	bhi.n	80045dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 800457a:	7a5b      	ldrb	r3, [r3, #9]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 8004582:	2100      	movs	r1, #0
 8004584:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 8004588:	7a5b      	ldrb	r3, [r3, #9]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 8004598:	7a5b      	ldrb	r3, [r3, #9]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 80045a0:	4413      	add	r3, r2
 80045a2:	79fa      	ldrb	r2, [r7, #7]
 80045a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 80045a8:	7a5b      	ldrb	r3, [r3, #9]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	b2d1      	uxtb	r1, r2
 80045b0:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <FATFS_LinkDriverEx+0x90>)
 80045b2:	7251      	strb	r1, [r2, #9]
 80045b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80045b6:	7dbb      	ldrb	r3, [r7, #22]
 80045b8:	3330      	adds	r3, #48	; 0x30
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	223a      	movs	r2, #58	; 0x3a
 80045c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3302      	adds	r3, #2
 80045cc:	222f      	movs	r2, #47	; 0x2f
 80045ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3303      	adds	r3, #3
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	20000210 	.word	0x20000210

080045ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80045f6:	2200      	movs	r2, #0
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ffac 	bl	8004558 <FATFS_LinkDriverEx>
 8004600:	4603      	mov	r3, r0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <atof>:
 800460a:	2100      	movs	r1, #0
 800460c:	f000 beb0 	b.w	8005370 <strtod>

08004610 <atoi>:
 8004610:	220a      	movs	r2, #10
 8004612:	2100      	movs	r1, #0
 8004614:	f000 bf8e 	b.w	8005534 <strtol>

08004618 <__errno>:
 8004618:	4b01      	ldr	r3, [pc, #4]	; (8004620 <__errno+0x8>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000020 	.word	0x20000020

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	2500      	movs	r5, #0
 8004628:	4e0c      	ldr	r6, [pc, #48]	; (800465c <__libc_init_array+0x38>)
 800462a:	4c0d      	ldr	r4, [pc, #52]	; (8004660 <__libc_init_array+0x3c>)
 800462c:	1ba4      	subs	r4, r4, r6
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	42a5      	cmp	r5, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	f001 ffac 	bl	8006590 <_init>
 8004638:	2500      	movs	r5, #0
 800463a:	4e0a      	ldr	r6, [pc, #40]	; (8004664 <__libc_init_array+0x40>)
 800463c:	4c0a      	ldr	r4, [pc, #40]	; (8004668 <__libc_init_array+0x44>)
 800463e:	1ba4      	subs	r4, r4, r6
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	42a5      	cmp	r5, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464c:	4798      	blx	r3
 800464e:	3501      	adds	r5, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004656:	4798      	blx	r3
 8004658:	3501      	adds	r5, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	08006888 	.word	0x08006888
 8004660:	08006888 	.word	0x08006888
 8004664:	08006888 	.word	0x08006888
 8004668:	0800688c 	.word	0x0800688c

0800466c <__itoa>:
 800466c:	1e93      	subs	r3, r2, #2
 800466e:	2b22      	cmp	r3, #34	; 0x22
 8004670:	b510      	push	{r4, lr}
 8004672:	460c      	mov	r4, r1
 8004674:	d904      	bls.n	8004680 <__itoa+0x14>
 8004676:	2300      	movs	r3, #0
 8004678:	461c      	mov	r4, r3
 800467a:	700b      	strb	r3, [r1, #0]
 800467c:	4620      	mov	r0, r4
 800467e:	bd10      	pop	{r4, pc}
 8004680:	2a0a      	cmp	r2, #10
 8004682:	d109      	bne.n	8004698 <__itoa+0x2c>
 8004684:	2800      	cmp	r0, #0
 8004686:	da07      	bge.n	8004698 <__itoa+0x2c>
 8004688:	232d      	movs	r3, #45	; 0x2d
 800468a:	700b      	strb	r3, [r1, #0]
 800468c:	2101      	movs	r1, #1
 800468e:	4240      	negs	r0, r0
 8004690:	4421      	add	r1, r4
 8004692:	f000 ff65 	bl	8005560 <__utoa>
 8004696:	e7f1      	b.n	800467c <__itoa+0x10>
 8004698:	2100      	movs	r1, #0
 800469a:	e7f9      	b.n	8004690 <__itoa+0x24>

0800469c <itoa>:
 800469c:	f7ff bfe6 	b.w	800466c <__itoa>

080046a0 <memcpy>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	1e43      	subs	r3, r0, #1
 80046a4:	440a      	add	r2, r1
 80046a6:	4291      	cmp	r1, r2
 80046a8:	d100      	bne.n	80046ac <memcpy+0xc>
 80046aa:	bd10      	pop	{r4, pc}
 80046ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046b4:	e7f7      	b.n	80046a6 <memcpy+0x6>

080046b6 <memset>:
 80046b6:	4603      	mov	r3, r0
 80046b8:	4402      	add	r2, r0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d100      	bne.n	80046c0 <memset+0xa>
 80046be:	4770      	bx	lr
 80046c0:	f803 1b01 	strb.w	r1, [r3], #1
 80046c4:	e7f9      	b.n	80046ba <memset+0x4>

080046c6 <strcat>:
 80046c6:	4603      	mov	r3, r0
 80046c8:	b510      	push	{r4, lr}
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	1c5c      	adds	r4, r3, #1
 80046ce:	b93a      	cbnz	r2, 80046e0 <strcat+0x1a>
 80046d0:	3b01      	subs	r3, #1
 80046d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046da:	2a00      	cmp	r2, #0
 80046dc:	d1f9      	bne.n	80046d2 <strcat+0xc>
 80046de:	bd10      	pop	{r4, pc}
 80046e0:	4623      	mov	r3, r4
 80046e2:	e7f2      	b.n	80046ca <strcat+0x4>

080046e4 <strcpy>:
 80046e4:	4603      	mov	r3, r0
 80046e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ea:	f803 2b01 	strb.w	r2, [r3], #1
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	d1f9      	bne.n	80046e6 <strcpy+0x2>
 80046f2:	4770      	bx	lr

080046f4 <strstr>:
 80046f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f6:	7803      	ldrb	r3, [r0, #0]
 80046f8:	b17b      	cbz	r3, 800471a <strstr+0x26>
 80046fa:	4604      	mov	r4, r0
 80046fc:	7823      	ldrb	r3, [r4, #0]
 80046fe:	4620      	mov	r0, r4
 8004700:	1c66      	adds	r6, r4, #1
 8004702:	b17b      	cbz	r3, 8004724 <strstr+0x30>
 8004704:	1e4a      	subs	r2, r1, #1
 8004706:	1e63      	subs	r3, r4, #1
 8004708:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800470c:	b14d      	cbz	r5, 8004722 <strstr+0x2e>
 800470e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004712:	4634      	mov	r4, r6
 8004714:	42af      	cmp	r7, r5
 8004716:	d0f7      	beq.n	8004708 <strstr+0x14>
 8004718:	e7f0      	b.n	80046fc <strstr+0x8>
 800471a:	780b      	ldrb	r3, [r1, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf18      	it	ne
 8004720:	2000      	movne	r0, #0
 8004722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004724:	4618      	mov	r0, r3
 8004726:	e7fc      	b.n	8004722 <strstr+0x2e>

08004728 <sulp>:
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	460f      	mov	r7, r1
 800472e:	4690      	mov	r8, r2
 8004730:	f001 fd66 	bl	8006200 <__ulp>
 8004734:	4604      	mov	r4, r0
 8004736:	460d      	mov	r5, r1
 8004738:	f1b8 0f00 	cmp.w	r8, #0
 800473c:	d011      	beq.n	8004762 <sulp+0x3a>
 800473e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd0b      	ble.n	8004762 <sulp+0x3a>
 800474a:	2400      	movs	r4, #0
 800474c:	051b      	lsls	r3, r3, #20
 800474e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004752:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004756:	4622      	mov	r2, r4
 8004758:	462b      	mov	r3, r5
 800475a:	f7fb febd 	bl	80004d8 <__aeabi_dmul>
 800475e:	4604      	mov	r4, r0
 8004760:	460d      	mov	r5, r1
 8004762:	4620      	mov	r0, r4
 8004764:	4629      	mov	r1, r5
 8004766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476a:	0000      	movs	r0, r0
 800476c:	0000      	movs	r0, r0
	...

08004770 <_strtod_l>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	461f      	mov	r7, r3
 8004776:	2300      	movs	r3, #0
 8004778:	b0a1      	sub	sp, #132	; 0x84
 800477a:	4683      	mov	fp, r0
 800477c:	4638      	mov	r0, r7
 800477e:	460e      	mov	r6, r1
 8004780:	9217      	str	r2, [sp, #92]	; 0x5c
 8004782:	931c      	str	r3, [sp, #112]	; 0x70
 8004784:	f001 fa55 	bl	8005c32 <__localeconv_l>
 8004788:	4680      	mov	r8, r0
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	f7fb fce0 	bl	8000150 <strlen>
 8004790:	f04f 0900 	mov.w	r9, #0
 8004794:	4604      	mov	r4, r0
 8004796:	f04f 0a00 	mov.w	sl, #0
 800479a:	961b      	str	r6, [sp, #108]	; 0x6c
 800479c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	2a0d      	cmp	r2, #13
 80047a2:	d832      	bhi.n	800480a <_strtod_l+0x9a>
 80047a4:	2a09      	cmp	r2, #9
 80047a6:	d236      	bcs.n	8004816 <_strtod_l+0xa6>
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	d03e      	beq.n	800482a <_strtod_l+0xba>
 80047ac:	2300      	movs	r3, #0
 80047ae:	930d      	str	r3, [sp, #52]	; 0x34
 80047b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80047b2:	782b      	ldrb	r3, [r5, #0]
 80047b4:	2b30      	cmp	r3, #48	; 0x30
 80047b6:	f040 80ac 	bne.w	8004912 <_strtod_l+0x1a2>
 80047ba:	786b      	ldrb	r3, [r5, #1]
 80047bc:	2b58      	cmp	r3, #88	; 0x58
 80047be:	d001      	beq.n	80047c4 <_strtod_l+0x54>
 80047c0:	2b78      	cmp	r3, #120	; 0x78
 80047c2:	d167      	bne.n	8004894 <_strtod_l+0x124>
 80047c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c6:	9702      	str	r7, [sp, #8]
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	ab1c      	add	r3, sp, #112	; 0x70
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4a89      	ldr	r2, [pc, #548]	; (80049f4 <_strtod_l+0x284>)
 80047d0:	ab1d      	add	r3, sp, #116	; 0x74
 80047d2:	a91b      	add	r1, sp, #108	; 0x6c
 80047d4:	4658      	mov	r0, fp
 80047d6:	f000 ff51 	bl	800567c <__gethex>
 80047da:	f010 0407 	ands.w	r4, r0, #7
 80047de:	4606      	mov	r6, r0
 80047e0:	d005      	beq.n	80047ee <_strtod_l+0x7e>
 80047e2:	2c06      	cmp	r4, #6
 80047e4:	d12b      	bne.n	800483e <_strtod_l+0xce>
 80047e6:	2300      	movs	r3, #0
 80047e8:	3501      	adds	r5, #1
 80047ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80047ec:	930d      	str	r3, [sp, #52]	; 0x34
 80047ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 85a6 	bne.w	8005342 <_strtod_l+0xbd2>
 80047f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047f8:	b1e3      	cbz	r3, 8004834 <_strtod_l+0xc4>
 80047fa:	464a      	mov	r2, r9
 80047fc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	b021      	add	sp, #132	; 0x84
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	2a2b      	cmp	r2, #43	; 0x2b
 800480c:	d015      	beq.n	800483a <_strtod_l+0xca>
 800480e:	2a2d      	cmp	r2, #45	; 0x2d
 8004810:	d004      	beq.n	800481c <_strtod_l+0xac>
 8004812:	2a20      	cmp	r2, #32
 8004814:	d1ca      	bne.n	80047ac <_strtod_l+0x3c>
 8004816:	3301      	adds	r3, #1
 8004818:	931b      	str	r3, [sp, #108]	; 0x6c
 800481a:	e7bf      	b.n	800479c <_strtod_l+0x2c>
 800481c:	2201      	movs	r2, #1
 800481e:	920d      	str	r2, [sp, #52]	; 0x34
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	921b      	str	r2, [sp, #108]	; 0x6c
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1c2      	bne.n	80047b0 <_strtod_l+0x40>
 800482a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800482c:	961b      	str	r6, [sp, #108]	; 0x6c
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 8585 	bne.w	800533e <_strtod_l+0xbce>
 8004834:	464a      	mov	r2, r9
 8004836:	4653      	mov	r3, sl
 8004838:	e7e2      	b.n	8004800 <_strtod_l+0x90>
 800483a:	2200      	movs	r2, #0
 800483c:	e7ef      	b.n	800481e <_strtod_l+0xae>
 800483e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004840:	b13a      	cbz	r2, 8004852 <_strtod_l+0xe2>
 8004842:	2135      	movs	r1, #53	; 0x35
 8004844:	a81e      	add	r0, sp, #120	; 0x78
 8004846:	f001 fdce 	bl	80063e6 <__copybits>
 800484a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800484c:	4658      	mov	r0, fp
 800484e:	f001 fa41 	bl	8005cd4 <_Bfree>
 8004852:	3c01      	subs	r4, #1
 8004854:	2c04      	cmp	r4, #4
 8004856:	d806      	bhi.n	8004866 <_strtod_l+0xf6>
 8004858:	e8df f004 	tbb	[pc, r4]
 800485c:	1714030a 	.word	0x1714030a
 8004860:	0a          	.byte	0x0a
 8004861:	00          	.byte	0x00
 8004862:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004866:	0731      	lsls	r1, r6, #28
 8004868:	d5c1      	bpl.n	80047ee <_strtod_l+0x7e>
 800486a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800486e:	e7be      	b.n	80047ee <_strtod_l+0x7e>
 8004870:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004872:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004876:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800487a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800487e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004882:	e7f0      	b.n	8004866 <_strtod_l+0xf6>
 8004884:	f8df a170 	ldr.w	sl, [pc, #368]	; 80049f8 <_strtod_l+0x288>
 8004888:	e7ed      	b.n	8004866 <_strtod_l+0xf6>
 800488a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800488e:	f04f 39ff 	mov.w	r9, #4294967295
 8004892:	e7e8      	b.n	8004866 <_strtod_l+0xf6>
 8004894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	921b      	str	r2, [sp, #108]	; 0x6c
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b30      	cmp	r3, #48	; 0x30
 800489e:	d0f9      	beq.n	8004894 <_strtod_l+0x124>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0a4      	beq.n	80047ee <_strtod_l+0x7e>
 80048a4:	2301      	movs	r3, #1
 80048a6:	2500      	movs	r5, #0
 80048a8:	220a      	movs	r2, #10
 80048aa:	9307      	str	r3, [sp, #28]
 80048ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048ae:	9506      	str	r5, [sp, #24]
 80048b0:	9308      	str	r3, [sp, #32]
 80048b2:	9504      	str	r5, [sp, #16]
 80048b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80048b6:	7807      	ldrb	r7, [r0, #0]
 80048b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80048bc:	b2d9      	uxtb	r1, r3
 80048be:	2909      	cmp	r1, #9
 80048c0:	d929      	bls.n	8004916 <_strtod_l+0x1a6>
 80048c2:	4622      	mov	r2, r4
 80048c4:	f8d8 1000 	ldr.w	r1, [r8]
 80048c8:	f001 fe40 	bl	800654c <strncmp>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d031      	beq.n	8004934 <_strtod_l+0x1c4>
 80048d0:	2000      	movs	r0, #0
 80048d2:	463b      	mov	r3, r7
 80048d4:	4602      	mov	r2, r0
 80048d6:	9c04      	ldr	r4, [sp, #16]
 80048d8:	9005      	str	r0, [sp, #20]
 80048da:	2b65      	cmp	r3, #101	; 0x65
 80048dc:	d001      	beq.n	80048e2 <_strtod_l+0x172>
 80048de:	2b45      	cmp	r3, #69	; 0x45
 80048e0:	d114      	bne.n	800490c <_strtod_l+0x19c>
 80048e2:	b924      	cbnz	r4, 80048ee <_strtod_l+0x17e>
 80048e4:	b910      	cbnz	r0, 80048ec <_strtod_l+0x17c>
 80048e6:	9b07      	ldr	r3, [sp, #28]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d09e      	beq.n	800482a <_strtod_l+0xba>
 80048ec:	2400      	movs	r4, #0
 80048ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80048f0:	1c73      	adds	r3, r6, #1
 80048f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80048f4:	7873      	ldrb	r3, [r6, #1]
 80048f6:	2b2b      	cmp	r3, #43	; 0x2b
 80048f8:	d078      	beq.n	80049ec <_strtod_l+0x27c>
 80048fa:	2b2d      	cmp	r3, #45	; 0x2d
 80048fc:	d070      	beq.n	80049e0 <_strtod_l+0x270>
 80048fe:	f04f 0c00 	mov.w	ip, #0
 8004902:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004906:	2f09      	cmp	r7, #9
 8004908:	d97c      	bls.n	8004a04 <_strtod_l+0x294>
 800490a:	961b      	str	r6, [sp, #108]	; 0x6c
 800490c:	f04f 0e00 	mov.w	lr, #0
 8004910:	e09a      	b.n	8004a48 <_strtod_l+0x2d8>
 8004912:	2300      	movs	r3, #0
 8004914:	e7c7      	b.n	80048a6 <_strtod_l+0x136>
 8004916:	9904      	ldr	r1, [sp, #16]
 8004918:	3001      	adds	r0, #1
 800491a:	2908      	cmp	r1, #8
 800491c:	bfd7      	itett	le
 800491e:	9906      	ldrle	r1, [sp, #24]
 8004920:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004924:	fb02 3301 	mlale	r3, r2, r1, r3
 8004928:	9306      	strle	r3, [sp, #24]
 800492a:	9b04      	ldr	r3, [sp, #16]
 800492c:	901b      	str	r0, [sp, #108]	; 0x6c
 800492e:	3301      	adds	r3, #1
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	e7bf      	b.n	80048b4 <_strtod_l+0x144>
 8004934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004936:	191a      	adds	r2, r3, r4
 8004938:	921b      	str	r2, [sp, #108]	; 0x6c
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	5d1b      	ldrb	r3, [r3, r4]
 800493e:	2a00      	cmp	r2, #0
 8004940:	d037      	beq.n	80049b2 <_strtod_l+0x242>
 8004942:	4602      	mov	r2, r0
 8004944:	9c04      	ldr	r4, [sp, #16]
 8004946:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800494a:	2909      	cmp	r1, #9
 800494c:	d913      	bls.n	8004976 <_strtod_l+0x206>
 800494e:	2101      	movs	r1, #1
 8004950:	9105      	str	r1, [sp, #20]
 8004952:	e7c2      	b.n	80048da <_strtod_l+0x16a>
 8004954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004956:	3001      	adds	r0, #1
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	921b      	str	r2, [sp, #108]	; 0x6c
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b30      	cmp	r3, #48	; 0x30
 8004960:	d0f8      	beq.n	8004954 <_strtod_l+0x1e4>
 8004962:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004966:	2a08      	cmp	r2, #8
 8004968:	f200 84f0 	bhi.w	800534c <_strtod_l+0xbdc>
 800496c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800496e:	9208      	str	r2, [sp, #32]
 8004970:	4602      	mov	r2, r0
 8004972:	2000      	movs	r0, #0
 8004974:	4604      	mov	r4, r0
 8004976:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800497a:	f100 0101 	add.w	r1, r0, #1
 800497e:	d012      	beq.n	80049a6 <_strtod_l+0x236>
 8004980:	440a      	add	r2, r1
 8004982:	270a      	movs	r7, #10
 8004984:	4621      	mov	r1, r4
 8004986:	eb00 0c04 	add.w	ip, r0, r4
 800498a:	458c      	cmp	ip, r1
 800498c:	d113      	bne.n	80049b6 <_strtod_l+0x246>
 800498e:	1821      	adds	r1, r4, r0
 8004990:	2908      	cmp	r1, #8
 8004992:	f104 0401 	add.w	r4, r4, #1
 8004996:	4404      	add	r4, r0
 8004998:	dc19      	bgt.n	80049ce <_strtod_l+0x25e>
 800499a:	210a      	movs	r1, #10
 800499c:	9b06      	ldr	r3, [sp, #24]
 800499e:	fb01 e303 	mla	r3, r1, r3, lr
 80049a2:	9306      	str	r3, [sp, #24]
 80049a4:	2100      	movs	r1, #0
 80049a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049a8:	1c58      	adds	r0, r3, #1
 80049aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	4608      	mov	r0, r1
 80049b0:	e7c9      	b.n	8004946 <_strtod_l+0x1d6>
 80049b2:	9804      	ldr	r0, [sp, #16]
 80049b4:	e7d3      	b.n	800495e <_strtod_l+0x1ee>
 80049b6:	2908      	cmp	r1, #8
 80049b8:	f101 0101 	add.w	r1, r1, #1
 80049bc:	dc03      	bgt.n	80049c6 <_strtod_l+0x256>
 80049be:	9b06      	ldr	r3, [sp, #24]
 80049c0:	437b      	muls	r3, r7
 80049c2:	9306      	str	r3, [sp, #24]
 80049c4:	e7e1      	b.n	800498a <_strtod_l+0x21a>
 80049c6:	2910      	cmp	r1, #16
 80049c8:	bfd8      	it	le
 80049ca:	437d      	mulle	r5, r7
 80049cc:	e7dd      	b.n	800498a <_strtod_l+0x21a>
 80049ce:	2c10      	cmp	r4, #16
 80049d0:	bfdc      	itt	le
 80049d2:	210a      	movle	r1, #10
 80049d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80049d8:	e7e4      	b.n	80049a4 <_strtod_l+0x234>
 80049da:	2301      	movs	r3, #1
 80049dc:	9305      	str	r3, [sp, #20]
 80049de:	e781      	b.n	80048e4 <_strtod_l+0x174>
 80049e0:	f04f 0c01 	mov.w	ip, #1
 80049e4:	1cb3      	adds	r3, r6, #2
 80049e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80049e8:	78b3      	ldrb	r3, [r6, #2]
 80049ea:	e78a      	b.n	8004902 <_strtod_l+0x192>
 80049ec:	f04f 0c00 	mov.w	ip, #0
 80049f0:	e7f8      	b.n	80049e4 <_strtod_l+0x274>
 80049f2:	bf00      	nop
 80049f4:	08006608 	.word	0x08006608
 80049f8:	7ff00000 	.word	0x7ff00000
 80049fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049fe:	1c5f      	adds	r7, r3, #1
 8004a00:	971b      	str	r7, [sp, #108]	; 0x6c
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d0f9      	beq.n	80049fc <_strtod_l+0x28c>
 8004a08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004a0c:	2f08      	cmp	r7, #8
 8004a0e:	f63f af7d 	bhi.w	800490c <_strtod_l+0x19c>
 8004a12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004a16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a18:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a1c:	1c5f      	adds	r7, r3, #1
 8004a1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004a26:	f1b8 0f09 	cmp.w	r8, #9
 8004a2a:	d937      	bls.n	8004a9c <_strtod_l+0x32c>
 8004a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a2e:	1a7f      	subs	r7, r7, r1
 8004a30:	2f08      	cmp	r7, #8
 8004a32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004a36:	dc37      	bgt.n	8004aa8 <_strtod_l+0x338>
 8004a38:	45be      	cmp	lr, r7
 8004a3a:	bfa8      	it	ge
 8004a3c:	46be      	movge	lr, r7
 8004a3e:	f1bc 0f00 	cmp.w	ip, #0
 8004a42:	d001      	beq.n	8004a48 <_strtod_l+0x2d8>
 8004a44:	f1ce 0e00 	rsb	lr, lr, #0
 8004a48:	2c00      	cmp	r4, #0
 8004a4a:	d151      	bne.n	8004af0 <_strtod_l+0x380>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f47f aece 	bne.w	80047ee <_strtod_l+0x7e>
 8004a52:	9a07      	ldr	r2, [sp, #28]
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	f47f aeca 	bne.w	80047ee <_strtod_l+0x7e>
 8004a5a:	9a05      	ldr	r2, [sp, #20]
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	f47f aee4 	bne.w	800482a <_strtod_l+0xba>
 8004a62:	2b4e      	cmp	r3, #78	; 0x4e
 8004a64:	d027      	beq.n	8004ab6 <_strtod_l+0x346>
 8004a66:	dc21      	bgt.n	8004aac <_strtod_l+0x33c>
 8004a68:	2b49      	cmp	r3, #73	; 0x49
 8004a6a:	f47f aede 	bne.w	800482a <_strtod_l+0xba>
 8004a6e:	49a4      	ldr	r1, [pc, #656]	; (8004d00 <_strtod_l+0x590>)
 8004a70:	a81b      	add	r0, sp, #108	; 0x6c
 8004a72:	f001 f837 	bl	8005ae4 <__match>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f43f aed7 	beq.w	800482a <_strtod_l+0xba>
 8004a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a7e:	49a1      	ldr	r1, [pc, #644]	; (8004d04 <_strtod_l+0x594>)
 8004a80:	3b01      	subs	r3, #1
 8004a82:	a81b      	add	r0, sp, #108	; 0x6c
 8004a84:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a86:	f001 f82d 	bl	8005ae4 <__match>
 8004a8a:	b910      	cbnz	r0, 8004a92 <_strtod_l+0x322>
 8004a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a8e:	3301      	adds	r3, #1
 8004a90:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a92:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004d18 <_strtod_l+0x5a8>
 8004a96:	f04f 0900 	mov.w	r9, #0
 8004a9a:	e6a8      	b.n	80047ee <_strtod_l+0x7e>
 8004a9c:	210a      	movs	r1, #10
 8004a9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004aa2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004aa6:	e7b8      	b.n	8004a1a <_strtod_l+0x2aa>
 8004aa8:	46be      	mov	lr, r7
 8004aaa:	e7c8      	b.n	8004a3e <_strtod_l+0x2ce>
 8004aac:	2b69      	cmp	r3, #105	; 0x69
 8004aae:	d0de      	beq.n	8004a6e <_strtod_l+0x2fe>
 8004ab0:	2b6e      	cmp	r3, #110	; 0x6e
 8004ab2:	f47f aeba 	bne.w	800482a <_strtod_l+0xba>
 8004ab6:	4994      	ldr	r1, [pc, #592]	; (8004d08 <_strtod_l+0x598>)
 8004ab8:	a81b      	add	r0, sp, #108	; 0x6c
 8004aba:	f001 f813 	bl	8005ae4 <__match>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	f43f aeb3 	beq.w	800482a <_strtod_l+0xba>
 8004ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b28      	cmp	r3, #40	; 0x28
 8004aca:	d10e      	bne.n	8004aea <_strtod_l+0x37a>
 8004acc:	aa1e      	add	r2, sp, #120	; 0x78
 8004ace:	498f      	ldr	r1, [pc, #572]	; (8004d0c <_strtod_l+0x59c>)
 8004ad0:	a81b      	add	r0, sp, #108	; 0x6c
 8004ad2:	f001 f81b 	bl	8005b0c <__hexnan>
 8004ad6:	2805      	cmp	r0, #5
 8004ad8:	d107      	bne.n	8004aea <_strtod_l+0x37a>
 8004ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004adc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004ae0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004ae4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004ae8:	e681      	b.n	80047ee <_strtod_l+0x7e>
 8004aea:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004d20 <_strtod_l+0x5b0>
 8004aee:	e7d2      	b.n	8004a96 <_strtod_l+0x326>
 8004af0:	ebae 0302 	sub.w	r3, lr, r2
 8004af4:	9307      	str	r3, [sp, #28]
 8004af6:	9b04      	ldr	r3, [sp, #16]
 8004af8:	9806      	ldr	r0, [sp, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf08      	it	eq
 8004afe:	4623      	moveq	r3, r4
 8004b00:	2c10      	cmp	r4, #16
 8004b02:	9304      	str	r3, [sp, #16]
 8004b04:	46a0      	mov	r8, r4
 8004b06:	bfa8      	it	ge
 8004b08:	f04f 0810 	movge.w	r8, #16
 8004b0c:	f7fb fc6a 	bl	80003e4 <__aeabi_ui2d>
 8004b10:	2c09      	cmp	r4, #9
 8004b12:	4681      	mov	r9, r0
 8004b14:	468a      	mov	sl, r1
 8004b16:	dc13      	bgt.n	8004b40 <_strtod_l+0x3d0>
 8004b18:	9b07      	ldr	r3, [sp, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f43f ae67 	beq.w	80047ee <_strtod_l+0x7e>
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	dd7e      	ble.n	8004c22 <_strtod_l+0x4b2>
 8004b24:	2b16      	cmp	r3, #22
 8004b26:	dc65      	bgt.n	8004bf4 <_strtod_l+0x484>
 8004b28:	4a79      	ldr	r2, [pc, #484]	; (8004d10 <_strtod_l+0x5a0>)
 8004b2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004b2e:	464a      	mov	r2, r9
 8004b30:	e9de 0100 	ldrd	r0, r1, [lr]
 8004b34:	4653      	mov	r3, sl
 8004b36:	f7fb fccf 	bl	80004d8 <__aeabi_dmul>
 8004b3a:	4681      	mov	r9, r0
 8004b3c:	468a      	mov	sl, r1
 8004b3e:	e656      	b.n	80047ee <_strtod_l+0x7e>
 8004b40:	4b73      	ldr	r3, [pc, #460]	; (8004d10 <_strtod_l+0x5a0>)
 8004b42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004b46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004b4a:	f7fb fcc5 	bl	80004d8 <__aeabi_dmul>
 8004b4e:	4606      	mov	r6, r0
 8004b50:	4628      	mov	r0, r5
 8004b52:	460f      	mov	r7, r1
 8004b54:	f7fb fc46 	bl	80003e4 <__aeabi_ui2d>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	4639      	mov	r1, r7
 8004b60:	f7fb fb04 	bl	800016c <__adddf3>
 8004b64:	2c0f      	cmp	r4, #15
 8004b66:	4681      	mov	r9, r0
 8004b68:	468a      	mov	sl, r1
 8004b6a:	ddd5      	ble.n	8004b18 <_strtod_l+0x3a8>
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	eba4 0808 	sub.w	r8, r4, r8
 8004b72:	4498      	add	r8, r3
 8004b74:	f1b8 0f00 	cmp.w	r8, #0
 8004b78:	f340 809a 	ble.w	8004cb0 <_strtod_l+0x540>
 8004b7c:	f018 030f 	ands.w	r3, r8, #15
 8004b80:	d00a      	beq.n	8004b98 <_strtod_l+0x428>
 8004b82:	4963      	ldr	r1, [pc, #396]	; (8004d10 <_strtod_l+0x5a0>)
 8004b84:	464a      	mov	r2, r9
 8004b86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b8e:	4653      	mov	r3, sl
 8004b90:	f7fb fca2 	bl	80004d8 <__aeabi_dmul>
 8004b94:	4681      	mov	r9, r0
 8004b96:	468a      	mov	sl, r1
 8004b98:	f038 080f 	bics.w	r8, r8, #15
 8004b9c:	d077      	beq.n	8004c8e <_strtod_l+0x51e>
 8004b9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004ba2:	dd4b      	ble.n	8004c3c <_strtod_l+0x4cc>
 8004ba4:	f04f 0800 	mov.w	r8, #0
 8004ba8:	f8cd 8010 	str.w	r8, [sp, #16]
 8004bac:	f8cd 8020 	str.w	r8, [sp, #32]
 8004bb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bb4:	2322      	movs	r3, #34	; 0x22
 8004bb6:	f04f 0900 	mov.w	r9, #0
 8004bba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004d18 <_strtod_l+0x5a8>
 8004bbe:	f8cb 3000 	str.w	r3, [fp]
 8004bc2:	9b08      	ldr	r3, [sp, #32]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f43f ae12 	beq.w	80047ee <_strtod_l+0x7e>
 8004bca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004bcc:	4658      	mov	r0, fp
 8004bce:	f001 f881 	bl	8005cd4 <_Bfree>
 8004bd2:	9906      	ldr	r1, [sp, #24]
 8004bd4:	4658      	mov	r0, fp
 8004bd6:	f001 f87d 	bl	8005cd4 <_Bfree>
 8004bda:	9904      	ldr	r1, [sp, #16]
 8004bdc:	4658      	mov	r0, fp
 8004bde:	f001 f879 	bl	8005cd4 <_Bfree>
 8004be2:	9908      	ldr	r1, [sp, #32]
 8004be4:	4658      	mov	r0, fp
 8004be6:	f001 f875 	bl	8005cd4 <_Bfree>
 8004bea:	4641      	mov	r1, r8
 8004bec:	4658      	mov	r0, fp
 8004bee:	f001 f871 	bl	8005cd4 <_Bfree>
 8004bf2:	e5fc      	b.n	80047ee <_strtod_l+0x7e>
 8004bf4:	9a07      	ldr	r2, [sp, #28]
 8004bf6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	dbb6      	blt.n	8004b6c <_strtod_l+0x3fc>
 8004bfe:	4d44      	ldr	r5, [pc, #272]	; (8004d10 <_strtod_l+0x5a0>)
 8004c00:	f1c4 040f 	rsb	r4, r4, #15
 8004c04:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004c08:	464a      	mov	r2, r9
 8004c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c0e:	4653      	mov	r3, sl
 8004c10:	f7fb fc62 	bl	80004d8 <__aeabi_dmul>
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	1b1c      	subs	r4, r3, r4
 8004c18:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004c1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c20:	e789      	b.n	8004b36 <_strtod_l+0x3c6>
 8004c22:	f113 0f16 	cmn.w	r3, #22
 8004c26:	dba1      	blt.n	8004b6c <_strtod_l+0x3fc>
 8004c28:	4a39      	ldr	r2, [pc, #228]	; (8004d10 <_strtod_l+0x5a0>)
 8004c2a:	4648      	mov	r0, r9
 8004c2c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004c30:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004c34:	4651      	mov	r1, sl
 8004c36:	f7fb fd79 	bl	800072c <__aeabi_ddiv>
 8004c3a:	e77e      	b.n	8004b3a <_strtod_l+0x3ca>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4648      	mov	r0, r9
 8004c40:	4651      	mov	r1, sl
 8004c42:	461d      	mov	r5, r3
 8004c44:	4e33      	ldr	r6, [pc, #204]	; (8004d14 <_strtod_l+0x5a4>)
 8004c46:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004c4a:	f1b8 0f01 	cmp.w	r8, #1
 8004c4e:	dc21      	bgt.n	8004c94 <_strtod_l+0x524>
 8004c50:	b10b      	cbz	r3, 8004c56 <_strtod_l+0x4e6>
 8004c52:	4681      	mov	r9, r0
 8004c54:	468a      	mov	sl, r1
 8004c56:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <_strtod_l+0x5a4>)
 8004c58:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004c5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004c60:	464a      	mov	r2, r9
 8004c62:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004c66:	4653      	mov	r3, sl
 8004c68:	f7fb fc36 	bl	80004d8 <__aeabi_dmul>
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <_strtod_l+0x5a8>)
 8004c6e:	460a      	mov	r2, r1
 8004c70:	400b      	ands	r3, r1
 8004c72:	492a      	ldr	r1, [pc, #168]	; (8004d1c <_strtod_l+0x5ac>)
 8004c74:	4681      	mov	r9, r0
 8004c76:	428b      	cmp	r3, r1
 8004c78:	d894      	bhi.n	8004ba4 <_strtod_l+0x434>
 8004c7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004c7e:	428b      	cmp	r3, r1
 8004c80:	bf86      	itte	hi
 8004c82:	f04f 39ff 	movhi.w	r9, #4294967295
 8004c86:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004d24 <_strtod_l+0x5b4>
 8004c8a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	e07b      	b.n	8004d8c <_strtod_l+0x61c>
 8004c94:	f018 0f01 	tst.w	r8, #1
 8004c98:	d006      	beq.n	8004ca8 <_strtod_l+0x538>
 8004c9a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fc19 	bl	80004d8 <__aeabi_dmul>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	3501      	adds	r5, #1
 8004caa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004cae:	e7cc      	b.n	8004c4a <_strtod_l+0x4da>
 8004cb0:	d0ed      	beq.n	8004c8e <_strtod_l+0x51e>
 8004cb2:	f1c8 0800 	rsb	r8, r8, #0
 8004cb6:	f018 020f 	ands.w	r2, r8, #15
 8004cba:	d00a      	beq.n	8004cd2 <_strtod_l+0x562>
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <_strtod_l+0x5a0>)
 8004cbe:	4648      	mov	r0, r9
 8004cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f7fb fd2f 	bl	800072c <__aeabi_ddiv>
 8004cce:	4681      	mov	r9, r0
 8004cd0:	468a      	mov	sl, r1
 8004cd2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004cd6:	d0da      	beq.n	8004c8e <_strtod_l+0x51e>
 8004cd8:	f1b8 0f1f 	cmp.w	r8, #31
 8004cdc:	dd24      	ble.n	8004d28 <_strtod_l+0x5b8>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	f8cd 8010 	str.w	r8, [sp, #16]
 8004ce6:	f8cd 8020 	str.w	r8, [sp, #32]
 8004cea:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cee:	2322      	movs	r3, #34	; 0x22
 8004cf0:	f04f 0900 	mov.w	r9, #0
 8004cf4:	f04f 0a00 	mov.w	sl, #0
 8004cf8:	f8cb 3000 	str.w	r3, [fp]
 8004cfc:	e761      	b.n	8004bc2 <_strtod_l+0x452>
 8004cfe:	bf00      	nop
 8004d00:	080065fc 	.word	0x080065fc
 8004d04:	080065ff 	.word	0x080065ff
 8004d08:	08006605 	.word	0x08006605
 8004d0c:	0800661c 	.word	0x0800661c
 8004d10:	080066b0 	.word	0x080066b0
 8004d14:	08006688 	.word	0x08006688
 8004d18:	7ff00000 	.word	0x7ff00000
 8004d1c:	7ca00000 	.word	0x7ca00000
 8004d20:	fff80000 	.word	0xfff80000
 8004d24:	7fefffff 	.word	0x7fefffff
 8004d28:	f018 0310 	ands.w	r3, r8, #16
 8004d2c:	bf18      	it	ne
 8004d2e:	236a      	movne	r3, #106	; 0x6a
 8004d30:	4648      	mov	r0, r9
 8004d32:	9305      	str	r3, [sp, #20]
 8004d34:	4651      	mov	r1, sl
 8004d36:	2300      	movs	r3, #0
 8004d38:	4da1      	ldr	r5, [pc, #644]	; (8004fc0 <_strtod_l+0x850>)
 8004d3a:	f1b8 0f00 	cmp.w	r8, #0
 8004d3e:	f300 8113 	bgt.w	8004f68 <_strtod_l+0x7f8>
 8004d42:	b10b      	cbz	r3, 8004d48 <_strtod_l+0x5d8>
 8004d44:	4681      	mov	r9, r0
 8004d46:	468a      	mov	sl, r1
 8004d48:	9b05      	ldr	r3, [sp, #20]
 8004d4a:	b1bb      	cbz	r3, 8004d7c <_strtod_l+0x60c>
 8004d4c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004d50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	4651      	mov	r1, sl
 8004d58:	dd10      	ble.n	8004d7c <_strtod_l+0x60c>
 8004d5a:	2b1f      	cmp	r3, #31
 8004d5c:	f340 8110 	ble.w	8004f80 <_strtod_l+0x810>
 8004d60:	2b34      	cmp	r3, #52	; 0x34
 8004d62:	bfd8      	it	le
 8004d64:	f04f 32ff 	movle.w	r2, #4294967295
 8004d68:	f04f 0900 	mov.w	r9, #0
 8004d6c:	bfcf      	iteee	gt
 8004d6e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004d72:	3b20      	suble	r3, #32
 8004d74:	fa02 f303 	lslle.w	r3, r2, r3
 8004d78:	ea03 0a01 	andle.w	sl, r3, r1
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2300      	movs	r3, #0
 8004d80:	4648      	mov	r0, r9
 8004d82:	4651      	mov	r1, sl
 8004d84:	f7fb fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d1a8      	bne.n	8004cde <_strtod_l+0x56e>
 8004d8c:	9b06      	ldr	r3, [sp, #24]
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	9908      	ldr	r1, [sp, #32]
 8004d94:	4623      	mov	r3, r4
 8004d96:	4658      	mov	r0, fp
 8004d98:	f000 ffee 	bl	8005d78 <__s2b>
 8004d9c:	9008      	str	r0, [sp, #32]
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f af00 	beq.w	8004ba4 <_strtod_l+0x434>
 8004da4:	9a07      	ldr	r2, [sp, #28]
 8004da6:	9b07      	ldr	r3, [sp, #28]
 8004da8:	2a00      	cmp	r2, #0
 8004daa:	f1c3 0300 	rsb	r3, r3, #0
 8004dae:	bfa8      	it	ge
 8004db0:	2300      	movge	r3, #0
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	930e      	str	r3, [sp, #56]	; 0x38
 8004db8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004dbc:	9316      	str	r3, [sp, #88]	; 0x58
 8004dbe:	f8cd 8010 	str.w	r8, [sp, #16]
 8004dc2:	9b08      	ldr	r3, [sp, #32]
 8004dc4:	4658      	mov	r0, fp
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	f000 ff50 	bl	8005c6c <_Balloc>
 8004dcc:	9006      	str	r0, [sp, #24]
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	f43f aef0 	beq.w	8004bb4 <_strtod_l+0x444>
 8004dd4:	9b08      	ldr	r3, [sp, #32]
 8004dd6:	300c      	adds	r0, #12
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	f103 010c 	add.w	r1, r3, #12
 8004dde:	3202      	adds	r2, #2
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	f7ff fc5d 	bl	80046a0 <memcpy>
 8004de6:	ab1e      	add	r3, sp, #120	; 0x78
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	ab1d      	add	r3, sp, #116	; 0x74
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	464a      	mov	r2, r9
 8004df0:	4653      	mov	r3, sl
 8004df2:	4658      	mov	r0, fp
 8004df4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004df8:	f001 fa78 	bl	80062ec <__d2b>
 8004dfc:	901c      	str	r0, [sp, #112]	; 0x70
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	f43f aed8 	beq.w	8004bb4 <_strtod_l+0x444>
 8004e04:	2101      	movs	r1, #1
 8004e06:	4658      	mov	r0, fp
 8004e08:	f001 f842 	bl	8005e90 <__i2b>
 8004e0c:	9004      	str	r0, [sp, #16]
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f43f aecf 	beq.w	8004bb4 <_strtod_l+0x444>
 8004e16:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004e18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	bfab      	itete	ge
 8004e1e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004e20:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004e22:	18ee      	addge	r6, r5, r3
 8004e24:	1b5c      	sublt	r4, r3, r5
 8004e26:	9b05      	ldr	r3, [sp, #20]
 8004e28:	bfa8      	it	ge
 8004e2a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004e2c:	eba5 0503 	sub.w	r5, r5, r3
 8004e30:	4415      	add	r5, r2
 8004e32:	4b64      	ldr	r3, [pc, #400]	; (8004fc4 <_strtod_l+0x854>)
 8004e34:	f105 35ff 	add.w	r5, r5, #4294967295
 8004e38:	bfb8      	it	lt
 8004e3a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004e3c:	429d      	cmp	r5, r3
 8004e3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004e42:	f280 80af 	bge.w	8004fa4 <_strtod_l+0x834>
 8004e46:	1b5b      	subs	r3, r3, r5
 8004e48:	2b1f      	cmp	r3, #31
 8004e4a:	eba2 0203 	sub.w	r2, r2, r3
 8004e4e:	f04f 0701 	mov.w	r7, #1
 8004e52:	f300 809c 	bgt.w	8004f8e <_strtod_l+0x81e>
 8004e56:	2500      	movs	r5, #0
 8004e58:	fa07 f303 	lsl.w	r3, r7, r3
 8004e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e5e:	18b7      	adds	r7, r6, r2
 8004e60:	9b05      	ldr	r3, [sp, #20]
 8004e62:	42be      	cmp	r6, r7
 8004e64:	4414      	add	r4, r2
 8004e66:	441c      	add	r4, r3
 8004e68:	4633      	mov	r3, r6
 8004e6a:	bfa8      	it	ge
 8004e6c:	463b      	movge	r3, r7
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	bfa8      	it	ge
 8004e72:	4623      	movge	r3, r4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfc2      	ittt	gt
 8004e78:	1aff      	subgt	r7, r7, r3
 8004e7a:	1ae4      	subgt	r4, r4, r3
 8004e7c:	1af6      	subgt	r6, r6, r3
 8004e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e80:	b1bb      	cbz	r3, 8004eb2 <_strtod_l+0x742>
 8004e82:	461a      	mov	r2, r3
 8004e84:	9904      	ldr	r1, [sp, #16]
 8004e86:	4658      	mov	r0, fp
 8004e88:	f001 f8a0 	bl	8005fcc <__pow5mult>
 8004e8c:	9004      	str	r0, [sp, #16]
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f43f ae90 	beq.w	8004bb4 <_strtod_l+0x444>
 8004e94:	4601      	mov	r1, r0
 8004e96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004e98:	4658      	mov	r0, fp
 8004e9a:	f001 f802 	bl	8005ea2 <__multiply>
 8004e9e:	9009      	str	r0, [sp, #36]	; 0x24
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f43f ae87 	beq.w	8004bb4 <_strtod_l+0x444>
 8004ea6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ea8:	4658      	mov	r0, fp
 8004eaa:	f000 ff13 	bl	8005cd4 <_Bfree>
 8004eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb0:	931c      	str	r3, [sp, #112]	; 0x70
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	dc7a      	bgt.n	8004fac <_strtod_l+0x83c>
 8004eb6:	9b07      	ldr	r3, [sp, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dd08      	ble.n	8004ece <_strtod_l+0x75e>
 8004ebc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004ebe:	9906      	ldr	r1, [sp, #24]
 8004ec0:	4658      	mov	r0, fp
 8004ec2:	f001 f883 	bl	8005fcc <__pow5mult>
 8004ec6:	9006      	str	r0, [sp, #24]
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	f43f ae73 	beq.w	8004bb4 <_strtod_l+0x444>
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	dd08      	ble.n	8004ee4 <_strtod_l+0x774>
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	9906      	ldr	r1, [sp, #24]
 8004ed6:	4658      	mov	r0, fp
 8004ed8:	f001 f8c6 	bl	8006068 <__lshift>
 8004edc:	9006      	str	r0, [sp, #24]
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f43f ae68 	beq.w	8004bb4 <_strtod_l+0x444>
 8004ee4:	2e00      	cmp	r6, #0
 8004ee6:	dd08      	ble.n	8004efa <_strtod_l+0x78a>
 8004ee8:	4632      	mov	r2, r6
 8004eea:	9904      	ldr	r1, [sp, #16]
 8004eec:	4658      	mov	r0, fp
 8004eee:	f001 f8bb 	bl	8006068 <__lshift>
 8004ef2:	9004      	str	r0, [sp, #16]
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	f43f ae5d 	beq.w	8004bb4 <_strtod_l+0x444>
 8004efa:	9a06      	ldr	r2, [sp, #24]
 8004efc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004efe:	4658      	mov	r0, fp
 8004f00:	f001 f920 	bl	8006144 <__mdiff>
 8004f04:	4680      	mov	r8, r0
 8004f06:	2800      	cmp	r0, #0
 8004f08:	f43f ae54 	beq.w	8004bb4 <_strtod_l+0x444>
 8004f0c:	2400      	movs	r4, #0
 8004f0e:	68c3      	ldr	r3, [r0, #12]
 8004f10:	9904      	ldr	r1, [sp, #16]
 8004f12:	60c4      	str	r4, [r0, #12]
 8004f14:	930c      	str	r3, [sp, #48]	; 0x30
 8004f16:	f001 f8fb 	bl	8006110 <__mcmp>
 8004f1a:	42a0      	cmp	r0, r4
 8004f1c:	da54      	bge.n	8004fc8 <_strtod_l+0x858>
 8004f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f20:	b9f3      	cbnz	r3, 8004f60 <_strtod_l+0x7f0>
 8004f22:	f1b9 0f00 	cmp.w	r9, #0
 8004f26:	d11b      	bne.n	8004f60 <_strtod_l+0x7f0>
 8004f28:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004f2c:	b9c3      	cbnz	r3, 8004f60 <_strtod_l+0x7f0>
 8004f2e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004f32:	0d1b      	lsrs	r3, r3, #20
 8004f34:	051b      	lsls	r3, r3, #20
 8004f36:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004f3a:	d911      	bls.n	8004f60 <_strtod_l+0x7f0>
 8004f3c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004f40:	b91b      	cbnz	r3, 8004f4a <_strtod_l+0x7da>
 8004f42:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	dd0a      	ble.n	8004f60 <_strtod_l+0x7f0>
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4658      	mov	r0, fp
 8004f50:	f001 f88a 	bl	8006068 <__lshift>
 8004f54:	9904      	ldr	r1, [sp, #16]
 8004f56:	4680      	mov	r8, r0
 8004f58:	f001 f8da 	bl	8006110 <__mcmp>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	dc68      	bgt.n	8005032 <_strtod_l+0x8c2>
 8004f60:	9b05      	ldr	r3, [sp, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d172      	bne.n	800504c <_strtod_l+0x8dc>
 8004f66:	e630      	b.n	8004bca <_strtod_l+0x45a>
 8004f68:	f018 0f01 	tst.w	r8, #1
 8004f6c:	d004      	beq.n	8004f78 <_strtod_l+0x808>
 8004f6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f72:	f7fb fab1 	bl	80004d8 <__aeabi_dmul>
 8004f76:	2301      	movs	r3, #1
 8004f78:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f7c:	3508      	adds	r5, #8
 8004f7e:	e6dc      	b.n	8004d3a <_strtod_l+0x5ca>
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	ea03 0909 	and.w	r9, r3, r9
 8004f8c:	e6f6      	b.n	8004d7c <_strtod_l+0x60c>
 8004f8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004f92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004f96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004f9a:	35e2      	adds	r5, #226	; 0xe2
 8004f9c:	fa07 f505 	lsl.w	r5, r7, r5
 8004fa0:	970f      	str	r7, [sp, #60]	; 0x3c
 8004fa2:	e75c      	b.n	8004e5e <_strtod_l+0x6ee>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	2500      	movs	r5, #0
 8004fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004faa:	e758      	b.n	8004e5e <_strtod_l+0x6ee>
 8004fac:	463a      	mov	r2, r7
 8004fae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004fb0:	4658      	mov	r0, fp
 8004fb2:	f001 f859 	bl	8006068 <__lshift>
 8004fb6:	901c      	str	r0, [sp, #112]	; 0x70
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f47f af7c 	bne.w	8004eb6 <_strtod_l+0x746>
 8004fbe:	e5f9      	b.n	8004bb4 <_strtod_l+0x444>
 8004fc0:	08006630 	.word	0x08006630
 8004fc4:	fffffc02 	.word	0xfffffc02
 8004fc8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004fcc:	f040 8089 	bne.w	80050e2 <_strtod_l+0x972>
 8004fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fd2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004fd6:	b342      	cbz	r2, 800502a <_strtod_l+0x8ba>
 8004fd8:	4aaf      	ldr	r2, [pc, #700]	; (8005298 <_strtod_l+0xb28>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d156      	bne.n	800508c <_strtod_l+0x91c>
 8004fde:	9b05      	ldr	r3, [sp, #20]
 8004fe0:	4648      	mov	r0, r9
 8004fe2:	b1eb      	cbz	r3, 8005020 <_strtod_l+0x8b0>
 8004fe4:	4653      	mov	r3, sl
 8004fe6:	4aad      	ldr	r2, [pc, #692]	; (800529c <_strtod_l+0xb2c>)
 8004fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fec:	401a      	ands	r2, r3
 8004fee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004ff2:	d818      	bhi.n	8005026 <_strtod_l+0x8b6>
 8004ff4:	0d12      	lsrs	r2, r2, #20
 8004ff6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	4298      	cmp	r0, r3
 8005000:	d144      	bne.n	800508c <_strtod_l+0x91c>
 8005002:	4ba7      	ldr	r3, [pc, #668]	; (80052a0 <_strtod_l+0xb30>)
 8005004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005006:	429a      	cmp	r2, r3
 8005008:	d102      	bne.n	8005010 <_strtod_l+0x8a0>
 800500a:	3001      	adds	r0, #1
 800500c:	f43f add2 	beq.w	8004bb4 <_strtod_l+0x444>
 8005010:	4ba2      	ldr	r3, [pc, #648]	; (800529c <_strtod_l+0xb2c>)
 8005012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005014:	f04f 0900 	mov.w	r9, #0
 8005018:	401a      	ands	r2, r3
 800501a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800501e:	e79f      	b.n	8004f60 <_strtod_l+0x7f0>
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
 8005024:	e7eb      	b.n	8004ffe <_strtod_l+0x88e>
 8005026:	460b      	mov	r3, r1
 8005028:	e7e9      	b.n	8004ffe <_strtod_l+0x88e>
 800502a:	bb7b      	cbnz	r3, 800508c <_strtod_l+0x91c>
 800502c:	f1b9 0f00 	cmp.w	r9, #0
 8005030:	d12c      	bne.n	800508c <_strtod_l+0x91c>
 8005032:	9905      	ldr	r1, [sp, #20]
 8005034:	4653      	mov	r3, sl
 8005036:	4a99      	ldr	r2, [pc, #612]	; (800529c <_strtod_l+0xb2c>)
 8005038:	b1f1      	cbz	r1, 8005078 <_strtod_l+0x908>
 800503a:	ea02 010a 	and.w	r1, r2, sl
 800503e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005042:	dc19      	bgt.n	8005078 <_strtod_l+0x908>
 8005044:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005048:	f77f ae51 	ble.w	8004cee <_strtod_l+0x57e>
 800504c:	2300      	movs	r3, #0
 800504e:	4a95      	ldr	r2, [pc, #596]	; (80052a4 <_strtod_l+0xb34>)
 8005050:	4648      	mov	r0, r9
 8005052:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005056:	4651      	mov	r1, sl
 8005058:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800505c:	f7fb fa3c 	bl	80004d8 <__aeabi_dmul>
 8005060:	4681      	mov	r9, r0
 8005062:	468a      	mov	sl, r1
 8005064:	2900      	cmp	r1, #0
 8005066:	f47f adb0 	bne.w	8004bca <_strtod_l+0x45a>
 800506a:	2800      	cmp	r0, #0
 800506c:	f47f adad 	bne.w	8004bca <_strtod_l+0x45a>
 8005070:	2322      	movs	r3, #34	; 0x22
 8005072:	f8cb 3000 	str.w	r3, [fp]
 8005076:	e5a8      	b.n	8004bca <_strtod_l+0x45a>
 8005078:	4013      	ands	r3, r2
 800507a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800507e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005082:	f04f 39ff 	mov.w	r9, #4294967295
 8005086:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800508a:	e769      	b.n	8004f60 <_strtod_l+0x7f0>
 800508c:	b19d      	cbz	r5, 80050b6 <_strtod_l+0x946>
 800508e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005090:	421d      	tst	r5, r3
 8005092:	f43f af65 	beq.w	8004f60 <_strtod_l+0x7f0>
 8005096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005098:	9a05      	ldr	r2, [sp, #20]
 800509a:	4648      	mov	r0, r9
 800509c:	4651      	mov	r1, sl
 800509e:	b173      	cbz	r3, 80050be <_strtod_l+0x94e>
 80050a0:	f7ff fb42 	bl	8004728 <sulp>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050ac:	f7fb f85e 	bl	800016c <__adddf3>
 80050b0:	4681      	mov	r9, r0
 80050b2:	468a      	mov	sl, r1
 80050b4:	e754      	b.n	8004f60 <_strtod_l+0x7f0>
 80050b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050b8:	ea13 0f09 	tst.w	r3, r9
 80050bc:	e7e9      	b.n	8005092 <_strtod_l+0x922>
 80050be:	f7ff fb33 	bl	8004728 <sulp>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050ca:	f7fb f84d 	bl	8000168 <__aeabi_dsub>
 80050ce:	2200      	movs	r2, #0
 80050d0:	2300      	movs	r3, #0
 80050d2:	4681      	mov	r9, r0
 80050d4:	468a      	mov	sl, r1
 80050d6:	f7fb fc67 	bl	80009a8 <__aeabi_dcmpeq>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f47f ae07 	bne.w	8004cee <_strtod_l+0x57e>
 80050e0:	e73e      	b.n	8004f60 <_strtod_l+0x7f0>
 80050e2:	9904      	ldr	r1, [sp, #16]
 80050e4:	4640      	mov	r0, r8
 80050e6:	f001 f950 	bl	800638a <__ratio>
 80050ea:	2200      	movs	r2, #0
 80050ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050f0:	4606      	mov	r6, r0
 80050f2:	460f      	mov	r7, r1
 80050f4:	f7fb fc6c 	bl	80009d0 <__aeabi_dcmple>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d075      	beq.n	80051e8 <_strtod_l+0xa78>
 80050fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d047      	beq.n	8005192 <_strtod_l+0xa22>
 8005102:	2600      	movs	r6, #0
 8005104:	4f68      	ldr	r7, [pc, #416]	; (80052a8 <_strtod_l+0xb38>)
 8005106:	4d68      	ldr	r5, [pc, #416]	; (80052a8 <_strtod_l+0xb38>)
 8005108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800510e:	0d1b      	lsrs	r3, r3, #20
 8005110:	051b      	lsls	r3, r3, #20
 8005112:	930f      	str	r3, [sp, #60]	; 0x3c
 8005114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <_strtod_l+0xb3c>)
 8005118:	429a      	cmp	r2, r3
 800511a:	f040 80cf 	bne.w	80052bc <_strtod_l+0xb4c>
 800511e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005122:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005128:	4648      	mov	r0, r9
 800512a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800512e:	4651      	mov	r1, sl
 8005130:	f001 f866 	bl	8006200 <__ulp>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb f9cc 	bl	80004d8 <__aeabi_dmul>
 8005140:	464a      	mov	r2, r9
 8005142:	4653      	mov	r3, sl
 8005144:	f7fb f812 	bl	800016c <__adddf3>
 8005148:	460b      	mov	r3, r1
 800514a:	4954      	ldr	r1, [pc, #336]	; (800529c <_strtod_l+0xb2c>)
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <_strtod_l+0xb40>)
 800514e:	4019      	ands	r1, r3
 8005150:	4291      	cmp	r1, r2
 8005152:	4681      	mov	r9, r0
 8005154:	d95e      	bls.n	8005214 <_strtod_l+0xaa4>
 8005156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005158:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800515c:	4293      	cmp	r3, r2
 800515e:	d103      	bne.n	8005168 <_strtod_l+0x9f8>
 8005160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005162:	3301      	adds	r3, #1
 8005164:	f43f ad26 	beq.w	8004bb4 <_strtod_l+0x444>
 8005168:	f04f 39ff 	mov.w	r9, #4294967295
 800516c:	f8df a130 	ldr.w	sl, [pc, #304]	; 80052a0 <_strtod_l+0xb30>
 8005170:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005172:	4658      	mov	r0, fp
 8005174:	f000 fdae 	bl	8005cd4 <_Bfree>
 8005178:	9906      	ldr	r1, [sp, #24]
 800517a:	4658      	mov	r0, fp
 800517c:	f000 fdaa 	bl	8005cd4 <_Bfree>
 8005180:	9904      	ldr	r1, [sp, #16]
 8005182:	4658      	mov	r0, fp
 8005184:	f000 fda6 	bl	8005cd4 <_Bfree>
 8005188:	4641      	mov	r1, r8
 800518a:	4658      	mov	r0, fp
 800518c:	f000 fda2 	bl	8005cd4 <_Bfree>
 8005190:	e617      	b.n	8004dc2 <_strtod_l+0x652>
 8005192:	f1b9 0f00 	cmp.w	r9, #0
 8005196:	d119      	bne.n	80051cc <_strtod_l+0xa5c>
 8005198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800519e:	b9e3      	cbnz	r3, 80051da <_strtod_l+0xa6a>
 80051a0:	2200      	movs	r2, #0
 80051a2:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <_strtod_l+0xb38>)
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb fc08 	bl	80009bc <__aeabi_dcmplt>
 80051ac:	b9c8      	cbnz	r0, 80051e2 <_strtod_l+0xa72>
 80051ae:	2200      	movs	r2, #0
 80051b0:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <_strtod_l+0xb44>)
 80051b2:	4630      	mov	r0, r6
 80051b4:	4639      	mov	r1, r7
 80051b6:	f7fb f98f 	bl	80004d8 <__aeabi_dmul>
 80051ba:	4604      	mov	r4, r0
 80051bc:	460d      	mov	r5, r1
 80051be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80051c2:	9418      	str	r4, [sp, #96]	; 0x60
 80051c4:	9319      	str	r3, [sp, #100]	; 0x64
 80051c6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80051ca:	e79d      	b.n	8005108 <_strtod_l+0x998>
 80051cc:	f1b9 0f01 	cmp.w	r9, #1
 80051d0:	d103      	bne.n	80051da <_strtod_l+0xa6a>
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f43f ad8a 	beq.w	8004cee <_strtod_l+0x57e>
 80051da:	2600      	movs	r6, #0
 80051dc:	4f36      	ldr	r7, [pc, #216]	; (80052b8 <_strtod_l+0xb48>)
 80051de:	2400      	movs	r4, #0
 80051e0:	e791      	b.n	8005106 <_strtod_l+0x996>
 80051e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80051e4:	4d33      	ldr	r5, [pc, #204]	; (80052b4 <_strtod_l+0xb44>)
 80051e6:	e7ea      	b.n	80051be <_strtod_l+0xa4e>
 80051e8:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <_strtod_l+0xb44>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	f7fb f972 	bl	80004d8 <__aeabi_dmul>
 80051f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	b933      	cbnz	r3, 800520a <_strtod_l+0xa9a>
 80051fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005200:	9010      	str	r0, [sp, #64]	; 0x40
 8005202:	9311      	str	r3, [sp, #68]	; 0x44
 8005204:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005208:	e77e      	b.n	8005108 <_strtod_l+0x998>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005212:	e7f7      	b.n	8005204 <_strtod_l+0xa94>
 8005214:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005218:	9b05      	ldr	r3, [sp, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1a8      	bne.n	8005170 <_strtod_l+0xa00>
 800521e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005222:	0d1b      	lsrs	r3, r3, #20
 8005224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005226:	051b      	lsls	r3, r3, #20
 8005228:	429a      	cmp	r2, r3
 800522a:	4656      	mov	r6, sl
 800522c:	d1a0      	bne.n	8005170 <_strtod_l+0xa00>
 800522e:	4629      	mov	r1, r5
 8005230:	4620      	mov	r0, r4
 8005232:	f7fb fbeb 	bl	8000a0c <__aeabi_d2iz>
 8005236:	f7fb f8e5 	bl	8000404 <__aeabi_i2d>
 800523a:	460b      	mov	r3, r1
 800523c:	4602      	mov	r2, r0
 800523e:	4629      	mov	r1, r5
 8005240:	4620      	mov	r0, r4
 8005242:	f7fa ff91 	bl	8000168 <__aeabi_dsub>
 8005246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005248:	4604      	mov	r4, r0
 800524a:	460d      	mov	r5, r1
 800524c:	b933      	cbnz	r3, 800525c <_strtod_l+0xaec>
 800524e:	f1b9 0f00 	cmp.w	r9, #0
 8005252:	d103      	bne.n	800525c <_strtod_l+0xaec>
 8005254:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005258:	2e00      	cmp	r6, #0
 800525a:	d06a      	beq.n	8005332 <_strtod_l+0xbc2>
 800525c:	a30a      	add	r3, pc, #40	; (adr r3, 8005288 <_strtod_l+0xb18>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	4620      	mov	r0, r4
 8005264:	4629      	mov	r1, r5
 8005266:	f7fb fba9 	bl	80009bc <__aeabi_dcmplt>
 800526a:	2800      	cmp	r0, #0
 800526c:	f47f acad 	bne.w	8004bca <_strtod_l+0x45a>
 8005270:	a307      	add	r3, pc, #28	; (adr r3, 8005290 <_strtod_l+0xb20>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb fbbd 	bl	80009f8 <__aeabi_dcmpgt>
 800527e:	2800      	cmp	r0, #0
 8005280:	f43f af76 	beq.w	8005170 <_strtod_l+0xa00>
 8005284:	e4a1      	b.n	8004bca <_strtod_l+0x45a>
 8005286:	bf00      	nop
 8005288:	94a03595 	.word	0x94a03595
 800528c:	3fdfffff 	.word	0x3fdfffff
 8005290:	35afe535 	.word	0x35afe535
 8005294:	3fe00000 	.word	0x3fe00000
 8005298:	000fffff 	.word	0x000fffff
 800529c:	7ff00000 	.word	0x7ff00000
 80052a0:	7fefffff 	.word	0x7fefffff
 80052a4:	39500000 	.word	0x39500000
 80052a8:	3ff00000 	.word	0x3ff00000
 80052ac:	7fe00000 	.word	0x7fe00000
 80052b0:	7c9fffff 	.word	0x7c9fffff
 80052b4:	3fe00000 	.word	0x3fe00000
 80052b8:	bff00000 	.word	0xbff00000
 80052bc:	9b05      	ldr	r3, [sp, #20]
 80052be:	b313      	cbz	r3, 8005306 <_strtod_l+0xb96>
 80052c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80052c6:	d81e      	bhi.n	8005306 <_strtod_l+0xb96>
 80052c8:	a325      	add	r3, pc, #148	; (adr r3, 8005360 <_strtod_l+0xbf0>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fb fb7d 	bl	80009d0 <__aeabi_dcmple>
 80052d6:	b190      	cbz	r0, 80052fe <_strtod_l+0xb8e>
 80052d8:	4629      	mov	r1, r5
 80052da:	4620      	mov	r0, r4
 80052dc:	f7fb fbbe 	bl	8000a5c <__aeabi_d2uiz>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	bf08      	it	eq
 80052e4:	2001      	moveq	r0, #1
 80052e6:	f7fb f87d 	bl	80003e4 <__aeabi_ui2d>
 80052ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052ec:	4604      	mov	r4, r0
 80052ee:	460d      	mov	r5, r1
 80052f0:	b9d3      	cbnz	r3, 8005328 <_strtod_l+0xbb8>
 80052f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052f6:	9012      	str	r0, [sp, #72]	; 0x48
 80052f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80052fa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80052fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005300:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005304:	1a9f      	subs	r7, r3, r2
 8005306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800530a:	f000 ff79 	bl	8006200 <__ulp>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4630      	mov	r0, r6
 8005314:	4639      	mov	r1, r7
 8005316:	f7fb f8df 	bl	80004d8 <__aeabi_dmul>
 800531a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800531e:	f7fa ff25 	bl	800016c <__adddf3>
 8005322:	4681      	mov	r9, r0
 8005324:	468a      	mov	sl, r1
 8005326:	e777      	b.n	8005218 <_strtod_l+0xaa8>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005330:	e7e3      	b.n	80052fa <_strtod_l+0xb8a>
 8005332:	a30d      	add	r3, pc, #52	; (adr r3, 8005368 <_strtod_l+0xbf8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb fb40 	bl	80009bc <__aeabi_dcmplt>
 800533c:	e79f      	b.n	800527e <_strtod_l+0xb0e>
 800533e:	2300      	movs	r3, #0
 8005340:	930d      	str	r3, [sp, #52]	; 0x34
 8005342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005344:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	f7ff ba55 	b.w	80047f6 <_strtod_l+0x86>
 800534c:	2b65      	cmp	r3, #101	; 0x65
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f43f ab42 	beq.w	80049da <_strtod_l+0x26a>
 8005356:	2101      	movs	r1, #1
 8005358:	4614      	mov	r4, r2
 800535a:	9105      	str	r1, [sp, #20]
 800535c:	f7ff babf 	b.w	80048de <_strtod_l+0x16e>
 8005360:	ffc00000 	.word	0xffc00000
 8005364:	41dfffff 	.word	0x41dfffff
 8005368:	94a03595 	.word	0x94a03595
 800536c:	3fcfffff 	.word	0x3fcfffff

08005370 <strtod>:
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <strtod+0x1c>)
 8005372:	b410      	push	{r4}
 8005374:	681c      	ldr	r4, [r3, #0]
 8005376:	4a06      	ldr	r2, [pc, #24]	; (8005390 <strtod+0x20>)
 8005378:	6a23      	ldr	r3, [r4, #32]
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf08      	it	eq
 800537e:	4613      	moveq	r3, r2
 8005380:	460a      	mov	r2, r1
 8005382:	4601      	mov	r1, r0
 8005384:	4620      	mov	r0, r4
 8005386:	bc10      	pop	{r4}
 8005388:	f7ff b9f2 	b.w	8004770 <_strtod_l>
 800538c:	20000020 	.word	0x20000020
 8005390:	20000084 	.word	0x20000084

08005394 <strtok>:
 8005394:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <strtok+0x50>)
 8005396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	681d      	ldr	r5, [r3, #0]
 800539c:	4606      	mov	r6, r0
 800539e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80053a0:	460f      	mov	r7, r1
 80053a2:	b9b4      	cbnz	r4, 80053d2 <strtok+0x3e>
 80053a4:	2050      	movs	r0, #80	; 0x50
 80053a6:	f000 fc47 	bl	8005c38 <malloc>
 80053aa:	65a8      	str	r0, [r5, #88]	; 0x58
 80053ac:	e9c0 4400 	strd	r4, r4, [r0]
 80053b0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80053b4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80053b8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80053bc:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80053c0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80053c4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80053c8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80053cc:	6184      	str	r4, [r0, #24]
 80053ce:	7704      	strb	r4, [r0, #28]
 80053d0:	6244      	str	r4, [r0, #36]	; 0x24
 80053d2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80053d4:	4639      	mov	r1, r7
 80053d6:	4630      	mov	r0, r6
 80053d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	2301      	movs	r3, #1
 80053de:	f000 b803 	b.w	80053e8 <__strtok_r>
 80053e2:	bf00      	nop
 80053e4:	20000020 	.word	0x20000020

080053e8 <__strtok_r>:
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	b918      	cbnz	r0, 80053f4 <__strtok_r+0xc>
 80053ec:	6810      	ldr	r0, [r2, #0]
 80053ee:	b908      	cbnz	r0, 80053f4 <__strtok_r+0xc>
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f2:	4620      	mov	r0, r4
 80053f4:	4604      	mov	r4, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053fc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005400:	b91e      	cbnz	r6, 800540a <__strtok_r+0x22>
 8005402:	b96d      	cbnz	r5, 8005420 <__strtok_r+0x38>
 8005404:	6015      	str	r5, [r2, #0]
 8005406:	4628      	mov	r0, r5
 8005408:	e7f2      	b.n	80053f0 <__strtok_r+0x8>
 800540a:	42b5      	cmp	r5, r6
 800540c:	d1f6      	bne.n	80053fc <__strtok_r+0x14>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1ef      	bne.n	80053f2 <__strtok_r+0xa>
 8005412:	6014      	str	r4, [r2, #0]
 8005414:	7003      	strb	r3, [r0, #0]
 8005416:	e7eb      	b.n	80053f0 <__strtok_r+0x8>
 8005418:	462b      	mov	r3, r5
 800541a:	e00d      	b.n	8005438 <__strtok_r+0x50>
 800541c:	b926      	cbnz	r6, 8005428 <__strtok_r+0x40>
 800541e:	461c      	mov	r4, r3
 8005420:	4623      	mov	r3, r4
 8005422:	460f      	mov	r7, r1
 8005424:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005428:	f817 6b01 	ldrb.w	r6, [r7], #1
 800542c:	42b5      	cmp	r5, r6
 800542e:	d1f5      	bne.n	800541c <__strtok_r+0x34>
 8005430:	2d00      	cmp	r5, #0
 8005432:	d0f1      	beq.n	8005418 <__strtok_r+0x30>
 8005434:	2100      	movs	r1, #0
 8005436:	7021      	strb	r1, [r4, #0]
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e7d9      	b.n	80053f0 <__strtok_r+0x8>

0800543c <_strtol_l.isra.0>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4680      	mov	r8, r0
 8005442:	4689      	mov	r9, r1
 8005444:	4692      	mov	sl, r2
 8005446:	461e      	mov	r6, r3
 8005448:	460f      	mov	r7, r1
 800544a:	463d      	mov	r5, r7
 800544c:	9808      	ldr	r0, [sp, #32]
 800544e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005452:	f000 fbeb 	bl	8005c2c <__locale_ctype_ptr_l>
 8005456:	4420      	add	r0, r4
 8005458:	7843      	ldrb	r3, [r0, #1]
 800545a:	f013 0308 	ands.w	r3, r3, #8
 800545e:	d132      	bne.n	80054c6 <_strtol_l.isra.0+0x8a>
 8005460:	2c2d      	cmp	r4, #45	; 0x2d
 8005462:	d132      	bne.n	80054ca <_strtol_l.isra.0+0x8e>
 8005464:	2201      	movs	r2, #1
 8005466:	787c      	ldrb	r4, [r7, #1]
 8005468:	1cbd      	adds	r5, r7, #2
 800546a:	2e00      	cmp	r6, #0
 800546c:	d05d      	beq.n	800552a <_strtol_l.isra.0+0xee>
 800546e:	2e10      	cmp	r6, #16
 8005470:	d109      	bne.n	8005486 <_strtol_l.isra.0+0x4a>
 8005472:	2c30      	cmp	r4, #48	; 0x30
 8005474:	d107      	bne.n	8005486 <_strtol_l.isra.0+0x4a>
 8005476:	782b      	ldrb	r3, [r5, #0]
 8005478:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800547c:	2b58      	cmp	r3, #88	; 0x58
 800547e:	d14f      	bne.n	8005520 <_strtol_l.isra.0+0xe4>
 8005480:	2610      	movs	r6, #16
 8005482:	786c      	ldrb	r4, [r5, #1]
 8005484:	3502      	adds	r5, #2
 8005486:	2a00      	cmp	r2, #0
 8005488:	bf14      	ite	ne
 800548a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800548e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005492:	2700      	movs	r7, #0
 8005494:	fbb1 fcf6 	udiv	ip, r1, r6
 8005498:	4638      	mov	r0, r7
 800549a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800549e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80054a2:	2b09      	cmp	r3, #9
 80054a4:	d817      	bhi.n	80054d6 <_strtol_l.isra.0+0x9a>
 80054a6:	461c      	mov	r4, r3
 80054a8:	42a6      	cmp	r6, r4
 80054aa:	dd23      	ble.n	80054f4 <_strtol_l.isra.0+0xb8>
 80054ac:	1c7b      	adds	r3, r7, #1
 80054ae:	d007      	beq.n	80054c0 <_strtol_l.isra.0+0x84>
 80054b0:	4584      	cmp	ip, r0
 80054b2:	d31c      	bcc.n	80054ee <_strtol_l.isra.0+0xb2>
 80054b4:	d101      	bne.n	80054ba <_strtol_l.isra.0+0x7e>
 80054b6:	45a6      	cmp	lr, r4
 80054b8:	db19      	blt.n	80054ee <_strtol_l.isra.0+0xb2>
 80054ba:	2701      	movs	r7, #1
 80054bc:	fb00 4006 	mla	r0, r0, r6, r4
 80054c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054c4:	e7eb      	b.n	800549e <_strtol_l.isra.0+0x62>
 80054c6:	462f      	mov	r7, r5
 80054c8:	e7bf      	b.n	800544a <_strtol_l.isra.0+0xe>
 80054ca:	2c2b      	cmp	r4, #43	; 0x2b
 80054cc:	bf04      	itt	eq
 80054ce:	1cbd      	addeq	r5, r7, #2
 80054d0:	787c      	ldrbeq	r4, [r7, #1]
 80054d2:	461a      	mov	r2, r3
 80054d4:	e7c9      	b.n	800546a <_strtol_l.isra.0+0x2e>
 80054d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80054da:	2b19      	cmp	r3, #25
 80054dc:	d801      	bhi.n	80054e2 <_strtol_l.isra.0+0xa6>
 80054de:	3c37      	subs	r4, #55	; 0x37
 80054e0:	e7e2      	b.n	80054a8 <_strtol_l.isra.0+0x6c>
 80054e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80054e6:	2b19      	cmp	r3, #25
 80054e8:	d804      	bhi.n	80054f4 <_strtol_l.isra.0+0xb8>
 80054ea:	3c57      	subs	r4, #87	; 0x57
 80054ec:	e7dc      	b.n	80054a8 <_strtol_l.isra.0+0x6c>
 80054ee:	f04f 37ff 	mov.w	r7, #4294967295
 80054f2:	e7e5      	b.n	80054c0 <_strtol_l.isra.0+0x84>
 80054f4:	1c7b      	adds	r3, r7, #1
 80054f6:	d108      	bne.n	800550a <_strtol_l.isra.0+0xce>
 80054f8:	2322      	movs	r3, #34	; 0x22
 80054fa:	4608      	mov	r0, r1
 80054fc:	f8c8 3000 	str.w	r3, [r8]
 8005500:	f1ba 0f00 	cmp.w	sl, #0
 8005504:	d107      	bne.n	8005516 <_strtol_l.isra.0+0xda>
 8005506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550a:	b102      	cbz	r2, 800550e <_strtol_l.isra.0+0xd2>
 800550c:	4240      	negs	r0, r0
 800550e:	f1ba 0f00 	cmp.w	sl, #0
 8005512:	d0f8      	beq.n	8005506 <_strtol_l.isra.0+0xca>
 8005514:	b10f      	cbz	r7, 800551a <_strtol_l.isra.0+0xde>
 8005516:	f105 39ff 	add.w	r9, r5, #4294967295
 800551a:	f8ca 9000 	str.w	r9, [sl]
 800551e:	e7f2      	b.n	8005506 <_strtol_l.isra.0+0xca>
 8005520:	2430      	movs	r4, #48	; 0x30
 8005522:	2e00      	cmp	r6, #0
 8005524:	d1af      	bne.n	8005486 <_strtol_l.isra.0+0x4a>
 8005526:	2608      	movs	r6, #8
 8005528:	e7ad      	b.n	8005486 <_strtol_l.isra.0+0x4a>
 800552a:	2c30      	cmp	r4, #48	; 0x30
 800552c:	d0a3      	beq.n	8005476 <_strtol_l.isra.0+0x3a>
 800552e:	260a      	movs	r6, #10
 8005530:	e7a9      	b.n	8005486 <_strtol_l.isra.0+0x4a>
	...

08005534 <strtol>:
 8005534:	4b08      	ldr	r3, [pc, #32]	; (8005558 <strtol+0x24>)
 8005536:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005538:	681c      	ldr	r4, [r3, #0]
 800553a:	4d08      	ldr	r5, [pc, #32]	; (800555c <strtol+0x28>)
 800553c:	6a23      	ldr	r3, [r4, #32]
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf08      	it	eq
 8005542:	462b      	moveq	r3, r5
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	460a      	mov	r2, r1
 800554a:	4601      	mov	r1, r0
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff75 	bl	800543c <_strtol_l.isra.0>
 8005552:	b003      	add	sp, #12
 8005554:	bd30      	pop	{r4, r5, pc}
 8005556:	bf00      	nop
 8005558:	20000020 	.word	0x20000020
 800555c:	20000084 	.word	0x20000084

08005560 <__utoa>:
 8005560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	466e      	mov	r6, sp
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <__utoa+0x78>)
 800556c:	f103 0c20 	add.w	ip, r3, #32
 8005570:	4637      	mov	r7, r6
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	3308      	adds	r3, #8
 8005578:	c703      	stmia	r7!, {r0, r1}
 800557a:	4563      	cmp	r3, ip
 800557c:	463e      	mov	r6, r7
 800557e:	d1f7      	bne.n	8005570 <__utoa+0x10>
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	6038      	str	r0, [r7, #0]
 8005586:	713b      	strb	r3, [r7, #4]
 8005588:	1e93      	subs	r3, r2, #2
 800558a:	2b22      	cmp	r3, #34	; 0x22
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	d904      	bls.n	800559c <__utoa+0x3c>
 8005592:	7023      	strb	r3, [r4, #0]
 8005594:	461c      	mov	r4, r3
 8005596:	4620      	mov	r0, r4
 8005598:	b00b      	add	sp, #44	; 0x2c
 800559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559c:	1e66      	subs	r6, r4, #1
 800559e:	fbb5 f0f2 	udiv	r0, r5, r2
 80055a2:	fb02 5510 	mls	r5, r2, r0, r5
 80055a6:	af0a      	add	r7, sp, #40	; 0x28
 80055a8:	443d      	add	r5, r7
 80055aa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80055ae:	1c59      	adds	r1, r3, #1
 80055b0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80055b4:	4605      	mov	r5, r0
 80055b6:	b968      	cbnz	r0, 80055d4 <__utoa+0x74>
 80055b8:	4622      	mov	r2, r4
 80055ba:	5460      	strb	r0, [r4, r1]
 80055bc:	4423      	add	r3, r4
 80055be:	1b19      	subs	r1, r3, r4
 80055c0:	1b10      	subs	r0, r2, r4
 80055c2:	4281      	cmp	r1, r0
 80055c4:	dde7      	ble.n	8005596 <__utoa+0x36>
 80055c6:	7811      	ldrb	r1, [r2, #0]
 80055c8:	7818      	ldrb	r0, [r3, #0]
 80055ca:	f802 0b01 	strb.w	r0, [r2], #1
 80055ce:	f803 1901 	strb.w	r1, [r3], #-1
 80055d2:	e7f4      	b.n	80055be <__utoa+0x5e>
 80055d4:	460b      	mov	r3, r1
 80055d6:	e7e2      	b.n	800559e <__utoa+0x3e>
 80055d8:	08006658 	.word	0x08006658

080055dc <rshift>:
 80055dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055de:	6906      	ldr	r6, [r0, #16]
 80055e0:	114b      	asrs	r3, r1, #5
 80055e2:	429e      	cmp	r6, r3
 80055e4:	f100 0414 	add.w	r4, r0, #20
 80055e8:	dd31      	ble.n	800564e <rshift+0x72>
 80055ea:	f011 011f 	ands.w	r1, r1, #31
 80055ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80055f2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80055f6:	d108      	bne.n	800560a <rshift+0x2e>
 80055f8:	4621      	mov	r1, r4
 80055fa:	42b2      	cmp	r2, r6
 80055fc:	460b      	mov	r3, r1
 80055fe:	d211      	bcs.n	8005624 <rshift+0x48>
 8005600:	f852 3b04 	ldr.w	r3, [r2], #4
 8005604:	f841 3b04 	str.w	r3, [r1], #4
 8005608:	e7f7      	b.n	80055fa <rshift+0x1e>
 800560a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800560e:	4623      	mov	r3, r4
 8005610:	f1c1 0c20 	rsb	ip, r1, #32
 8005614:	40cd      	lsrs	r5, r1
 8005616:	3204      	adds	r2, #4
 8005618:	42b2      	cmp	r2, r6
 800561a:	4617      	mov	r7, r2
 800561c:	d30d      	bcc.n	800563a <rshift+0x5e>
 800561e:	601d      	str	r5, [r3, #0]
 8005620:	b105      	cbz	r5, 8005624 <rshift+0x48>
 8005622:	3304      	adds	r3, #4
 8005624:	42a3      	cmp	r3, r4
 8005626:	eba3 0204 	sub.w	r2, r3, r4
 800562a:	bf08      	it	eq
 800562c:	2300      	moveq	r3, #0
 800562e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005632:	6102      	str	r2, [r0, #16]
 8005634:	bf08      	it	eq
 8005636:	6143      	streq	r3, [r0, #20]
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800563a:	683f      	ldr	r7, [r7, #0]
 800563c:	fa07 f70c 	lsl.w	r7, r7, ip
 8005640:	433d      	orrs	r5, r7
 8005642:	f843 5b04 	str.w	r5, [r3], #4
 8005646:	f852 5b04 	ldr.w	r5, [r2], #4
 800564a:	40cd      	lsrs	r5, r1
 800564c:	e7e4      	b.n	8005618 <rshift+0x3c>
 800564e:	4623      	mov	r3, r4
 8005650:	e7e8      	b.n	8005624 <rshift+0x48>

08005652 <__hexdig_fun>:
 8005652:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005656:	2b09      	cmp	r3, #9
 8005658:	d802      	bhi.n	8005660 <__hexdig_fun+0xe>
 800565a:	3820      	subs	r0, #32
 800565c:	b2c0      	uxtb	r0, r0
 800565e:	4770      	bx	lr
 8005660:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005664:	2b05      	cmp	r3, #5
 8005666:	d801      	bhi.n	800566c <__hexdig_fun+0x1a>
 8005668:	3847      	subs	r0, #71	; 0x47
 800566a:	e7f7      	b.n	800565c <__hexdig_fun+0xa>
 800566c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005670:	2b05      	cmp	r3, #5
 8005672:	d801      	bhi.n	8005678 <__hexdig_fun+0x26>
 8005674:	3827      	subs	r0, #39	; 0x27
 8005676:	e7f1      	b.n	800565c <__hexdig_fun+0xa>
 8005678:	2000      	movs	r0, #0
 800567a:	4770      	bx	lr

0800567c <__gethex>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	b08b      	sub	sp, #44	; 0x2c
 8005682:	9002      	str	r0, [sp, #8]
 8005684:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005686:	468a      	mov	sl, r1
 8005688:	4690      	mov	r8, r2
 800568a:	9306      	str	r3, [sp, #24]
 800568c:	f000 fad1 	bl	8005c32 <__localeconv_l>
 8005690:	6803      	ldr	r3, [r0, #0]
 8005692:	f04f 0b00 	mov.w	fp, #0
 8005696:	4618      	mov	r0, r3
 8005698:	9303      	str	r3, [sp, #12]
 800569a:	f7fa fd59 	bl	8000150 <strlen>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	9001      	str	r0, [sp, #4]
 80056a2:	4403      	add	r3, r0
 80056a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80056a8:	9307      	str	r3, [sp, #28]
 80056aa:	f8da 3000 	ldr.w	r3, [sl]
 80056ae:	3302      	adds	r3, #2
 80056b0:	461f      	mov	r7, r3
 80056b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80056b6:	2830      	cmp	r0, #48	; 0x30
 80056b8:	d06c      	beq.n	8005794 <__gethex+0x118>
 80056ba:	f7ff ffca 	bl	8005652 <__hexdig_fun>
 80056be:	4604      	mov	r4, r0
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d16a      	bne.n	800579a <__gethex+0x11e>
 80056c4:	9a01      	ldr	r2, [sp, #4]
 80056c6:	9903      	ldr	r1, [sp, #12]
 80056c8:	4638      	mov	r0, r7
 80056ca:	f000 ff3f 	bl	800654c <strncmp>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d166      	bne.n	80057a0 <__gethex+0x124>
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	5cf8      	ldrb	r0, [r7, r3]
 80056d6:	18fe      	adds	r6, r7, r3
 80056d8:	f7ff ffbb 	bl	8005652 <__hexdig_fun>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d062      	beq.n	80057a6 <__gethex+0x12a>
 80056e0:	4633      	mov	r3, r6
 80056e2:	7818      	ldrb	r0, [r3, #0]
 80056e4:	461f      	mov	r7, r3
 80056e6:	2830      	cmp	r0, #48	; 0x30
 80056e8:	f103 0301 	add.w	r3, r3, #1
 80056ec:	d0f9      	beq.n	80056e2 <__gethex+0x66>
 80056ee:	f7ff ffb0 	bl	8005652 <__hexdig_fun>
 80056f2:	fab0 f580 	clz	r5, r0
 80056f6:	4634      	mov	r4, r6
 80056f8:	f04f 0b01 	mov.w	fp, #1
 80056fc:	096d      	lsrs	r5, r5, #5
 80056fe:	463a      	mov	r2, r7
 8005700:	4616      	mov	r6, r2
 8005702:	7830      	ldrb	r0, [r6, #0]
 8005704:	3201      	adds	r2, #1
 8005706:	f7ff ffa4 	bl	8005652 <__hexdig_fun>
 800570a:	2800      	cmp	r0, #0
 800570c:	d1f8      	bne.n	8005700 <__gethex+0x84>
 800570e:	9a01      	ldr	r2, [sp, #4]
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	4630      	mov	r0, r6
 8005714:	f000 ff1a 	bl	800654c <strncmp>
 8005718:	b950      	cbnz	r0, 8005730 <__gethex+0xb4>
 800571a:	b954      	cbnz	r4, 8005732 <__gethex+0xb6>
 800571c:	9b01      	ldr	r3, [sp, #4]
 800571e:	18f4      	adds	r4, r6, r3
 8005720:	4622      	mov	r2, r4
 8005722:	4616      	mov	r6, r2
 8005724:	7830      	ldrb	r0, [r6, #0]
 8005726:	3201      	adds	r2, #1
 8005728:	f7ff ff93 	bl	8005652 <__hexdig_fun>
 800572c:	2800      	cmp	r0, #0
 800572e:	d1f8      	bne.n	8005722 <__gethex+0xa6>
 8005730:	b10c      	cbz	r4, 8005736 <__gethex+0xba>
 8005732:	1ba4      	subs	r4, r4, r6
 8005734:	00a4      	lsls	r4, r4, #2
 8005736:	7833      	ldrb	r3, [r6, #0]
 8005738:	2b50      	cmp	r3, #80	; 0x50
 800573a:	d001      	beq.n	8005740 <__gethex+0xc4>
 800573c:	2b70      	cmp	r3, #112	; 0x70
 800573e:	d140      	bne.n	80057c2 <__gethex+0x146>
 8005740:	7873      	ldrb	r3, [r6, #1]
 8005742:	2b2b      	cmp	r3, #43	; 0x2b
 8005744:	d031      	beq.n	80057aa <__gethex+0x12e>
 8005746:	2b2d      	cmp	r3, #45	; 0x2d
 8005748:	d033      	beq.n	80057b2 <__gethex+0x136>
 800574a:	f04f 0900 	mov.w	r9, #0
 800574e:	1c71      	adds	r1, r6, #1
 8005750:	7808      	ldrb	r0, [r1, #0]
 8005752:	f7ff ff7e 	bl	8005652 <__hexdig_fun>
 8005756:	1e43      	subs	r3, r0, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b18      	cmp	r3, #24
 800575c:	d831      	bhi.n	80057c2 <__gethex+0x146>
 800575e:	f1a0 0210 	sub.w	r2, r0, #16
 8005762:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005766:	f7ff ff74 	bl	8005652 <__hexdig_fun>
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b18      	cmp	r3, #24
 8005770:	d922      	bls.n	80057b8 <__gethex+0x13c>
 8005772:	f1b9 0f00 	cmp.w	r9, #0
 8005776:	d000      	beq.n	800577a <__gethex+0xfe>
 8005778:	4252      	negs	r2, r2
 800577a:	4414      	add	r4, r2
 800577c:	f8ca 1000 	str.w	r1, [sl]
 8005780:	b30d      	cbz	r5, 80057c6 <__gethex+0x14a>
 8005782:	f1bb 0f00 	cmp.w	fp, #0
 8005786:	bf0c      	ite	eq
 8005788:	2706      	moveq	r7, #6
 800578a:	2700      	movne	r7, #0
 800578c:	4638      	mov	r0, r7
 800578e:	b00b      	add	sp, #44	; 0x2c
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	f10b 0b01 	add.w	fp, fp, #1
 8005798:	e78a      	b.n	80056b0 <__gethex+0x34>
 800579a:	2500      	movs	r5, #0
 800579c:	462c      	mov	r4, r5
 800579e:	e7ae      	b.n	80056fe <__gethex+0x82>
 80057a0:	463e      	mov	r6, r7
 80057a2:	2501      	movs	r5, #1
 80057a4:	e7c7      	b.n	8005736 <__gethex+0xba>
 80057a6:	4604      	mov	r4, r0
 80057a8:	e7fb      	b.n	80057a2 <__gethex+0x126>
 80057aa:	f04f 0900 	mov.w	r9, #0
 80057ae:	1cb1      	adds	r1, r6, #2
 80057b0:	e7ce      	b.n	8005750 <__gethex+0xd4>
 80057b2:	f04f 0901 	mov.w	r9, #1
 80057b6:	e7fa      	b.n	80057ae <__gethex+0x132>
 80057b8:	230a      	movs	r3, #10
 80057ba:	fb03 0202 	mla	r2, r3, r2, r0
 80057be:	3a10      	subs	r2, #16
 80057c0:	e7cf      	b.n	8005762 <__gethex+0xe6>
 80057c2:	4631      	mov	r1, r6
 80057c4:	e7da      	b.n	800577c <__gethex+0x100>
 80057c6:	4629      	mov	r1, r5
 80057c8:	1bf3      	subs	r3, r6, r7
 80057ca:	3b01      	subs	r3, #1
 80057cc:	2b07      	cmp	r3, #7
 80057ce:	dc49      	bgt.n	8005864 <__gethex+0x1e8>
 80057d0:	9802      	ldr	r0, [sp, #8]
 80057d2:	f000 fa4b 	bl	8005c6c <_Balloc>
 80057d6:	f04f 0b00 	mov.w	fp, #0
 80057da:	4605      	mov	r5, r0
 80057dc:	46da      	mov	sl, fp
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	f100 0914 	add.w	r9, r0, #20
 80057e4:	f1c3 0301 	rsb	r3, r3, #1
 80057e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80057ec:	9308      	str	r3, [sp, #32]
 80057ee:	42b7      	cmp	r7, r6
 80057f0:	d33b      	bcc.n	800586a <__gethex+0x1ee>
 80057f2:	9804      	ldr	r0, [sp, #16]
 80057f4:	f840 ab04 	str.w	sl, [r0], #4
 80057f8:	eba0 0009 	sub.w	r0, r0, r9
 80057fc:	1080      	asrs	r0, r0, #2
 80057fe:	6128      	str	r0, [r5, #16]
 8005800:	0147      	lsls	r7, r0, #5
 8005802:	4650      	mov	r0, sl
 8005804:	f000 faf6 	bl	8005df4 <__hi0bits>
 8005808:	f8d8 6000 	ldr.w	r6, [r8]
 800580c:	1a3f      	subs	r7, r7, r0
 800580e:	42b7      	cmp	r7, r6
 8005810:	dd64      	ble.n	80058dc <__gethex+0x260>
 8005812:	1bbf      	subs	r7, r7, r6
 8005814:	4639      	mov	r1, r7
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fdff 	bl	800641a <__any_on>
 800581c:	4682      	mov	sl, r0
 800581e:	b178      	cbz	r0, 8005840 <__gethex+0x1c4>
 8005820:	f04f 0a01 	mov.w	sl, #1
 8005824:	1e7b      	subs	r3, r7, #1
 8005826:	1159      	asrs	r1, r3, #5
 8005828:	f003 021f 	and.w	r2, r3, #31
 800582c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005830:	fa0a f202 	lsl.w	r2, sl, r2
 8005834:	420a      	tst	r2, r1
 8005836:	d003      	beq.n	8005840 <__gethex+0x1c4>
 8005838:	4553      	cmp	r3, sl
 800583a:	dc46      	bgt.n	80058ca <__gethex+0x24e>
 800583c:	f04f 0a02 	mov.w	sl, #2
 8005840:	4639      	mov	r1, r7
 8005842:	4628      	mov	r0, r5
 8005844:	f7ff feca 	bl	80055dc <rshift>
 8005848:	443c      	add	r4, r7
 800584a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800584e:	42a3      	cmp	r3, r4
 8005850:	da52      	bge.n	80058f8 <__gethex+0x27c>
 8005852:	4629      	mov	r1, r5
 8005854:	9802      	ldr	r0, [sp, #8]
 8005856:	f000 fa3d 	bl	8005cd4 <_Bfree>
 800585a:	2300      	movs	r3, #0
 800585c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800585e:	27a3      	movs	r7, #163	; 0xa3
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e793      	b.n	800578c <__gethex+0x110>
 8005864:	3101      	adds	r1, #1
 8005866:	105b      	asrs	r3, r3, #1
 8005868:	e7b0      	b.n	80057cc <__gethex+0x150>
 800586a:	1e73      	subs	r3, r6, #1
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	9a07      	ldr	r2, [sp, #28]
 8005870:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005874:	4293      	cmp	r3, r2
 8005876:	d018      	beq.n	80058aa <__gethex+0x22e>
 8005878:	f1bb 0f20 	cmp.w	fp, #32
 800587c:	d107      	bne.n	800588e <__gethex+0x212>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	f8c3 a000 	str.w	sl, [r3]
 8005884:	f04f 0a00 	mov.w	sl, #0
 8005888:	46d3      	mov	fp, sl
 800588a:	3304      	adds	r3, #4
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005892:	f7ff fede 	bl	8005652 <__hexdig_fun>
 8005896:	f000 000f 	and.w	r0, r0, #15
 800589a:	fa00 f00b 	lsl.w	r0, r0, fp
 800589e:	ea4a 0a00 	orr.w	sl, sl, r0
 80058a2:	f10b 0b04 	add.w	fp, fp, #4
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	e00d      	b.n	80058c6 <__gethex+0x24a>
 80058aa:	9b05      	ldr	r3, [sp, #20]
 80058ac:	9a08      	ldr	r2, [sp, #32]
 80058ae:	4413      	add	r3, r2
 80058b0:	42bb      	cmp	r3, r7
 80058b2:	d3e1      	bcc.n	8005878 <__gethex+0x1fc>
 80058b4:	4618      	mov	r0, r3
 80058b6:	9a01      	ldr	r2, [sp, #4]
 80058b8:	9903      	ldr	r1, [sp, #12]
 80058ba:	9309      	str	r3, [sp, #36]	; 0x24
 80058bc:	f000 fe46 	bl	800654c <strncmp>
 80058c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1d8      	bne.n	8005878 <__gethex+0x1fc>
 80058c6:	461e      	mov	r6, r3
 80058c8:	e791      	b.n	80057ee <__gethex+0x172>
 80058ca:	1eb9      	subs	r1, r7, #2
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 fda4 	bl	800641a <__any_on>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d0b2      	beq.n	800583c <__gethex+0x1c0>
 80058d6:	f04f 0a03 	mov.w	sl, #3
 80058da:	e7b1      	b.n	8005840 <__gethex+0x1c4>
 80058dc:	da09      	bge.n	80058f2 <__gethex+0x276>
 80058de:	1bf7      	subs	r7, r6, r7
 80058e0:	4629      	mov	r1, r5
 80058e2:	463a      	mov	r2, r7
 80058e4:	9802      	ldr	r0, [sp, #8]
 80058e6:	f000 fbbf 	bl	8006068 <__lshift>
 80058ea:	4605      	mov	r5, r0
 80058ec:	1be4      	subs	r4, r4, r7
 80058ee:	f100 0914 	add.w	r9, r0, #20
 80058f2:	f04f 0a00 	mov.w	sl, #0
 80058f6:	e7a8      	b.n	800584a <__gethex+0x1ce>
 80058f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	dd6b      	ble.n	80059d8 <__gethex+0x35c>
 8005900:	1b04      	subs	r4, r0, r4
 8005902:	42a6      	cmp	r6, r4
 8005904:	dc2e      	bgt.n	8005964 <__gethex+0x2e8>
 8005906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d022      	beq.n	8005954 <__gethex+0x2d8>
 800590e:	2b03      	cmp	r3, #3
 8005910:	d024      	beq.n	800595c <__gethex+0x2e0>
 8005912:	2b01      	cmp	r3, #1
 8005914:	d115      	bne.n	8005942 <__gethex+0x2c6>
 8005916:	42a6      	cmp	r6, r4
 8005918:	d113      	bne.n	8005942 <__gethex+0x2c6>
 800591a:	2e01      	cmp	r6, #1
 800591c:	dc0b      	bgt.n	8005936 <__gethex+0x2ba>
 800591e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005922:	9a06      	ldr	r2, [sp, #24]
 8005924:	2762      	movs	r7, #98	; 0x62
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	612b      	str	r3, [r5, #16]
 800592c:	f8c9 3000 	str.w	r3, [r9]
 8005930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005932:	601d      	str	r5, [r3, #0]
 8005934:	e72a      	b.n	800578c <__gethex+0x110>
 8005936:	1e71      	subs	r1, r6, #1
 8005938:	4628      	mov	r0, r5
 800593a:	f000 fd6e 	bl	800641a <__any_on>
 800593e:	2800      	cmp	r0, #0
 8005940:	d1ed      	bne.n	800591e <__gethex+0x2a2>
 8005942:	4629      	mov	r1, r5
 8005944:	9802      	ldr	r0, [sp, #8]
 8005946:	f000 f9c5 	bl	8005cd4 <_Bfree>
 800594a:	2300      	movs	r3, #0
 800594c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800594e:	2750      	movs	r7, #80	; 0x50
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e71b      	b.n	800578c <__gethex+0x110>
 8005954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0e1      	beq.n	800591e <__gethex+0x2a2>
 800595a:	e7f2      	b.n	8005942 <__gethex+0x2c6>
 800595c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1dd      	bne.n	800591e <__gethex+0x2a2>
 8005962:	e7ee      	b.n	8005942 <__gethex+0x2c6>
 8005964:	1e67      	subs	r7, r4, #1
 8005966:	f1ba 0f00 	cmp.w	sl, #0
 800596a:	d132      	bne.n	80059d2 <__gethex+0x356>
 800596c:	b127      	cbz	r7, 8005978 <__gethex+0x2fc>
 800596e:	4639      	mov	r1, r7
 8005970:	4628      	mov	r0, r5
 8005972:	f000 fd52 	bl	800641a <__any_on>
 8005976:	4682      	mov	sl, r0
 8005978:	2301      	movs	r3, #1
 800597a:	117a      	asrs	r2, r7, #5
 800597c:	f007 071f 	and.w	r7, r7, #31
 8005980:	fa03 f707 	lsl.w	r7, r3, r7
 8005984:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005988:	4621      	mov	r1, r4
 800598a:	421f      	tst	r7, r3
 800598c:	f04f 0702 	mov.w	r7, #2
 8005990:	4628      	mov	r0, r5
 8005992:	bf18      	it	ne
 8005994:	f04a 0a02 	orrne.w	sl, sl, #2
 8005998:	1b36      	subs	r6, r6, r4
 800599a:	f7ff fe1f 	bl	80055dc <rshift>
 800599e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80059a2:	f1ba 0f00 	cmp.w	sl, #0
 80059a6:	d048      	beq.n	8005a3a <__gethex+0x3be>
 80059a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d015      	beq.n	80059dc <__gethex+0x360>
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d017      	beq.n	80059e4 <__gethex+0x368>
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d109      	bne.n	80059cc <__gethex+0x350>
 80059b8:	f01a 0f02 	tst.w	sl, #2
 80059bc:	d006      	beq.n	80059cc <__gethex+0x350>
 80059be:	f8d9 3000 	ldr.w	r3, [r9]
 80059c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80059c6:	f01a 0f01 	tst.w	sl, #1
 80059ca:	d10e      	bne.n	80059ea <__gethex+0x36e>
 80059cc:	f047 0710 	orr.w	r7, r7, #16
 80059d0:	e033      	b.n	8005a3a <__gethex+0x3be>
 80059d2:	f04f 0a01 	mov.w	sl, #1
 80059d6:	e7cf      	b.n	8005978 <__gethex+0x2fc>
 80059d8:	2701      	movs	r7, #1
 80059da:	e7e2      	b.n	80059a2 <__gethex+0x326>
 80059dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059de:	f1c3 0301 	rsb	r3, r3, #1
 80059e2:	9315      	str	r3, [sp, #84]	; 0x54
 80059e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <__gethex+0x350>
 80059ea:	f04f 0c00 	mov.w	ip, #0
 80059ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80059f2:	f105 0314 	add.w	r3, r5, #20
 80059f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80059fa:	eb03 010a 	add.w	r1, r3, sl
 80059fe:	4618      	mov	r0, r3
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005a08:	d01c      	beq.n	8005a44 <__gethex+0x3c8>
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	6002      	str	r2, [r0, #0]
 8005a0e:	2f02      	cmp	r7, #2
 8005a10:	f105 0314 	add.w	r3, r5, #20
 8005a14:	d138      	bne.n	8005a88 <__gethex+0x40c>
 8005a16:	f8d8 2000 	ldr.w	r2, [r8]
 8005a1a:	3a01      	subs	r2, #1
 8005a1c:	42b2      	cmp	r2, r6
 8005a1e:	d10a      	bne.n	8005a36 <__gethex+0x3ba>
 8005a20:	2201      	movs	r2, #1
 8005a22:	1171      	asrs	r1, r6, #5
 8005a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a28:	f006 061f 	and.w	r6, r6, #31
 8005a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8005a30:	421e      	tst	r6, r3
 8005a32:	bf18      	it	ne
 8005a34:	4617      	movne	r7, r2
 8005a36:	f047 0720 	orr.w	r7, r7, #32
 8005a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a3c:	601d      	str	r5, [r3, #0]
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	601c      	str	r4, [r3, #0]
 8005a42:	e6a3      	b.n	800578c <__gethex+0x110>
 8005a44:	4299      	cmp	r1, r3
 8005a46:	f843 cc04 	str.w	ip, [r3, #-4]
 8005a4a:	d8d8      	bhi.n	80059fe <__gethex+0x382>
 8005a4c:	68ab      	ldr	r3, [r5, #8]
 8005a4e:	4599      	cmp	r9, r3
 8005a50:	db12      	blt.n	8005a78 <__gethex+0x3fc>
 8005a52:	6869      	ldr	r1, [r5, #4]
 8005a54:	9802      	ldr	r0, [sp, #8]
 8005a56:	3101      	adds	r1, #1
 8005a58:	f000 f908 	bl	8005c6c <_Balloc>
 8005a5c:	4683      	mov	fp, r0
 8005a5e:	692a      	ldr	r2, [r5, #16]
 8005a60:	f105 010c 	add.w	r1, r5, #12
 8005a64:	3202      	adds	r2, #2
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	300c      	adds	r0, #12
 8005a6a:	f7fe fe19 	bl	80046a0 <memcpy>
 8005a6e:	4629      	mov	r1, r5
 8005a70:	9802      	ldr	r0, [sp, #8]
 8005a72:	f000 f92f 	bl	8005cd4 <_Bfree>
 8005a76:	465d      	mov	r5, fp
 8005a78:	692b      	ldr	r3, [r5, #16]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	612a      	str	r2, [r5, #16]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005a84:	615a      	str	r2, [r3, #20]
 8005a86:	e7c2      	b.n	8005a0e <__gethex+0x392>
 8005a88:	692a      	ldr	r2, [r5, #16]
 8005a8a:	454a      	cmp	r2, r9
 8005a8c:	dd0b      	ble.n	8005aa6 <__gethex+0x42a>
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4628      	mov	r0, r5
 8005a92:	f7ff fda3 	bl	80055dc <rshift>
 8005a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a9a:	3401      	adds	r4, #1
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	f6ff aed8 	blt.w	8005852 <__gethex+0x1d6>
 8005aa2:	2701      	movs	r7, #1
 8005aa4:	e7c7      	b.n	8005a36 <__gethex+0x3ba>
 8005aa6:	f016 061f 	ands.w	r6, r6, #31
 8005aaa:	d0fa      	beq.n	8005aa2 <__gethex+0x426>
 8005aac:	449a      	add	sl, r3
 8005aae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005ab2:	f000 f99f 	bl	8005df4 <__hi0bits>
 8005ab6:	f1c6 0620 	rsb	r6, r6, #32
 8005aba:	42b0      	cmp	r0, r6
 8005abc:	dbe7      	blt.n	8005a8e <__gethex+0x412>
 8005abe:	e7f0      	b.n	8005aa2 <__gethex+0x426>

08005ac0 <L_shift>:
 8005ac0:	f1c2 0208 	rsb	r2, r2, #8
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	b570      	push	{r4, r5, r6, lr}
 8005ac8:	f1c2 0620 	rsb	r6, r2, #32
 8005acc:	6843      	ldr	r3, [r0, #4]
 8005ace:	6804      	ldr	r4, [r0, #0]
 8005ad0:	fa03 f506 	lsl.w	r5, r3, r6
 8005ad4:	432c      	orrs	r4, r5
 8005ad6:	40d3      	lsrs	r3, r2
 8005ad8:	6004      	str	r4, [r0, #0]
 8005ada:	f840 3f04 	str.w	r3, [r0, #4]!
 8005ade:	4288      	cmp	r0, r1
 8005ae0:	d3f4      	bcc.n	8005acc <L_shift+0xc>
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}

08005ae4 <__match>:
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	6803      	ldr	r3, [r0, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aee:	b914      	cbnz	r4, 8005af6 <__match+0x12>
 8005af0:	6003      	str	r3, [r0, #0]
 8005af2:	2001      	movs	r0, #1
 8005af4:	bd30      	pop	{r4, r5, pc}
 8005af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005afe:	2d19      	cmp	r5, #25
 8005b00:	bf98      	it	ls
 8005b02:	3220      	addls	r2, #32
 8005b04:	42a2      	cmp	r2, r4
 8005b06:	d0f0      	beq.n	8005aea <__match+0x6>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7f3      	b.n	8005af4 <__match+0x10>

08005b0c <__hexnan>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	2500      	movs	r5, #0
 8005b12:	680b      	ldr	r3, [r1, #0]
 8005b14:	4682      	mov	sl, r0
 8005b16:	115f      	asrs	r7, r3, #5
 8005b18:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005b1c:	f013 031f 	ands.w	r3, r3, #31
 8005b20:	bf18      	it	ne
 8005b22:	3704      	addne	r7, #4
 8005b24:	1f3e      	subs	r6, r7, #4
 8005b26:	4690      	mov	r8, r2
 8005b28:	46b1      	mov	r9, r6
 8005b2a:	4634      	mov	r4, r6
 8005b2c:	46ab      	mov	fp, r5
 8005b2e:	b087      	sub	sp, #28
 8005b30:	6801      	ldr	r1, [r0, #0]
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	f847 5c04 	str.w	r5, [r7, #-4]
 8005b38:	9502      	str	r5, [sp, #8]
 8005b3a:	784a      	ldrb	r2, [r1, #1]
 8005b3c:	1c4b      	adds	r3, r1, #1
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	b342      	cbz	r2, 8005b94 <__hexnan+0x88>
 8005b42:	4610      	mov	r0, r2
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	9204      	str	r2, [sp, #16]
 8005b48:	f7ff fd83 	bl	8005652 <__hexdig_fun>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d143      	bne.n	8005bd8 <__hexnan+0xcc>
 8005b50:	9a04      	ldr	r2, [sp, #16]
 8005b52:	9905      	ldr	r1, [sp, #20]
 8005b54:	2a20      	cmp	r2, #32
 8005b56:	d818      	bhi.n	8005b8a <__hexnan+0x7e>
 8005b58:	9b02      	ldr	r3, [sp, #8]
 8005b5a:	459b      	cmp	fp, r3
 8005b5c:	dd13      	ble.n	8005b86 <__hexnan+0x7a>
 8005b5e:	454c      	cmp	r4, r9
 8005b60:	d206      	bcs.n	8005b70 <__hexnan+0x64>
 8005b62:	2d07      	cmp	r5, #7
 8005b64:	dc04      	bgt.n	8005b70 <__hexnan+0x64>
 8005b66:	462a      	mov	r2, r5
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff ffa8 	bl	8005ac0 <L_shift>
 8005b70:	4544      	cmp	r4, r8
 8005b72:	d944      	bls.n	8005bfe <__hexnan+0xf2>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f1a4 0904 	sub.w	r9, r4, #4
 8005b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b7e:	461d      	mov	r5, r3
 8005b80:	464c      	mov	r4, r9
 8005b82:	f8cd b008 	str.w	fp, [sp, #8]
 8005b86:	9903      	ldr	r1, [sp, #12]
 8005b88:	e7d7      	b.n	8005b3a <__hexnan+0x2e>
 8005b8a:	2a29      	cmp	r2, #41	; 0x29
 8005b8c:	d14a      	bne.n	8005c24 <__hexnan+0x118>
 8005b8e:	3102      	adds	r1, #2
 8005b90:	f8ca 1000 	str.w	r1, [sl]
 8005b94:	f1bb 0f00 	cmp.w	fp, #0
 8005b98:	d044      	beq.n	8005c24 <__hexnan+0x118>
 8005b9a:	454c      	cmp	r4, r9
 8005b9c:	d206      	bcs.n	8005bac <__hexnan+0xa0>
 8005b9e:	2d07      	cmp	r5, #7
 8005ba0:	dc04      	bgt.n	8005bac <__hexnan+0xa0>
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff ff8a 	bl	8005ac0 <L_shift>
 8005bac:	4544      	cmp	r4, r8
 8005bae:	d928      	bls.n	8005c02 <__hexnan+0xf6>
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	f854 2b04 	ldr.w	r2, [r4], #4
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	f843 2b04 	str.w	r2, [r3], #4
 8005bbc:	d2f9      	bcs.n	8005bb2 <__hexnan+0xa6>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f843 2b04 	str.w	r2, [r3], #4
 8005bc4:	429e      	cmp	r6, r3
 8005bc6:	d2fb      	bcs.n	8005bc0 <__hexnan+0xb4>
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	b91b      	cbnz	r3, 8005bd4 <__hexnan+0xc8>
 8005bcc:	4546      	cmp	r6, r8
 8005bce:	d127      	bne.n	8005c20 <__hexnan+0x114>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	2005      	movs	r0, #5
 8005bd6:	e026      	b.n	8005c26 <__hexnan+0x11a>
 8005bd8:	3501      	adds	r5, #1
 8005bda:	2d08      	cmp	r5, #8
 8005bdc:	f10b 0b01 	add.w	fp, fp, #1
 8005be0:	dd06      	ble.n	8005bf0 <__hexnan+0xe4>
 8005be2:	4544      	cmp	r4, r8
 8005be4:	d9cf      	bls.n	8005b86 <__hexnan+0x7a>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2501      	movs	r5, #1
 8005bea:	f844 3c04 	str.w	r3, [r4, #-4]
 8005bee:	3c04      	subs	r4, #4
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	f000 000f 	and.w	r0, r0, #15
 8005bf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005bfa:	6020      	str	r0, [r4, #0]
 8005bfc:	e7c3      	b.n	8005b86 <__hexnan+0x7a>
 8005bfe:	2508      	movs	r5, #8
 8005c00:	e7c1      	b.n	8005b86 <__hexnan+0x7a>
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0df      	beq.n	8005bc8 <__hexnan+0xbc>
 8005c08:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0c:	f1c3 0320 	rsb	r3, r3, #32
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005c18:	401a      	ands	r2, r3
 8005c1a:	f847 2c04 	str.w	r2, [r7, #-4]
 8005c1e:	e7d3      	b.n	8005bc8 <__hexnan+0xbc>
 8005c20:	3e04      	subs	r6, #4
 8005c22:	e7d1      	b.n	8005bc8 <__hexnan+0xbc>
 8005c24:	2004      	movs	r0, #4
 8005c26:	b007      	add	sp, #28
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c2c <__locale_ctype_ptr_l>:
 8005c2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005c30:	4770      	bx	lr

08005c32 <__localeconv_l>:
 8005c32:	30f0      	adds	r0, #240	; 0xf0
 8005c34:	4770      	bx	lr
	...

08005c38 <malloc>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <malloc+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f000 bc1b 	b.w	8006478 <_malloc_r>
 8005c42:	bf00      	nop
 8005c44:	20000020 	.word	0x20000020

08005c48 <__ascii_mbtowc>:
 8005c48:	b082      	sub	sp, #8
 8005c4a:	b901      	cbnz	r1, 8005c4e <__ascii_mbtowc+0x6>
 8005c4c:	a901      	add	r1, sp, #4
 8005c4e:	b142      	cbz	r2, 8005c62 <__ascii_mbtowc+0x1a>
 8005c50:	b14b      	cbz	r3, 8005c66 <__ascii_mbtowc+0x1e>
 8005c52:	7813      	ldrb	r3, [r2, #0]
 8005c54:	600b      	str	r3, [r1, #0]
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	1c10      	adds	r0, r2, #0
 8005c5a:	bf18      	it	ne
 8005c5c:	2001      	movne	r0, #1
 8005c5e:	b002      	add	sp, #8
 8005c60:	4770      	bx	lr
 8005c62:	4610      	mov	r0, r2
 8005c64:	e7fb      	b.n	8005c5e <__ascii_mbtowc+0x16>
 8005c66:	f06f 0001 	mvn.w	r0, #1
 8005c6a:	e7f8      	b.n	8005c5e <__ascii_mbtowc+0x16>

08005c6c <_Balloc>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c70:	4604      	mov	r4, r0
 8005c72:	460e      	mov	r6, r1
 8005c74:	b93d      	cbnz	r5, 8005c86 <_Balloc+0x1a>
 8005c76:	2010      	movs	r0, #16
 8005c78:	f7ff ffde 	bl	8005c38 <malloc>
 8005c7c:	6260      	str	r0, [r4, #36]	; 0x24
 8005c7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c82:	6005      	str	r5, [r0, #0]
 8005c84:	60c5      	str	r5, [r0, #12]
 8005c86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c88:	68eb      	ldr	r3, [r5, #12]
 8005c8a:	b183      	cbz	r3, 8005cae <_Balloc+0x42>
 8005c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c94:	b9b8      	cbnz	r0, 8005cc6 <_Balloc+0x5a>
 8005c96:	2101      	movs	r1, #1
 8005c98:	fa01 f506 	lsl.w	r5, r1, r6
 8005c9c:	1d6a      	adds	r2, r5, #5
 8005c9e:	0092      	lsls	r2, r2, #2
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fbdb 	bl	800645c <_calloc_r>
 8005ca6:	b160      	cbz	r0, 8005cc2 <_Balloc+0x56>
 8005ca8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005cac:	e00e      	b.n	8005ccc <_Balloc+0x60>
 8005cae:	2221      	movs	r2, #33	; 0x21
 8005cb0:	2104      	movs	r1, #4
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fbd2 	bl	800645c <_calloc_r>
 8005cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cba:	60e8      	str	r0, [r5, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e4      	bne.n	8005c8c <_Balloc+0x20>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	6802      	ldr	r2, [r0, #0]
 8005cc8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cd2:	e7f7      	b.n	8005cc4 <_Balloc+0x58>

08005cd4 <_Bfree>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	b93c      	cbnz	r4, 8005cee <_Bfree+0x1a>
 8005cde:	2010      	movs	r0, #16
 8005ce0:	f7ff ffaa 	bl	8005c38 <malloc>
 8005ce4:	6270      	str	r0, [r6, #36]	; 0x24
 8005ce6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cea:	6004      	str	r4, [r0, #0]
 8005cec:	60c4      	str	r4, [r0, #12]
 8005cee:	b13d      	cbz	r5, 8005d00 <_Bfree+0x2c>
 8005cf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005cf2:	686a      	ldr	r2, [r5, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cfa:	6029      	str	r1, [r5, #0]
 8005cfc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d00:	bd70      	pop	{r4, r5, r6, pc}

08005d02 <__multadd>:
 8005d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	461f      	mov	r7, r3
 8005d08:	4606      	mov	r6, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	690d      	ldr	r5, [r1, #16]
 8005d10:	f101 0c14 	add.w	ip, r1, #20
 8005d14:	f8dc 0000 	ldr.w	r0, [ip]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b281      	uxth	r1, r0
 8005d1c:	fb02 7101 	mla	r1, r2, r1, r7
 8005d20:	0c00      	lsrs	r0, r0, #16
 8005d22:	0c0f      	lsrs	r7, r1, #16
 8005d24:	fb02 7000 	mla	r0, r2, r0, r7
 8005d28:	b289      	uxth	r1, r1
 8005d2a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d34:	f84c 1b04 	str.w	r1, [ip], #4
 8005d38:	dcec      	bgt.n	8005d14 <__multadd+0x12>
 8005d3a:	b1d7      	cbz	r7, 8005d72 <__multadd+0x70>
 8005d3c:	68a3      	ldr	r3, [r4, #8]
 8005d3e:	42ab      	cmp	r3, r5
 8005d40:	dc12      	bgt.n	8005d68 <__multadd+0x66>
 8005d42:	6861      	ldr	r1, [r4, #4]
 8005d44:	4630      	mov	r0, r6
 8005d46:	3101      	adds	r1, #1
 8005d48:	f7ff ff90 	bl	8005c6c <_Balloc>
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	f104 010c 	add.w	r1, r4, #12
 8005d54:	3202      	adds	r2, #2
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	300c      	adds	r0, #12
 8005d5a:	f7fe fca1 	bl	80046a0 <memcpy>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4630      	mov	r0, r6
 8005d62:	f7ff ffb7 	bl	8005cd4 <_Bfree>
 8005d66:	4644      	mov	r4, r8
 8005d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	615f      	str	r7, [r3, #20]
 8005d70:	6125      	str	r5, [r4, #16]
 8005d72:	4620      	mov	r0, r4
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d78 <__s2b>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	2209      	movs	r2, #9
 8005d80:	461f      	mov	r7, r3
 8005d82:	3308      	adds	r3, #8
 8005d84:	460c      	mov	r4, r1
 8005d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	2100      	movs	r1, #0
 8005d90:	429a      	cmp	r2, r3
 8005d92:	db20      	blt.n	8005dd6 <__s2b+0x5e>
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff ff69 	bl	8005c6c <_Balloc>
 8005d9a:	9b08      	ldr	r3, [sp, #32]
 8005d9c:	2d09      	cmp	r5, #9
 8005d9e:	6143      	str	r3, [r0, #20]
 8005da0:	f04f 0301 	mov.w	r3, #1
 8005da4:	6103      	str	r3, [r0, #16]
 8005da6:	dd19      	ble.n	8005ddc <__s2b+0x64>
 8005da8:	f104 0809 	add.w	r8, r4, #9
 8005dac:	46c1      	mov	r9, r8
 8005dae:	442c      	add	r4, r5
 8005db0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005db4:	4601      	mov	r1, r0
 8005db6:	3b30      	subs	r3, #48	; 0x30
 8005db8:	220a      	movs	r2, #10
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff ffa1 	bl	8005d02 <__multadd>
 8005dc0:	45a1      	cmp	r9, r4
 8005dc2:	d1f5      	bne.n	8005db0 <__s2b+0x38>
 8005dc4:	eb08 0405 	add.w	r4, r8, r5
 8005dc8:	3c08      	subs	r4, #8
 8005dca:	1b2d      	subs	r5, r5, r4
 8005dcc:	1963      	adds	r3, r4, r5
 8005dce:	42bb      	cmp	r3, r7
 8005dd0:	db07      	blt.n	8005de2 <__s2b+0x6a>
 8005dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd6:	0052      	lsls	r2, r2, #1
 8005dd8:	3101      	adds	r1, #1
 8005dda:	e7d9      	b.n	8005d90 <__s2b+0x18>
 8005ddc:	340a      	adds	r4, #10
 8005dde:	2509      	movs	r5, #9
 8005de0:	e7f3      	b.n	8005dca <__s2b+0x52>
 8005de2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005de6:	4601      	mov	r1, r0
 8005de8:	3b30      	subs	r3, #48	; 0x30
 8005dea:	220a      	movs	r2, #10
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7ff ff88 	bl	8005d02 <__multadd>
 8005df2:	e7eb      	b.n	8005dcc <__s2b+0x54>

08005df4 <__hi0bits>:
 8005df4:	0c02      	lsrs	r2, r0, #16
 8005df6:	0412      	lsls	r2, r2, #16
 8005df8:	4603      	mov	r3, r0
 8005dfa:	b9b2      	cbnz	r2, 8005e2a <__hi0bits+0x36>
 8005dfc:	0403      	lsls	r3, r0, #16
 8005dfe:	2010      	movs	r0, #16
 8005e00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e04:	bf04      	itt	eq
 8005e06:	021b      	lsleq	r3, r3, #8
 8005e08:	3008      	addeq	r0, #8
 8005e0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e0e:	bf04      	itt	eq
 8005e10:	011b      	lsleq	r3, r3, #4
 8005e12:	3004      	addeq	r0, #4
 8005e14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e18:	bf04      	itt	eq
 8005e1a:	009b      	lsleq	r3, r3, #2
 8005e1c:	3002      	addeq	r0, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	db06      	blt.n	8005e30 <__hi0bits+0x3c>
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	d503      	bpl.n	8005e2e <__hi0bits+0x3a>
 8005e26:	3001      	adds	r0, #1
 8005e28:	4770      	bx	lr
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e7e8      	b.n	8005e00 <__hi0bits+0xc>
 8005e2e:	2020      	movs	r0, #32
 8005e30:	4770      	bx	lr

08005e32 <__lo0bits>:
 8005e32:	6803      	ldr	r3, [r0, #0]
 8005e34:	4601      	mov	r1, r0
 8005e36:	f013 0207 	ands.w	r2, r3, #7
 8005e3a:	d00b      	beq.n	8005e54 <__lo0bits+0x22>
 8005e3c:	07da      	lsls	r2, r3, #31
 8005e3e:	d423      	bmi.n	8005e88 <__lo0bits+0x56>
 8005e40:	0798      	lsls	r0, r3, #30
 8005e42:	bf49      	itett	mi
 8005e44:	085b      	lsrmi	r3, r3, #1
 8005e46:	089b      	lsrpl	r3, r3, #2
 8005e48:	2001      	movmi	r0, #1
 8005e4a:	600b      	strmi	r3, [r1, #0]
 8005e4c:	bf5c      	itt	pl
 8005e4e:	600b      	strpl	r3, [r1, #0]
 8005e50:	2002      	movpl	r0, #2
 8005e52:	4770      	bx	lr
 8005e54:	b298      	uxth	r0, r3
 8005e56:	b9a8      	cbnz	r0, 8005e84 <__lo0bits+0x52>
 8005e58:	2010      	movs	r0, #16
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e60:	bf04      	itt	eq
 8005e62:	0a1b      	lsreq	r3, r3, #8
 8005e64:	3008      	addeq	r0, #8
 8005e66:	071a      	lsls	r2, r3, #28
 8005e68:	bf04      	itt	eq
 8005e6a:	091b      	lsreq	r3, r3, #4
 8005e6c:	3004      	addeq	r0, #4
 8005e6e:	079a      	lsls	r2, r3, #30
 8005e70:	bf04      	itt	eq
 8005e72:	089b      	lsreq	r3, r3, #2
 8005e74:	3002      	addeq	r0, #2
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d402      	bmi.n	8005e80 <__lo0bits+0x4e>
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	d006      	beq.n	8005e8c <__lo0bits+0x5a>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	600b      	str	r3, [r1, #0]
 8005e82:	4770      	bx	lr
 8005e84:	4610      	mov	r0, r2
 8005e86:	e7e9      	b.n	8005e5c <__lo0bits+0x2a>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	4770      	bx	lr
 8005e8c:	2020      	movs	r0, #32
 8005e8e:	4770      	bx	lr

08005e90 <__i2b>:
 8005e90:	b510      	push	{r4, lr}
 8005e92:	460c      	mov	r4, r1
 8005e94:	2101      	movs	r1, #1
 8005e96:	f7ff fee9 	bl	8005c6c <_Balloc>
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	6144      	str	r4, [r0, #20]
 8005e9e:	6102      	str	r2, [r0, #16]
 8005ea0:	bd10      	pop	{r4, pc}

08005ea2 <__multiply>:
 8005ea2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea6:	4614      	mov	r4, r2
 8005ea8:	690a      	ldr	r2, [r1, #16]
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	4688      	mov	r8, r1
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	bfbe      	ittt	lt
 8005eb2:	460b      	movlt	r3, r1
 8005eb4:	46a0      	movlt	r8, r4
 8005eb6:	461c      	movlt	r4, r3
 8005eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ebc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ec0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ec8:	eb07 0609 	add.w	r6, r7, r9
 8005ecc:	42b3      	cmp	r3, r6
 8005ece:	bfb8      	it	lt
 8005ed0:	3101      	addlt	r1, #1
 8005ed2:	f7ff fecb 	bl	8005c6c <_Balloc>
 8005ed6:	f100 0514 	add.w	r5, r0, #20
 8005eda:	462b      	mov	r3, r5
 8005edc:	2200      	movs	r2, #0
 8005ede:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005ee2:	4573      	cmp	r3, lr
 8005ee4:	d316      	bcc.n	8005f14 <__multiply+0x72>
 8005ee6:	f104 0214 	add.w	r2, r4, #20
 8005eea:	f108 0114 	add.w	r1, r8, #20
 8005eee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ef2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	9b00      	ldr	r3, [sp, #0]
 8005efa:	9201      	str	r2, [sp, #4]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d80c      	bhi.n	8005f1a <__multiply+0x78>
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	dd03      	ble.n	8005f0c <__multiply+0x6a>
 8005f04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d05d      	beq.n	8005fc8 <__multiply+0x126>
 8005f0c:	6106      	str	r6, [r0, #16]
 8005f0e:	b003      	add	sp, #12
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	f843 2b04 	str.w	r2, [r3], #4
 8005f18:	e7e3      	b.n	8005ee2 <__multiply+0x40>
 8005f1a:	f8b2 b000 	ldrh.w	fp, [r2]
 8005f1e:	f1bb 0f00 	cmp.w	fp, #0
 8005f22:	d023      	beq.n	8005f6c <__multiply+0xca>
 8005f24:	4689      	mov	r9, r1
 8005f26:	46ac      	mov	ip, r5
 8005f28:	f04f 0800 	mov.w	r8, #0
 8005f2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f30:	f8dc a000 	ldr.w	sl, [ip]
 8005f34:	b2a3      	uxth	r3, r4
 8005f36:	fa1f fa8a 	uxth.w	sl, sl
 8005f3a:	fb0b a303 	mla	r3, fp, r3, sl
 8005f3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f42:	f8dc 4000 	ldr.w	r4, [ip]
 8005f46:	4443      	add	r3, r8
 8005f48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f4c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f50:	46e2      	mov	sl, ip
 8005f52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f5c:	454f      	cmp	r7, r9
 8005f5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f62:	f84a 3b04 	str.w	r3, [sl], #4
 8005f66:	d82b      	bhi.n	8005fc0 <__multiply+0x11e>
 8005f68:	f8cc 8004 	str.w	r8, [ip, #4]
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	3204      	adds	r2, #4
 8005f70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005f74:	f1ba 0f00 	cmp.w	sl, #0
 8005f78:	d020      	beq.n	8005fbc <__multiply+0x11a>
 8005f7a:	4689      	mov	r9, r1
 8005f7c:	46a8      	mov	r8, r5
 8005f7e:	f04f 0b00 	mov.w	fp, #0
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	f8b9 c000 	ldrh.w	ip, [r9]
 8005f88:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8005f92:	46c4      	mov	ip, r8
 8005f94:	445c      	add	r4, fp
 8005f96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8005f9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fa2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005fa6:	0c1b      	lsrs	r3, r3, #16
 8005fa8:	fb0a b303 	mla	r3, sl, r3, fp
 8005fac:	454f      	cmp	r7, r9
 8005fae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005fb2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005fb6:	d805      	bhi.n	8005fc4 <__multiply+0x122>
 8005fb8:	f8c8 3004 	str.w	r3, [r8, #4]
 8005fbc:	3504      	adds	r5, #4
 8005fbe:	e79b      	b.n	8005ef8 <__multiply+0x56>
 8005fc0:	46d4      	mov	ip, sl
 8005fc2:	e7b3      	b.n	8005f2c <__multiply+0x8a>
 8005fc4:	46e0      	mov	r8, ip
 8005fc6:	e7dd      	b.n	8005f84 <__multiply+0xe2>
 8005fc8:	3e01      	subs	r6, #1
 8005fca:	e799      	b.n	8005f00 <__multiply+0x5e>

08005fcc <__pow5mult>:
 8005fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	f012 0203 	ands.w	r2, r2, #3
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460f      	mov	r7, r1
 8005fda:	d007      	beq.n	8005fec <__pow5mult+0x20>
 8005fdc:	4c21      	ldr	r4, [pc, #132]	; (8006064 <__pow5mult+0x98>)
 8005fde:	3a01      	subs	r2, #1
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fe6:	f7ff fe8c 	bl	8005d02 <__multadd>
 8005fea:	4607      	mov	r7, r0
 8005fec:	10ad      	asrs	r5, r5, #2
 8005fee:	d035      	beq.n	800605c <__pow5mult+0x90>
 8005ff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ff2:	b93c      	cbnz	r4, 8006004 <__pow5mult+0x38>
 8005ff4:	2010      	movs	r0, #16
 8005ff6:	f7ff fe1f 	bl	8005c38 <malloc>
 8005ffa:	6270      	str	r0, [r6, #36]	; 0x24
 8005ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006000:	6004      	str	r4, [r0, #0]
 8006002:	60c4      	str	r4, [r0, #12]
 8006004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800600c:	b94c      	cbnz	r4, 8006022 <__pow5mult+0x56>
 800600e:	f240 2171 	movw	r1, #625	; 0x271
 8006012:	4630      	mov	r0, r6
 8006014:	f7ff ff3c 	bl	8005e90 <__i2b>
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006020:	6003      	str	r3, [r0, #0]
 8006022:	f04f 0800 	mov.w	r8, #0
 8006026:	07eb      	lsls	r3, r5, #31
 8006028:	d50a      	bpl.n	8006040 <__pow5mult+0x74>
 800602a:	4639      	mov	r1, r7
 800602c:	4622      	mov	r2, r4
 800602e:	4630      	mov	r0, r6
 8006030:	f7ff ff37 	bl	8005ea2 <__multiply>
 8006034:	4681      	mov	r9, r0
 8006036:	4639      	mov	r1, r7
 8006038:	4630      	mov	r0, r6
 800603a:	f7ff fe4b 	bl	8005cd4 <_Bfree>
 800603e:	464f      	mov	r7, r9
 8006040:	106d      	asrs	r5, r5, #1
 8006042:	d00b      	beq.n	800605c <__pow5mult+0x90>
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	b938      	cbnz	r0, 8006058 <__pow5mult+0x8c>
 8006048:	4622      	mov	r2, r4
 800604a:	4621      	mov	r1, r4
 800604c:	4630      	mov	r0, r6
 800604e:	f7ff ff28 	bl	8005ea2 <__multiply>
 8006052:	6020      	str	r0, [r4, #0]
 8006054:	f8c0 8000 	str.w	r8, [r0]
 8006058:	4604      	mov	r4, r0
 800605a:	e7e4      	b.n	8006026 <__pow5mult+0x5a>
 800605c:	4638      	mov	r0, r7
 800605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006062:	bf00      	nop
 8006064:	08006778 	.word	0x08006778

08006068 <__lshift>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	4607      	mov	r7, r0
 8006070:	4616      	mov	r6, r2
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006078:	eb0a 0903 	add.w	r9, sl, r3
 800607c:	6849      	ldr	r1, [r1, #4]
 800607e:	68a3      	ldr	r3, [r4, #8]
 8006080:	f109 0501 	add.w	r5, r9, #1
 8006084:	42ab      	cmp	r3, r5
 8006086:	db32      	blt.n	80060ee <__lshift+0x86>
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fdef 	bl	8005c6c <_Balloc>
 800608e:	2300      	movs	r3, #0
 8006090:	4680      	mov	r8, r0
 8006092:	461a      	mov	r2, r3
 8006094:	f100 0114 	add.w	r1, r0, #20
 8006098:	4553      	cmp	r3, sl
 800609a:	db2b      	blt.n	80060f4 <__lshift+0x8c>
 800609c:	6920      	ldr	r0, [r4, #16]
 800609e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060a2:	f104 0314 	add.w	r3, r4, #20
 80060a6:	f016 021f 	ands.w	r2, r6, #31
 80060aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060b2:	d025      	beq.n	8006100 <__lshift+0x98>
 80060b4:	2000      	movs	r0, #0
 80060b6:	f1c2 0e20 	rsb	lr, r2, #32
 80060ba:	468a      	mov	sl, r1
 80060bc:	681e      	ldr	r6, [r3, #0]
 80060be:	4096      	lsls	r6, r2
 80060c0:	4330      	orrs	r0, r6
 80060c2:	f84a 0b04 	str.w	r0, [sl], #4
 80060c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80060ca:	459c      	cmp	ip, r3
 80060cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80060d0:	d814      	bhi.n	80060fc <__lshift+0x94>
 80060d2:	6048      	str	r0, [r1, #4]
 80060d4:	b108      	cbz	r0, 80060da <__lshift+0x72>
 80060d6:	f109 0502 	add.w	r5, r9, #2
 80060da:	3d01      	subs	r5, #1
 80060dc:	4638      	mov	r0, r7
 80060de:	f8c8 5010 	str.w	r5, [r8, #16]
 80060e2:	4621      	mov	r1, r4
 80060e4:	f7ff fdf6 	bl	8005cd4 <_Bfree>
 80060e8:	4640      	mov	r0, r8
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ee:	3101      	adds	r1, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	e7c7      	b.n	8006084 <__lshift+0x1c>
 80060f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80060f8:	3301      	adds	r3, #1
 80060fa:	e7cd      	b.n	8006098 <__lshift+0x30>
 80060fc:	4651      	mov	r1, sl
 80060fe:	e7dc      	b.n	80060ba <__lshift+0x52>
 8006100:	3904      	subs	r1, #4
 8006102:	f853 2b04 	ldr.w	r2, [r3], #4
 8006106:	459c      	cmp	ip, r3
 8006108:	f841 2f04 	str.w	r2, [r1, #4]!
 800610c:	d8f9      	bhi.n	8006102 <__lshift+0x9a>
 800610e:	e7e4      	b.n	80060da <__lshift+0x72>

08006110 <__mcmp>:
 8006110:	6903      	ldr	r3, [r0, #16]
 8006112:	690a      	ldr	r2, [r1, #16]
 8006114:	b530      	push	{r4, r5, lr}
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	d10c      	bne.n	8006134 <__mcmp+0x24>
 800611a:	0092      	lsls	r2, r2, #2
 800611c:	3014      	adds	r0, #20
 800611e:	3114      	adds	r1, #20
 8006120:	1884      	adds	r4, r0, r2
 8006122:	4411      	add	r1, r2
 8006124:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006128:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800612c:	4295      	cmp	r5, r2
 800612e:	d003      	beq.n	8006138 <__mcmp+0x28>
 8006130:	d305      	bcc.n	800613e <__mcmp+0x2e>
 8006132:	2301      	movs	r3, #1
 8006134:	4618      	mov	r0, r3
 8006136:	bd30      	pop	{r4, r5, pc}
 8006138:	42a0      	cmp	r0, r4
 800613a:	d3f3      	bcc.n	8006124 <__mcmp+0x14>
 800613c:	e7fa      	b.n	8006134 <__mcmp+0x24>
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	e7f7      	b.n	8006134 <__mcmp+0x24>

08006144 <__mdiff>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	460d      	mov	r5, r1
 800614a:	4607      	mov	r7, r0
 800614c:	4611      	mov	r1, r2
 800614e:	4628      	mov	r0, r5
 8006150:	4614      	mov	r4, r2
 8006152:	f7ff ffdd 	bl	8006110 <__mcmp>
 8006156:	1e06      	subs	r6, r0, #0
 8006158:	d108      	bne.n	800616c <__mdiff+0x28>
 800615a:	4631      	mov	r1, r6
 800615c:	4638      	mov	r0, r7
 800615e:	f7ff fd85 	bl	8005c6c <_Balloc>
 8006162:	2301      	movs	r3, #1
 8006164:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	bfa4      	itt	ge
 800616e:	4623      	movge	r3, r4
 8006170:	462c      	movge	r4, r5
 8006172:	4638      	mov	r0, r7
 8006174:	6861      	ldr	r1, [r4, #4]
 8006176:	bfa6      	itte	ge
 8006178:	461d      	movge	r5, r3
 800617a:	2600      	movge	r6, #0
 800617c:	2601      	movlt	r6, #1
 800617e:	f7ff fd75 	bl	8005c6c <_Balloc>
 8006182:	f04f 0e00 	mov.w	lr, #0
 8006186:	60c6      	str	r6, [r0, #12]
 8006188:	692b      	ldr	r3, [r5, #16]
 800618a:	6926      	ldr	r6, [r4, #16]
 800618c:	f104 0214 	add.w	r2, r4, #20
 8006190:	f105 0914 	add.w	r9, r5, #20
 8006194:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006198:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800619c:	f100 0114 	add.w	r1, r0, #20
 80061a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80061a4:	f859 5b04 	ldr.w	r5, [r9], #4
 80061a8:	fa1f f38a 	uxth.w	r3, sl
 80061ac:	4473      	add	r3, lr
 80061ae:	b2ac      	uxth	r4, r5
 80061b0:	1b1b      	subs	r3, r3, r4
 80061b2:	0c2c      	lsrs	r4, r5, #16
 80061b4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80061b8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80061bc:	b29b      	uxth	r3, r3
 80061be:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80061c2:	45c8      	cmp	r8, r9
 80061c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80061c8:	4694      	mov	ip, r2
 80061ca:	f841 4b04 	str.w	r4, [r1], #4
 80061ce:	d8e7      	bhi.n	80061a0 <__mdiff+0x5c>
 80061d0:	45bc      	cmp	ip, r7
 80061d2:	d304      	bcc.n	80061de <__mdiff+0x9a>
 80061d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80061d8:	b183      	cbz	r3, 80061fc <__mdiff+0xb8>
 80061da:	6106      	str	r6, [r0, #16]
 80061dc:	e7c4      	b.n	8006168 <__mdiff+0x24>
 80061de:	f85c 4b04 	ldr.w	r4, [ip], #4
 80061e2:	b2a2      	uxth	r2, r4
 80061e4:	4472      	add	r2, lr
 80061e6:	1413      	asrs	r3, r2, #16
 80061e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061ec:	b292      	uxth	r2, r2
 80061ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80061f2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80061f6:	f841 2b04 	str.w	r2, [r1], #4
 80061fa:	e7e9      	b.n	80061d0 <__mdiff+0x8c>
 80061fc:	3e01      	subs	r6, #1
 80061fe:	e7e9      	b.n	80061d4 <__mdiff+0x90>

08006200 <__ulp>:
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <__ulp+0x44>)
 8006202:	400b      	ands	r3, r1
 8006204:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006208:	2b00      	cmp	r3, #0
 800620a:	dd02      	ble.n	8006212 <__ulp+0x12>
 800620c:	2000      	movs	r0, #0
 800620e:	4619      	mov	r1, r3
 8006210:	4770      	bx	lr
 8006212:	425b      	negs	r3, r3
 8006214:	151b      	asrs	r3, r3, #20
 8006216:	2b13      	cmp	r3, #19
 8006218:	f04f 0000 	mov.w	r0, #0
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	dc04      	bgt.n	800622c <__ulp+0x2c>
 8006222:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006226:	fa42 f103 	asr.w	r1, r2, r3
 800622a:	4770      	bx	lr
 800622c:	2201      	movs	r2, #1
 800622e:	3b14      	subs	r3, #20
 8006230:	2b1e      	cmp	r3, #30
 8006232:	bfce      	itee	gt
 8006234:	4613      	movgt	r3, r2
 8006236:	f1c3 031f 	rsble	r3, r3, #31
 800623a:	fa02 f303 	lslle.w	r3, r2, r3
 800623e:	4618      	mov	r0, r3
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	7ff00000 	.word	0x7ff00000

08006248 <__b2d>:
 8006248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800624c:	6907      	ldr	r7, [r0, #16]
 800624e:	f100 0914 	add.w	r9, r0, #20
 8006252:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006256:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800625a:	f1a7 0804 	sub.w	r8, r7, #4
 800625e:	4630      	mov	r0, r6
 8006260:	f7ff fdc8 	bl	8005df4 <__hi0bits>
 8006264:	f1c0 0320 	rsb	r3, r0, #32
 8006268:	280a      	cmp	r0, #10
 800626a:	600b      	str	r3, [r1, #0]
 800626c:	491e      	ldr	r1, [pc, #120]	; (80062e8 <__b2d+0xa0>)
 800626e:	dc17      	bgt.n	80062a0 <__b2d+0x58>
 8006270:	45c1      	cmp	r9, r8
 8006272:	bf28      	it	cs
 8006274:	2200      	movcs	r2, #0
 8006276:	f1c0 0c0b 	rsb	ip, r0, #11
 800627a:	fa26 f30c 	lsr.w	r3, r6, ip
 800627e:	bf38      	it	cc
 8006280:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006284:	ea43 0501 	orr.w	r5, r3, r1
 8006288:	f100 0315 	add.w	r3, r0, #21
 800628c:	fa06 f303 	lsl.w	r3, r6, r3
 8006290:	fa22 f20c 	lsr.w	r2, r2, ip
 8006294:	ea43 0402 	orr.w	r4, r3, r2
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a0:	45c1      	cmp	r9, r8
 80062a2:	bf3a      	itte	cc
 80062a4:	f1a7 0808 	subcc.w	r8, r7, #8
 80062a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80062ac:	2200      	movcs	r2, #0
 80062ae:	f1b0 030b 	subs.w	r3, r0, #11
 80062b2:	d015      	beq.n	80062e0 <__b2d+0x98>
 80062b4:	409e      	lsls	r6, r3
 80062b6:	f1c3 0720 	rsb	r7, r3, #32
 80062ba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80062be:	fa22 f107 	lsr.w	r1, r2, r7
 80062c2:	45c8      	cmp	r8, r9
 80062c4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80062c8:	ea46 0501 	orr.w	r5, r6, r1
 80062cc:	bf94      	ite	ls
 80062ce:	2100      	movls	r1, #0
 80062d0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80062d4:	fa02 f003 	lsl.w	r0, r2, r3
 80062d8:	40f9      	lsrs	r1, r7
 80062da:	ea40 0401 	orr.w	r4, r0, r1
 80062de:	e7db      	b.n	8006298 <__b2d+0x50>
 80062e0:	ea46 0501 	orr.w	r5, r6, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	e7d7      	b.n	8006298 <__b2d+0x50>
 80062e8:	3ff00000 	.word	0x3ff00000

080062ec <__d2b>:
 80062ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062f0:	461c      	mov	r4, r3
 80062f2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80062f6:	2101      	movs	r1, #1
 80062f8:	4690      	mov	r8, r2
 80062fa:	f7ff fcb7 	bl	8005c6c <_Balloc>
 80062fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006302:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006306:	4607      	mov	r7, r0
 8006308:	bb34      	cbnz	r4, 8006358 <__d2b+0x6c>
 800630a:	9201      	str	r2, [sp, #4]
 800630c:	f1b8 0200 	subs.w	r2, r8, #0
 8006310:	d027      	beq.n	8006362 <__d2b+0x76>
 8006312:	a802      	add	r0, sp, #8
 8006314:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006318:	f7ff fd8b 	bl	8005e32 <__lo0bits>
 800631c:	9900      	ldr	r1, [sp, #0]
 800631e:	b1f0      	cbz	r0, 800635e <__d2b+0x72>
 8006320:	9a01      	ldr	r2, [sp, #4]
 8006322:	f1c0 0320 	rsb	r3, r0, #32
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	430b      	orrs	r3, r1
 800632c:	40c2      	lsrs	r2, r0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	9201      	str	r2, [sp, #4]
 8006332:	9b01      	ldr	r3, [sp, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2102      	movne	r1, #2
 800633a:	2101      	moveq	r1, #1
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	6139      	str	r1, [r7, #16]
 8006340:	b1c4      	cbz	r4, 8006374 <__d2b+0x88>
 8006342:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006346:	4404      	add	r4, r0
 8006348:	6034      	str	r4, [r6, #0]
 800634a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800634e:	6028      	str	r0, [r5, #0]
 8006350:	4638      	mov	r0, r7
 8006352:	b002      	add	sp, #8
 8006354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006358:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800635c:	e7d5      	b.n	800630a <__d2b+0x1e>
 800635e:	6179      	str	r1, [r7, #20]
 8006360:	e7e7      	b.n	8006332 <__d2b+0x46>
 8006362:	a801      	add	r0, sp, #4
 8006364:	f7ff fd65 	bl	8005e32 <__lo0bits>
 8006368:	2101      	movs	r1, #1
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	6139      	str	r1, [r7, #16]
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	3020      	adds	r0, #32
 8006372:	e7e5      	b.n	8006340 <__d2b+0x54>
 8006374:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006378:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800637c:	6030      	str	r0, [r6, #0]
 800637e:	6918      	ldr	r0, [r3, #16]
 8006380:	f7ff fd38 	bl	8005df4 <__hi0bits>
 8006384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006388:	e7e1      	b.n	800634e <__d2b+0x62>

0800638a <__ratio>:
 800638a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638e:	4688      	mov	r8, r1
 8006390:	4669      	mov	r1, sp
 8006392:	4681      	mov	r9, r0
 8006394:	f7ff ff58 	bl	8006248 <__b2d>
 8006398:	468b      	mov	fp, r1
 800639a:	4606      	mov	r6, r0
 800639c:	460f      	mov	r7, r1
 800639e:	4640      	mov	r0, r8
 80063a0:	a901      	add	r1, sp, #4
 80063a2:	f7ff ff51 	bl	8006248 <__b2d>
 80063a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80063ae:	460d      	mov	r5, r1
 80063b0:	eba3 0c02 	sub.w	ip, r3, r2
 80063b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bfd5      	itete	le
 80063c2:	460a      	movle	r2, r1
 80063c4:	463a      	movgt	r2, r7
 80063c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80063ca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80063ce:	bfd8      	it	le
 80063d0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80063d4:	462b      	mov	r3, r5
 80063d6:	4602      	mov	r2, r0
 80063d8:	4659      	mov	r1, fp
 80063da:	4630      	mov	r0, r6
 80063dc:	f7fa f9a6 	bl	800072c <__aeabi_ddiv>
 80063e0:	b003      	add	sp, #12
 80063e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063e6 <__copybits>:
 80063e6:	3901      	subs	r1, #1
 80063e8:	b510      	push	{r4, lr}
 80063ea:	1149      	asrs	r1, r1, #5
 80063ec:	6914      	ldr	r4, [r2, #16]
 80063ee:	3101      	adds	r1, #1
 80063f0:	f102 0314 	add.w	r3, r2, #20
 80063f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80063f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	4602      	mov	r2, r0
 8006400:	d303      	bcc.n	800640a <__copybits+0x24>
 8006402:	2300      	movs	r3, #0
 8006404:	428a      	cmp	r2, r1
 8006406:	d305      	bcc.n	8006414 <__copybits+0x2e>
 8006408:	bd10      	pop	{r4, pc}
 800640a:	f853 2b04 	ldr.w	r2, [r3], #4
 800640e:	f840 2b04 	str.w	r2, [r0], #4
 8006412:	e7f3      	b.n	80063fc <__copybits+0x16>
 8006414:	f842 3b04 	str.w	r3, [r2], #4
 8006418:	e7f4      	b.n	8006404 <__copybits+0x1e>

0800641a <__any_on>:
 800641a:	f100 0214 	add.w	r2, r0, #20
 800641e:	6900      	ldr	r0, [r0, #16]
 8006420:	114b      	asrs	r3, r1, #5
 8006422:	4298      	cmp	r0, r3
 8006424:	b510      	push	{r4, lr}
 8006426:	db11      	blt.n	800644c <__any_on+0x32>
 8006428:	dd0a      	ble.n	8006440 <__any_on+0x26>
 800642a:	f011 011f 	ands.w	r1, r1, #31
 800642e:	d007      	beq.n	8006440 <__any_on+0x26>
 8006430:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006434:	fa24 f001 	lsr.w	r0, r4, r1
 8006438:	fa00 f101 	lsl.w	r1, r0, r1
 800643c:	428c      	cmp	r4, r1
 800643e:	d10b      	bne.n	8006458 <__any_on+0x3e>
 8006440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006444:	4293      	cmp	r3, r2
 8006446:	d803      	bhi.n	8006450 <__any_on+0x36>
 8006448:	2000      	movs	r0, #0
 800644a:	bd10      	pop	{r4, pc}
 800644c:	4603      	mov	r3, r0
 800644e:	e7f7      	b.n	8006440 <__any_on+0x26>
 8006450:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006454:	2900      	cmp	r1, #0
 8006456:	d0f5      	beq.n	8006444 <__any_on+0x2a>
 8006458:	2001      	movs	r0, #1
 800645a:	e7f6      	b.n	800644a <__any_on+0x30>

0800645c <_calloc_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	fb02 f401 	mul.w	r4, r2, r1
 8006462:	4621      	mov	r1, r4
 8006464:	f000 f808 	bl	8006478 <_malloc_r>
 8006468:	4605      	mov	r5, r0
 800646a:	b118      	cbz	r0, 8006474 <_calloc_r+0x18>
 800646c:	4622      	mov	r2, r4
 800646e:	2100      	movs	r1, #0
 8006470:	f7fe f921 	bl	80046b6 <memset>
 8006474:	4628      	mov	r0, r5
 8006476:	bd38      	pop	{r3, r4, r5, pc}

08006478 <_malloc_r>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	1ccd      	adds	r5, r1, #3
 800647c:	f025 0503 	bic.w	r5, r5, #3
 8006480:	3508      	adds	r5, #8
 8006482:	2d0c      	cmp	r5, #12
 8006484:	bf38      	it	cc
 8006486:	250c      	movcc	r5, #12
 8006488:	2d00      	cmp	r5, #0
 800648a:	4606      	mov	r6, r0
 800648c:	db01      	blt.n	8006492 <_malloc_r+0x1a>
 800648e:	42a9      	cmp	r1, r5
 8006490:	d903      	bls.n	800649a <_malloc_r+0x22>
 8006492:	230c      	movs	r3, #12
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	2000      	movs	r0, #0
 8006498:	bd70      	pop	{r4, r5, r6, pc}
 800649a:	f000 f876 	bl	800658a <__malloc_lock>
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <_malloc_r+0xac>)
 80064a0:	6814      	ldr	r4, [r2, #0]
 80064a2:	4621      	mov	r1, r4
 80064a4:	b991      	cbnz	r1, 80064cc <_malloc_r+0x54>
 80064a6:	4c20      	ldr	r4, [pc, #128]	; (8006528 <_malloc_r+0xb0>)
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	b91b      	cbnz	r3, 80064b4 <_malloc_r+0x3c>
 80064ac:	4630      	mov	r0, r6
 80064ae:	f000 f83d 	bl	800652c <_sbrk_r>
 80064b2:	6020      	str	r0, [r4, #0]
 80064b4:	4629      	mov	r1, r5
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 f838 	bl	800652c <_sbrk_r>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d124      	bne.n	800650a <_malloc_r+0x92>
 80064c0:	230c      	movs	r3, #12
 80064c2:	4630      	mov	r0, r6
 80064c4:	6033      	str	r3, [r6, #0]
 80064c6:	f000 f861 	bl	800658c <__malloc_unlock>
 80064ca:	e7e4      	b.n	8006496 <_malloc_r+0x1e>
 80064cc:	680b      	ldr	r3, [r1, #0]
 80064ce:	1b5b      	subs	r3, r3, r5
 80064d0:	d418      	bmi.n	8006504 <_malloc_r+0x8c>
 80064d2:	2b0b      	cmp	r3, #11
 80064d4:	d90f      	bls.n	80064f6 <_malloc_r+0x7e>
 80064d6:	600b      	str	r3, [r1, #0]
 80064d8:	18cc      	adds	r4, r1, r3
 80064da:	50cd      	str	r5, [r1, r3]
 80064dc:	4630      	mov	r0, r6
 80064de:	f000 f855 	bl	800658c <__malloc_unlock>
 80064e2:	f104 000b 	add.w	r0, r4, #11
 80064e6:	1d23      	adds	r3, r4, #4
 80064e8:	f020 0007 	bic.w	r0, r0, #7
 80064ec:	1ac3      	subs	r3, r0, r3
 80064ee:	d0d3      	beq.n	8006498 <_malloc_r+0x20>
 80064f0:	425a      	negs	r2, r3
 80064f2:	50e2      	str	r2, [r4, r3]
 80064f4:	e7d0      	b.n	8006498 <_malloc_r+0x20>
 80064f6:	684b      	ldr	r3, [r1, #4]
 80064f8:	428c      	cmp	r4, r1
 80064fa:	bf16      	itet	ne
 80064fc:	6063      	strne	r3, [r4, #4]
 80064fe:	6013      	streq	r3, [r2, #0]
 8006500:	460c      	movne	r4, r1
 8006502:	e7eb      	b.n	80064dc <_malloc_r+0x64>
 8006504:	460c      	mov	r4, r1
 8006506:	6849      	ldr	r1, [r1, #4]
 8006508:	e7cc      	b.n	80064a4 <_malloc_r+0x2c>
 800650a:	1cc4      	adds	r4, r0, #3
 800650c:	f024 0403 	bic.w	r4, r4, #3
 8006510:	42a0      	cmp	r0, r4
 8006512:	d005      	beq.n	8006520 <_malloc_r+0xa8>
 8006514:	1a21      	subs	r1, r4, r0
 8006516:	4630      	mov	r0, r6
 8006518:	f000 f808 	bl	800652c <_sbrk_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d0cf      	beq.n	80064c0 <_malloc_r+0x48>
 8006520:	6025      	str	r5, [r4, #0]
 8006522:	e7db      	b.n	80064dc <_malloc_r+0x64>
 8006524:	2000021c 	.word	0x2000021c
 8006528:	20000220 	.word	0x20000220

0800652c <_sbrk_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	2300      	movs	r3, #0
 8006530:	4c05      	ldr	r4, [pc, #20]	; (8006548 <_sbrk_r+0x1c>)
 8006532:	4605      	mov	r5, r0
 8006534:	4608      	mov	r0, r1
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	f7fb fddc 	bl	80020f4 <_sbrk>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_sbrk_r+0x1a>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	b103      	cbz	r3, 8006546 <_sbrk_r+0x1a>
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	20001924 	.word	0x20001924

0800654c <strncmp>:
 800654c:	b510      	push	{r4, lr}
 800654e:	b16a      	cbz	r2, 800656c <strncmp+0x20>
 8006550:	3901      	subs	r1, #1
 8006552:	1884      	adds	r4, r0, r2
 8006554:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006558:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800655c:	4293      	cmp	r3, r2
 800655e:	d103      	bne.n	8006568 <strncmp+0x1c>
 8006560:	42a0      	cmp	r0, r4
 8006562:	d001      	beq.n	8006568 <strncmp+0x1c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f5      	bne.n	8006554 <strncmp+0x8>
 8006568:	1a98      	subs	r0, r3, r2
 800656a:	bd10      	pop	{r4, pc}
 800656c:	4610      	mov	r0, r2
 800656e:	e7fc      	b.n	800656a <strncmp+0x1e>

08006570 <__ascii_wctomb>:
 8006570:	b149      	cbz	r1, 8006586 <__ascii_wctomb+0x16>
 8006572:	2aff      	cmp	r2, #255	; 0xff
 8006574:	bf8b      	itete	hi
 8006576:	238a      	movhi	r3, #138	; 0x8a
 8006578:	700a      	strbls	r2, [r1, #0]
 800657a:	6003      	strhi	r3, [r0, #0]
 800657c:	2001      	movls	r0, #1
 800657e:	bf88      	it	hi
 8006580:	f04f 30ff 	movhi.w	r0, #4294967295
 8006584:	4770      	bx	lr
 8006586:	4608      	mov	r0, r1
 8006588:	4770      	bx	lr

0800658a <__malloc_lock>:
 800658a:	4770      	bx	lr

0800658c <__malloc_unlock>:
 800658c:	4770      	bx	lr
	...

08006590 <_init>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr

0800659c <_fini>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr
