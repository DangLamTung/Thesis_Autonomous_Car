
mini_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080056d4  080056d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056d4  080056d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  20000070  08005754  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001154  08005754  00021154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be36  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002049  00000000  00000000  0002bece  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016147  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b85  00000000  00000000  00045197  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f8fa  00000000  00000000  0004dd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  000cd616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  000cd704  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00001296  00000000  00000000  000cfad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005500 	.word	0x08005500

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08005500 	.word	0x08005500

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	1c08      	adds	r0, r1, #0
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 fb55 	bl	80008d0 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 fad7 	bl	80007e4 <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 fb47 	bl	80008d0 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fb3d 	bl	80008d0 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fae5 	bl	8000834 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fadb 	bl	8000834 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_fadd>:
 800028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028e:	4647      	mov	r7, r8
 8000290:	46ce      	mov	lr, r9
 8000292:	0243      	lsls	r3, r0, #9
 8000294:	0a5b      	lsrs	r3, r3, #9
 8000296:	0044      	lsls	r4, r0, #1
 8000298:	0fc2      	lsrs	r2, r0, #31
 800029a:	469c      	mov	ip, r3
 800029c:	0048      	lsls	r0, r1, #1
 800029e:	00dd      	lsls	r5, r3, #3
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	0e24      	lsrs	r4, r4, #24
 80002a4:	0a5b      	lsrs	r3, r3, #9
 80002a6:	0e00      	lsrs	r0, r0, #24
 80002a8:	b580      	push	{r7, lr}
 80002aa:	4698      	mov	r8, r3
 80002ac:	0026      	movs	r6, r4
 80002ae:	4691      	mov	r9, r2
 80002b0:	0fc9      	lsrs	r1, r1, #31
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	1a27      	subs	r7, r4, r0
 80002b6:	428a      	cmp	r2, r1
 80002b8:	d029      	beq.n	800030e <__aeabi_fadd+0x82>
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	dd15      	ble.n	80002ea <__aeabi_fadd+0x5e>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d14a      	bne.n	8000358 <__aeabi_fadd+0xcc>
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d000      	beq.n	80002c8 <__aeabi_fadd+0x3c>
 80002c6:	e095      	b.n	80003f4 <__aeabi_fadd+0x168>
 80002c8:	08ed      	lsrs	r5, r5, #3
 80002ca:	2cff      	cmp	r4, #255	; 0xff
 80002cc:	d100      	bne.n	80002d0 <__aeabi_fadd+0x44>
 80002ce:	e088      	b.n	80003e2 <__aeabi_fadd+0x156>
 80002d0:	026b      	lsls	r3, r5, #9
 80002d2:	0a5b      	lsrs	r3, r3, #9
 80002d4:	b2e6      	uxtb	r6, r4
 80002d6:	025b      	lsls	r3, r3, #9
 80002d8:	05f6      	lsls	r6, r6, #23
 80002da:	0a58      	lsrs	r0, r3, #9
 80002dc:	4330      	orrs	r0, r6
 80002de:	07d2      	lsls	r2, r2, #31
 80002e0:	4310      	orrs	r0, r2
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4690      	mov	r8, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002ea:	2f00      	cmp	r7, #0
 80002ec:	d000      	beq.n	80002f0 <__aeabi_fadd+0x64>
 80002ee:	e087      	b.n	8000400 <__aeabi_fadd+0x174>
 80002f0:	1c60      	adds	r0, r4, #1
 80002f2:	b2c0      	uxtb	r0, r0
 80002f4:	2801      	cmp	r0, #1
 80002f6:	dc00      	bgt.n	80002fa <__aeabi_fadd+0x6e>
 80002f8:	e0b6      	b.n	8000468 <__aeabi_fadd+0x1dc>
 80002fa:	1aee      	subs	r6, r5, r3
 80002fc:	0172      	lsls	r2, r6, #5
 80002fe:	d500      	bpl.n	8000302 <__aeabi_fadd+0x76>
 8000300:	e0c5      	b.n	800048e <__aeabi_fadd+0x202>
 8000302:	2e00      	cmp	r6, #0
 8000304:	d13d      	bne.n	8000382 <__aeabi_fadd+0xf6>
 8000306:	2200      	movs	r2, #0
 8000308:	2600      	movs	r6, #0
 800030a:	2300      	movs	r3, #0
 800030c:	e7e3      	b.n	80002d6 <__aeabi_fadd+0x4a>
 800030e:	2f00      	cmp	r7, #0
 8000310:	dc00      	bgt.n	8000314 <__aeabi_fadd+0x88>
 8000312:	e096      	b.n	8000442 <__aeabi_fadd+0x1b6>
 8000314:	2800      	cmp	r0, #0
 8000316:	d05d      	beq.n	80003d4 <__aeabi_fadd+0x148>
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	d060      	beq.n	80003de <__aeabi_fadd+0x152>
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	04d2      	lsls	r2, r2, #19
 8000320:	4313      	orrs	r3, r2
 8000322:	2f1b      	cmp	r7, #27
 8000324:	dd00      	ble.n	8000328 <__aeabi_fadd+0x9c>
 8000326:	e0ec      	b.n	8000502 <__aeabi_fadd+0x276>
 8000328:	2220      	movs	r2, #32
 800032a:	1bd2      	subs	r2, r2, r7
 800032c:	0018      	movs	r0, r3
 800032e:	4093      	lsls	r3, r2
 8000330:	40f8      	lsrs	r0, r7
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	4193      	sbcs	r3, r2
 8000336:	4303      	orrs	r3, r0
 8000338:	18ed      	adds	r5, r5, r3
 800033a:	016b      	lsls	r3, r5, #5
 800033c:	d57b      	bpl.n	8000436 <__aeabi_fadd+0x1aa>
 800033e:	3401      	adds	r4, #1
 8000340:	2cff      	cmp	r4, #255	; 0xff
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0xba>
 8000344:	e0b7      	b.n	80004b6 <__aeabi_fadd+0x22a>
 8000346:	2201      	movs	r2, #1
 8000348:	2607      	movs	r6, #7
 800034a:	402a      	ands	r2, r5
 800034c:	086b      	lsrs	r3, r5, #1
 800034e:	4d9a      	ldr	r5, [pc, #616]	; (80005b8 <__aeabi_fadd+0x32c>)
 8000350:	401d      	ands	r5, r3
 8000352:	4315      	orrs	r5, r2
 8000354:	402e      	ands	r6, r5
 8000356:	e029      	b.n	80003ac <__aeabi_fadd+0x120>
 8000358:	2cff      	cmp	r4, #255	; 0xff
 800035a:	d0b5      	beq.n	80002c8 <__aeabi_fadd+0x3c>
 800035c:	2280      	movs	r2, #128	; 0x80
 800035e:	04d2      	lsls	r2, r2, #19
 8000360:	4313      	orrs	r3, r2
 8000362:	2f1b      	cmp	r7, #27
 8000364:	dd00      	ble.n	8000368 <__aeabi_fadd+0xdc>
 8000366:	e0b2      	b.n	80004ce <__aeabi_fadd+0x242>
 8000368:	2220      	movs	r2, #32
 800036a:	1bd2      	subs	r2, r2, r7
 800036c:	0019      	movs	r1, r3
 800036e:	4093      	lsls	r3, r2
 8000370:	40f9      	lsrs	r1, r7
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	4193      	sbcs	r3, r2
 8000376:	430b      	orrs	r3, r1
 8000378:	1aed      	subs	r5, r5, r3
 800037a:	016b      	lsls	r3, r5, #5
 800037c:	d55b      	bpl.n	8000436 <__aeabi_fadd+0x1aa>
 800037e:	01ad      	lsls	r5, r5, #6
 8000380:	09ae      	lsrs	r6, r5, #6
 8000382:	0030      	movs	r0, r6
 8000384:	f001 fc4a 	bl	8001c1c <__clzsi2>
 8000388:	3805      	subs	r0, #5
 800038a:	4086      	lsls	r6, r0
 800038c:	4284      	cmp	r4, r0
 800038e:	dc65      	bgt.n	800045c <__aeabi_fadd+0x1d0>
 8000390:	1b04      	subs	r4, r0, r4
 8000392:	0033      	movs	r3, r6
 8000394:	2020      	movs	r0, #32
 8000396:	3401      	adds	r4, #1
 8000398:	40e3      	lsrs	r3, r4
 800039a:	1b04      	subs	r4, r0, r4
 800039c:	40a6      	lsls	r6, r4
 800039e:	1e75      	subs	r5, r6, #1
 80003a0:	41ae      	sbcs	r6, r5
 80003a2:	4333      	orrs	r3, r6
 80003a4:	2607      	movs	r6, #7
 80003a6:	001d      	movs	r5, r3
 80003a8:	2400      	movs	r4, #0
 80003aa:	401e      	ands	r6, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	464b      	mov	r3, r9
 80003b0:	401a      	ands	r2, r3
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d004      	beq.n	80003c0 <__aeabi_fadd+0x134>
 80003b6:	230f      	movs	r3, #15
 80003b8:	402b      	ands	r3, r5
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	d000      	beq.n	80003c0 <__aeabi_fadd+0x134>
 80003be:	3504      	adds	r5, #4
 80003c0:	016b      	lsls	r3, r5, #5
 80003c2:	d400      	bmi.n	80003c6 <__aeabi_fadd+0x13a>
 80003c4:	e780      	b.n	80002c8 <__aeabi_fadd+0x3c>
 80003c6:	3401      	adds	r4, #1
 80003c8:	b2e6      	uxtb	r6, r4
 80003ca:	2cff      	cmp	r4, #255	; 0xff
 80003cc:	d12f      	bne.n	800042e <__aeabi_fadd+0x1a2>
 80003ce:	26ff      	movs	r6, #255	; 0xff
 80003d0:	2300      	movs	r3, #0
 80003d2:	e780      	b.n	80002d6 <__aeabi_fadd+0x4a>
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d152      	bne.n	800047e <__aeabi_fadd+0x1f2>
 80003d8:	2cff      	cmp	r4, #255	; 0xff
 80003da:	d000      	beq.n	80003de <__aeabi_fadd+0x152>
 80003dc:	e774      	b.n	80002c8 <__aeabi_fadd+0x3c>
 80003de:	000a      	movs	r2, r1
 80003e0:	08ed      	lsrs	r5, r5, #3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0f3      	beq.n	80003ce <__aeabi_fadd+0x142>
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	03db      	lsls	r3, r3, #15
 80003ea:	432b      	orrs	r3, r5
 80003ec:	025b      	lsls	r3, r3, #9
 80003ee:	0a5b      	lsrs	r3, r3, #9
 80003f0:	26ff      	movs	r6, #255	; 0xff
 80003f2:	e770      	b.n	80002d6 <__aeabi_fadd+0x4a>
 80003f4:	3f01      	subs	r7, #1
 80003f6:	2f00      	cmp	r7, #0
 80003f8:	d0be      	beq.n	8000378 <__aeabi_fadd+0xec>
 80003fa:	2cff      	cmp	r4, #255	; 0xff
 80003fc:	d1b1      	bne.n	8000362 <__aeabi_fadd+0xd6>
 80003fe:	e763      	b.n	80002c8 <__aeabi_fadd+0x3c>
 8000400:	2c00      	cmp	r4, #0
 8000402:	d047      	beq.n	8000494 <__aeabi_fadd+0x208>
 8000404:	28ff      	cmp	r0, #255	; 0xff
 8000406:	d069      	beq.n	80004dc <__aeabi_fadd+0x250>
 8000408:	2480      	movs	r4, #128	; 0x80
 800040a:	04e4      	lsls	r4, r4, #19
 800040c:	427a      	negs	r2, r7
 800040e:	4325      	orrs	r5, r4
 8000410:	2a1b      	cmp	r2, #27
 8000412:	dd00      	ble.n	8000416 <__aeabi_fadd+0x18a>
 8000414:	e0c5      	b.n	80005a2 <__aeabi_fadd+0x316>
 8000416:	002c      	movs	r4, r5
 8000418:	2620      	movs	r6, #32
 800041a:	40d4      	lsrs	r4, r2
 800041c:	1ab2      	subs	r2, r6, r2
 800041e:	4095      	lsls	r5, r2
 8000420:	1e6a      	subs	r2, r5, #1
 8000422:	4195      	sbcs	r5, r2
 8000424:	4325      	orrs	r5, r4
 8000426:	1b5d      	subs	r5, r3, r5
 8000428:	0004      	movs	r4, r0
 800042a:	4689      	mov	r9, r1
 800042c:	e7a5      	b.n	800037a <__aeabi_fadd+0xee>
 800042e:	01ab      	lsls	r3, r5, #6
 8000430:	0a5b      	lsrs	r3, r3, #9
 8000432:	e750      	b.n	80002d6 <__aeabi_fadd+0x4a>
 8000434:	2400      	movs	r4, #0
 8000436:	2201      	movs	r2, #1
 8000438:	464b      	mov	r3, r9
 800043a:	401a      	ands	r2, r3
 800043c:	076b      	lsls	r3, r5, #29
 800043e:	d1ba      	bne.n	80003b6 <__aeabi_fadd+0x12a>
 8000440:	e742      	b.n	80002c8 <__aeabi_fadd+0x3c>
 8000442:	2f00      	cmp	r7, #0
 8000444:	d13b      	bne.n	80004be <__aeabi_fadd+0x232>
 8000446:	3401      	adds	r4, #1
 8000448:	b2e0      	uxtb	r0, r4
 800044a:	2801      	cmp	r0, #1
 800044c:	dd4a      	ble.n	80004e4 <__aeabi_fadd+0x258>
 800044e:	2cff      	cmp	r4, #255	; 0xff
 8000450:	d0bd      	beq.n	80003ce <__aeabi_fadd+0x142>
 8000452:	2607      	movs	r6, #7
 8000454:	18ed      	adds	r5, r5, r3
 8000456:	086d      	lsrs	r5, r5, #1
 8000458:	402e      	ands	r6, r5
 800045a:	e7a7      	b.n	80003ac <__aeabi_fadd+0x120>
 800045c:	2307      	movs	r3, #7
 800045e:	4d57      	ldr	r5, [pc, #348]	; (80005bc <__aeabi_fadd+0x330>)
 8000460:	1a24      	subs	r4, r4, r0
 8000462:	4035      	ands	r5, r6
 8000464:	401e      	ands	r6, r3
 8000466:	e7a1      	b.n	80003ac <__aeabi_fadd+0x120>
 8000468:	2c00      	cmp	r4, #0
 800046a:	d11b      	bne.n	80004a4 <__aeabi_fadd+0x218>
 800046c:	2d00      	cmp	r5, #0
 800046e:	d16e      	bne.n	800054e <__aeabi_fadd+0x2c2>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_fadd+0x1ea>
 8000474:	e09a      	b.n	80005ac <__aeabi_fadd+0x320>
 8000476:	000a      	movs	r2, r1
 8000478:	001d      	movs	r5, r3
 800047a:	003c      	movs	r4, r7
 800047c:	e724      	b.n	80002c8 <__aeabi_fadd+0x3c>
 800047e:	3f01      	subs	r7, #1
 8000480:	2f00      	cmp	r7, #0
 8000482:	d100      	bne.n	8000486 <__aeabi_fadd+0x1fa>
 8000484:	e758      	b.n	8000338 <__aeabi_fadd+0xac>
 8000486:	2cff      	cmp	r4, #255	; 0xff
 8000488:	d000      	beq.n	800048c <__aeabi_fadd+0x200>
 800048a:	e74a      	b.n	8000322 <__aeabi_fadd+0x96>
 800048c:	e7a7      	b.n	80003de <__aeabi_fadd+0x152>
 800048e:	1b5e      	subs	r6, r3, r5
 8000490:	4689      	mov	r9, r1
 8000492:	e776      	b.n	8000382 <__aeabi_fadd+0xf6>
 8000494:	2d00      	cmp	r5, #0
 8000496:	d11c      	bne.n	80004d2 <__aeabi_fadd+0x246>
 8000498:	000a      	movs	r2, r1
 800049a:	28ff      	cmp	r0, #255	; 0xff
 800049c:	d01f      	beq.n	80004de <__aeabi_fadd+0x252>
 800049e:	0004      	movs	r4, r0
 80004a0:	001d      	movs	r5, r3
 80004a2:	e711      	b.n	80002c8 <__aeabi_fadd+0x3c>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d15d      	bne.n	8000564 <__aeabi_fadd+0x2d8>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d117      	bne.n	80004dc <__aeabi_fadd+0x250>
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	2200      	movs	r2, #0
 80004b0:	03db      	lsls	r3, r3, #15
 80004b2:	26ff      	movs	r6, #255	; 0xff
 80004b4:	e70f      	b.n	80002d6 <__aeabi_fadd+0x4a>
 80004b6:	000a      	movs	r2, r1
 80004b8:	26ff      	movs	r6, #255	; 0xff
 80004ba:	2300      	movs	r3, #0
 80004bc:	e70b      	b.n	80002d6 <__aeabi_fadd+0x4a>
 80004be:	2c00      	cmp	r4, #0
 80004c0:	d121      	bne.n	8000506 <__aeabi_fadd+0x27a>
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d166      	bne.n	8000594 <__aeabi_fadd+0x308>
 80004c6:	28ff      	cmp	r0, #255	; 0xff
 80004c8:	d1e9      	bne.n	800049e <__aeabi_fadd+0x212>
 80004ca:	001d      	movs	r5, r3
 80004cc:	e787      	b.n	80003de <__aeabi_fadd+0x152>
 80004ce:	2301      	movs	r3, #1
 80004d0:	e752      	b.n	8000378 <__aeabi_fadd+0xec>
 80004d2:	1c7a      	adds	r2, r7, #1
 80004d4:	d0a7      	beq.n	8000426 <__aeabi_fadd+0x19a>
 80004d6:	43fa      	mvns	r2, r7
 80004d8:	28ff      	cmp	r0, #255	; 0xff
 80004da:	d199      	bne.n	8000410 <__aeabi_fadd+0x184>
 80004dc:	000a      	movs	r2, r1
 80004de:	001d      	movs	r5, r3
 80004e0:	24ff      	movs	r4, #255	; 0xff
 80004e2:	e6f1      	b.n	80002c8 <__aeabi_fadd+0x3c>
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d121      	bne.n	800052c <__aeabi_fadd+0x2a0>
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d04f      	beq.n	800058c <__aeabi_fadd+0x300>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d04c      	beq.n	800058a <__aeabi_fadd+0x2fe>
 80004f0:	18ed      	adds	r5, r5, r3
 80004f2:	016b      	lsls	r3, r5, #5
 80004f4:	d59e      	bpl.n	8000434 <__aeabi_fadd+0x1a8>
 80004f6:	4b31      	ldr	r3, [pc, #196]	; (80005bc <__aeabi_fadd+0x330>)
 80004f8:	3607      	adds	r6, #7
 80004fa:	402e      	ands	r6, r5
 80004fc:	2401      	movs	r4, #1
 80004fe:	401d      	ands	r5, r3
 8000500:	e754      	b.n	80003ac <__aeabi_fadd+0x120>
 8000502:	2301      	movs	r3, #1
 8000504:	e718      	b.n	8000338 <__aeabi_fadd+0xac>
 8000506:	28ff      	cmp	r0, #255	; 0xff
 8000508:	d0df      	beq.n	80004ca <__aeabi_fadd+0x23e>
 800050a:	2480      	movs	r4, #128	; 0x80
 800050c:	04e4      	lsls	r4, r4, #19
 800050e:	427f      	negs	r7, r7
 8000510:	4325      	orrs	r5, r4
 8000512:	2f1b      	cmp	r7, #27
 8000514:	dc4d      	bgt.n	80005b2 <__aeabi_fadd+0x326>
 8000516:	2620      	movs	r6, #32
 8000518:	1bf6      	subs	r6, r6, r7
 800051a:	002c      	movs	r4, r5
 800051c:	40b5      	lsls	r5, r6
 800051e:	40fc      	lsrs	r4, r7
 8000520:	1e6a      	subs	r2, r5, #1
 8000522:	4195      	sbcs	r5, r2
 8000524:	4325      	orrs	r5, r4
 8000526:	18ed      	adds	r5, r5, r3
 8000528:	0004      	movs	r4, r0
 800052a:	e706      	b.n	800033a <__aeabi_fadd+0xae>
 800052c:	2d00      	cmp	r5, #0
 800052e:	d0cc      	beq.n	80004ca <__aeabi_fadd+0x23e>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0x2aa>
 8000534:	e753      	b.n	80003de <__aeabi_fadd+0x152>
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	4660      	mov	r0, ip
 800053a:	03c9      	lsls	r1, r1, #15
 800053c:	4208      	tst	r0, r1
 800053e:	d003      	beq.n	8000548 <__aeabi_fadd+0x2bc>
 8000540:	4640      	mov	r0, r8
 8000542:	4208      	tst	r0, r1
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x2bc>
 8000546:	001d      	movs	r5, r3
 8000548:	2101      	movs	r1, #1
 800054a:	4011      	ands	r1, r2
 800054c:	e747      	b.n	80003de <__aeabi_fadd+0x152>
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0x2c8>
 8000552:	e6b9      	b.n	80002c8 <__aeabi_fadd+0x3c>
 8000554:	1aea      	subs	r2, r5, r3
 8000556:	0150      	lsls	r0, r2, #5
 8000558:	d525      	bpl.n	80005a6 <__aeabi_fadd+0x31a>
 800055a:	2607      	movs	r6, #7
 800055c:	1b5d      	subs	r5, r3, r5
 800055e:	402e      	ands	r6, r5
 8000560:	4689      	mov	r9, r1
 8000562:	e723      	b.n	80003ac <__aeabi_fadd+0x120>
 8000564:	24ff      	movs	r4, #255	; 0xff
 8000566:	2b00      	cmp	r3, #0
 8000568:	d100      	bne.n	800056c <__aeabi_fadd+0x2e0>
 800056a:	e6ad      	b.n	80002c8 <__aeabi_fadd+0x3c>
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	4660      	mov	r0, ip
 8000570:	03d2      	lsls	r2, r2, #15
 8000572:	4210      	tst	r0, r2
 8000574:	d004      	beq.n	8000580 <__aeabi_fadd+0x2f4>
 8000576:	4640      	mov	r0, r8
 8000578:	4210      	tst	r0, r2
 800057a:	d101      	bne.n	8000580 <__aeabi_fadd+0x2f4>
 800057c:	001d      	movs	r5, r3
 800057e:	4689      	mov	r9, r1
 8000580:	2201      	movs	r2, #1
 8000582:	464b      	mov	r3, r9
 8000584:	24ff      	movs	r4, #255	; 0xff
 8000586:	401a      	ands	r2, r3
 8000588:	e69e      	b.n	80002c8 <__aeabi_fadd+0x3c>
 800058a:	002b      	movs	r3, r5
 800058c:	08dd      	lsrs	r5, r3, #3
 800058e:	000a      	movs	r2, r1
 8000590:	2400      	movs	r4, #0
 8000592:	e69d      	b.n	80002d0 <__aeabi_fadd+0x44>
 8000594:	1c7a      	adds	r2, r7, #1
 8000596:	d0c6      	beq.n	8000526 <__aeabi_fadd+0x29a>
 8000598:	43ff      	mvns	r7, r7
 800059a:	28ff      	cmp	r0, #255	; 0xff
 800059c:	d1b9      	bne.n	8000512 <__aeabi_fadd+0x286>
 800059e:	001d      	movs	r5, r3
 80005a0:	e71d      	b.n	80003de <__aeabi_fadd+0x152>
 80005a2:	2501      	movs	r5, #1
 80005a4:	e73f      	b.n	8000426 <__aeabi_fadd+0x19a>
 80005a6:	1e15      	subs	r5, r2, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x320>
 80005aa:	e744      	b.n	8000436 <__aeabi_fadd+0x1aa>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	e691      	b.n	80002d6 <__aeabi_fadd+0x4a>
 80005b2:	2501      	movs	r5, #1
 80005b4:	e7b7      	b.n	8000526 <__aeabi_fadd+0x29a>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	7dffffff 	.word	0x7dffffff
 80005bc:	fbffffff 	.word	0xfbffffff

080005c0 <__aeabi_fdiv>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	4657      	mov	r7, sl
 80005c4:	464e      	mov	r6, r9
 80005c6:	4645      	mov	r5, r8
 80005c8:	46de      	mov	lr, fp
 80005ca:	0244      	lsls	r4, r0, #9
 80005cc:	b5e0      	push	{r5, r6, r7, lr}
 80005ce:	0046      	lsls	r6, r0, #1
 80005d0:	4688      	mov	r8, r1
 80005d2:	0a64      	lsrs	r4, r4, #9
 80005d4:	0e36      	lsrs	r6, r6, #24
 80005d6:	0fc7      	lsrs	r7, r0, #31
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d063      	beq.n	80006a4 <__aeabi_fdiv+0xe4>
 80005dc:	2eff      	cmp	r6, #255	; 0xff
 80005de:	d024      	beq.n	800062a <__aeabi_fdiv+0x6a>
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	00e4      	lsls	r4, r4, #3
 80005e4:	04db      	lsls	r3, r3, #19
 80005e6:	431c      	orrs	r4, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	4699      	mov	r9, r3
 80005ec:	469b      	mov	fp, r3
 80005ee:	3e7f      	subs	r6, #127	; 0x7f
 80005f0:	4643      	mov	r3, r8
 80005f2:	4642      	mov	r2, r8
 80005f4:	025d      	lsls	r5, r3, #9
 80005f6:	0fd2      	lsrs	r2, r2, #31
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	0a6d      	lsrs	r5, r5, #9
 80005fc:	0e1b      	lsrs	r3, r3, #24
 80005fe:	4690      	mov	r8, r2
 8000600:	4692      	mov	sl, r2
 8000602:	d065      	beq.n	80006d0 <__aeabi_fdiv+0x110>
 8000604:	2bff      	cmp	r3, #255	; 0xff
 8000606:	d055      	beq.n	80006b4 <__aeabi_fdiv+0xf4>
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	2100      	movs	r1, #0
 800060c:	00ed      	lsls	r5, r5, #3
 800060e:	04d2      	lsls	r2, r2, #19
 8000610:	3b7f      	subs	r3, #127	; 0x7f
 8000612:	4315      	orrs	r5, r2
 8000614:	1af6      	subs	r6, r6, r3
 8000616:	4643      	mov	r3, r8
 8000618:	464a      	mov	r2, r9
 800061a:	407b      	eors	r3, r7
 800061c:	2a0f      	cmp	r2, #15
 800061e:	d900      	bls.n	8000622 <__aeabi_fdiv+0x62>
 8000620:	e08d      	b.n	800073e <__aeabi_fdiv+0x17e>
 8000622:	486d      	ldr	r0, [pc, #436]	; (80007d8 <__aeabi_fdiv+0x218>)
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	5882      	ldr	r2, [r0, r2]
 8000628:	4697      	mov	pc, r2
 800062a:	2c00      	cmp	r4, #0
 800062c:	d154      	bne.n	80006d8 <__aeabi_fdiv+0x118>
 800062e:	2308      	movs	r3, #8
 8000630:	4699      	mov	r9, r3
 8000632:	3b06      	subs	r3, #6
 8000634:	26ff      	movs	r6, #255	; 0xff
 8000636:	469b      	mov	fp, r3
 8000638:	e7da      	b.n	80005f0 <__aeabi_fdiv+0x30>
 800063a:	2500      	movs	r5, #0
 800063c:	4653      	mov	r3, sl
 800063e:	2902      	cmp	r1, #2
 8000640:	d01b      	beq.n	800067a <__aeabi_fdiv+0xba>
 8000642:	2903      	cmp	r1, #3
 8000644:	d100      	bne.n	8000648 <__aeabi_fdiv+0x88>
 8000646:	e0bf      	b.n	80007c8 <__aeabi_fdiv+0x208>
 8000648:	2901      	cmp	r1, #1
 800064a:	d028      	beq.n	800069e <__aeabi_fdiv+0xde>
 800064c:	0030      	movs	r0, r6
 800064e:	307f      	adds	r0, #127	; 0x7f
 8000650:	2800      	cmp	r0, #0
 8000652:	dd20      	ble.n	8000696 <__aeabi_fdiv+0xd6>
 8000654:	076a      	lsls	r2, r5, #29
 8000656:	d004      	beq.n	8000662 <__aeabi_fdiv+0xa2>
 8000658:	220f      	movs	r2, #15
 800065a:	402a      	ands	r2, r5
 800065c:	2a04      	cmp	r2, #4
 800065e:	d000      	beq.n	8000662 <__aeabi_fdiv+0xa2>
 8000660:	3504      	adds	r5, #4
 8000662:	012a      	lsls	r2, r5, #4
 8000664:	d503      	bpl.n	800066e <__aeabi_fdiv+0xae>
 8000666:	0030      	movs	r0, r6
 8000668:	4a5c      	ldr	r2, [pc, #368]	; (80007dc <__aeabi_fdiv+0x21c>)
 800066a:	3080      	adds	r0, #128	; 0x80
 800066c:	4015      	ands	r5, r2
 800066e:	28fe      	cmp	r0, #254	; 0xfe
 8000670:	dc03      	bgt.n	800067a <__aeabi_fdiv+0xba>
 8000672:	01ac      	lsls	r4, r5, #6
 8000674:	0a64      	lsrs	r4, r4, #9
 8000676:	b2c2      	uxtb	r2, r0
 8000678:	e001      	b.n	800067e <__aeabi_fdiv+0xbe>
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	2400      	movs	r4, #0
 800067e:	0264      	lsls	r4, r4, #9
 8000680:	05d2      	lsls	r2, r2, #23
 8000682:	0a60      	lsrs	r0, r4, #9
 8000684:	07db      	lsls	r3, r3, #31
 8000686:	4310      	orrs	r0, r2
 8000688:	4318      	orrs	r0, r3
 800068a:	bc3c      	pop	{r2, r3, r4, r5}
 800068c:	4690      	mov	r8, r2
 800068e:	4699      	mov	r9, r3
 8000690:	46a2      	mov	sl, r4
 8000692:	46ab      	mov	fp, r5
 8000694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000696:	2201      	movs	r2, #1
 8000698:	1a10      	subs	r0, r2, r0
 800069a:	281b      	cmp	r0, #27
 800069c:	dd7c      	ble.n	8000798 <__aeabi_fdiv+0x1d8>
 800069e:	2200      	movs	r2, #0
 80006a0:	2400      	movs	r4, #0
 80006a2:	e7ec      	b.n	800067e <__aeabi_fdiv+0xbe>
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d11d      	bne.n	80006e4 <__aeabi_fdiv+0x124>
 80006a8:	2304      	movs	r3, #4
 80006aa:	4699      	mov	r9, r3
 80006ac:	3b03      	subs	r3, #3
 80006ae:	2600      	movs	r6, #0
 80006b0:	469b      	mov	fp, r3
 80006b2:	e79d      	b.n	80005f0 <__aeabi_fdiv+0x30>
 80006b4:	3eff      	subs	r6, #255	; 0xff
 80006b6:	2d00      	cmp	r5, #0
 80006b8:	d120      	bne.n	80006fc <__aeabi_fdiv+0x13c>
 80006ba:	2102      	movs	r1, #2
 80006bc:	4643      	mov	r3, r8
 80006be:	464a      	mov	r2, r9
 80006c0:	407b      	eors	r3, r7
 80006c2:	430a      	orrs	r2, r1
 80006c4:	2a0f      	cmp	r2, #15
 80006c6:	d8d8      	bhi.n	800067a <__aeabi_fdiv+0xba>
 80006c8:	4845      	ldr	r0, [pc, #276]	; (80007e0 <__aeabi_fdiv+0x220>)
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	5882      	ldr	r2, [r0, r2]
 80006ce:	4697      	mov	pc, r2
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d119      	bne.n	8000708 <__aeabi_fdiv+0x148>
 80006d4:	2101      	movs	r1, #1
 80006d6:	e7f1      	b.n	80006bc <__aeabi_fdiv+0xfc>
 80006d8:	230c      	movs	r3, #12
 80006da:	4699      	mov	r9, r3
 80006dc:	3b09      	subs	r3, #9
 80006de:	26ff      	movs	r6, #255	; 0xff
 80006e0:	469b      	mov	fp, r3
 80006e2:	e785      	b.n	80005f0 <__aeabi_fdiv+0x30>
 80006e4:	0020      	movs	r0, r4
 80006e6:	f001 fa99 	bl	8001c1c <__clzsi2>
 80006ea:	2676      	movs	r6, #118	; 0x76
 80006ec:	1f43      	subs	r3, r0, #5
 80006ee:	409c      	lsls	r4, r3
 80006f0:	2300      	movs	r3, #0
 80006f2:	4276      	negs	r6, r6
 80006f4:	1a36      	subs	r6, r6, r0
 80006f6:	4699      	mov	r9, r3
 80006f8:	469b      	mov	fp, r3
 80006fa:	e779      	b.n	80005f0 <__aeabi_fdiv+0x30>
 80006fc:	464a      	mov	r2, r9
 80006fe:	2303      	movs	r3, #3
 8000700:	431a      	orrs	r2, r3
 8000702:	4691      	mov	r9, r2
 8000704:	2103      	movs	r1, #3
 8000706:	e786      	b.n	8000616 <__aeabi_fdiv+0x56>
 8000708:	0028      	movs	r0, r5
 800070a:	f001 fa87 	bl	8001c1c <__clzsi2>
 800070e:	1f43      	subs	r3, r0, #5
 8000710:	1836      	adds	r6, r6, r0
 8000712:	409d      	lsls	r5, r3
 8000714:	3676      	adds	r6, #118	; 0x76
 8000716:	2100      	movs	r1, #0
 8000718:	e77d      	b.n	8000616 <__aeabi_fdiv+0x56>
 800071a:	2480      	movs	r4, #128	; 0x80
 800071c:	2300      	movs	r3, #0
 800071e:	03e4      	lsls	r4, r4, #15
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	e7ac      	b.n	800067e <__aeabi_fdiv+0xbe>
 8000724:	2500      	movs	r5, #0
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	03db      	lsls	r3, r3, #15
 800072a:	421c      	tst	r4, r3
 800072c:	d028      	beq.n	8000780 <__aeabi_fdiv+0x1c0>
 800072e:	421d      	tst	r5, r3
 8000730:	d126      	bne.n	8000780 <__aeabi_fdiv+0x1c0>
 8000732:	432b      	orrs	r3, r5
 8000734:	025c      	lsls	r4, r3, #9
 8000736:	0a64      	lsrs	r4, r4, #9
 8000738:	4643      	mov	r3, r8
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	e79f      	b.n	800067e <__aeabi_fdiv+0xbe>
 800073e:	0162      	lsls	r2, r4, #5
 8000740:	016c      	lsls	r4, r5, #5
 8000742:	42a2      	cmp	r2, r4
 8000744:	d224      	bcs.n	8000790 <__aeabi_fdiv+0x1d0>
 8000746:	211b      	movs	r1, #27
 8000748:	2500      	movs	r5, #0
 800074a:	3e01      	subs	r6, #1
 800074c:	2701      	movs	r7, #1
 800074e:	0010      	movs	r0, r2
 8000750:	006d      	lsls	r5, r5, #1
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	2800      	cmp	r0, #0
 8000756:	db01      	blt.n	800075c <__aeabi_fdiv+0x19c>
 8000758:	4294      	cmp	r4, r2
 800075a:	d801      	bhi.n	8000760 <__aeabi_fdiv+0x1a0>
 800075c:	1b12      	subs	r2, r2, r4
 800075e:	433d      	orrs	r5, r7
 8000760:	3901      	subs	r1, #1
 8000762:	2900      	cmp	r1, #0
 8000764:	d1f3      	bne.n	800074e <__aeabi_fdiv+0x18e>
 8000766:	0014      	movs	r4, r2
 8000768:	1e62      	subs	r2, r4, #1
 800076a:	4194      	sbcs	r4, r2
 800076c:	4325      	orrs	r5, r4
 800076e:	e76d      	b.n	800064c <__aeabi_fdiv+0x8c>
 8000770:	46ba      	mov	sl, r7
 8000772:	4659      	mov	r1, fp
 8000774:	0025      	movs	r5, r4
 8000776:	4653      	mov	r3, sl
 8000778:	2902      	cmp	r1, #2
 800077a:	d000      	beq.n	800077e <__aeabi_fdiv+0x1be>
 800077c:	e761      	b.n	8000642 <__aeabi_fdiv+0x82>
 800077e:	e77c      	b.n	800067a <__aeabi_fdiv+0xba>
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	03db      	lsls	r3, r3, #15
 8000784:	431c      	orrs	r4, r3
 8000786:	0264      	lsls	r4, r4, #9
 8000788:	0a64      	lsrs	r4, r4, #9
 800078a:	003b      	movs	r3, r7
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	e776      	b.n	800067e <__aeabi_fdiv+0xbe>
 8000790:	1b12      	subs	r2, r2, r4
 8000792:	211a      	movs	r1, #26
 8000794:	2501      	movs	r5, #1
 8000796:	e7d9      	b.n	800074c <__aeabi_fdiv+0x18c>
 8000798:	369e      	adds	r6, #158	; 0x9e
 800079a:	002a      	movs	r2, r5
 800079c:	40b5      	lsls	r5, r6
 800079e:	002c      	movs	r4, r5
 80007a0:	40c2      	lsrs	r2, r0
 80007a2:	1e65      	subs	r5, r4, #1
 80007a4:	41ac      	sbcs	r4, r5
 80007a6:	4314      	orrs	r4, r2
 80007a8:	0762      	lsls	r2, r4, #29
 80007aa:	d004      	beq.n	80007b6 <__aeabi_fdiv+0x1f6>
 80007ac:	220f      	movs	r2, #15
 80007ae:	4022      	ands	r2, r4
 80007b0:	2a04      	cmp	r2, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x1f6>
 80007b4:	3404      	adds	r4, #4
 80007b6:	0162      	lsls	r2, r4, #5
 80007b8:	d403      	bmi.n	80007c2 <__aeabi_fdiv+0x202>
 80007ba:	01a4      	lsls	r4, r4, #6
 80007bc:	0a64      	lsrs	r4, r4, #9
 80007be:	2200      	movs	r2, #0
 80007c0:	e75d      	b.n	800067e <__aeabi_fdiv+0xbe>
 80007c2:	2201      	movs	r2, #1
 80007c4:	2400      	movs	r4, #0
 80007c6:	e75a      	b.n	800067e <__aeabi_fdiv+0xbe>
 80007c8:	2480      	movs	r4, #128	; 0x80
 80007ca:	03e4      	lsls	r4, r4, #15
 80007cc:	432c      	orrs	r4, r5
 80007ce:	0264      	lsls	r4, r4, #9
 80007d0:	0a64      	lsrs	r4, r4, #9
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	e753      	b.n	800067e <__aeabi_fdiv+0xbe>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	08005518 	.word	0x08005518
 80007dc:	f7ffffff 	.word	0xf7ffffff
 80007e0:	08005558 	.word	0x08005558

080007e4 <__eqsf2>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	0042      	lsls	r2, r0, #1
 80007e8:	024e      	lsls	r6, r1, #9
 80007ea:	004c      	lsls	r4, r1, #1
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	0a6d      	lsrs	r5, r5, #9
 80007f0:	0e12      	lsrs	r2, r2, #24
 80007f2:	0fc3      	lsrs	r3, r0, #31
 80007f4:	0a76      	lsrs	r6, r6, #9
 80007f6:	0e24      	lsrs	r4, r4, #24
 80007f8:	0fc9      	lsrs	r1, r1, #31
 80007fa:	2aff      	cmp	r2, #255	; 0xff
 80007fc:	d00f      	beq.n	800081e <__eqsf2+0x3a>
 80007fe:	2cff      	cmp	r4, #255	; 0xff
 8000800:	d011      	beq.n	8000826 <__eqsf2+0x42>
 8000802:	2001      	movs	r0, #1
 8000804:	42a2      	cmp	r2, r4
 8000806:	d000      	beq.n	800080a <__eqsf2+0x26>
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	42b5      	cmp	r5, r6
 800080c:	d1fc      	bne.n	8000808 <__eqsf2+0x24>
 800080e:	428b      	cmp	r3, r1
 8000810:	d00d      	beq.n	800082e <__eqsf2+0x4a>
 8000812:	2a00      	cmp	r2, #0
 8000814:	d1f8      	bne.n	8000808 <__eqsf2+0x24>
 8000816:	0028      	movs	r0, r5
 8000818:	1e45      	subs	r5, r0, #1
 800081a:	41a8      	sbcs	r0, r5
 800081c:	e7f4      	b.n	8000808 <__eqsf2+0x24>
 800081e:	2001      	movs	r0, #1
 8000820:	2d00      	cmp	r5, #0
 8000822:	d1f1      	bne.n	8000808 <__eqsf2+0x24>
 8000824:	e7eb      	b.n	80007fe <__eqsf2+0x1a>
 8000826:	2001      	movs	r0, #1
 8000828:	2e00      	cmp	r6, #0
 800082a:	d1ed      	bne.n	8000808 <__eqsf2+0x24>
 800082c:	e7e9      	b.n	8000802 <__eqsf2+0x1e>
 800082e:	2000      	movs	r0, #0
 8000830:	e7ea      	b.n	8000808 <__eqsf2+0x24>
 8000832:	46c0      	nop			; (mov r8, r8)

08000834 <__gesf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	004a      	lsls	r2, r1, #1
 8000838:	024e      	lsls	r6, r1, #9
 800083a:	0245      	lsls	r5, r0, #9
 800083c:	0044      	lsls	r4, r0, #1
 800083e:	0a6d      	lsrs	r5, r5, #9
 8000840:	0e24      	lsrs	r4, r4, #24
 8000842:	0fc3      	lsrs	r3, r0, #31
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e12      	lsrs	r2, r2, #24
 8000848:	0fc9      	lsrs	r1, r1, #31
 800084a:	2cff      	cmp	r4, #255	; 0xff
 800084c:	d015      	beq.n	800087a <__gesf2+0x46>
 800084e:	2aff      	cmp	r2, #255	; 0xff
 8000850:	d00e      	beq.n	8000870 <__gesf2+0x3c>
 8000852:	2c00      	cmp	r4, #0
 8000854:	d115      	bne.n	8000882 <__gesf2+0x4e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	d101      	bne.n	800085e <__gesf2+0x2a>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d01c      	beq.n	8000898 <__gesf2+0x64>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d014      	beq.n	800088c <__gesf2+0x58>
 8000862:	428b      	cmp	r3, r1
 8000864:	d027      	beq.n	80008b6 <__gesf2+0x82>
 8000866:	2002      	movs	r0, #2
 8000868:	3b01      	subs	r3, #1
 800086a:	4018      	ands	r0, r3
 800086c:	3801      	subs	r0, #1
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	2e00      	cmp	r6, #0
 8000872:	d0ee      	beq.n	8000852 <__gesf2+0x1e>
 8000874:	2002      	movs	r0, #2
 8000876:	4240      	negs	r0, r0
 8000878:	e7f9      	b.n	800086e <__gesf2+0x3a>
 800087a:	2d00      	cmp	r5, #0
 800087c:	d1fa      	bne.n	8000874 <__gesf2+0x40>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d00e      	beq.n	80008a0 <__gesf2+0x6c>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d10e      	bne.n	80008a4 <__gesf2+0x70>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d0ed      	beq.n	8000866 <__gesf2+0x32>
 800088a:	e00b      	b.n	80008a4 <__gesf2+0x70>
 800088c:	2301      	movs	r3, #1
 800088e:	3901      	subs	r1, #1
 8000890:	4399      	bics	r1, r3
 8000892:	0008      	movs	r0, r1
 8000894:	3001      	adds	r0, #1
 8000896:	e7ea      	b.n	800086e <__gesf2+0x3a>
 8000898:	2000      	movs	r0, #0
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e7      	beq.n	800086e <__gesf2+0x3a>
 800089e:	e7e2      	b.n	8000866 <__gesf2+0x32>
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d1e7      	bne.n	8000874 <__gesf2+0x40>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	d1de      	bne.n	8000866 <__gesf2+0x32>
 80008a8:	4294      	cmp	r4, r2
 80008aa:	dd05      	ble.n	80008b8 <__gesf2+0x84>
 80008ac:	2102      	movs	r1, #2
 80008ae:	1e58      	subs	r0, r3, #1
 80008b0:	4008      	ands	r0, r1
 80008b2:	3801      	subs	r0, #1
 80008b4:	e7db      	b.n	800086e <__gesf2+0x3a>
 80008b6:	2400      	movs	r4, #0
 80008b8:	42a2      	cmp	r2, r4
 80008ba:	dc04      	bgt.n	80008c6 <__gesf2+0x92>
 80008bc:	42b5      	cmp	r5, r6
 80008be:	d8d2      	bhi.n	8000866 <__gesf2+0x32>
 80008c0:	2000      	movs	r0, #0
 80008c2:	42b5      	cmp	r5, r6
 80008c4:	d2d3      	bcs.n	800086e <__gesf2+0x3a>
 80008c6:	1e58      	subs	r0, r3, #1
 80008c8:	2301      	movs	r3, #1
 80008ca:	4398      	bics	r0, r3
 80008cc:	3001      	adds	r0, #1
 80008ce:	e7ce      	b.n	800086e <__gesf2+0x3a>

080008d0 <__lesf2>:
 80008d0:	b530      	push	{r4, r5, lr}
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	0244      	lsls	r4, r0, #9
 80008d6:	024d      	lsls	r5, r1, #9
 80008d8:	0fc3      	lsrs	r3, r0, #31
 80008da:	0048      	lsls	r0, r1, #1
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e00      	lsrs	r0, r0, #24
 80008e4:	0fc9      	lsrs	r1, r1, #31
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d012      	beq.n	8000910 <__lesf2+0x40>
 80008ea:	28ff      	cmp	r0, #255	; 0xff
 80008ec:	d00c      	beq.n	8000908 <__lesf2+0x38>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d112      	bne.n	8000918 <__lesf2+0x48>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d119      	bne.n	800092a <__lesf2+0x5a>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d117      	bne.n	800092a <__lesf2+0x5a>
 80008fa:	2c00      	cmp	r4, #0
 80008fc:	d02b      	beq.n	8000956 <__lesf2+0x86>
 80008fe:	2002      	movs	r0, #2
 8000900:	3b01      	subs	r3, #1
 8000902:	4018      	ands	r0, r3
 8000904:	3801      	subs	r0, #1
 8000906:	e026      	b.n	8000956 <__lesf2+0x86>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d0f0      	beq.n	80008ee <__lesf2+0x1e>
 800090c:	2002      	movs	r0, #2
 800090e:	e022      	b.n	8000956 <__lesf2+0x86>
 8000910:	2c00      	cmp	r4, #0
 8000912:	d1fb      	bne.n	800090c <__lesf2+0x3c>
 8000914:	28ff      	cmp	r0, #255	; 0xff
 8000916:	d01f      	beq.n	8000958 <__lesf2+0x88>
 8000918:	2800      	cmp	r0, #0
 800091a:	d11f      	bne.n	800095c <__lesf2+0x8c>
 800091c:	2d00      	cmp	r5, #0
 800091e:	d11d      	bne.n	800095c <__lesf2+0x8c>
 8000920:	2002      	movs	r0, #2
 8000922:	3b01      	subs	r3, #1
 8000924:	4018      	ands	r0, r3
 8000926:	3801      	subs	r0, #1
 8000928:	e015      	b.n	8000956 <__lesf2+0x86>
 800092a:	2c00      	cmp	r4, #0
 800092c:	d00e      	beq.n	800094c <__lesf2+0x7c>
 800092e:	428b      	cmp	r3, r1
 8000930:	d1e5      	bne.n	80008fe <__lesf2+0x2e>
 8000932:	2200      	movs	r2, #0
 8000934:	4290      	cmp	r0, r2
 8000936:	dc04      	bgt.n	8000942 <__lesf2+0x72>
 8000938:	42ac      	cmp	r4, r5
 800093a:	d8e0      	bhi.n	80008fe <__lesf2+0x2e>
 800093c:	2000      	movs	r0, #0
 800093e:	42ac      	cmp	r4, r5
 8000940:	d209      	bcs.n	8000956 <__lesf2+0x86>
 8000942:	1e58      	subs	r0, r3, #1
 8000944:	2301      	movs	r3, #1
 8000946:	4398      	bics	r0, r3
 8000948:	3001      	adds	r0, #1
 800094a:	e004      	b.n	8000956 <__lesf2+0x86>
 800094c:	2301      	movs	r3, #1
 800094e:	3901      	subs	r1, #1
 8000950:	4399      	bics	r1, r3
 8000952:	0008      	movs	r0, r1
 8000954:	3001      	adds	r0, #1
 8000956:	bd30      	pop	{r4, r5, pc}
 8000958:	2d00      	cmp	r5, #0
 800095a:	d1d7      	bne.n	800090c <__lesf2+0x3c>
 800095c:	428b      	cmp	r3, r1
 800095e:	d1ce      	bne.n	80008fe <__lesf2+0x2e>
 8000960:	4282      	cmp	r2, r0
 8000962:	dde7      	ble.n	8000934 <__lesf2+0x64>
 8000964:	2102      	movs	r1, #2
 8000966:	1e58      	subs	r0, r3, #1
 8000968:	4008      	ands	r0, r1
 800096a:	3801      	subs	r0, #1
 800096c:	e7f3      	b.n	8000956 <__lesf2+0x86>
 800096e:	46c0      	nop			; (mov r8, r8)

08000970 <__aeabi_fmul>:
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	464e      	mov	r6, r9
 8000974:	4657      	mov	r7, sl
 8000976:	4645      	mov	r5, r8
 8000978:	46de      	mov	lr, fp
 800097a:	b5e0      	push	{r5, r6, r7, lr}
 800097c:	0243      	lsls	r3, r0, #9
 800097e:	0a5b      	lsrs	r3, r3, #9
 8000980:	0045      	lsls	r5, r0, #1
 8000982:	b083      	sub	sp, #12
 8000984:	1c0f      	adds	r7, r1, #0
 8000986:	4699      	mov	r9, r3
 8000988:	0e2d      	lsrs	r5, r5, #24
 800098a:	0fc6      	lsrs	r6, r0, #31
 800098c:	2d00      	cmp	r5, #0
 800098e:	d057      	beq.n	8000a40 <__aeabi_fmul+0xd0>
 8000990:	2dff      	cmp	r5, #255	; 0xff
 8000992:	d024      	beq.n	80009de <__aeabi_fmul+0x6e>
 8000994:	2080      	movs	r0, #128	; 0x80
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	04c0      	lsls	r0, r0, #19
 800099a:	4318      	orrs	r0, r3
 800099c:	2300      	movs	r3, #0
 800099e:	4681      	mov	r9, r0
 80009a0:	469a      	mov	sl, r3
 80009a2:	469b      	mov	fp, r3
 80009a4:	3d7f      	subs	r5, #127	; 0x7f
 80009a6:	027c      	lsls	r4, r7, #9
 80009a8:	007a      	lsls	r2, r7, #1
 80009aa:	0ffb      	lsrs	r3, r7, #31
 80009ac:	0a64      	lsrs	r4, r4, #9
 80009ae:	0e12      	lsrs	r2, r2, #24
 80009b0:	4698      	mov	r8, r3
 80009b2:	d023      	beq.n	80009fc <__aeabi_fmul+0x8c>
 80009b4:	2aff      	cmp	r2, #255	; 0xff
 80009b6:	d04b      	beq.n	8000a50 <__aeabi_fmul+0xe0>
 80009b8:	00e3      	lsls	r3, r4, #3
 80009ba:	2480      	movs	r4, #128	; 0x80
 80009bc:	2000      	movs	r0, #0
 80009be:	04e4      	lsls	r4, r4, #19
 80009c0:	3a7f      	subs	r2, #127	; 0x7f
 80009c2:	431c      	orrs	r4, r3
 80009c4:	18ad      	adds	r5, r5, r2
 80009c6:	1c6b      	adds	r3, r5, #1
 80009c8:	4647      	mov	r7, r8
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	4653      	mov	r3, sl
 80009ce:	4077      	eors	r7, r6
 80009d0:	003a      	movs	r2, r7
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d848      	bhi.n	8000a68 <__aeabi_fmul+0xf8>
 80009d6:	497d      	ldr	r1, [pc, #500]	; (8000bcc <__aeabi_fmul+0x25c>)
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	58cb      	ldr	r3, [r1, r3]
 80009dc:	469f      	mov	pc, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fmul+0x74>
 80009e2:	e085      	b.n	8000af0 <__aeabi_fmul+0x180>
 80009e4:	3308      	adds	r3, #8
 80009e6:	469a      	mov	sl, r3
 80009e8:	3b06      	subs	r3, #6
 80009ea:	469b      	mov	fp, r3
 80009ec:	027c      	lsls	r4, r7, #9
 80009ee:	007a      	lsls	r2, r7, #1
 80009f0:	0ffb      	lsrs	r3, r7, #31
 80009f2:	25ff      	movs	r5, #255	; 0xff
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	0e12      	lsrs	r2, r2, #24
 80009f8:	4698      	mov	r8, r3
 80009fa:	d1db      	bne.n	80009b4 <__aeabi_fmul+0x44>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fmul+0x92>
 8000a00:	e090      	b.n	8000b24 <__aeabi_fmul+0x1b4>
 8000a02:	4652      	mov	r2, sl
 8000a04:	2301      	movs	r3, #1
 8000a06:	431a      	orrs	r2, r3
 8000a08:	4692      	mov	sl, r2
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	e7db      	b.n	80009c6 <__aeabi_fmul+0x56>
 8000a0e:	464c      	mov	r4, r9
 8000a10:	4658      	mov	r0, fp
 8000a12:	0017      	movs	r7, r2
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d024      	beq.n	8000a62 <__aeabi_fmul+0xf2>
 8000a18:	2803      	cmp	r0, #3
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fmul+0xae>
 8000a1c:	e0cf      	b.n	8000bbe <__aeabi_fmul+0x24e>
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2300      	movs	r3, #0
 8000a22:	2801      	cmp	r0, #1
 8000a24:	d14d      	bne.n	8000ac2 <__aeabi_fmul+0x152>
 8000a26:	0258      	lsls	r0, r3, #9
 8000a28:	05d2      	lsls	r2, r2, #23
 8000a2a:	0a40      	lsrs	r0, r0, #9
 8000a2c:	07ff      	lsls	r7, r7, #31
 8000a2e:	4310      	orrs	r0, r2
 8000a30:	4338      	orrs	r0, r7
 8000a32:	b003      	add	sp, #12
 8000a34:	bc3c      	pop	{r2, r3, r4, r5}
 8000a36:	4690      	mov	r8, r2
 8000a38:	4699      	mov	r9, r3
 8000a3a:	46a2      	mov	sl, r4
 8000a3c:	46ab      	mov	fp, r5
 8000a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d15b      	bne.n	8000afc <__aeabi_fmul+0x18c>
 8000a44:	2304      	movs	r3, #4
 8000a46:	469a      	mov	sl, r3
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	469b      	mov	fp, r3
 8000a4e:	e7aa      	b.n	80009a6 <__aeabi_fmul+0x36>
 8000a50:	35ff      	adds	r5, #255	; 0xff
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	d160      	bne.n	8000b18 <__aeabi_fmul+0x1a8>
 8000a56:	4652      	mov	r2, sl
 8000a58:	2302      	movs	r3, #2
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	4692      	mov	sl, r2
 8000a5e:	2002      	movs	r0, #2
 8000a60:	e7b1      	b.n	80009c6 <__aeabi_fmul+0x56>
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	2300      	movs	r3, #0
 8000a66:	e7de      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	464b      	mov	r3, r9
 8000a70:	0426      	lsls	r6, r4, #16
 8000a72:	0c36      	lsrs	r6, r6, #16
 8000a74:	0418      	lsls	r0, r3, #16
 8000a76:	4661      	mov	r1, ip
 8000a78:	0033      	movs	r3, r6
 8000a7a:	0c22      	lsrs	r2, r4, #16
 8000a7c:	4664      	mov	r4, ip
 8000a7e:	0c00      	lsrs	r0, r0, #16
 8000a80:	4343      	muls	r3, r0
 8000a82:	434e      	muls	r6, r1
 8000a84:	4350      	muls	r0, r2
 8000a86:	4354      	muls	r4, r2
 8000a88:	1980      	adds	r0, r0, r6
 8000a8a:	0c1a      	lsrs	r2, r3, #16
 8000a8c:	1812      	adds	r2, r2, r0
 8000a8e:	4296      	cmp	r6, r2
 8000a90:	d903      	bls.n	8000a9a <__aeabi_fmul+0x12a>
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0249      	lsls	r1, r1, #9
 8000a96:	468c      	mov	ip, r1
 8000a98:	4464      	add	r4, ip
 8000a9a:	041b      	lsls	r3, r3, #16
 8000a9c:	0c1b      	lsrs	r3, r3, #16
 8000a9e:	0410      	lsls	r0, r2, #16
 8000aa0:	18c0      	adds	r0, r0, r3
 8000aa2:	0183      	lsls	r3, r0, #6
 8000aa4:	1e5e      	subs	r6, r3, #1
 8000aa6:	41b3      	sbcs	r3, r6
 8000aa8:	0e80      	lsrs	r0, r0, #26
 8000aaa:	4318      	orrs	r0, r3
 8000aac:	0c13      	lsrs	r3, r2, #16
 8000aae:	191b      	adds	r3, r3, r4
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	0123      	lsls	r3, r4, #4
 8000ab8:	d579      	bpl.n	8000bae <__aeabi_fmul+0x23e>
 8000aba:	2301      	movs	r3, #1
 8000abc:	0862      	lsrs	r2, r4, #1
 8000abe:	401c      	ands	r4, r3
 8000ac0:	4314      	orrs	r4, r2
 8000ac2:	9a01      	ldr	r2, [sp, #4]
 8000ac4:	327f      	adds	r2, #127	; 0x7f
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	dd4d      	ble.n	8000b66 <__aeabi_fmul+0x1f6>
 8000aca:	0763      	lsls	r3, r4, #29
 8000acc:	d004      	beq.n	8000ad8 <__aeabi_fmul+0x168>
 8000ace:	230f      	movs	r3, #15
 8000ad0:	4023      	ands	r3, r4
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fmul+0x168>
 8000ad6:	3404      	adds	r4, #4
 8000ad8:	0123      	lsls	r3, r4, #4
 8000ada:	d503      	bpl.n	8000ae4 <__aeabi_fmul+0x174>
 8000adc:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <__aeabi_fmul+0x260>)
 8000ade:	9a01      	ldr	r2, [sp, #4]
 8000ae0:	401c      	ands	r4, r3
 8000ae2:	3280      	adds	r2, #128	; 0x80
 8000ae4:	2afe      	cmp	r2, #254	; 0xfe
 8000ae6:	dcbc      	bgt.n	8000a62 <__aeabi_fmul+0xf2>
 8000ae8:	01a3      	lsls	r3, r4, #6
 8000aea:	0a5b      	lsrs	r3, r3, #9
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	e79a      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000af0:	230c      	movs	r3, #12
 8000af2:	469a      	mov	sl, r3
 8000af4:	3b09      	subs	r3, #9
 8000af6:	25ff      	movs	r5, #255	; 0xff
 8000af8:	469b      	mov	fp, r3
 8000afa:	e754      	b.n	80009a6 <__aeabi_fmul+0x36>
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 f88d 	bl	8001c1c <__clzsi2>
 8000b02:	464a      	mov	r2, r9
 8000b04:	1f43      	subs	r3, r0, #5
 8000b06:	2576      	movs	r5, #118	; 0x76
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	426d      	negs	r5, r5
 8000b0e:	4691      	mov	r9, r2
 8000b10:	1a2d      	subs	r5, r5, r0
 8000b12:	469a      	mov	sl, r3
 8000b14:	469b      	mov	fp, r3
 8000b16:	e746      	b.n	80009a6 <__aeabi_fmul+0x36>
 8000b18:	4652      	mov	r2, sl
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	4692      	mov	sl, r2
 8000b20:	2003      	movs	r0, #3
 8000b22:	e750      	b.n	80009c6 <__aeabi_fmul+0x56>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f001 f879 	bl	8001c1c <__clzsi2>
 8000b2a:	1f43      	subs	r3, r0, #5
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	3d76      	subs	r5, #118	; 0x76
 8000b32:	2000      	movs	r0, #0
 8000b34:	e747      	b.n	80009c6 <__aeabi_fmul+0x56>
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	2700      	movs	r7, #0
 8000b3a:	03db      	lsls	r3, r3, #15
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	e772      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000b40:	4642      	mov	r2, r8
 8000b42:	e766      	b.n	8000a12 <__aeabi_fmul+0xa2>
 8000b44:	464c      	mov	r4, r9
 8000b46:	0032      	movs	r2, r6
 8000b48:	4658      	mov	r0, fp
 8000b4a:	e762      	b.n	8000a12 <__aeabi_fmul+0xa2>
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	464a      	mov	r2, r9
 8000b50:	03db      	lsls	r3, r3, #15
 8000b52:	421a      	tst	r2, r3
 8000b54:	d022      	beq.n	8000b9c <__aeabi_fmul+0x22c>
 8000b56:	421c      	tst	r4, r3
 8000b58:	d120      	bne.n	8000b9c <__aeabi_fmul+0x22c>
 8000b5a:	4323      	orrs	r3, r4
 8000b5c:	025b      	lsls	r3, r3, #9
 8000b5e:	0a5b      	lsrs	r3, r3, #9
 8000b60:	4647      	mov	r7, r8
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	e75f      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000b66:	2301      	movs	r3, #1
 8000b68:	1a9a      	subs	r2, r3, r2
 8000b6a:	2a1b      	cmp	r2, #27
 8000b6c:	dc21      	bgt.n	8000bb2 <__aeabi_fmul+0x242>
 8000b6e:	0023      	movs	r3, r4
 8000b70:	9901      	ldr	r1, [sp, #4]
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	319e      	adds	r1, #158	; 0x9e
 8000b76:	408c      	lsls	r4, r1
 8000b78:	001a      	movs	r2, r3
 8000b7a:	0023      	movs	r3, r4
 8000b7c:	1e5c      	subs	r4, r3, #1
 8000b7e:	41a3      	sbcs	r3, r4
 8000b80:	4313      	orrs	r3, r2
 8000b82:	075a      	lsls	r2, r3, #29
 8000b84:	d004      	beq.n	8000b90 <__aeabi_fmul+0x220>
 8000b86:	220f      	movs	r2, #15
 8000b88:	401a      	ands	r2, r3
 8000b8a:	2a04      	cmp	r2, #4
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_fmul+0x220>
 8000b8e:	3304      	adds	r3, #4
 8000b90:	015a      	lsls	r2, r3, #5
 8000b92:	d411      	bmi.n	8000bb8 <__aeabi_fmul+0x248>
 8000b94:	019b      	lsls	r3, r3, #6
 8000b96:	0a5b      	lsrs	r3, r3, #9
 8000b98:	2200      	movs	r2, #0
 8000b9a:	e744      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	03db      	lsls	r3, r3, #15
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	0a5b      	lsrs	r3, r3, #9
 8000ba8:	0037      	movs	r7, r6
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	e73b      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000bae:	9501      	str	r5, [sp, #4]
 8000bb0:	e787      	b.n	8000ac2 <__aeabi_fmul+0x152>
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e736      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e733      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	03db      	lsls	r3, r3, #15
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	0a5b      	lsrs	r3, r3, #9
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	e72c      	b.n	8000a26 <__aeabi_fmul+0xb6>
 8000bcc:	08005598 	.word	0x08005598
 8000bd0:	f7ffffff 	.word	0xf7ffffff

08000bd4 <__aeabi_fsub>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	4647      	mov	r7, r8
 8000bd8:	46ce      	mov	lr, r9
 8000bda:	0044      	lsls	r4, r0, #1
 8000bdc:	0fc2      	lsrs	r2, r0, #31
 8000bde:	b580      	push	{r7, lr}
 8000be0:	0247      	lsls	r7, r0, #9
 8000be2:	0248      	lsls	r0, r1, #9
 8000be4:	0a40      	lsrs	r0, r0, #9
 8000be6:	4684      	mov	ip, r0
 8000be8:	4666      	mov	r6, ip
 8000bea:	0048      	lsls	r0, r1, #1
 8000bec:	0a7f      	lsrs	r7, r7, #9
 8000bee:	0e24      	lsrs	r4, r4, #24
 8000bf0:	00f6      	lsls	r6, r6, #3
 8000bf2:	0025      	movs	r5, r4
 8000bf4:	4690      	mov	r8, r2
 8000bf6:	00fb      	lsls	r3, r7, #3
 8000bf8:	0e00      	lsrs	r0, r0, #24
 8000bfa:	0fc9      	lsrs	r1, r1, #31
 8000bfc:	46b1      	mov	r9, r6
 8000bfe:	28ff      	cmp	r0, #255	; 0xff
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fsub+0x30>
 8000c02:	e085      	b.n	8000d10 <__aeabi_fsub+0x13c>
 8000c04:	2601      	movs	r6, #1
 8000c06:	4071      	eors	r1, r6
 8000c08:	1a26      	subs	r6, r4, r0
 8000c0a:	4291      	cmp	r1, r2
 8000c0c:	d057      	beq.n	8000cbe <__aeabi_fsub+0xea>
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	dd43      	ble.n	8000c9a <__aeabi_fsub+0xc6>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fsub+0x44>
 8000c16:	e07f      	b.n	8000d18 <__aeabi_fsub+0x144>
 8000c18:	4649      	mov	r1, r9
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fsub+0x4c>
 8000c1e:	e0aa      	b.n	8000d76 <__aeabi_fsub+0x1a2>
 8000c20:	3e01      	subs	r6, #1
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fsub+0x54>
 8000c26:	e0f7      	b.n	8000e18 <__aeabi_fsub+0x244>
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d400      	bmi.n	8000c30 <__aeabi_fsub+0x5c>
 8000c2e:	e08b      	b.n	8000d48 <__aeabi_fsub+0x174>
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	099c      	lsrs	r4, r3, #6
 8000c34:	0020      	movs	r0, r4
 8000c36:	f000 fff1 	bl	8001c1c <__clzsi2>
 8000c3a:	3805      	subs	r0, #5
 8000c3c:	4084      	lsls	r4, r0
 8000c3e:	4285      	cmp	r5, r0
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_fsub+0x70>
 8000c42:	e0d3      	b.n	8000dec <__aeabi_fsub+0x218>
 8000c44:	1b45      	subs	r5, r0, r5
 8000c46:	0023      	movs	r3, r4
 8000c48:	2020      	movs	r0, #32
 8000c4a:	3501      	adds	r5, #1
 8000c4c:	40eb      	lsrs	r3, r5
 8000c4e:	1b45      	subs	r5, r0, r5
 8000c50:	40ac      	lsls	r4, r5
 8000c52:	1e62      	subs	r2, r4, #1
 8000c54:	4194      	sbcs	r4, r2
 8000c56:	4323      	orrs	r3, r4
 8000c58:	2407      	movs	r4, #7
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	401c      	ands	r4, r3
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4641      	mov	r1, r8
 8000c62:	400a      	ands	r2, r1
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d004      	beq.n	8000c72 <__aeabi_fsub+0x9e>
 8000c68:	210f      	movs	r1, #15
 8000c6a:	4019      	ands	r1, r3
 8000c6c:	2904      	cmp	r1, #4
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_fsub+0x9e>
 8000c70:	3304      	adds	r3, #4
 8000c72:	0159      	lsls	r1, r3, #5
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_fsub+0xa4>
 8000c76:	e080      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000c78:	3501      	adds	r5, #1
 8000c7a:	b2ec      	uxtb	r4, r5
 8000c7c:	2dff      	cmp	r5, #255	; 0xff
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fsub+0xae>
 8000c80:	e0a3      	b.n	8000dca <__aeabi_fsub+0x1f6>
 8000c82:	24ff      	movs	r4, #255	; 0xff
 8000c84:	2300      	movs	r3, #0
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	05e4      	lsls	r4, r4, #23
 8000c8a:	0a58      	lsrs	r0, r3, #9
 8000c8c:	07d2      	lsls	r2, r2, #31
 8000c8e:	4320      	orrs	r0, r4
 8000c90:	4310      	orrs	r0, r2
 8000c92:	bc0c      	pop	{r2, r3}
 8000c94:	4690      	mov	r8, r2
 8000c96:	4699      	mov	r9, r3
 8000c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d174      	bne.n	8000d88 <__aeabi_fsub+0x1b4>
 8000c9e:	1c60      	adds	r0, r4, #1
 8000ca0:	b2c0      	uxtb	r0, r0
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	dc00      	bgt.n	8000ca8 <__aeabi_fsub+0xd4>
 8000ca6:	e0a7      	b.n	8000df8 <__aeabi_fsub+0x224>
 8000ca8:	464a      	mov	r2, r9
 8000caa:	1a9c      	subs	r4, r3, r2
 8000cac:	0162      	lsls	r2, r4, #5
 8000cae:	d500      	bpl.n	8000cb2 <__aeabi_fsub+0xde>
 8000cb0:	e0b6      	b.n	8000e20 <__aeabi_fsub+0x24c>
 8000cb2:	2c00      	cmp	r4, #0
 8000cb4:	d1be      	bne.n	8000c34 <__aeabi_fsub+0x60>
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2400      	movs	r4, #0
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e7e3      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	dc00      	bgt.n	8000cc4 <__aeabi_fsub+0xf0>
 8000cc2:	e085      	b.n	8000dd0 <__aeabi_fsub+0x1fc>
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d046      	beq.n	8000d56 <__aeabi_fsub+0x182>
 8000cc8:	2cff      	cmp	r4, #255	; 0xff
 8000cca:	d049      	beq.n	8000d60 <__aeabi_fsub+0x18c>
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	4648      	mov	r0, r9
 8000cd0:	04d2      	lsls	r2, r2, #19
 8000cd2:	4310      	orrs	r0, r2
 8000cd4:	4681      	mov	r9, r0
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2e1b      	cmp	r6, #27
 8000cda:	dc09      	bgt.n	8000cf0 <__aeabi_fsub+0x11c>
 8000cdc:	2020      	movs	r0, #32
 8000cde:	464c      	mov	r4, r9
 8000ce0:	1b80      	subs	r0, r0, r6
 8000ce2:	4084      	lsls	r4, r0
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	40f2      	lsrs	r2, r6
 8000cea:	1e44      	subs	r4, r0, #1
 8000cec:	41a0      	sbcs	r0, r4
 8000cee:	4302      	orrs	r2, r0
 8000cf0:	189b      	adds	r3, r3, r2
 8000cf2:	015a      	lsls	r2, r3, #5
 8000cf4:	d528      	bpl.n	8000d48 <__aeabi_fsub+0x174>
 8000cf6:	3501      	adds	r5, #1
 8000cf8:	2dff      	cmp	r5, #255	; 0xff
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_fsub+0x12a>
 8000cfc:	e0a8      	b.n	8000e50 <__aeabi_fsub+0x27c>
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2407      	movs	r4, #7
 8000d02:	4994      	ldr	r1, [pc, #592]	; (8000f54 <__aeabi_fsub+0x380>)
 8000d04:	401a      	ands	r2, r3
 8000d06:	085b      	lsrs	r3, r3, #1
 8000d08:	400b      	ands	r3, r1
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	401c      	ands	r4, r3
 8000d0e:	e7a6      	b.n	8000c5e <__aeabi_fsub+0x8a>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fsub+0x142>
 8000d14:	e778      	b.n	8000c08 <__aeabi_fsub+0x34>
 8000d16:	e775      	b.n	8000c04 <__aeabi_fsub+0x30>
 8000d18:	2cff      	cmp	r4, #255	; 0xff
 8000d1a:	d054      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	4649      	mov	r1, r9
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4311      	orrs	r1, r2
 8000d24:	4689      	mov	r9, r1
 8000d26:	2201      	movs	r2, #1
 8000d28:	2e1b      	cmp	r6, #27
 8000d2a:	dc09      	bgt.n	8000d40 <__aeabi_fsub+0x16c>
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4648      	mov	r0, r9
 8000d30:	1b89      	subs	r1, r1, r6
 8000d32:	4088      	lsls	r0, r1
 8000d34:	464a      	mov	r2, r9
 8000d36:	0001      	movs	r1, r0
 8000d38:	40f2      	lsrs	r2, r6
 8000d3a:	1e48      	subs	r0, r1, #1
 8000d3c:	4181      	sbcs	r1, r0
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	015a      	lsls	r2, r3, #5
 8000d44:	d500      	bpl.n	8000d48 <__aeabi_fsub+0x174>
 8000d46:	e773      	b.n	8000c30 <__aeabi_fsub+0x5c>
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	0759      	lsls	r1, r3, #29
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x180>
 8000d52:	e789      	b.n	8000c68 <__aeabi_fsub+0x94>
 8000d54:	e011      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000d56:	4648      	mov	r0, r9
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d158      	bne.n	8000e0e <__aeabi_fsub+0x23a>
 8000d5c:	2cff      	cmp	r4, #255	; 0xff
 8000d5e:	d10c      	bne.n	8000d7a <__aeabi_fsub+0x1a6>
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d100      	bne.n	8000d68 <__aeabi_fsub+0x194>
 8000d66:	e78c      	b.n	8000c82 <__aeabi_fsub+0xae>
 8000d68:	2080      	movs	r0, #128	; 0x80
 8000d6a:	03c0      	lsls	r0, r0, #15
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	025b      	lsls	r3, r3, #9
 8000d70:	0a5b      	lsrs	r3, r3, #9
 8000d72:	24ff      	movs	r4, #255	; 0xff
 8000d74:	e787      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000d76:	2cff      	cmp	r4, #255	; 0xff
 8000d78:	d025      	beq.n	8000dc6 <__aeabi_fsub+0x1f2>
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	2dff      	cmp	r5, #255	; 0xff
 8000d7e:	d0f0      	beq.n	8000d62 <__aeabi_fsub+0x18e>
 8000d80:	025b      	lsls	r3, r3, #9
 8000d82:	0a5b      	lsrs	r3, r3, #9
 8000d84:	b2ec      	uxtb	r4, r5
 8000d86:	e77e      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000d88:	2c00      	cmp	r4, #0
 8000d8a:	d04d      	beq.n	8000e28 <__aeabi_fsub+0x254>
 8000d8c:	28ff      	cmp	r0, #255	; 0xff
 8000d8e:	d018      	beq.n	8000dc2 <__aeabi_fsub+0x1ee>
 8000d90:	2480      	movs	r4, #128	; 0x80
 8000d92:	04e4      	lsls	r4, r4, #19
 8000d94:	4272      	negs	r2, r6
 8000d96:	4323      	orrs	r3, r4
 8000d98:	2a1b      	cmp	r2, #27
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_fsub+0x1ca>
 8000d9c:	e0c4      	b.n	8000f28 <__aeabi_fsub+0x354>
 8000d9e:	001c      	movs	r4, r3
 8000da0:	2520      	movs	r5, #32
 8000da2:	40d4      	lsrs	r4, r2
 8000da4:	1aaa      	subs	r2, r5, r2
 8000da6:	4093      	lsls	r3, r2
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	4193      	sbcs	r3, r2
 8000dac:	4323      	orrs	r3, r4
 8000dae:	464a      	mov	r2, r9
 8000db0:	0005      	movs	r5, r0
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4688      	mov	r8, r1
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x56>
 8000db8:	1c72      	adds	r2, r6, #1
 8000dba:	d0f8      	beq.n	8000dae <__aeabi_fsub+0x1da>
 8000dbc:	43f2      	mvns	r2, r6
 8000dbe:	28ff      	cmp	r0, #255	; 0xff
 8000dc0:	d1ea      	bne.n	8000d98 <__aeabi_fsub+0x1c4>
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	464b      	mov	r3, r9
 8000dc6:	25ff      	movs	r5, #255	; 0xff
 8000dc8:	e7d7      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000dca:	019b      	lsls	r3, r3, #6
 8000dcc:	0a5b      	lsrs	r3, r3, #9
 8000dce:	e75a      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d141      	bne.n	8000e58 <__aeabi_fsub+0x284>
 8000dd4:	1c65      	adds	r5, r4, #1
 8000dd6:	b2e9      	uxtb	r1, r5
 8000dd8:	2901      	cmp	r1, #1
 8000dda:	dd45      	ble.n	8000e68 <__aeabi_fsub+0x294>
 8000ddc:	2dff      	cmp	r5, #255	; 0xff
 8000dde:	d100      	bne.n	8000de2 <__aeabi_fsub+0x20e>
 8000de0:	e74f      	b.n	8000c82 <__aeabi_fsub+0xae>
 8000de2:	2407      	movs	r4, #7
 8000de4:	444b      	add	r3, r9
 8000de6:	085b      	lsrs	r3, r3, #1
 8000de8:	401c      	ands	r4, r3
 8000dea:	e738      	b.n	8000c5e <__aeabi_fsub+0x8a>
 8000dec:	2207      	movs	r2, #7
 8000dee:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <__aeabi_fsub+0x384>)
 8000df0:	1a2d      	subs	r5, r5, r0
 8000df2:	4023      	ands	r3, r4
 8000df4:	4014      	ands	r4, r2
 8000df6:	e732      	b.n	8000c5e <__aeabi_fsub+0x8a>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d11d      	bne.n	8000e38 <__aeabi_fsub+0x264>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d17a      	bne.n	8000ef6 <__aeabi_fsub+0x322>
 8000e00:	464b      	mov	r3, r9
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_fsub+0x234>
 8000e06:	e091      	b.n	8000f2c <__aeabi_fsub+0x358>
 8000e08:	000a      	movs	r2, r1
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	e7b5      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000e0e:	3e01      	subs	r6, #1
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d119      	bne.n	8000e48 <__aeabi_fsub+0x274>
 8000e14:	444b      	add	r3, r9
 8000e16:	e76c      	b.n	8000cf2 <__aeabi_fsub+0x11e>
 8000e18:	2cff      	cmp	r4, #255	; 0xff
 8000e1a:	d184      	bne.n	8000d26 <__aeabi_fsub+0x152>
 8000e1c:	25ff      	movs	r5, #255	; 0xff
 8000e1e:	e7ac      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000e20:	464a      	mov	r2, r9
 8000e22:	4688      	mov	r8, r1
 8000e24:	1ad4      	subs	r4, r2, r3
 8000e26:	e705      	b.n	8000c34 <__aeabi_fsub+0x60>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1c5      	bne.n	8000db8 <__aeabi_fsub+0x1e4>
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	28ff      	cmp	r0, #255	; 0xff
 8000e30:	d0c8      	beq.n	8000dc4 <__aeabi_fsub+0x1f0>
 8000e32:	0005      	movs	r5, r0
 8000e34:	464b      	mov	r3, r9
 8000e36:	e7a0      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d149      	bne.n	8000ed0 <__aeabi_fsub+0x2fc>
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d077      	beq.n	8000f32 <__aeabi_fsub+0x35e>
 8000e42:	000a      	movs	r2, r1
 8000e44:	25ff      	movs	r5, #255	; 0xff
 8000e46:	e798      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_fsub+0x27a>
 8000e4c:	e743      	b.n	8000cd6 <__aeabi_fsub+0x102>
 8000e4e:	e787      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000e50:	000a      	movs	r2, r1
 8000e52:	24ff      	movs	r4, #255	; 0xff
 8000e54:	2300      	movs	r3, #0
 8000e56:	e716      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d115      	bne.n	8000e88 <__aeabi_fsub+0x2b4>
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d157      	bne.n	8000f10 <__aeabi_fsub+0x33c>
 8000e60:	28ff      	cmp	r0, #255	; 0xff
 8000e62:	d1e6      	bne.n	8000e32 <__aeabi_fsub+0x25e>
 8000e64:	464b      	mov	r3, r9
 8000e66:	e77b      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d120      	bne.n	8000eae <__aeabi_fsub+0x2da>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d057      	beq.n	8000f20 <__aeabi_fsub+0x34c>
 8000e70:	4649      	mov	r1, r9
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d053      	beq.n	8000f1e <__aeabi_fsub+0x34a>
 8000e76:	444b      	add	r3, r9
 8000e78:	015a      	lsls	r2, r3, #5
 8000e7a:	d568      	bpl.n	8000f4e <__aeabi_fsub+0x37a>
 8000e7c:	2407      	movs	r4, #7
 8000e7e:	4a36      	ldr	r2, [pc, #216]	; (8000f58 <__aeabi_fsub+0x384>)
 8000e80:	401c      	ands	r4, r3
 8000e82:	2501      	movs	r5, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	e6ea      	b.n	8000c5e <__aeabi_fsub+0x8a>
 8000e88:	28ff      	cmp	r0, #255	; 0xff
 8000e8a:	d0eb      	beq.n	8000e64 <__aeabi_fsub+0x290>
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	04d2      	lsls	r2, r2, #19
 8000e90:	4276      	negs	r6, r6
 8000e92:	4313      	orrs	r3, r2
 8000e94:	2e1b      	cmp	r6, #27
 8000e96:	dc53      	bgt.n	8000f40 <__aeabi_fsub+0x36c>
 8000e98:	2520      	movs	r5, #32
 8000e9a:	1bad      	subs	r5, r5, r6
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	40ab      	lsls	r3, r5
 8000ea0:	40f2      	lsrs	r2, r6
 8000ea2:	1e5c      	subs	r4, r3, #1
 8000ea4:	41a3      	sbcs	r3, r4
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	444b      	add	r3, r9
 8000eaa:	0005      	movs	r5, r0
 8000eac:	e721      	b.n	8000cf2 <__aeabi_fsub+0x11e>
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0d8      	beq.n	8000e64 <__aeabi_fsub+0x290>
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x2e6>
 8000eb8:	e752      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	03c9      	lsls	r1, r1, #15
 8000ebe:	420f      	tst	r7, r1
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x2f0>
 8000ec2:	e74d      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000ec4:	4660      	mov	r0, ip
 8000ec6:	4208      	tst	r0, r1
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fsub+0x2f8>
 8000eca:	e749      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000ecc:	464b      	mov	r3, r9
 8000ece:	e747      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000ed0:	4648      	mov	r0, r9
 8000ed2:	25ff      	movs	r5, #255	; 0xff
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_fsub+0x306>
 8000ed8:	e74f      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	03d2      	lsls	r2, r2, #15
 8000ede:	4217      	tst	r7, r2
 8000ee0:	d004      	beq.n	8000eec <__aeabi_fsub+0x318>
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	4210      	tst	r0, r2
 8000ee6:	d101      	bne.n	8000eec <__aeabi_fsub+0x318>
 8000ee8:	464b      	mov	r3, r9
 8000eea:	4688      	mov	r8, r1
 8000eec:	2201      	movs	r2, #1
 8000eee:	4641      	mov	r1, r8
 8000ef0:	25ff      	movs	r5, #255	; 0xff
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	e741      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000ef6:	4648      	mov	r0, r9
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d01f      	beq.n	8000f3c <__aeabi_fsub+0x368>
 8000efc:	1a1a      	subs	r2, r3, r0
 8000efe:	0150      	lsls	r0, r2, #5
 8000f00:	d520      	bpl.n	8000f44 <__aeabi_fsub+0x370>
 8000f02:	464a      	mov	r2, r9
 8000f04:	2407      	movs	r4, #7
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	401c      	ands	r4, r3
 8000f0a:	4688      	mov	r8, r1
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	e6a6      	b.n	8000c5e <__aeabi_fsub+0x8a>
 8000f10:	1c74      	adds	r4, r6, #1
 8000f12:	d0c9      	beq.n	8000ea8 <__aeabi_fsub+0x2d4>
 8000f14:	43f6      	mvns	r6, r6
 8000f16:	28ff      	cmp	r0, #255	; 0xff
 8000f18:	d1bc      	bne.n	8000e94 <__aeabi_fsub+0x2c0>
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	e720      	b.n	8000d60 <__aeabi_fsub+0x18c>
 8000f1e:	4699      	mov	r9, r3
 8000f20:	464b      	mov	r3, r9
 8000f22:	2500      	movs	r5, #0
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	e72b      	b.n	8000d80 <__aeabi_fsub+0x1ac>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e740      	b.n	8000dae <__aeabi_fsub+0x1da>
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e6a9      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	2200      	movs	r2, #0
 8000f36:	03db      	lsls	r3, r3, #15
 8000f38:	24ff      	movs	r4, #255	; 0xff
 8000f3a:	e6a4      	b.n	8000c86 <__aeabi_fsub+0xb2>
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e71c      	b.n	8000d7a <__aeabi_fsub+0x1a6>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e7b1      	b.n	8000ea8 <__aeabi_fsub+0x2d4>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d0f1      	beq.n	8000f2c <__aeabi_fsub+0x358>
 8000f48:	0013      	movs	r3, r2
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	e6fc      	b.n	8000d48 <__aeabi_fsub+0x174>
 8000f4e:	2500      	movs	r5, #0
 8000f50:	e6fa      	b.n	8000d48 <__aeabi_fsub+0x174>
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	7dffffff 	.word	0x7dffffff
 8000f58:	fbffffff 	.word	0xfbffffff

08000f5c <__aeabi_fcmpun>:
 8000f5c:	0242      	lsls	r2, r0, #9
 8000f5e:	024b      	lsls	r3, r1, #9
 8000f60:	0040      	lsls	r0, r0, #1
 8000f62:	0049      	lsls	r1, r1, #1
 8000f64:	0a52      	lsrs	r2, r2, #9
 8000f66:	0a5b      	lsrs	r3, r3, #9
 8000f68:	0e09      	lsrs	r1, r1, #24
 8000f6a:	0e00      	lsrs	r0, r0, #24
 8000f6c:	28ff      	cmp	r0, #255	; 0xff
 8000f6e:	d006      	beq.n	8000f7e <__aeabi_fcmpun+0x22>
 8000f70:	2000      	movs	r0, #0
 8000f72:	29ff      	cmp	r1, #255	; 0xff
 8000f74:	d102      	bne.n	8000f7c <__aeabi_fcmpun+0x20>
 8000f76:	0018      	movs	r0, r3
 8000f78:	1e43      	subs	r3, r0, #1
 8000f7a:	4198      	sbcs	r0, r3
 8000f7c:	4770      	bx	lr
 8000f7e:	38fe      	subs	r0, #254	; 0xfe
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d1fb      	bne.n	8000f7c <__aeabi_fcmpun+0x20>
 8000f84:	e7f4      	b.n	8000f70 <__aeabi_fcmpun+0x14>
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <__aeabi_ddiv>:
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	46de      	mov	lr, fp
 8000f8e:	464e      	mov	r6, r9
 8000f90:	4645      	mov	r5, r8
 8000f92:	b5e0      	push	{r5, r6, r7, lr}
 8000f94:	4683      	mov	fp, r0
 8000f96:	0007      	movs	r7, r0
 8000f98:	030e      	lsls	r6, r1, #12
 8000f9a:	0048      	lsls	r0, r1, #1
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	4692      	mov	sl, r2
 8000fa0:	001c      	movs	r4, r3
 8000fa2:	0b36      	lsrs	r6, r6, #12
 8000fa4:	0d40      	lsrs	r0, r0, #21
 8000fa6:	0fcd      	lsrs	r5, r1, #31
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0x26>
 8000fac:	e09d      	b.n	80010ea <__aeabi_ddiv+0x162>
 8000fae:	4b95      	ldr	r3, [pc, #596]	; (8001204 <__aeabi_ddiv+0x27c>)
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d039      	beq.n	8001028 <__aeabi_ddiv+0xa0>
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	00f6      	lsls	r6, r6, #3
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	431e      	orrs	r6, r3
 8000fbc:	4a92      	ldr	r2, [pc, #584]	; (8001208 <__aeabi_ddiv+0x280>)
 8000fbe:	0f7b      	lsrs	r3, r7, #29
 8000fc0:	4333      	orrs	r3, r6
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	4694      	mov	ip, r2
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	4463      	add	r3, ip
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2600      	movs	r6, #0
 8000fd0:	00ff      	lsls	r7, r7, #3
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	0323      	lsls	r3, r4, #12
 8000fd6:	0b1b      	lsrs	r3, r3, #12
 8000fd8:	4698      	mov	r8, r3
 8000fda:	0063      	lsls	r3, r4, #1
 8000fdc:	0fe4      	lsrs	r4, r4, #31
 8000fde:	4652      	mov	r2, sl
 8000fe0:	0d5b      	lsrs	r3, r3, #21
 8000fe2:	9401      	str	r4, [sp, #4]
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x60>
 8000fe6:	e0b3      	b.n	8001150 <__aeabi_ddiv+0x1c8>
 8000fe8:	4986      	ldr	r1, [pc, #536]	; (8001204 <__aeabi_ddiv+0x27c>)
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_ddiv+0x68>
 8000fee:	e09e      	b.n	800112e <__aeabi_ddiv+0x1a6>
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	00d1      	lsls	r1, r2, #3
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	0412      	lsls	r2, r2, #16
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	4651      	mov	r1, sl
 8000ffc:	0f49      	lsrs	r1, r1, #29
 8000ffe:	4311      	orrs	r1, r2
 8001000:	468b      	mov	fp, r1
 8001002:	4981      	ldr	r1, [pc, #516]	; (8001208 <__aeabi_ddiv+0x280>)
 8001004:	4652      	mov	r2, sl
 8001006:	468c      	mov	ip, r1
 8001008:	9900      	ldr	r1, [sp, #0]
 800100a:	4463      	add	r3, ip
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	2100      	movs	r1, #0
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	002b      	movs	r3, r5
 8001016:	4063      	eors	r3, r4
 8001018:	469a      	mov	sl, r3
 800101a:	2e0f      	cmp	r6, #15
 800101c:	d900      	bls.n	8001020 <__aeabi_ddiv+0x98>
 800101e:	e105      	b.n	800122c <__aeabi_ddiv+0x2a4>
 8001020:	4b7a      	ldr	r3, [pc, #488]	; (800120c <__aeabi_ddiv+0x284>)
 8001022:	00b6      	lsls	r6, r6, #2
 8001024:	599b      	ldr	r3, [r3, r6]
 8001026:	469f      	mov	pc, r3
 8001028:	465b      	mov	r3, fp
 800102a:	4333      	orrs	r3, r6
 800102c:	4699      	mov	r9, r3
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0xaa>
 8001030:	e0b8      	b.n	80011a4 <__aeabi_ddiv+0x21c>
 8001032:	2302      	movs	r3, #2
 8001034:	2608      	movs	r6, #8
 8001036:	2700      	movs	r7, #0
 8001038:	9000      	str	r0, [sp, #0]
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	e7ca      	b.n	8000fd4 <__aeabi_ddiv+0x4c>
 800103e:	46cb      	mov	fp, r9
 8001040:	003a      	movs	r2, r7
 8001042:	9902      	ldr	r1, [sp, #8]
 8001044:	9501      	str	r5, [sp, #4]
 8001046:	9b01      	ldr	r3, [sp, #4]
 8001048:	469a      	mov	sl, r3
 800104a:	2902      	cmp	r1, #2
 800104c:	d027      	beq.n	800109e <__aeabi_ddiv+0x116>
 800104e:	2903      	cmp	r1, #3
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0xcc>
 8001052:	e280      	b.n	8001556 <__aeabi_ddiv+0x5ce>
 8001054:	2901      	cmp	r1, #1
 8001056:	d044      	beq.n	80010e2 <__aeabi_ddiv+0x15a>
 8001058:	496d      	ldr	r1, [pc, #436]	; (8001210 <__aeabi_ddiv+0x288>)
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	468c      	mov	ip, r1
 800105e:	4463      	add	r3, ip
 8001060:	001c      	movs	r4, r3
 8001062:	2c00      	cmp	r4, #0
 8001064:	dd38      	ble.n	80010d8 <__aeabi_ddiv+0x150>
 8001066:	0753      	lsls	r3, r2, #29
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0xe4>
 800106a:	e213      	b.n	8001494 <__aeabi_ddiv+0x50c>
 800106c:	08d2      	lsrs	r2, r2, #3
 800106e:	465b      	mov	r3, fp
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	d509      	bpl.n	8001088 <__aeabi_ddiv+0x100>
 8001074:	4659      	mov	r1, fp
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <__aeabi_ddiv+0x28c>)
 8001078:	4019      	ands	r1, r3
 800107a:	468b      	mov	fp, r1
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	00c9      	lsls	r1, r1, #3
 8001080:	468c      	mov	ip, r1
 8001082:	9b00      	ldr	r3, [sp, #0]
 8001084:	4463      	add	r3, ip
 8001086:	001c      	movs	r4, r3
 8001088:	4b63      	ldr	r3, [pc, #396]	; (8001218 <__aeabi_ddiv+0x290>)
 800108a:	429c      	cmp	r4, r3
 800108c:	dc07      	bgt.n	800109e <__aeabi_ddiv+0x116>
 800108e:	465b      	mov	r3, fp
 8001090:	0564      	lsls	r4, r4, #21
 8001092:	075f      	lsls	r7, r3, #29
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	4317      	orrs	r7, r2
 8001098:	0b1b      	lsrs	r3, r3, #12
 800109a:	0d62      	lsrs	r2, r4, #21
 800109c:	e002      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 800109e:	2300      	movs	r3, #0
 80010a0:	2700      	movs	r7, #0
 80010a2:	4a58      	ldr	r2, [pc, #352]	; (8001204 <__aeabi_ddiv+0x27c>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	031b      	lsls	r3, r3, #12
 80010a8:	0b1c      	lsrs	r4, r3, #12
 80010aa:	0d0b      	lsrs	r3, r1, #20
 80010ac:	051b      	lsls	r3, r3, #20
 80010ae:	4323      	orrs	r3, r4
 80010b0:	0514      	lsls	r4, r2, #20
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <__aeabi_ddiv+0x294>)
 80010b4:	0038      	movs	r0, r7
 80010b6:	4013      	ands	r3, r2
 80010b8:	431c      	orrs	r4, r3
 80010ba:	4653      	mov	r3, sl
 80010bc:	0064      	lsls	r4, r4, #1
 80010be:	07db      	lsls	r3, r3, #31
 80010c0:	0864      	lsrs	r4, r4, #1
 80010c2:	431c      	orrs	r4, r3
 80010c4:	0021      	movs	r1, r4
 80010c6:	b005      	add	sp, #20
 80010c8:	bc3c      	pop	{r2, r3, r4, r5}
 80010ca:	4690      	mov	r8, r2
 80010cc:	4699      	mov	r9, r3
 80010ce:	46a2      	mov	sl, r4
 80010d0:	46ab      	mov	fp, r5
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d4:	2201      	movs	r2, #1
 80010d6:	4252      	negs	r2, r2
 80010d8:	2301      	movs	r3, #1
 80010da:	1b1b      	subs	r3, r3, r4
 80010dc:	2b38      	cmp	r3, #56	; 0x38
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_ddiv+0x15a>
 80010e0:	e1ad      	b.n	800143e <__aeabi_ddiv+0x4b6>
 80010e2:	2200      	movs	r2, #0
 80010e4:	2300      	movs	r3, #0
 80010e6:	2700      	movs	r7, #0
 80010e8:	e7dc      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 80010ea:	465b      	mov	r3, fp
 80010ec:	4333      	orrs	r3, r6
 80010ee:	4699      	mov	r9, r3
 80010f0:	d05e      	beq.n	80011b0 <__aeabi_ddiv+0x228>
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_ddiv+0x170>
 80010f6:	e18a      	b.n	800140e <__aeabi_ddiv+0x486>
 80010f8:	0030      	movs	r0, r6
 80010fa:	f000 fd8f 	bl	8001c1c <__clzsi2>
 80010fe:	0003      	movs	r3, r0
 8001100:	3b0b      	subs	r3, #11
 8001102:	2b1c      	cmp	r3, #28
 8001104:	dd00      	ble.n	8001108 <__aeabi_ddiv+0x180>
 8001106:	e17b      	b.n	8001400 <__aeabi_ddiv+0x478>
 8001108:	221d      	movs	r2, #29
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	465a      	mov	r2, fp
 800110e:	0001      	movs	r1, r0
 8001110:	40da      	lsrs	r2, r3
 8001112:	3908      	subs	r1, #8
 8001114:	408e      	lsls	r6, r1
 8001116:	0013      	movs	r3, r2
 8001118:	465f      	mov	r7, fp
 800111a:	4333      	orrs	r3, r6
 800111c:	4699      	mov	r9, r3
 800111e:	408f      	lsls	r7, r1
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <__aeabi_ddiv+0x298>)
 8001122:	2600      	movs	r6, #0
 8001124:	1a1b      	subs	r3, r3, r0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2300      	movs	r3, #0
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	e752      	b.n	8000fd4 <__aeabi_ddiv+0x4c>
 800112e:	4641      	mov	r1, r8
 8001130:	4653      	mov	r3, sl
 8001132:	430b      	orrs	r3, r1
 8001134:	493b      	ldr	r1, [pc, #236]	; (8001224 <__aeabi_ddiv+0x29c>)
 8001136:	469b      	mov	fp, r3
 8001138:	468c      	mov	ip, r1
 800113a:	9b00      	ldr	r3, [sp, #0]
 800113c:	4463      	add	r3, ip
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	465b      	mov	r3, fp
 8001142:	2b00      	cmp	r3, #0
 8001144:	d13b      	bne.n	80011be <__aeabi_ddiv+0x236>
 8001146:	2302      	movs	r3, #2
 8001148:	2200      	movs	r2, #0
 800114a:	431e      	orrs	r6, r3
 800114c:	2102      	movs	r1, #2
 800114e:	e761      	b.n	8001014 <__aeabi_ddiv+0x8c>
 8001150:	4643      	mov	r3, r8
 8001152:	4313      	orrs	r3, r2
 8001154:	469b      	mov	fp, r3
 8001156:	d037      	beq.n	80011c8 <__aeabi_ddiv+0x240>
 8001158:	4643      	mov	r3, r8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x1d8>
 800115e:	e162      	b.n	8001426 <__aeabi_ddiv+0x49e>
 8001160:	4640      	mov	r0, r8
 8001162:	f000 fd5b 	bl	8001c1c <__clzsi2>
 8001166:	0003      	movs	r3, r0
 8001168:	3b0b      	subs	r3, #11
 800116a:	2b1c      	cmp	r3, #28
 800116c:	dd00      	ble.n	8001170 <__aeabi_ddiv+0x1e8>
 800116e:	e153      	b.n	8001418 <__aeabi_ddiv+0x490>
 8001170:	0002      	movs	r2, r0
 8001172:	4641      	mov	r1, r8
 8001174:	3a08      	subs	r2, #8
 8001176:	4091      	lsls	r1, r2
 8001178:	4688      	mov	r8, r1
 800117a:	211d      	movs	r1, #29
 800117c:	1acb      	subs	r3, r1, r3
 800117e:	4651      	mov	r1, sl
 8001180:	40d9      	lsrs	r1, r3
 8001182:	000b      	movs	r3, r1
 8001184:	4641      	mov	r1, r8
 8001186:	430b      	orrs	r3, r1
 8001188:	469b      	mov	fp, r3
 800118a:	4653      	mov	r3, sl
 800118c:	4093      	lsls	r3, r2
 800118e:	001a      	movs	r2, r3
 8001190:	9b00      	ldr	r3, [sp, #0]
 8001192:	4925      	ldr	r1, [pc, #148]	; (8001228 <__aeabi_ddiv+0x2a0>)
 8001194:	469c      	mov	ip, r3
 8001196:	4460      	add	r0, ip
 8001198:	0003      	movs	r3, r0
 800119a:	468c      	mov	ip, r1
 800119c:	4463      	add	r3, ip
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2100      	movs	r1, #0
 80011a2:	e737      	b.n	8001014 <__aeabi_ddiv+0x8c>
 80011a4:	2303      	movs	r3, #3
 80011a6:	46b1      	mov	r9, r6
 80011a8:	9000      	str	r0, [sp, #0]
 80011aa:	260c      	movs	r6, #12
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	e711      	b.n	8000fd4 <__aeabi_ddiv+0x4c>
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	2604      	movs	r6, #4
 80011b8:	2700      	movs	r7, #0
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	e70a      	b.n	8000fd4 <__aeabi_ddiv+0x4c>
 80011be:	2303      	movs	r3, #3
 80011c0:	46c3      	mov	fp, r8
 80011c2:	431e      	orrs	r6, r3
 80011c4:	2103      	movs	r1, #3
 80011c6:	e725      	b.n	8001014 <__aeabi_ddiv+0x8c>
 80011c8:	3301      	adds	r3, #1
 80011ca:	431e      	orrs	r6, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	2101      	movs	r1, #1
 80011d0:	e720      	b.n	8001014 <__aeabi_ddiv+0x8c>
 80011d2:	2300      	movs	r3, #0
 80011d4:	469a      	mov	sl, r3
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	2700      	movs	r7, #0
 80011da:	031b      	lsls	r3, r3, #12
 80011dc:	4a09      	ldr	r2, [pc, #36]	; (8001204 <__aeabi_ddiv+0x27c>)
 80011de:	e761      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	4649      	mov	r1, r9
 80011e4:	031b      	lsls	r3, r3, #12
 80011e6:	4219      	tst	r1, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x264>
 80011ea:	e0e2      	b.n	80013b2 <__aeabi_ddiv+0x42a>
 80011ec:	4659      	mov	r1, fp
 80011ee:	4219      	tst	r1, r3
 80011f0:	d000      	beq.n	80011f4 <__aeabi_ddiv+0x26c>
 80011f2:	e0de      	b.n	80013b2 <__aeabi_ddiv+0x42a>
 80011f4:	430b      	orrs	r3, r1
 80011f6:	031b      	lsls	r3, r3, #12
 80011f8:	0017      	movs	r7, r2
 80011fa:	0b1b      	lsrs	r3, r3, #12
 80011fc:	46a2      	mov	sl, r4
 80011fe:	4a01      	ldr	r2, [pc, #4]	; (8001204 <__aeabi_ddiv+0x27c>)
 8001200:	e750      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	000007ff 	.word	0x000007ff
 8001208:	fffffc01 	.word	0xfffffc01
 800120c:	080055d8 	.word	0x080055d8
 8001210:	000003ff 	.word	0x000003ff
 8001214:	feffffff 	.word	0xfeffffff
 8001218:	000007fe 	.word	0x000007fe
 800121c:	800fffff 	.word	0x800fffff
 8001220:	fffffc0d 	.word	0xfffffc0d
 8001224:	fffff801 	.word	0xfffff801
 8001228:	000003f3 	.word	0x000003f3
 800122c:	45d9      	cmp	r9, fp
 800122e:	d900      	bls.n	8001232 <__aeabi_ddiv+0x2aa>
 8001230:	e0cb      	b.n	80013ca <__aeabi_ddiv+0x442>
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x2ae>
 8001234:	e0c6      	b.n	80013c4 <__aeabi_ddiv+0x43c>
 8001236:	003c      	movs	r4, r7
 8001238:	4648      	mov	r0, r9
 800123a:	2700      	movs	r7, #0
 800123c:	9b00      	ldr	r3, [sp, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	465b      	mov	r3, fp
 8001244:	0e16      	lsrs	r6, r2, #24
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	431e      	orrs	r6, r3
 800124a:	0213      	lsls	r3, r2, #8
 800124c:	4698      	mov	r8, r3
 800124e:	0433      	lsls	r3, r6, #16
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	4699      	mov	r9, r3
 8001254:	0c31      	lsrs	r1, r6, #16
 8001256:	9101      	str	r1, [sp, #4]
 8001258:	f7fe ffd8 	bl	800020c <__aeabi_uidivmod>
 800125c:	464a      	mov	r2, r9
 800125e:	4342      	muls	r2, r0
 8001260:	040b      	lsls	r3, r1, #16
 8001262:	0c21      	lsrs	r1, r4, #16
 8001264:	0005      	movs	r5, r0
 8001266:	4319      	orrs	r1, r3
 8001268:	428a      	cmp	r2, r1
 800126a:	d907      	bls.n	800127c <__aeabi_ddiv+0x2f4>
 800126c:	1989      	adds	r1, r1, r6
 800126e:	3d01      	subs	r5, #1
 8001270:	428e      	cmp	r6, r1
 8001272:	d803      	bhi.n	800127c <__aeabi_ddiv+0x2f4>
 8001274:	428a      	cmp	r2, r1
 8001276:	d901      	bls.n	800127c <__aeabi_ddiv+0x2f4>
 8001278:	1e85      	subs	r5, r0, #2
 800127a:	1989      	adds	r1, r1, r6
 800127c:	1a88      	subs	r0, r1, r2
 800127e:	9901      	ldr	r1, [sp, #4]
 8001280:	f7fe ffc4 	bl	800020c <__aeabi_uidivmod>
 8001284:	0409      	lsls	r1, r1, #16
 8001286:	468c      	mov	ip, r1
 8001288:	464a      	mov	r2, r9
 800128a:	0421      	lsls	r1, r4, #16
 800128c:	4664      	mov	r4, ip
 800128e:	4342      	muls	r2, r0
 8001290:	0c09      	lsrs	r1, r1, #16
 8001292:	0003      	movs	r3, r0
 8001294:	4321      	orrs	r1, r4
 8001296:	428a      	cmp	r2, r1
 8001298:	d904      	bls.n	80012a4 <__aeabi_ddiv+0x31c>
 800129a:	1989      	adds	r1, r1, r6
 800129c:	3b01      	subs	r3, #1
 800129e:	428e      	cmp	r6, r1
 80012a0:	d800      	bhi.n	80012a4 <__aeabi_ddiv+0x31c>
 80012a2:	e0f1      	b.n	8001488 <__aeabi_ddiv+0x500>
 80012a4:	042d      	lsls	r5, r5, #16
 80012a6:	431d      	orrs	r5, r3
 80012a8:	46ab      	mov	fp, r5
 80012aa:	4643      	mov	r3, r8
 80012ac:	1a89      	subs	r1, r1, r2
 80012ae:	4642      	mov	r2, r8
 80012b0:	0c28      	lsrs	r0, r5, #16
 80012b2:	0412      	lsls	r2, r2, #16
 80012b4:	0c1d      	lsrs	r5, r3, #16
 80012b6:	465b      	mov	r3, fp
 80012b8:	0c14      	lsrs	r4, r2, #16
 80012ba:	0022      	movs	r2, r4
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	0c1b      	lsrs	r3, r3, #16
 80012c0:	435a      	muls	r2, r3
 80012c2:	9403      	str	r4, [sp, #12]
 80012c4:	436b      	muls	r3, r5
 80012c6:	4344      	muls	r4, r0
 80012c8:	9502      	str	r5, [sp, #8]
 80012ca:	4368      	muls	r0, r5
 80012cc:	191b      	adds	r3, r3, r4
 80012ce:	0c15      	lsrs	r5, r2, #16
 80012d0:	18eb      	adds	r3, r5, r3
 80012d2:	429c      	cmp	r4, r3
 80012d4:	d903      	bls.n	80012de <__aeabi_ddiv+0x356>
 80012d6:	2480      	movs	r4, #128	; 0x80
 80012d8:	0264      	lsls	r4, r4, #9
 80012da:	46a4      	mov	ip, r4
 80012dc:	4460      	add	r0, ip
 80012de:	0c1c      	lsrs	r4, r3, #16
 80012e0:	0415      	lsls	r5, r2, #16
 80012e2:	041b      	lsls	r3, r3, #16
 80012e4:	0c2d      	lsrs	r5, r5, #16
 80012e6:	1820      	adds	r0, r4, r0
 80012e8:	195d      	adds	r5, r3, r5
 80012ea:	4281      	cmp	r1, r0
 80012ec:	d377      	bcc.n	80013de <__aeabi_ddiv+0x456>
 80012ee:	d073      	beq.n	80013d8 <__aeabi_ddiv+0x450>
 80012f0:	1a0c      	subs	r4, r1, r0
 80012f2:	4aa2      	ldr	r2, [pc, #648]	; (800157c <__aeabi_ddiv+0x5f4>)
 80012f4:	1b7d      	subs	r5, r7, r5
 80012f6:	42af      	cmp	r7, r5
 80012f8:	41bf      	sbcs	r7, r7
 80012fa:	4694      	mov	ip, r2
 80012fc:	9b00      	ldr	r3, [sp, #0]
 80012fe:	427f      	negs	r7, r7
 8001300:	4463      	add	r3, ip
 8001302:	1be0      	subs	r0, r4, r7
 8001304:	001c      	movs	r4, r3
 8001306:	4286      	cmp	r6, r0
 8001308:	d100      	bne.n	800130c <__aeabi_ddiv+0x384>
 800130a:	e0db      	b.n	80014c4 <__aeabi_ddiv+0x53c>
 800130c:	9901      	ldr	r1, [sp, #4]
 800130e:	f7fe ff7d 	bl	800020c <__aeabi_uidivmod>
 8001312:	464a      	mov	r2, r9
 8001314:	4342      	muls	r2, r0
 8001316:	040b      	lsls	r3, r1, #16
 8001318:	0c29      	lsrs	r1, r5, #16
 800131a:	0007      	movs	r7, r0
 800131c:	4319      	orrs	r1, r3
 800131e:	428a      	cmp	r2, r1
 8001320:	d907      	bls.n	8001332 <__aeabi_ddiv+0x3aa>
 8001322:	1989      	adds	r1, r1, r6
 8001324:	3f01      	subs	r7, #1
 8001326:	428e      	cmp	r6, r1
 8001328:	d803      	bhi.n	8001332 <__aeabi_ddiv+0x3aa>
 800132a:	428a      	cmp	r2, r1
 800132c:	d901      	bls.n	8001332 <__aeabi_ddiv+0x3aa>
 800132e:	1e87      	subs	r7, r0, #2
 8001330:	1989      	adds	r1, r1, r6
 8001332:	1a88      	subs	r0, r1, r2
 8001334:	9901      	ldr	r1, [sp, #4]
 8001336:	f7fe ff69 	bl	800020c <__aeabi_uidivmod>
 800133a:	0409      	lsls	r1, r1, #16
 800133c:	464a      	mov	r2, r9
 800133e:	4689      	mov	r9, r1
 8001340:	0429      	lsls	r1, r5, #16
 8001342:	464d      	mov	r5, r9
 8001344:	4342      	muls	r2, r0
 8001346:	0c09      	lsrs	r1, r1, #16
 8001348:	0003      	movs	r3, r0
 800134a:	4329      	orrs	r1, r5
 800134c:	428a      	cmp	r2, r1
 800134e:	d907      	bls.n	8001360 <__aeabi_ddiv+0x3d8>
 8001350:	1989      	adds	r1, r1, r6
 8001352:	3b01      	subs	r3, #1
 8001354:	428e      	cmp	r6, r1
 8001356:	d803      	bhi.n	8001360 <__aeabi_ddiv+0x3d8>
 8001358:	428a      	cmp	r2, r1
 800135a:	d901      	bls.n	8001360 <__aeabi_ddiv+0x3d8>
 800135c:	1e83      	subs	r3, r0, #2
 800135e:	1989      	adds	r1, r1, r6
 8001360:	043f      	lsls	r7, r7, #16
 8001362:	1a89      	subs	r1, r1, r2
 8001364:	003a      	movs	r2, r7
 8001366:	9f03      	ldr	r7, [sp, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	0038      	movs	r0, r7
 800136c:	0413      	lsls	r3, r2, #16
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	4358      	muls	r0, r3
 8001372:	4681      	mov	r9, r0
 8001374:	9802      	ldr	r0, [sp, #8]
 8001376:	0c15      	lsrs	r5, r2, #16
 8001378:	436f      	muls	r7, r5
 800137a:	4343      	muls	r3, r0
 800137c:	4345      	muls	r5, r0
 800137e:	4648      	mov	r0, r9
 8001380:	0c00      	lsrs	r0, r0, #16
 8001382:	4684      	mov	ip, r0
 8001384:	19db      	adds	r3, r3, r7
 8001386:	4463      	add	r3, ip
 8001388:	429f      	cmp	r7, r3
 800138a:	d903      	bls.n	8001394 <__aeabi_ddiv+0x40c>
 800138c:	2080      	movs	r0, #128	; 0x80
 800138e:	0240      	lsls	r0, r0, #9
 8001390:	4684      	mov	ip, r0
 8001392:	4465      	add	r5, ip
 8001394:	4648      	mov	r0, r9
 8001396:	0c1f      	lsrs	r7, r3, #16
 8001398:	0400      	lsls	r0, r0, #16
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	0c00      	lsrs	r0, r0, #16
 800139e:	197d      	adds	r5, r7, r5
 80013a0:	1818      	adds	r0, r3, r0
 80013a2:	42a9      	cmp	r1, r5
 80013a4:	d200      	bcs.n	80013a8 <__aeabi_ddiv+0x420>
 80013a6:	e084      	b.n	80014b2 <__aeabi_ddiv+0x52a>
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x424>
 80013aa:	e07f      	b.n	80014ac <__aeabi_ddiv+0x524>
 80013ac:	2301      	movs	r3, #1
 80013ae:	431a      	orrs	r2, r3
 80013b0:	e657      	b.n	8001062 <__aeabi_ddiv+0xda>
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	464a      	mov	r2, r9
 80013b6:	031b      	lsls	r3, r3, #12
 80013b8:	4313      	orrs	r3, r2
 80013ba:	031b      	lsls	r3, r3, #12
 80013bc:	0b1b      	lsrs	r3, r3, #12
 80013be:	46aa      	mov	sl, r5
 80013c0:	4a6f      	ldr	r2, [pc, #444]	; (8001580 <__aeabi_ddiv+0x5f8>)
 80013c2:	e66f      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 80013c4:	42ba      	cmp	r2, r7
 80013c6:	d900      	bls.n	80013ca <__aeabi_ddiv+0x442>
 80013c8:	e735      	b.n	8001236 <__aeabi_ddiv+0x2ae>
 80013ca:	464b      	mov	r3, r9
 80013cc:	07dc      	lsls	r4, r3, #31
 80013ce:	0858      	lsrs	r0, r3, #1
 80013d0:	087b      	lsrs	r3, r7, #1
 80013d2:	431c      	orrs	r4, r3
 80013d4:	07ff      	lsls	r7, r7, #31
 80013d6:	e734      	b.n	8001242 <__aeabi_ddiv+0x2ba>
 80013d8:	2400      	movs	r4, #0
 80013da:	42af      	cmp	r7, r5
 80013dc:	d289      	bcs.n	80012f2 <__aeabi_ddiv+0x36a>
 80013de:	4447      	add	r7, r8
 80013e0:	4547      	cmp	r7, r8
 80013e2:	41a4      	sbcs	r4, r4
 80013e4:	465b      	mov	r3, fp
 80013e6:	4264      	negs	r4, r4
 80013e8:	19a4      	adds	r4, r4, r6
 80013ea:	1864      	adds	r4, r4, r1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	42a6      	cmp	r6, r4
 80013f0:	d21e      	bcs.n	8001430 <__aeabi_ddiv+0x4a8>
 80013f2:	42a0      	cmp	r0, r4
 80013f4:	d86d      	bhi.n	80014d2 <__aeabi_ddiv+0x54a>
 80013f6:	d100      	bne.n	80013fa <__aeabi_ddiv+0x472>
 80013f8:	e0b6      	b.n	8001568 <__aeabi_ddiv+0x5e0>
 80013fa:	1a24      	subs	r4, r4, r0
 80013fc:	469b      	mov	fp, r3
 80013fe:	e778      	b.n	80012f2 <__aeabi_ddiv+0x36a>
 8001400:	0003      	movs	r3, r0
 8001402:	465a      	mov	r2, fp
 8001404:	3b28      	subs	r3, #40	; 0x28
 8001406:	409a      	lsls	r2, r3
 8001408:	2700      	movs	r7, #0
 800140a:	4691      	mov	r9, r2
 800140c:	e688      	b.n	8001120 <__aeabi_ddiv+0x198>
 800140e:	4658      	mov	r0, fp
 8001410:	f000 fc04 	bl	8001c1c <__clzsi2>
 8001414:	3020      	adds	r0, #32
 8001416:	e672      	b.n	80010fe <__aeabi_ddiv+0x176>
 8001418:	0003      	movs	r3, r0
 800141a:	4652      	mov	r2, sl
 800141c:	3b28      	subs	r3, #40	; 0x28
 800141e:	409a      	lsls	r2, r3
 8001420:	4693      	mov	fp, r2
 8001422:	2200      	movs	r2, #0
 8001424:	e6b4      	b.n	8001190 <__aeabi_ddiv+0x208>
 8001426:	4650      	mov	r0, sl
 8001428:	f000 fbf8 	bl	8001c1c <__clzsi2>
 800142c:	3020      	adds	r0, #32
 800142e:	e69a      	b.n	8001166 <__aeabi_ddiv+0x1de>
 8001430:	42a6      	cmp	r6, r4
 8001432:	d1e2      	bne.n	80013fa <__aeabi_ddiv+0x472>
 8001434:	45b8      	cmp	r8, r7
 8001436:	d9dc      	bls.n	80013f2 <__aeabi_ddiv+0x46a>
 8001438:	1a34      	subs	r4, r6, r0
 800143a:	469b      	mov	fp, r3
 800143c:	e759      	b.n	80012f2 <__aeabi_ddiv+0x36a>
 800143e:	2b1f      	cmp	r3, #31
 8001440:	dc65      	bgt.n	800150e <__aeabi_ddiv+0x586>
 8001442:	4c50      	ldr	r4, [pc, #320]	; (8001584 <__aeabi_ddiv+0x5fc>)
 8001444:	9900      	ldr	r1, [sp, #0]
 8001446:	46a4      	mov	ip, r4
 8001448:	465c      	mov	r4, fp
 800144a:	4461      	add	r1, ip
 800144c:	0008      	movs	r0, r1
 800144e:	408c      	lsls	r4, r1
 8001450:	0011      	movs	r1, r2
 8001452:	4082      	lsls	r2, r0
 8001454:	40d9      	lsrs	r1, r3
 8001456:	1e50      	subs	r0, r2, #1
 8001458:	4182      	sbcs	r2, r0
 800145a:	430c      	orrs	r4, r1
 800145c:	4314      	orrs	r4, r2
 800145e:	465a      	mov	r2, fp
 8001460:	40da      	lsrs	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	0762      	lsls	r2, r4, #29
 8001466:	d009      	beq.n	800147c <__aeabi_ddiv+0x4f4>
 8001468:	220f      	movs	r2, #15
 800146a:	4022      	ands	r2, r4
 800146c:	2a04      	cmp	r2, #4
 800146e:	d005      	beq.n	800147c <__aeabi_ddiv+0x4f4>
 8001470:	0022      	movs	r2, r4
 8001472:	1d14      	adds	r4, r2, #4
 8001474:	4294      	cmp	r4, r2
 8001476:	4189      	sbcs	r1, r1
 8001478:	4249      	negs	r1, r1
 800147a:	185b      	adds	r3, r3, r1
 800147c:	021a      	lsls	r2, r3, #8
 800147e:	d562      	bpl.n	8001546 <__aeabi_ddiv+0x5be>
 8001480:	2201      	movs	r2, #1
 8001482:	2300      	movs	r3, #0
 8001484:	2700      	movs	r7, #0
 8001486:	e60d      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 8001488:	428a      	cmp	r2, r1
 800148a:	d800      	bhi.n	800148e <__aeabi_ddiv+0x506>
 800148c:	e70a      	b.n	80012a4 <__aeabi_ddiv+0x31c>
 800148e:	1e83      	subs	r3, r0, #2
 8001490:	1989      	adds	r1, r1, r6
 8001492:	e707      	b.n	80012a4 <__aeabi_ddiv+0x31c>
 8001494:	230f      	movs	r3, #15
 8001496:	4013      	ands	r3, r2
 8001498:	2b04      	cmp	r3, #4
 800149a:	d100      	bne.n	800149e <__aeabi_ddiv+0x516>
 800149c:	e5e6      	b.n	800106c <__aeabi_ddiv+0xe4>
 800149e:	1d17      	adds	r7, r2, #4
 80014a0:	4297      	cmp	r7, r2
 80014a2:	4192      	sbcs	r2, r2
 80014a4:	4253      	negs	r3, r2
 80014a6:	449b      	add	fp, r3
 80014a8:	08fa      	lsrs	r2, r7, #3
 80014aa:	e5e0      	b.n	800106e <__aeabi_ddiv+0xe6>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x52a>
 80014b0:	e5d7      	b.n	8001062 <__aeabi_ddiv+0xda>
 80014b2:	1871      	adds	r1, r6, r1
 80014b4:	1e53      	subs	r3, r2, #1
 80014b6:	42b1      	cmp	r1, r6
 80014b8:	d327      	bcc.n	800150a <__aeabi_ddiv+0x582>
 80014ba:	42a9      	cmp	r1, r5
 80014bc:	d315      	bcc.n	80014ea <__aeabi_ddiv+0x562>
 80014be:	d058      	beq.n	8001572 <__aeabi_ddiv+0x5ea>
 80014c0:	001a      	movs	r2, r3
 80014c2:	e773      	b.n	80013ac <__aeabi_ddiv+0x424>
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_ddiv+0x542>
 80014c8:	e604      	b.n	80010d4 <__aeabi_ddiv+0x14c>
 80014ca:	2301      	movs	r3, #1
 80014cc:	2200      	movs	r2, #0
 80014ce:	449b      	add	fp, r3
 80014d0:	e5cd      	b.n	800106e <__aeabi_ddiv+0xe6>
 80014d2:	2302      	movs	r3, #2
 80014d4:	4447      	add	r7, r8
 80014d6:	4547      	cmp	r7, r8
 80014d8:	4189      	sbcs	r1, r1
 80014da:	425b      	negs	r3, r3
 80014dc:	469c      	mov	ip, r3
 80014de:	4249      	negs	r1, r1
 80014e0:	1989      	adds	r1, r1, r6
 80014e2:	190c      	adds	r4, r1, r4
 80014e4:	44e3      	add	fp, ip
 80014e6:	1a24      	subs	r4, r4, r0
 80014e8:	e703      	b.n	80012f2 <__aeabi_ddiv+0x36a>
 80014ea:	4643      	mov	r3, r8
 80014ec:	005f      	lsls	r7, r3, #1
 80014ee:	4547      	cmp	r7, r8
 80014f0:	419b      	sbcs	r3, r3
 80014f2:	46b8      	mov	r8, r7
 80014f4:	425b      	negs	r3, r3
 80014f6:	199e      	adds	r6, r3, r6
 80014f8:	3a02      	subs	r2, #2
 80014fa:	1989      	adds	r1, r1, r6
 80014fc:	42a9      	cmp	r1, r5
 80014fe:	d000      	beq.n	8001502 <__aeabi_ddiv+0x57a>
 8001500:	e754      	b.n	80013ac <__aeabi_ddiv+0x424>
 8001502:	4540      	cmp	r0, r8
 8001504:	d000      	beq.n	8001508 <__aeabi_ddiv+0x580>
 8001506:	e751      	b.n	80013ac <__aeabi_ddiv+0x424>
 8001508:	e5ab      	b.n	8001062 <__aeabi_ddiv+0xda>
 800150a:	001a      	movs	r2, r3
 800150c:	e7f6      	b.n	80014fc <__aeabi_ddiv+0x574>
 800150e:	211f      	movs	r1, #31
 8001510:	465f      	mov	r7, fp
 8001512:	4249      	negs	r1, r1
 8001514:	1b0c      	subs	r4, r1, r4
 8001516:	40e7      	lsrs	r7, r4
 8001518:	2b20      	cmp	r3, #32
 800151a:	d007      	beq.n	800152c <__aeabi_ddiv+0x5a4>
 800151c:	491a      	ldr	r1, [pc, #104]	; (8001588 <__aeabi_ddiv+0x600>)
 800151e:	9b00      	ldr	r3, [sp, #0]
 8001520:	468c      	mov	ip, r1
 8001522:	4463      	add	r3, ip
 8001524:	0018      	movs	r0, r3
 8001526:	465b      	mov	r3, fp
 8001528:	4083      	lsls	r3, r0
 800152a:	431a      	orrs	r2, r3
 800152c:	1e50      	subs	r0, r2, #1
 800152e:	4182      	sbcs	r2, r0
 8001530:	433a      	orrs	r2, r7
 8001532:	2707      	movs	r7, #7
 8001534:	2300      	movs	r3, #0
 8001536:	4017      	ands	r7, r2
 8001538:	d009      	beq.n	800154e <__aeabi_ddiv+0x5c6>
 800153a:	210f      	movs	r1, #15
 800153c:	2300      	movs	r3, #0
 800153e:	4011      	ands	r1, r2
 8001540:	0014      	movs	r4, r2
 8001542:	2904      	cmp	r1, #4
 8001544:	d195      	bne.n	8001472 <__aeabi_ddiv+0x4ea>
 8001546:	0022      	movs	r2, r4
 8001548:	075f      	lsls	r7, r3, #29
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	0b1b      	lsrs	r3, r3, #12
 800154e:	08d2      	lsrs	r2, r2, #3
 8001550:	4317      	orrs	r7, r2
 8001552:	2200      	movs	r2, #0
 8001554:	e5a6      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	4659      	mov	r1, fp
 800155a:	031b      	lsls	r3, r3, #12
 800155c:	430b      	orrs	r3, r1
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	0017      	movs	r7, r2
 8001562:	0b1b      	lsrs	r3, r3, #12
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <__aeabi_ddiv+0x5f8>)
 8001566:	e59d      	b.n	80010a4 <__aeabi_ddiv+0x11c>
 8001568:	42bd      	cmp	r5, r7
 800156a:	d8b2      	bhi.n	80014d2 <__aeabi_ddiv+0x54a>
 800156c:	469b      	mov	fp, r3
 800156e:	2400      	movs	r4, #0
 8001570:	e6bf      	b.n	80012f2 <__aeabi_ddiv+0x36a>
 8001572:	4580      	cmp	r8, r0
 8001574:	d3b9      	bcc.n	80014ea <__aeabi_ddiv+0x562>
 8001576:	001a      	movs	r2, r3
 8001578:	e7c3      	b.n	8001502 <__aeabi_ddiv+0x57a>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	000003ff 	.word	0x000003ff
 8001580:	000007ff 	.word	0x000007ff
 8001584:	0000041e 	.word	0x0000041e
 8001588:	0000043e 	.word	0x0000043e

0800158c <__aeabi_dmul>:
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	4657      	mov	r7, sl
 8001590:	46de      	mov	lr, fp
 8001592:	464e      	mov	r6, r9
 8001594:	4645      	mov	r5, r8
 8001596:	b5e0      	push	{r5, r6, r7, lr}
 8001598:	4683      	mov	fp, r0
 800159a:	0006      	movs	r6, r0
 800159c:	030f      	lsls	r7, r1, #12
 800159e:	0048      	lsls	r0, r1, #1
 80015a0:	b087      	sub	sp, #28
 80015a2:	4692      	mov	sl, r2
 80015a4:	001d      	movs	r5, r3
 80015a6:	0b3f      	lsrs	r7, r7, #12
 80015a8:	0d40      	lsrs	r0, r0, #21
 80015aa:	0fcc      	lsrs	r4, r1, #31
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dmul+0x26>
 80015b0:	e06f      	b.n	8001692 <__aeabi_dmul+0x106>
 80015b2:	4bde      	ldr	r3, [pc, #888]	; (800192c <__aeabi_dmul+0x3a0>)
 80015b4:	4298      	cmp	r0, r3
 80015b6:	d038      	beq.n	800162a <__aeabi_dmul+0x9e>
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	00ff      	lsls	r7, r7, #3
 80015bc:	041b      	lsls	r3, r3, #16
 80015be:	431f      	orrs	r7, r3
 80015c0:	0f73      	lsrs	r3, r6, #29
 80015c2:	433b      	orrs	r3, r7
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	4bda      	ldr	r3, [pc, #872]	; (8001930 <__aeabi_dmul+0x3a4>)
 80015c8:	2700      	movs	r7, #0
 80015ca:	4699      	mov	r9, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	469b      	mov	fp, r3
 80015d0:	00f6      	lsls	r6, r6, #3
 80015d2:	4481      	add	r9, r0
 80015d4:	032b      	lsls	r3, r5, #12
 80015d6:	0069      	lsls	r1, r5, #1
 80015d8:	0b1b      	lsrs	r3, r3, #12
 80015da:	4652      	mov	r2, sl
 80015dc:	4698      	mov	r8, r3
 80015de:	0d49      	lsrs	r1, r1, #21
 80015e0:	0fed      	lsrs	r5, r5, #31
 80015e2:	2900      	cmp	r1, #0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dmul+0x5c>
 80015e6:	e085      	b.n	80016f4 <__aeabi_dmul+0x168>
 80015e8:	4bd0      	ldr	r3, [pc, #832]	; (800192c <__aeabi_dmul+0x3a0>)
 80015ea:	4299      	cmp	r1, r3
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dmul+0x64>
 80015ee:	e073      	b.n	80016d8 <__aeabi_dmul+0x14c>
 80015f0:	4643      	mov	r3, r8
 80015f2:	00da      	lsls	r2, r3, #3
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	4313      	orrs	r3, r2
 80015fa:	4652      	mov	r2, sl
 80015fc:	48cc      	ldr	r0, [pc, #816]	; (8001930 <__aeabi_dmul+0x3a4>)
 80015fe:	0f52      	lsrs	r2, r2, #29
 8001600:	4684      	mov	ip, r0
 8001602:	4313      	orrs	r3, r2
 8001604:	4652      	mov	r2, sl
 8001606:	2000      	movs	r0, #0
 8001608:	4461      	add	r1, ip
 800160a:	00d2      	lsls	r2, r2, #3
 800160c:	4489      	add	r9, r1
 800160e:	0021      	movs	r1, r4
 8001610:	4069      	eors	r1, r5
 8001612:	9100      	str	r1, [sp, #0]
 8001614:	468c      	mov	ip, r1
 8001616:	2101      	movs	r1, #1
 8001618:	4449      	add	r1, r9
 800161a:	468a      	mov	sl, r1
 800161c:	2f0f      	cmp	r7, #15
 800161e:	d900      	bls.n	8001622 <__aeabi_dmul+0x96>
 8001620:	e090      	b.n	8001744 <__aeabi_dmul+0x1b8>
 8001622:	49c4      	ldr	r1, [pc, #784]	; (8001934 <__aeabi_dmul+0x3a8>)
 8001624:	00bf      	lsls	r7, r7, #2
 8001626:	59cf      	ldr	r7, [r1, r7]
 8001628:	46bf      	mov	pc, r7
 800162a:	465b      	mov	r3, fp
 800162c:	433b      	orrs	r3, r7
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	d000      	beq.n	8001634 <__aeabi_dmul+0xa8>
 8001632:	e16a      	b.n	800190a <__aeabi_dmul+0x37e>
 8001634:	2302      	movs	r3, #2
 8001636:	2708      	movs	r7, #8
 8001638:	2600      	movs	r6, #0
 800163a:	4681      	mov	r9, r0
 800163c:	469b      	mov	fp, r3
 800163e:	e7c9      	b.n	80015d4 <__aeabi_dmul+0x48>
 8001640:	0032      	movs	r2, r6
 8001642:	4658      	mov	r0, fp
 8001644:	9b01      	ldr	r3, [sp, #4]
 8001646:	4661      	mov	r1, ip
 8001648:	9100      	str	r1, [sp, #0]
 800164a:	2802      	cmp	r0, #2
 800164c:	d100      	bne.n	8001650 <__aeabi_dmul+0xc4>
 800164e:	e075      	b.n	800173c <__aeabi_dmul+0x1b0>
 8001650:	2803      	cmp	r0, #3
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0xca>
 8001654:	e1fe      	b.n	8001a54 <__aeabi_dmul+0x4c8>
 8001656:	2801      	cmp	r0, #1
 8001658:	d000      	beq.n	800165c <__aeabi_dmul+0xd0>
 800165a:	e12c      	b.n	80018b6 <__aeabi_dmul+0x32a>
 800165c:	2300      	movs	r3, #0
 800165e:	2700      	movs	r7, #0
 8001660:	2600      	movs	r6, #0
 8001662:	2500      	movs	r5, #0
 8001664:	033f      	lsls	r7, r7, #12
 8001666:	0d2a      	lsrs	r2, r5, #20
 8001668:	0b3f      	lsrs	r7, r7, #12
 800166a:	48b3      	ldr	r0, [pc, #716]	; (8001938 <__aeabi_dmul+0x3ac>)
 800166c:	0512      	lsls	r2, r2, #20
 800166e:	433a      	orrs	r2, r7
 8001670:	4002      	ands	r2, r0
 8001672:	051b      	lsls	r3, r3, #20
 8001674:	4313      	orrs	r3, r2
 8001676:	9a00      	ldr	r2, [sp, #0]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	07d1      	lsls	r1, r2, #31
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	430b      	orrs	r3, r1
 8001680:	0030      	movs	r0, r6
 8001682:	0019      	movs	r1, r3
 8001684:	b007      	add	sp, #28
 8001686:	bc3c      	pop	{r2, r3, r4, r5}
 8001688:	4690      	mov	r8, r2
 800168a:	4699      	mov	r9, r3
 800168c:	46a2      	mov	sl, r4
 800168e:	46ab      	mov	fp, r5
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	465b      	mov	r3, fp
 8001694:	433b      	orrs	r3, r7
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	d100      	bne.n	800169c <__aeabi_dmul+0x110>
 800169a:	e12f      	b.n	80018fc <__aeabi_dmul+0x370>
 800169c:	2f00      	cmp	r7, #0
 800169e:	d100      	bne.n	80016a2 <__aeabi_dmul+0x116>
 80016a0:	e1a5      	b.n	80019ee <__aeabi_dmul+0x462>
 80016a2:	0038      	movs	r0, r7
 80016a4:	f000 faba 	bl	8001c1c <__clzsi2>
 80016a8:	0003      	movs	r3, r0
 80016aa:	3b0b      	subs	r3, #11
 80016ac:	2b1c      	cmp	r3, #28
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_dmul+0x126>
 80016b0:	e196      	b.n	80019e0 <__aeabi_dmul+0x454>
 80016b2:	221d      	movs	r2, #29
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	465a      	mov	r2, fp
 80016b8:	0001      	movs	r1, r0
 80016ba:	40da      	lsrs	r2, r3
 80016bc:	465e      	mov	r6, fp
 80016be:	3908      	subs	r1, #8
 80016c0:	408f      	lsls	r7, r1
 80016c2:	0013      	movs	r3, r2
 80016c4:	408e      	lsls	r6, r1
 80016c6:	433b      	orrs	r3, r7
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	4b9c      	ldr	r3, [pc, #624]	; (800193c <__aeabi_dmul+0x3b0>)
 80016cc:	2700      	movs	r7, #0
 80016ce:	1a1b      	subs	r3, r3, r0
 80016d0:	4699      	mov	r9, r3
 80016d2:	2300      	movs	r3, #0
 80016d4:	469b      	mov	fp, r3
 80016d6:	e77d      	b.n	80015d4 <__aeabi_dmul+0x48>
 80016d8:	4641      	mov	r1, r8
 80016da:	4653      	mov	r3, sl
 80016dc:	430b      	orrs	r3, r1
 80016de:	4993      	ldr	r1, [pc, #588]	; (800192c <__aeabi_dmul+0x3a0>)
 80016e0:	468c      	mov	ip, r1
 80016e2:	44e1      	add	r9, ip
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dmul+0x15e>
 80016e8:	e11a      	b.n	8001920 <__aeabi_dmul+0x394>
 80016ea:	2202      	movs	r2, #2
 80016ec:	2002      	movs	r0, #2
 80016ee:	4317      	orrs	r7, r2
 80016f0:	2200      	movs	r2, #0
 80016f2:	e78c      	b.n	800160e <__aeabi_dmul+0x82>
 80016f4:	4313      	orrs	r3, r2
 80016f6:	d100      	bne.n	80016fa <__aeabi_dmul+0x16e>
 80016f8:	e10d      	b.n	8001916 <__aeabi_dmul+0x38a>
 80016fa:	4643      	mov	r3, r8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_dmul+0x176>
 8001700:	e181      	b.n	8001a06 <__aeabi_dmul+0x47a>
 8001702:	4640      	mov	r0, r8
 8001704:	f000 fa8a 	bl	8001c1c <__clzsi2>
 8001708:	0002      	movs	r2, r0
 800170a:	3a0b      	subs	r2, #11
 800170c:	2a1c      	cmp	r2, #28
 800170e:	dd00      	ble.n	8001712 <__aeabi_dmul+0x186>
 8001710:	e172      	b.n	80019f8 <__aeabi_dmul+0x46c>
 8001712:	0001      	movs	r1, r0
 8001714:	4643      	mov	r3, r8
 8001716:	3908      	subs	r1, #8
 8001718:	408b      	lsls	r3, r1
 800171a:	4698      	mov	r8, r3
 800171c:	231d      	movs	r3, #29
 800171e:	1a9a      	subs	r2, r3, r2
 8001720:	4653      	mov	r3, sl
 8001722:	40d3      	lsrs	r3, r2
 8001724:	001a      	movs	r2, r3
 8001726:	4643      	mov	r3, r8
 8001728:	4313      	orrs	r3, r2
 800172a:	4652      	mov	r2, sl
 800172c:	408a      	lsls	r2, r1
 800172e:	4649      	mov	r1, r9
 8001730:	1a08      	subs	r0, r1, r0
 8001732:	4982      	ldr	r1, [pc, #520]	; (800193c <__aeabi_dmul+0x3b0>)
 8001734:	4689      	mov	r9, r1
 8001736:	4481      	add	r9, r0
 8001738:	2000      	movs	r0, #0
 800173a:	e768      	b.n	800160e <__aeabi_dmul+0x82>
 800173c:	4b7b      	ldr	r3, [pc, #492]	; (800192c <__aeabi_dmul+0x3a0>)
 800173e:	2700      	movs	r7, #0
 8001740:	2600      	movs	r6, #0
 8001742:	e78e      	b.n	8001662 <__aeabi_dmul+0xd6>
 8001744:	0c14      	lsrs	r4, r2, #16
 8001746:	0412      	lsls	r2, r2, #16
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	0011      	movs	r1, r2
 800174c:	0c37      	lsrs	r7, r6, #16
 800174e:	0436      	lsls	r6, r6, #16
 8001750:	0c35      	lsrs	r5, r6, #16
 8001752:	4379      	muls	r1, r7
 8001754:	0028      	movs	r0, r5
 8001756:	468c      	mov	ip, r1
 8001758:	002e      	movs	r6, r5
 800175a:	4360      	muls	r0, r4
 800175c:	4460      	add	r0, ip
 800175e:	4683      	mov	fp, r0
 8001760:	4356      	muls	r6, r2
 8001762:	0021      	movs	r1, r4
 8001764:	0c30      	lsrs	r0, r6, #16
 8001766:	4680      	mov	r8, r0
 8001768:	4658      	mov	r0, fp
 800176a:	4379      	muls	r1, r7
 800176c:	4440      	add	r0, r8
 800176e:	9102      	str	r1, [sp, #8]
 8001770:	4584      	cmp	ip, r0
 8001772:	d906      	bls.n	8001782 <__aeabi_dmul+0x1f6>
 8001774:	4688      	mov	r8, r1
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0249      	lsls	r1, r1, #9
 800177a:	468c      	mov	ip, r1
 800177c:	44e0      	add	r8, ip
 800177e:	4641      	mov	r1, r8
 8001780:	9102      	str	r1, [sp, #8]
 8001782:	0436      	lsls	r6, r6, #16
 8001784:	0c01      	lsrs	r1, r0, #16
 8001786:	0c36      	lsrs	r6, r6, #16
 8001788:	0400      	lsls	r0, r0, #16
 800178a:	468b      	mov	fp, r1
 800178c:	1981      	adds	r1, r0, r6
 800178e:	0c1e      	lsrs	r6, r3, #16
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	0c1b      	lsrs	r3, r3, #16
 8001794:	9103      	str	r1, [sp, #12]
 8001796:	0019      	movs	r1, r3
 8001798:	4379      	muls	r1, r7
 800179a:	468c      	mov	ip, r1
 800179c:	0028      	movs	r0, r5
 800179e:	4375      	muls	r5, r6
 80017a0:	4465      	add	r5, ip
 80017a2:	46a8      	mov	r8, r5
 80017a4:	4358      	muls	r0, r3
 80017a6:	0c05      	lsrs	r5, r0, #16
 80017a8:	4445      	add	r5, r8
 80017aa:	4377      	muls	r7, r6
 80017ac:	42a9      	cmp	r1, r5
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x22c>
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0249      	lsls	r1, r1, #9
 80017b4:	468c      	mov	ip, r1
 80017b6:	4467      	add	r7, ip
 80017b8:	0c29      	lsrs	r1, r5, #16
 80017ba:	468c      	mov	ip, r1
 80017bc:	0039      	movs	r1, r7
 80017be:	0400      	lsls	r0, r0, #16
 80017c0:	0c00      	lsrs	r0, r0, #16
 80017c2:	042d      	lsls	r5, r5, #16
 80017c4:	182d      	adds	r5, r5, r0
 80017c6:	4461      	add	r1, ip
 80017c8:	44ab      	add	fp, r5
 80017ca:	9105      	str	r1, [sp, #20]
 80017cc:	4659      	mov	r1, fp
 80017ce:	9104      	str	r1, [sp, #16]
 80017d0:	9901      	ldr	r1, [sp, #4]
 80017d2:	040f      	lsls	r7, r1, #16
 80017d4:	0c3f      	lsrs	r7, r7, #16
 80017d6:	0c08      	lsrs	r0, r1, #16
 80017d8:	0039      	movs	r1, r7
 80017da:	4351      	muls	r1, r2
 80017dc:	4342      	muls	r2, r0
 80017de:	4690      	mov	r8, r2
 80017e0:	0002      	movs	r2, r0
 80017e2:	468c      	mov	ip, r1
 80017e4:	0c09      	lsrs	r1, r1, #16
 80017e6:	468b      	mov	fp, r1
 80017e8:	4362      	muls	r2, r4
 80017ea:	437c      	muls	r4, r7
 80017ec:	4444      	add	r4, r8
 80017ee:	445c      	add	r4, fp
 80017f0:	45a0      	cmp	r8, r4
 80017f2:	d903      	bls.n	80017fc <__aeabi_dmul+0x270>
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	4688      	mov	r8, r1
 80017fa:	4442      	add	r2, r8
 80017fc:	0c21      	lsrs	r1, r4, #16
 80017fe:	4688      	mov	r8, r1
 8001800:	4661      	mov	r1, ip
 8001802:	0409      	lsls	r1, r1, #16
 8001804:	0c09      	lsrs	r1, r1, #16
 8001806:	468c      	mov	ip, r1
 8001808:	0039      	movs	r1, r7
 800180a:	4359      	muls	r1, r3
 800180c:	4343      	muls	r3, r0
 800180e:	4370      	muls	r0, r6
 8001810:	437e      	muls	r6, r7
 8001812:	0c0f      	lsrs	r7, r1, #16
 8001814:	18f6      	adds	r6, r6, r3
 8001816:	0424      	lsls	r4, r4, #16
 8001818:	19be      	adds	r6, r7, r6
 800181a:	4464      	add	r4, ip
 800181c:	4442      	add	r2, r8
 800181e:	468c      	mov	ip, r1
 8001820:	42b3      	cmp	r3, r6
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x2a0>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	4698      	mov	r8, r3
 800182a:	4440      	add	r0, r8
 800182c:	9b02      	ldr	r3, [sp, #8]
 800182e:	4661      	mov	r1, ip
 8001830:	4698      	mov	r8, r3
 8001832:	9b04      	ldr	r3, [sp, #16]
 8001834:	0437      	lsls	r7, r6, #16
 8001836:	4443      	add	r3, r8
 8001838:	469b      	mov	fp, r3
 800183a:	45ab      	cmp	fp, r5
 800183c:	41ad      	sbcs	r5, r5
 800183e:	426b      	negs	r3, r5
 8001840:	040d      	lsls	r5, r1, #16
 8001842:	9905      	ldr	r1, [sp, #20]
 8001844:	0c2d      	lsrs	r5, r5, #16
 8001846:	468c      	mov	ip, r1
 8001848:	197f      	adds	r7, r7, r5
 800184a:	4467      	add	r7, ip
 800184c:	18fd      	adds	r5, r7, r3
 800184e:	46a8      	mov	r8, r5
 8001850:	465d      	mov	r5, fp
 8001852:	192d      	adds	r5, r5, r4
 8001854:	42a5      	cmp	r5, r4
 8001856:	41a4      	sbcs	r4, r4
 8001858:	4693      	mov	fp, r2
 800185a:	4264      	negs	r4, r4
 800185c:	46a4      	mov	ip, r4
 800185e:	44c3      	add	fp, r8
 8001860:	44dc      	add	ip, fp
 8001862:	428f      	cmp	r7, r1
 8001864:	41bf      	sbcs	r7, r7
 8001866:	4598      	cmp	r8, r3
 8001868:	419b      	sbcs	r3, r3
 800186a:	4593      	cmp	fp, r2
 800186c:	4192      	sbcs	r2, r2
 800186e:	45a4      	cmp	ip, r4
 8001870:	41a4      	sbcs	r4, r4
 8001872:	425b      	negs	r3, r3
 8001874:	427f      	negs	r7, r7
 8001876:	431f      	orrs	r7, r3
 8001878:	0c36      	lsrs	r6, r6, #16
 800187a:	4252      	negs	r2, r2
 800187c:	4264      	negs	r4, r4
 800187e:	19bf      	adds	r7, r7, r6
 8001880:	4322      	orrs	r2, r4
 8001882:	18bf      	adds	r7, r7, r2
 8001884:	4662      	mov	r2, ip
 8001886:	1838      	adds	r0, r7, r0
 8001888:	0243      	lsls	r3, r0, #9
 800188a:	0dd2      	lsrs	r2, r2, #23
 800188c:	9903      	ldr	r1, [sp, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	026a      	lsls	r2, r5, #9
 8001892:	430a      	orrs	r2, r1
 8001894:	1e50      	subs	r0, r2, #1
 8001896:	4182      	sbcs	r2, r0
 8001898:	4661      	mov	r1, ip
 800189a:	0ded      	lsrs	r5, r5, #23
 800189c:	432a      	orrs	r2, r5
 800189e:	024e      	lsls	r6, r1, #9
 80018a0:	4332      	orrs	r2, r6
 80018a2:	01d9      	lsls	r1, r3, #7
 80018a4:	d400      	bmi.n	80018a8 <__aeabi_dmul+0x31c>
 80018a6:	e0b3      	b.n	8001a10 <__aeabi_dmul+0x484>
 80018a8:	2601      	movs	r6, #1
 80018aa:	0850      	lsrs	r0, r2, #1
 80018ac:	4032      	ands	r2, r6
 80018ae:	4302      	orrs	r2, r0
 80018b0:	07de      	lsls	r6, r3, #31
 80018b2:	4332      	orrs	r2, r6
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	4c22      	ldr	r4, [pc, #136]	; (8001940 <__aeabi_dmul+0x3b4>)
 80018b8:	4454      	add	r4, sl
 80018ba:	2c00      	cmp	r4, #0
 80018bc:	dd62      	ble.n	8001984 <__aeabi_dmul+0x3f8>
 80018be:	0751      	lsls	r1, r2, #29
 80018c0:	d009      	beq.n	80018d6 <__aeabi_dmul+0x34a>
 80018c2:	200f      	movs	r0, #15
 80018c4:	4010      	ands	r0, r2
 80018c6:	2804      	cmp	r0, #4
 80018c8:	d005      	beq.n	80018d6 <__aeabi_dmul+0x34a>
 80018ca:	1d10      	adds	r0, r2, #4
 80018cc:	4290      	cmp	r0, r2
 80018ce:	4192      	sbcs	r2, r2
 80018d0:	4252      	negs	r2, r2
 80018d2:	189b      	adds	r3, r3, r2
 80018d4:	0002      	movs	r2, r0
 80018d6:	01d9      	lsls	r1, r3, #7
 80018d8:	d504      	bpl.n	80018e4 <__aeabi_dmul+0x358>
 80018da:	2480      	movs	r4, #128	; 0x80
 80018dc:	4819      	ldr	r0, [pc, #100]	; (8001944 <__aeabi_dmul+0x3b8>)
 80018de:	00e4      	lsls	r4, r4, #3
 80018e0:	4003      	ands	r3, r0
 80018e2:	4454      	add	r4, sl
 80018e4:	4818      	ldr	r0, [pc, #96]	; (8001948 <__aeabi_dmul+0x3bc>)
 80018e6:	4284      	cmp	r4, r0
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dmul+0x360>
 80018ea:	e727      	b.n	800173c <__aeabi_dmul+0x1b0>
 80018ec:	075e      	lsls	r6, r3, #29
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	08d2      	lsrs	r2, r2, #3
 80018f2:	0b1f      	lsrs	r7, r3, #12
 80018f4:	0563      	lsls	r3, r4, #21
 80018f6:	4316      	orrs	r6, r2
 80018f8:	0d5b      	lsrs	r3, r3, #21
 80018fa:	e6b2      	b.n	8001662 <__aeabi_dmul+0xd6>
 80018fc:	2300      	movs	r3, #0
 80018fe:	4699      	mov	r9, r3
 8001900:	3301      	adds	r3, #1
 8001902:	2704      	movs	r7, #4
 8001904:	2600      	movs	r6, #0
 8001906:	469b      	mov	fp, r3
 8001908:	e664      	b.n	80015d4 <__aeabi_dmul+0x48>
 800190a:	2303      	movs	r3, #3
 800190c:	9701      	str	r7, [sp, #4]
 800190e:	4681      	mov	r9, r0
 8001910:	270c      	movs	r7, #12
 8001912:	469b      	mov	fp, r3
 8001914:	e65e      	b.n	80015d4 <__aeabi_dmul+0x48>
 8001916:	2201      	movs	r2, #1
 8001918:	2001      	movs	r0, #1
 800191a:	4317      	orrs	r7, r2
 800191c:	2200      	movs	r2, #0
 800191e:	e676      	b.n	800160e <__aeabi_dmul+0x82>
 8001920:	2303      	movs	r3, #3
 8001922:	2003      	movs	r0, #3
 8001924:	431f      	orrs	r7, r3
 8001926:	4643      	mov	r3, r8
 8001928:	e671      	b.n	800160e <__aeabi_dmul+0x82>
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	000007ff 	.word	0x000007ff
 8001930:	fffffc01 	.word	0xfffffc01
 8001934:	08005618 	.word	0x08005618
 8001938:	800fffff 	.word	0x800fffff
 800193c:	fffffc0d 	.word	0xfffffc0d
 8001940:	000003ff 	.word	0x000003ff
 8001944:	feffffff 	.word	0xfeffffff
 8001948:	000007fe 	.word	0x000007fe
 800194c:	2300      	movs	r3, #0
 800194e:	2780      	movs	r7, #128	; 0x80
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	033f      	lsls	r7, r7, #12
 8001954:	2600      	movs	r6, #0
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <__aeabi_dmul+0x4d8>)
 8001958:	e683      	b.n	8001662 <__aeabi_dmul+0xd6>
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	0032      	movs	r2, r6
 800195e:	46a4      	mov	ip, r4
 8001960:	4658      	mov	r0, fp
 8001962:	e670      	b.n	8001646 <__aeabi_dmul+0xba>
 8001964:	46ac      	mov	ip, r5
 8001966:	e66e      	b.n	8001646 <__aeabi_dmul+0xba>
 8001968:	2780      	movs	r7, #128	; 0x80
 800196a:	9901      	ldr	r1, [sp, #4]
 800196c:	033f      	lsls	r7, r7, #12
 800196e:	4239      	tst	r1, r7
 8001970:	d02d      	beq.n	80019ce <__aeabi_dmul+0x442>
 8001972:	423b      	tst	r3, r7
 8001974:	d12b      	bne.n	80019ce <__aeabi_dmul+0x442>
 8001976:	431f      	orrs	r7, r3
 8001978:	033f      	lsls	r7, r7, #12
 800197a:	0b3f      	lsrs	r7, r7, #12
 800197c:	9500      	str	r5, [sp, #0]
 800197e:	0016      	movs	r6, r2
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <__aeabi_dmul+0x4d8>)
 8001982:	e66e      	b.n	8001662 <__aeabi_dmul+0xd6>
 8001984:	2501      	movs	r5, #1
 8001986:	1b2d      	subs	r5, r5, r4
 8001988:	2d38      	cmp	r5, #56	; 0x38
 800198a:	dd00      	ble.n	800198e <__aeabi_dmul+0x402>
 800198c:	e666      	b.n	800165c <__aeabi_dmul+0xd0>
 800198e:	2d1f      	cmp	r5, #31
 8001990:	dc40      	bgt.n	8001a14 <__aeabi_dmul+0x488>
 8001992:	4835      	ldr	r0, [pc, #212]	; (8001a68 <__aeabi_dmul+0x4dc>)
 8001994:	001c      	movs	r4, r3
 8001996:	4450      	add	r0, sl
 8001998:	0016      	movs	r6, r2
 800199a:	4082      	lsls	r2, r0
 800199c:	4084      	lsls	r4, r0
 800199e:	40ee      	lsrs	r6, r5
 80019a0:	1e50      	subs	r0, r2, #1
 80019a2:	4182      	sbcs	r2, r0
 80019a4:	4334      	orrs	r4, r6
 80019a6:	4314      	orrs	r4, r2
 80019a8:	40eb      	lsrs	r3, r5
 80019aa:	0762      	lsls	r2, r4, #29
 80019ac:	d009      	beq.n	80019c2 <__aeabi_dmul+0x436>
 80019ae:	220f      	movs	r2, #15
 80019b0:	4022      	ands	r2, r4
 80019b2:	2a04      	cmp	r2, #4
 80019b4:	d005      	beq.n	80019c2 <__aeabi_dmul+0x436>
 80019b6:	0022      	movs	r2, r4
 80019b8:	1d14      	adds	r4, r2, #4
 80019ba:	4294      	cmp	r4, r2
 80019bc:	4180      	sbcs	r0, r0
 80019be:	4240      	negs	r0, r0
 80019c0:	181b      	adds	r3, r3, r0
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	d53e      	bpl.n	8001a44 <__aeabi_dmul+0x4b8>
 80019c6:	2301      	movs	r3, #1
 80019c8:	2700      	movs	r7, #0
 80019ca:	2600      	movs	r6, #0
 80019cc:	e649      	b.n	8001662 <__aeabi_dmul+0xd6>
 80019ce:	2780      	movs	r7, #128	; 0x80
 80019d0:	9b01      	ldr	r3, [sp, #4]
 80019d2:	033f      	lsls	r7, r7, #12
 80019d4:	431f      	orrs	r7, r3
 80019d6:	033f      	lsls	r7, r7, #12
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	9400      	str	r4, [sp, #0]
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <__aeabi_dmul+0x4d8>)
 80019de:	e640      	b.n	8001662 <__aeabi_dmul+0xd6>
 80019e0:	0003      	movs	r3, r0
 80019e2:	465a      	mov	r2, fp
 80019e4:	3b28      	subs	r3, #40	; 0x28
 80019e6:	409a      	lsls	r2, r3
 80019e8:	2600      	movs	r6, #0
 80019ea:	9201      	str	r2, [sp, #4]
 80019ec:	e66d      	b.n	80016ca <__aeabi_dmul+0x13e>
 80019ee:	4658      	mov	r0, fp
 80019f0:	f000 f914 	bl	8001c1c <__clzsi2>
 80019f4:	3020      	adds	r0, #32
 80019f6:	e657      	b.n	80016a8 <__aeabi_dmul+0x11c>
 80019f8:	0003      	movs	r3, r0
 80019fa:	4652      	mov	r2, sl
 80019fc:	3b28      	subs	r3, #40	; 0x28
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	2200      	movs	r2, #0
 8001a04:	e693      	b.n	800172e <__aeabi_dmul+0x1a2>
 8001a06:	4650      	mov	r0, sl
 8001a08:	f000 f908 	bl	8001c1c <__clzsi2>
 8001a0c:	3020      	adds	r0, #32
 8001a0e:	e67b      	b.n	8001708 <__aeabi_dmul+0x17c>
 8001a10:	46ca      	mov	sl, r9
 8001a12:	e750      	b.n	80018b6 <__aeabi_dmul+0x32a>
 8001a14:	201f      	movs	r0, #31
 8001a16:	001e      	movs	r6, r3
 8001a18:	4240      	negs	r0, r0
 8001a1a:	1b04      	subs	r4, r0, r4
 8001a1c:	40e6      	lsrs	r6, r4
 8001a1e:	2d20      	cmp	r5, #32
 8001a20:	d003      	beq.n	8001a2a <__aeabi_dmul+0x49e>
 8001a22:	4c12      	ldr	r4, [pc, #72]	; (8001a6c <__aeabi_dmul+0x4e0>)
 8001a24:	4454      	add	r4, sl
 8001a26:	40a3      	lsls	r3, r4
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	1e50      	subs	r0, r2, #1
 8001a2c:	4182      	sbcs	r2, r0
 8001a2e:	4332      	orrs	r2, r6
 8001a30:	2607      	movs	r6, #7
 8001a32:	2700      	movs	r7, #0
 8001a34:	4016      	ands	r6, r2
 8001a36:	d009      	beq.n	8001a4c <__aeabi_dmul+0x4c0>
 8001a38:	200f      	movs	r0, #15
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4010      	ands	r0, r2
 8001a3e:	0014      	movs	r4, r2
 8001a40:	2804      	cmp	r0, #4
 8001a42:	d1b9      	bne.n	80019b8 <__aeabi_dmul+0x42c>
 8001a44:	0022      	movs	r2, r4
 8001a46:	075e      	lsls	r6, r3, #29
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	0b1f      	lsrs	r7, r3, #12
 8001a4c:	08d2      	lsrs	r2, r2, #3
 8001a4e:	4316      	orrs	r6, r2
 8001a50:	2300      	movs	r3, #0
 8001a52:	e606      	b.n	8001662 <__aeabi_dmul+0xd6>
 8001a54:	2780      	movs	r7, #128	; 0x80
 8001a56:	033f      	lsls	r7, r7, #12
 8001a58:	431f      	orrs	r7, r3
 8001a5a:	033f      	lsls	r7, r7, #12
 8001a5c:	0b3f      	lsrs	r7, r7, #12
 8001a5e:	0016      	movs	r6, r2
 8001a60:	4b00      	ldr	r3, [pc, #0]	; (8001a64 <__aeabi_dmul+0x4d8>)
 8001a62:	e5fe      	b.n	8001662 <__aeabi_dmul+0xd6>
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	0000041e 	.word	0x0000041e
 8001a6c:	0000043e 	.word	0x0000043e

08001a70 <__aeabi_f2d>:
 8001a70:	0041      	lsls	r1, r0, #1
 8001a72:	0e09      	lsrs	r1, r1, #24
 8001a74:	1c4b      	adds	r3, r1, #1
 8001a76:	b570      	push	{r4, r5, r6, lr}
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	0246      	lsls	r6, r0, #9
 8001a7c:	0a75      	lsrs	r5, r6, #9
 8001a7e:	0fc4      	lsrs	r4, r0, #31
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	dd14      	ble.n	8001aae <__aeabi_f2d+0x3e>
 8001a84:	23e0      	movs	r3, #224	; 0xe0
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	076d      	lsls	r5, r5, #29
 8001a8a:	0b36      	lsrs	r6, r6, #12
 8001a8c:	18cb      	adds	r3, r1, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	0d0a      	lsrs	r2, r1, #20
 8001a92:	0028      	movs	r0, r5
 8001a94:	0512      	lsls	r2, r2, #20
 8001a96:	4d1c      	ldr	r5, [pc, #112]	; (8001b08 <__aeabi_f2d+0x98>)
 8001a98:	4332      	orrs	r2, r6
 8001a9a:	055b      	lsls	r3, r3, #21
 8001a9c:	402a      	ands	r2, r5
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	07e4      	lsls	r4, r4, #31
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	0019      	movs	r1, r3
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
 8001aae:	2900      	cmp	r1, #0
 8001ab0:	d114      	bne.n	8001adc <__aeabi_f2d+0x6c>
 8001ab2:	2d00      	cmp	r5, #0
 8001ab4:	d01e      	beq.n	8001af4 <__aeabi_f2d+0x84>
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	f000 f8b0 	bl	8001c1c <__clzsi2>
 8001abc:	280a      	cmp	r0, #10
 8001abe:	dc1c      	bgt.n	8001afa <__aeabi_f2d+0x8a>
 8001ac0:	230b      	movs	r3, #11
 8001ac2:	002a      	movs	r2, r5
 8001ac4:	1a1b      	subs	r3, r3, r0
 8001ac6:	40da      	lsrs	r2, r3
 8001ac8:	0003      	movs	r3, r0
 8001aca:	3315      	adds	r3, #21
 8001acc:	409d      	lsls	r5, r3
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <__aeabi_f2d+0x9c>)
 8001ad0:	0312      	lsls	r2, r2, #12
 8001ad2:	1a1b      	subs	r3, r3, r0
 8001ad4:	055b      	lsls	r3, r3, #21
 8001ad6:	0b16      	lsrs	r6, r2, #12
 8001ad8:	0d5b      	lsrs	r3, r3, #21
 8001ada:	e7d8      	b.n	8001a8e <__aeabi_f2d+0x1e>
 8001adc:	2d00      	cmp	r5, #0
 8001ade:	d006      	beq.n	8001aee <__aeabi_f2d+0x7e>
 8001ae0:	0b32      	lsrs	r2, r6, #12
 8001ae2:	2680      	movs	r6, #128	; 0x80
 8001ae4:	0336      	lsls	r6, r6, #12
 8001ae6:	076d      	lsls	r5, r5, #29
 8001ae8:	4316      	orrs	r6, r2
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <__aeabi_f2d+0xa0>)
 8001aec:	e7cf      	b.n	8001a8e <__aeabi_f2d+0x1e>
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <__aeabi_f2d+0xa0>)
 8001af0:	2600      	movs	r6, #0
 8001af2:	e7cc      	b.n	8001a8e <__aeabi_f2d+0x1e>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2600      	movs	r6, #0
 8001af8:	e7c9      	b.n	8001a8e <__aeabi_f2d+0x1e>
 8001afa:	0003      	movs	r3, r0
 8001afc:	002a      	movs	r2, r5
 8001afe:	3b0b      	subs	r3, #11
 8001b00:	409a      	lsls	r2, r3
 8001b02:	2500      	movs	r5, #0
 8001b04:	e7e3      	b.n	8001ace <__aeabi_f2d+0x5e>
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	800fffff 	.word	0x800fffff
 8001b0c:	00000389 	.word	0x00000389
 8001b10:	000007ff 	.word	0x000007ff

08001b14 <__aeabi_d2f>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	004c      	lsls	r4, r1, #1
 8001b18:	0d64      	lsrs	r4, r4, #21
 8001b1a:	030b      	lsls	r3, r1, #12
 8001b1c:	1c62      	adds	r2, r4, #1
 8001b1e:	0a5b      	lsrs	r3, r3, #9
 8001b20:	0f46      	lsrs	r6, r0, #29
 8001b22:	0552      	lsls	r2, r2, #21
 8001b24:	0fc9      	lsrs	r1, r1, #31
 8001b26:	431e      	orrs	r6, r3
 8001b28:	00c5      	lsls	r5, r0, #3
 8001b2a:	0d52      	lsrs	r2, r2, #21
 8001b2c:	2a01      	cmp	r2, #1
 8001b2e:	dd29      	ble.n	8001b84 <__aeabi_d2f+0x70>
 8001b30:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <__aeabi_d2f+0xfc>)
 8001b32:	18e7      	adds	r7, r4, r3
 8001b34:	2ffe      	cmp	r7, #254	; 0xfe
 8001b36:	dc1c      	bgt.n	8001b72 <__aeabi_d2f+0x5e>
 8001b38:	2f00      	cmp	r7, #0
 8001b3a:	dd3b      	ble.n	8001bb4 <__aeabi_d2f+0xa0>
 8001b3c:	0180      	lsls	r0, r0, #6
 8001b3e:	1e43      	subs	r3, r0, #1
 8001b40:	4198      	sbcs	r0, r3
 8001b42:	2207      	movs	r2, #7
 8001b44:	00f3      	lsls	r3, r6, #3
 8001b46:	0f6d      	lsrs	r5, r5, #29
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	432b      	orrs	r3, r5
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	d004      	beq.n	8001b5c <__aeabi_d2f+0x48>
 8001b52:	220f      	movs	r2, #15
 8001b54:	401a      	ands	r2, r3
 8001b56:	2a04      	cmp	r2, #4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_d2f+0x48>
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	04d2      	lsls	r2, r2, #19
 8001b60:	401a      	ands	r2, r3
 8001b62:	d024      	beq.n	8001bae <__aeabi_d2f+0x9a>
 8001b64:	3701      	adds	r7, #1
 8001b66:	b2fa      	uxtb	r2, r7
 8001b68:	2fff      	cmp	r7, #255	; 0xff
 8001b6a:	d002      	beq.n	8001b72 <__aeabi_d2f+0x5e>
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	0a58      	lsrs	r0, r3, #9
 8001b70:	e001      	b.n	8001b76 <__aeabi_d2f+0x62>
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	2000      	movs	r0, #0
 8001b76:	0240      	lsls	r0, r0, #9
 8001b78:	05d2      	lsls	r2, r2, #23
 8001b7a:	0a40      	lsrs	r0, r0, #9
 8001b7c:	07c9      	lsls	r1, r1, #31
 8001b7e:	4310      	orrs	r0, r2
 8001b80:	4308      	orrs	r0, r1
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	4335      	orrs	r5, r6
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	d104      	bne.n	8001b94 <__aeabi_d2f+0x80>
 8001b8a:	2d00      	cmp	r5, #0
 8001b8c:	d10a      	bne.n	8001ba4 <__aeabi_d2f+0x90>
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2000      	movs	r0, #0
 8001b92:	e7f0      	b.n	8001b76 <__aeabi_d2f+0x62>
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	d0ec      	beq.n	8001b72 <__aeabi_d2f+0x5e>
 8001b98:	2080      	movs	r0, #128	; 0x80
 8001b9a:	03c0      	lsls	r0, r0, #15
 8001b9c:	4330      	orrs	r0, r6
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	e7e9      	b.n	8001b76 <__aeabi_d2f+0x62>
 8001ba2:	2400      	movs	r4, #0
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	0a58      	lsrs	r0, r3, #9
 8001baa:	b2e2      	uxtb	r2, r4
 8001bac:	e7e3      	b.n	8001b76 <__aeabi_d2f+0x62>
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	003c      	movs	r4, r7
 8001bb2:	e7f8      	b.n	8001ba6 <__aeabi_d2f+0x92>
 8001bb4:	003b      	movs	r3, r7
 8001bb6:	3317      	adds	r3, #23
 8001bb8:	dbf3      	blt.n	8001ba2 <__aeabi_d2f+0x8e>
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	4333      	orrs	r3, r6
 8001bc0:	261e      	movs	r6, #30
 8001bc2:	1bf6      	subs	r6, r6, r7
 8001bc4:	2e1f      	cmp	r6, #31
 8001bc6:	dd14      	ble.n	8001bf2 <__aeabi_d2f+0xde>
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4252      	negs	r2, r2
 8001bcc:	1bd7      	subs	r7, r2, r7
 8001bce:	001a      	movs	r2, r3
 8001bd0:	40fa      	lsrs	r2, r7
 8001bd2:	0017      	movs	r7, r2
 8001bd4:	2e20      	cmp	r6, #32
 8001bd6:	d004      	beq.n	8001be2 <__aeabi_d2f+0xce>
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <__aeabi_d2f+0x100>)
 8001bda:	4694      	mov	ip, r2
 8001bdc:	4464      	add	r4, ip
 8001bde:	40a3      	lsls	r3, r4
 8001be0:	431d      	orrs	r5, r3
 8001be2:	002b      	movs	r3, r5
 8001be4:	1e5d      	subs	r5, r3, #1
 8001be6:	41ab      	sbcs	r3, r5
 8001be8:	2207      	movs	r2, #7
 8001bea:	433b      	orrs	r3, r7
 8001bec:	401a      	ands	r2, r3
 8001bee:	2700      	movs	r7, #0
 8001bf0:	e7ad      	b.n	8001b4e <__aeabi_d2f+0x3a>
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <__aeabi_d2f+0x104>)
 8001bf4:	0028      	movs	r0, r5
 8001bf6:	18a2      	adds	r2, r4, r2
 8001bf8:	4095      	lsls	r5, r2
 8001bfa:	4093      	lsls	r3, r2
 8001bfc:	1e6c      	subs	r4, r5, #1
 8001bfe:	41a5      	sbcs	r5, r4
 8001c00:	40f0      	lsrs	r0, r6
 8001c02:	2207      	movs	r2, #7
 8001c04:	432b      	orrs	r3, r5
 8001c06:	4303      	orrs	r3, r0
 8001c08:	401a      	ands	r2, r3
 8001c0a:	2700      	movs	r7, #0
 8001c0c:	e79f      	b.n	8001b4e <__aeabi_d2f+0x3a>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	fffffc80 	.word	0xfffffc80
 8001c14:	fffffca2 	.word	0xfffffca2
 8001c18:	fffffc82 	.word	0xfffffc82

08001c1c <__clzsi2>:
 8001c1c:	211c      	movs	r1, #28
 8001c1e:	2301      	movs	r3, #1
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	4298      	cmp	r0, r3
 8001c24:	d301      	bcc.n	8001c2a <__clzsi2+0xe>
 8001c26:	0c00      	lsrs	r0, r0, #16
 8001c28:	3910      	subs	r1, #16
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	4298      	cmp	r0, r3
 8001c2e:	d301      	bcc.n	8001c34 <__clzsi2+0x18>
 8001c30:	0a00      	lsrs	r0, r0, #8
 8001c32:	3908      	subs	r1, #8
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	4298      	cmp	r0, r3
 8001c38:	d301      	bcc.n	8001c3e <__clzsi2+0x22>
 8001c3a:	0900      	lsrs	r0, r0, #4
 8001c3c:	3904      	subs	r1, #4
 8001c3e:	a202      	add	r2, pc, #8	; (adr r2, 8001c48 <__clzsi2+0x2c>)
 8001c40:	5c10      	ldrb	r0, [r2, r0]
 8001c42:	1840      	adds	r0, r0, r1
 8001c44:	4770      	bx	lr
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	02020304 	.word	0x02020304
 8001c4c:	01010101 	.word	0x01010101
	...

08001c58 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1c18      	adds	r0, r3, #0
 8001c64:	f003 f8ee 	bl	8004e44 <asinf>
 8001c68:	1c03      	adds	r3, r0, #0
 8001c6a:	1c18      	adds	r0, r3, #0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	1c11      	adds	r1, r2, #0
 8001c82:	1c18      	adds	r0, r3, #0
 8001c84:	f003 f92e 	bl	8004ee4 <atan2f>
 8001c88:	1c03      	adds	r3, r0, #0
 8001c8a:	1c18      	adds	r0, r3, #0
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	1c18      	adds	r0, r3, #0
 8001c9e:	f003 f925 	bl	8004eec <sqrtf>
 8001ca2:	1c03      	adds	r3, r0, #0
 8001ca4:	1c18      	adds	r0, r3, #0
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff f950 	bl	8000f5c <__aeabi_fcmpun>
 8001cbc:	1e03      	subs	r3, r0, #0
 8001cbe:	d001      	beq.n	8001cc4 <_ZSt5isnanf+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <_ZSt5isnanf+0x1a>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <_ZN4EKF27loadEKFEv>:
	          0, 0, 0,1,0, 0, 0,
	          0, 0, 0, 0,1,0, 0,
	          0, 0, 0, 0, 0,1,0,
	          0, 0, 0, 0, 0, 0,1};
public:
	void loadEKF(){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
		 arm_mat_init_f32(&x,  7,1, x_);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	228e      	movs	r2, #142	; 0x8e
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	1898      	adds	r0, r3, r2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2107      	movs	r1, #7
 8001ce8:	f002 ff64 	bl	8004bb4 <arm_mat_init_f32>
		  arm_mat_init_f32(&P, 7, 7, P_full);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2298      	movs	r2, #152	; 0x98
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	1898      	adds	r0, r3, r2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	33e4      	adds	r3, #228	; 0xe4
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	2107      	movs	r1, #7
 8001cfc:	f002 ff5a 	bl	8004bb4 <arm_mat_init_f32>
		  arm_mat_init_f32(&Q, 7, 7, Q_full);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	229a      	movs	r2, #154	; 0x9a
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	1898      	adds	r0, r3, r2
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	2107      	movs	r1, #7
 8001d10:	f002 ff50 	bl	8004bb4 <arm_mat_init_f32>
		  arm_mat_init_f32(&R, 6, 6, R_full1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	22a2      	movs	r2, #162	; 0xa2
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	1898      	adds	r0, r3, r2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	33a9      	adds	r3, #169	; 0xa9
 8001d20:	33ff      	adds	r3, #255	; 0xff
 8001d22:	2206      	movs	r2, #6
 8001d24:	2106      	movs	r1, #6
 8001d26:	f002 ff45 	bl	8004bb4 <arm_mat_init_f32>
		  arm_mat_init_f32(&temp1, 7, 1, temp1_);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	22a8      	movs	r2, #168	; 0xa8
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	1898      	adds	r0, r3, r2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	22c7      	movs	r2, #199	; 0xc7
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4694      	mov	ip, r2
 8001d3a:	4463      	add	r3, ip
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2107      	movs	r1, #7
 8001d40:	f002 ff38 	bl	8004bb4 <arm_mat_init_f32>
		  arm_mat_init_f32(&temp2, 7, 1, temp2_);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	22aa      	movs	r2, #170	; 0xaa
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	1898      	adds	r0, r3, r2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	22ce      	movs	r2, #206	; 0xce
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4694      	mov	ip, r2
 8001d54:	4463      	add	r3, ip
 8001d56:	2201      	movs	r2, #1
 8001d58:	2107      	movs	r1, #7
 8001d5a:	f002 ff2b 	bl	8004bb4 <arm_mat_init_f32>
		  arm_mat_init_f32(&temp3, 7, 7, temp3_);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	22ac      	movs	r2, #172	; 0xac
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	1898      	adds	r0, r3, r2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	22d5      	movs	r2, #213	; 0xd5
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4694      	mov	ip, r2
 8001d6e:	4463      	add	r3, ip
 8001d70:	2207      	movs	r2, #7
 8001d72:	2107      	movs	r1, #7
 8001d74:	f002 ff1e 	bl	8004bb4 <arm_mat_init_f32>
		  for(uint8_t i = 0; i<49;i++){
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	230f      	movs	r3, #15
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b30      	cmp	r3, #48	; 0x30
 8001d88:	d844      	bhi.n	8001e14 <_ZN4EKF27loadEKFEv+0x144>
			  A_[i] = 0;
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	333d      	adds	r3, #61	; 0x3d
 8001d94:	33ff      	adds	r3, #255	; 0xff
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	18d3      	adds	r3, r2, r3
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
			  AT_[i] = 0;
 8001da0:	0008      	movs	r0, r1
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	326f      	adds	r2, #111	; 0x6f
 8001daa:	32ff      	adds	r2, #255	; 0xff
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	2100      	movs	r1, #0
 8001db0:	50d1      	str	r1, [r2, r3]
			  B_[i] = 0;
 8001db2:	0001      	movs	r1, r0
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	339f      	adds	r3, #159	; 0x9f
 8001dbc:	33ff      	adds	r3, #255	; 0xff
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
			  Kino_[i] = 0;
 8001dc8:	0008      	movs	r0, r1
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	32df      	adds	r2, #223	; 0xdf
 8001dd2:	32ff      	adds	r2, #255	; 0xff
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	50d1      	str	r1, [r2, r3]
			  KH_[i] = 0;
 8001dda:	0001      	movs	r1, r0
 8001ddc:	0008      	movs	r0, r1
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4940      	ldr	r1, [pc, #256]	; (8001ee8 <_ZN4EKF27loadEKFEv+0x218>)
 8001de6:	468c      	mov	ip, r1
 8001de8:	4462      	add	r2, ip
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	2100      	movs	r1, #0
 8001dee:	50d1      	str	r1, [r2, r3]
			  IKH_[i] = 0;
 8001df0:	0001      	movs	r1, r0
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	483c      	ldr	r0, [pc, #240]	; (8001eec <_ZN4EKF27loadEKFEv+0x21c>)
 8001dfa:	4684      	mov	ip, r0
 8001dfc:	4463      	add	r3, ip
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	3304      	adds	r3, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0; i<49;i++){
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	3201      	adds	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	e7b5      	b.n	8001d80 <_ZN4EKF27loadEKFEv+0xb0>
		  }

		  for(uint8_t i = 0; i<42;i++){
 8001e14:	230e      	movs	r3, #14
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	230e      	movs	r3, #14
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b29      	cmp	r3, #41	; 0x29
 8001e24:	d82a      	bhi.n	8001e7c <_ZN4EKF27loadEKFEv+0x1ac>
			  H_[i] = 0;
 8001e26:	200e      	movs	r0, #14
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4930      	ldr	r1, [pc, #192]	; (8001ef0 <_ZN4EKF27loadEKFEv+0x220>)
 8001e30:	468c      	mov	ip, r1
 8001e32:	4462      	add	r2, ip
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	2100      	movs	r1, #0
 8001e38:	50d1      	str	r1, [r2, r3]
			  K_[i] = 0;
 8001e3a:	183b      	adds	r3, r7, r0
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	21ba      	movs	r1, #186	; 0xba
 8001e42:	0089      	lsls	r1, r1, #2
 8001e44:	468c      	mov	ip, r1
 8001e46:	4462      	add	r2, ip
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	50d1      	str	r1, [r2, r3]
			  PHT_[i] = 0;
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <_ZN4EKF27loadEKFEv+0x224>)
 8001e56:	468c      	mov	ip, r1
 8001e58:	4462      	add	r2, ip
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	50d1      	str	r1, [r2, r3]
			  HT_[i] = 0;
 8001e60:	183b      	adds	r3, r7, r0
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	32b5      	adds	r2, #181	; 0xb5
 8001e68:	32ff      	adds	r2, #255	; 0xff
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	50d1      	str	r1, [r2, r3]
		  for(uint8_t i = 0; i<42;i++){
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	183b      	adds	r3, r7, r0
 8001e76:	3201      	adds	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e7cf      	b.n	8001e1c <_ZN4EKF27loadEKFEv+0x14c>
		  }

		  for(uint8_t i = 0; i<36;i++){
 8001e7c:	230d      	movs	r3, #13
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	230d      	movs	r3, #13
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b23      	cmp	r3, #35	; 0x23
 8001e8c:	d827      	bhi.n	8001ede <_ZN4EKF27loadEKFEv+0x20e>
			  HPHT_[i] = 0;
 8001e8e:	210d      	movs	r1, #13
 8001e90:	0008      	movs	r0, r1
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4917      	ldr	r1, [pc, #92]	; (8001ef8 <_ZN4EKF27loadEKFEv+0x228>)
 8001e9a:	468c      	mov	ip, r1
 8001e9c:	4462      	add	r2, ip
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	50d1      	str	r1, [r2, r3]
			  S_[i] = 0;
 8001ea4:	0001      	movs	r1, r0
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4813      	ldr	r0, [pc, #76]	; (8001efc <_ZN4EKF27loadEKFEv+0x22c>)
 8001eae:	4684      	mov	ip, r0
 8001eb0:	4463      	add	r3, ip
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
			  Sinv_[i] = 0;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	480f      	ldr	r0, [pc, #60]	; (8001f00 <_ZN4EKF27loadEKFEv+0x230>)
 8001ec4:	4684      	mov	ip, r0
 8001ec6:	4463      	add	r3, ip
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	18d3      	adds	r3, r2, r3
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0; i<36;i++){
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	3201      	adds	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e7d2      	b.n	8001e84 <_ZN4EKF27loadEKFEv+0x1b4>
		  }
	}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	00000312 	.word	0x00000312
 8001eec:	0000020e 	.word	0x0000020e
 8001ef0:	000002be 	.word	0x000002be
 8001ef4:	00000246 	.word	0x00000246
 8001ef8:	0000029a 	.word	0x0000029a
 8001efc:	00000342 	.word	0x00000342
 8001f00:	00000366 	.word	0x00000366

08001f04 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf>:
	EKF2();
	void updateEKF(IMU_data data_imu, MAG_data mag, float dt){
 8001f04:	b084      	sub	sp, #16
 8001f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f08:	b09b      	sub	sp, #108	; 0x6c
 8001f0a:	af02      	add	r7, sp, #8
 8001f0c:	6178      	str	r0, [r7, #20]
 8001f0e:	2004      	movs	r0, #4
 8001f10:	2478      	movs	r4, #120	; 0x78
 8001f12:	46a4      	mov	ip, r4
 8001f14:	44bc      	add	ip, r7
 8001f16:	4460      	add	r0, ip
 8001f18:	6001      	str	r1, [r0, #0]
 8001f1a:	6042      	str	r2, [r0, #4]
 8001f1c:	6083      	str	r3, [r0, #8]
//          quaternion state ;
          float recipNorm;
          if(!isnan(data_imu.Acc_x) &&!isnan(data_imu.Acc_y)&&!isnan(data_imu.Acc_z)&&!isnan(data_imu.Gyro_x)&&!isnan(data_imu.Gyro_y)&&!isnan(data_imu.Gyro_z)){
 8001f1e:	2304      	movs	r3, #4
 8001f20:	2278      	movs	r2, #120	; 0x78
 8001f22:	4694      	mov	ip, r2
 8001f24:	44bc      	add	ip, r7
 8001f26:	4463      	add	r3, ip
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	1c18      	adds	r0, r3, #0
 8001f2c:	f7ff febe 	bl	8001cac <_ZSt5isnanf>
 8001f30:	0003      	movs	r3, r0
 8001f32:	001a      	movs	r2, r3
 8001f34:	2301      	movs	r3, #1
 8001f36:	4053      	eors	r3, r2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d051      	beq.n	8001fe2 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xde>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	2278      	movs	r2, #120	; 0x78
 8001f42:	4694      	mov	ip, r2
 8001f44:	44bc      	add	ip, r7
 8001f46:	4463      	add	r3, ip
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	1c18      	adds	r0, r3, #0
 8001f4c:	f7ff feae 	bl	8001cac <_ZSt5isnanf>
 8001f50:	0003      	movs	r3, r0
 8001f52:	001a      	movs	r2, r3
 8001f54:	2301      	movs	r3, #1
 8001f56:	4053      	eors	r3, r2
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d041      	beq.n	8001fe2 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xde>
 8001f5e:	2304      	movs	r3, #4
 8001f60:	2278      	movs	r2, #120	; 0x78
 8001f62:	4694      	mov	ip, r2
 8001f64:	44bc      	add	ip, r7
 8001f66:	4463      	add	r3, ip
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	1c18      	adds	r0, r3, #0
 8001f6c:	f7ff fe9e 	bl	8001cac <_ZSt5isnanf>
 8001f70:	0003      	movs	r3, r0
 8001f72:	001a      	movs	r2, r3
 8001f74:	2301      	movs	r3, #1
 8001f76:	4053      	eors	r3, r2
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d031      	beq.n	8001fe2 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xde>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	2278      	movs	r2, #120	; 0x78
 8001f82:	4694      	mov	ip, r2
 8001f84:	44bc      	add	ip, r7
 8001f86:	4463      	add	r3, ip
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1c18      	adds	r0, r3, #0
 8001f8c:	f7ff fe8e 	bl	8001cac <_ZSt5isnanf>
 8001f90:	0003      	movs	r3, r0
 8001f92:	001a      	movs	r2, r3
 8001f94:	2301      	movs	r3, #1
 8001f96:	4053      	eors	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d021      	beq.n	8001fe2 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xde>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	2278      	movs	r2, #120	; 0x78
 8001fa2:	4694      	mov	ip, r2
 8001fa4:	44bc      	add	ip, r7
 8001fa6:	4463      	add	r3, ip
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	1c18      	adds	r0, r3, #0
 8001fac:	f7ff fe7e 	bl	8001cac <_ZSt5isnanf>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	4053      	eors	r3, r2
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d011      	beq.n	8001fe2 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xde>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	2278      	movs	r2, #120	; 0x78
 8001fc2:	4694      	mov	ip, r2
 8001fc4:	44bc      	add	ip, r7
 8001fc6:	4463      	add	r3, ip
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	1c18      	adds	r0, r3, #0
 8001fcc:	f7ff fe6e 	bl	8001cac <_ZSt5isnanf>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4053      	eors	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xde>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xe0>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xe8>
 8001fe8:	f000 fdcc 	bl	8002b84 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xc80>
        	  w_[0] = Gyro_x*DEC2RAD;
 8001fec:	4bfe      	ldr	r3, [pc, #1016]	; (80023e8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4e4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1c18      	adds	r0, r3, #0
 8001ff2:	f7ff fd3d 	bl	8001a70 <__aeabi_f2d>
 8001ff6:	4afd      	ldr	r2, [pc, #1012]	; (80023ec <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4e8>)
 8001ff8:	4bfd      	ldr	r3, [pc, #1012]	; (80023f0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4ec>)
 8001ffa:	f7ff fac7 	bl	800158c <__aeabi_dmul>
 8001ffe:	0003      	movs	r3, r0
 8002000:	000c      	movs	r4, r1
 8002002:	0018      	movs	r0, r3
 8002004:	0021      	movs	r1, r4
 8002006:	f7ff fd85 	bl	8001b14 <__aeabi_d2f>
 800200a:	1c01      	adds	r1, r0, #0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4af9      	ldr	r2, [pc, #996]	; (80023f4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4f0>)
 8002010:	5099      	str	r1, [r3, r2]
        	 	  w_[1] = Gyro_y*DEC2RAD;
 8002012:	4bf9      	ldr	r3, [pc, #996]	; (80023f8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4f4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1c18      	adds	r0, r3, #0
 8002018:	f7ff fd2a 	bl	8001a70 <__aeabi_f2d>
 800201c:	4af3      	ldr	r2, [pc, #972]	; (80023ec <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4e8>)
 800201e:	4bf4      	ldr	r3, [pc, #976]	; (80023f0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4ec>)
 8002020:	f7ff fab4 	bl	800158c <__aeabi_dmul>
 8002024:	0003      	movs	r3, r0
 8002026:	000c      	movs	r4, r1
 8002028:	0018      	movs	r0, r3
 800202a:	0021      	movs	r1, r4
 800202c:	f7ff fd72 	bl	8001b14 <__aeabi_d2f>
 8002030:	1c01      	adds	r1, r0, #0
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	23f5      	movs	r3, #245	; 0xf5
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	50d1      	str	r1, [r2, r3]
        	 	  w_[2] = Gyro_z*DEC2RAD;
 800203a:	4bf0      	ldr	r3, [pc, #960]	; (80023fc <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	1c18      	adds	r0, r3, #0
 8002040:	f7ff fd16 	bl	8001a70 <__aeabi_f2d>
 8002044:	4ae9      	ldr	r2, [pc, #932]	; (80023ec <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4e8>)
 8002046:	4bea      	ldr	r3, [pc, #936]	; (80023f0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4ec>)
 8002048:	f7ff faa0 	bl	800158c <__aeabi_dmul>
 800204c:	0003      	movs	r3, r0
 800204e:	000c      	movs	r4, r1
 8002050:	0018      	movs	r0, r3
 8002052:	0021      	movs	r1, r4
 8002054:	f7ff fd5e 	bl	8001b14 <__aeabi_d2f>
 8002058:	1c01      	adds	r1, r0, #0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4ae8      	ldr	r2, [pc, #928]	; (8002400 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4fc>)
 800205e:	5099      	str	r1, [r3, r2]

        	 	  y_[0] = data_imu.Acc_x;
 8002060:	2304      	movs	r3, #4
 8002062:	2278      	movs	r2, #120	; 0x78
 8002064:	4694      	mov	ip, r2
 8002066:	44bc      	add	ip, r7
 8002068:	4463      	add	r3, ip
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	49e5      	ldr	r1, [pc, #916]	; (8002404 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x500>)
 8002070:	505a      	str	r2, [r3, r1]
        	 	  y_[1] = data_imu.Acc_y;
 8002072:	2304      	movs	r3, #4
 8002074:	2278      	movs	r2, #120	; 0x78
 8002076:	4694      	mov	ip, r2
 8002078:	44bc      	add	ip, r7
 800207a:	4463      	add	r3, ip
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	239c      	movs	r3, #156	; 0x9c
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	50d1      	str	r1, [r2, r3]
        	 	  y_[2] = data_imu.Acc_z;
 8002086:	2304      	movs	r3, #4
 8002088:	2278      	movs	r2, #120	; 0x78
 800208a:	4694      	mov	ip, r2
 800208c:	44bc      	add	ip, r7
 800208e:	4463      	add	r3, ip
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	49dc      	ldr	r1, [pc, #880]	; (8002408 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x504>)
 8002096:	505a      	str	r2, [r3, r1]

        	 	  y_[3] = mag.Mag_x;
 8002098:	231c      	movs	r3, #28
 800209a:	2278      	movs	r2, #120	; 0x78
 800209c:	4694      	mov	ip, r2
 800209e:	44bc      	add	ip, r7
 80020a0:	4463      	add	r3, ip
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	239d      	movs	r3, #157	; 0x9d
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	50d1      	str	r1, [r2, r3]
        	 	  y_[4] = mag.Mag_y;
 80020ac:	231c      	movs	r3, #28
 80020ae:	2278      	movs	r2, #120	; 0x78
 80020b0:	4694      	mov	ip, r2
 80020b2:	44bc      	add	ip, r7
 80020b4:	4463      	add	r3, ip
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	49d4      	ldr	r1, [pc, #848]	; (800240c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x508>)
 80020bc:	505a      	str	r2, [r3, r1]
        	 	  y_[5] = mag.Mag_z;
 80020be:	231c      	movs	r3, #28
 80020c0:	2278      	movs	r2, #120	; 0x78
 80020c2:	4694      	mov	ip, r2
 80020c4:	44bc      	add	ip, r7
 80020c6:	4463      	add	r3, ip
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	239e      	movs	r3, #158	; 0x9e
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	50d1      	str	r1, [r2, r3]


        	 	  float32_t x0,x1,x2,x3,x0_,x1_,x2_,x3_,x02,x12,x22,x32,x02_,x12_,x22_,x32_;
        	 	  x0 = x_[0]*0.5*dt;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	1c18      	adds	r0, r3, #0
 80020d8:	f7ff fcca 	bl	8001a70 <__aeabi_f2d>
 80020dc:	2200      	movs	r2, #0
 80020de:	4bcc      	ldr	r3, [pc, #816]	; (8002410 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x50c>)
 80020e0:	f7ff fa54 	bl	800158c <__aeabi_dmul>
 80020e4:	0003      	movs	r3, r0
 80020e6:	000c      	movs	r4, r1
 80020e8:	0025      	movs	r5, r4
 80020ea:	001c      	movs	r4, r3
 80020ec:	26a0      	movs	r6, #160	; 0xa0
 80020ee:	19bb      	adds	r3, r7, r6
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	f7ff fcbd 	bl	8001a70 <__aeabi_f2d>
 80020f6:	0002      	movs	r2, r0
 80020f8:	000b      	movs	r3, r1
 80020fa:	0020      	movs	r0, r4
 80020fc:	0029      	movs	r1, r5
 80020fe:	f7ff fa45 	bl	800158c <__aeabi_dmul>
 8002102:	0003      	movs	r3, r0
 8002104:	000c      	movs	r4, r1
 8002106:	0018      	movs	r0, r3
 8002108:	0021      	movs	r1, r4
 800210a:	f7ff fd03 	bl	8001b14 <__aeabi_d2f>
 800210e:	1c03      	adds	r3, r0, #0
 8002110:	65fb      	str	r3, [r7, #92]	; 0x5c
        	 	  x1 = x_[1]*0.5*dt;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	1c18      	adds	r0, r3, #0
 8002118:	f7ff fcaa 	bl	8001a70 <__aeabi_f2d>
 800211c:	2200      	movs	r2, #0
 800211e:	4bbc      	ldr	r3, [pc, #752]	; (8002410 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x50c>)
 8002120:	f7ff fa34 	bl	800158c <__aeabi_dmul>
 8002124:	0003      	movs	r3, r0
 8002126:	000c      	movs	r4, r1
 8002128:	0025      	movs	r5, r4
 800212a:	001c      	movs	r4, r3
 800212c:	19bb      	adds	r3, r7, r6
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	f7ff fc9e 	bl	8001a70 <__aeabi_f2d>
 8002134:	0002      	movs	r2, r0
 8002136:	000b      	movs	r3, r1
 8002138:	0020      	movs	r0, r4
 800213a:	0029      	movs	r1, r5
 800213c:	f7ff fa26 	bl	800158c <__aeabi_dmul>
 8002140:	0003      	movs	r3, r0
 8002142:	000c      	movs	r4, r1
 8002144:	0018      	movs	r0, r3
 8002146:	0021      	movs	r1, r4
 8002148:	f7ff fce4 	bl	8001b14 <__aeabi_d2f>
 800214c:	1c03      	adds	r3, r0, #0
 800214e:	65bb      	str	r3, [r7, #88]	; 0x58
        	 	  x2 = x_[2]*0.5*dt;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	1c18      	adds	r0, r3, #0
 8002156:	f7ff fc8b 	bl	8001a70 <__aeabi_f2d>
 800215a:	2200      	movs	r2, #0
 800215c:	4bac      	ldr	r3, [pc, #688]	; (8002410 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x50c>)
 800215e:	f7ff fa15 	bl	800158c <__aeabi_dmul>
 8002162:	0003      	movs	r3, r0
 8002164:	000c      	movs	r4, r1
 8002166:	0025      	movs	r5, r4
 8002168:	001c      	movs	r4, r3
 800216a:	19bb      	adds	r3, r7, r6
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f7ff fc7f 	bl	8001a70 <__aeabi_f2d>
 8002172:	0002      	movs	r2, r0
 8002174:	000b      	movs	r3, r1
 8002176:	0020      	movs	r0, r4
 8002178:	0029      	movs	r1, r5
 800217a:	f7ff fa07 	bl	800158c <__aeabi_dmul>
 800217e:	0003      	movs	r3, r0
 8002180:	000c      	movs	r4, r1
 8002182:	0018      	movs	r0, r3
 8002184:	0021      	movs	r1, r4
 8002186:	f7ff fcc5 	bl	8001b14 <__aeabi_d2f>
 800218a:	1c03      	adds	r3, r0, #0
 800218c:	657b      	str	r3, [r7, #84]	; 0x54
        	 	  x3 = x_[3]*0.5*dt;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	1c18      	adds	r0, r3, #0
 8002194:	f7ff fc6c 	bl	8001a70 <__aeabi_f2d>
 8002198:	2200      	movs	r2, #0
 800219a:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x50c>)
 800219c:	f7ff f9f6 	bl	800158c <__aeabi_dmul>
 80021a0:	0003      	movs	r3, r0
 80021a2:	000c      	movs	r4, r1
 80021a4:	0025      	movs	r5, r4
 80021a6:	001c      	movs	r4, r3
 80021a8:	19bb      	adds	r3, r7, r6
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	f7ff fc60 	bl	8001a70 <__aeabi_f2d>
 80021b0:	0002      	movs	r2, r0
 80021b2:	000b      	movs	r3, r1
 80021b4:	0020      	movs	r0, r4
 80021b6:	0029      	movs	r1, r5
 80021b8:	f7ff f9e8 	bl	800158c <__aeabi_dmul>
 80021bc:	0003      	movs	r3, r0
 80021be:	000c      	movs	r4, r1
 80021c0:	0018      	movs	r0, r3
 80021c2:	0021      	movs	r1, r4
 80021c4:	f7ff fca6 	bl	8001b14 <__aeabi_d2f>
 80021c8:	1c03      	adds	r3, r0, #0
 80021ca:	653b      	str	r3, [r7, #80]	; 0x50

        	 	  x0_ = -x0;
 80021cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	0612      	lsls	r2, r2, #24
 80021d2:	4053      	eors	r3, r2
 80021d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        	 	  x1_ = -x1;
 80021d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	0612      	lsls	r2, r2, #24
 80021dc:	4053      	eors	r3, r2
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
        	 	  x2_ = -x2;
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	0612      	lsls	r2, r2, #24
 80021e6:	4053      	eors	r3, r2
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
        	 	  x3_ = -x3;
 80021ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	0612      	lsls	r2, r2, #24
 80021f0:	4053      	eors	r3, r2
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40

        	 	  A_[0] = 1;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a87      	ldr	r2, [pc, #540]	; (8002414 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x510>)
 80021f8:	21fe      	movs	r1, #254	; 0xfe
 80021fa:	0589      	lsls	r1, r1, #22
 80021fc:	5099      	str	r1, [r3, r2]
        	 	           A_[8] = 1;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4a85      	ldr	r2, [pc, #532]	; (8002418 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x514>)
 8002202:	21fe      	movs	r1, #254	; 0xfe
 8002204:	0589      	lsls	r1, r1, #22
 8002206:	5099      	str	r1, [r3, r2]
        	 	           A_[16] = 1;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4a84      	ldr	r2, [pc, #528]	; (800241c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x518>)
 800220c:	21fe      	movs	r1, #254	; 0xfe
 800220e:	0589      	lsls	r1, r1, #22
 8002210:	5099      	str	r1, [r3, r2]
        	 	           A_[24] = 1;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4a82      	ldr	r2, [pc, #520]	; (8002420 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x51c>)
 8002216:	21fe      	movs	r1, #254	; 0xfe
 8002218:	0589      	lsls	r1, r1, #22
 800221a:	5099      	str	r1, [r3, r2]
        	 	           A_[32] = 1;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4a81      	ldr	r2, [pc, #516]	; (8002424 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x520>)
 8002220:	21fe      	movs	r1, #254	; 0xfe
 8002222:	0589      	lsls	r1, r1, #22
 8002224:	5099      	str	r1, [r3, r2]
        	 	           A_[40] = 1;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x524>)
 800222a:	21fe      	movs	r1, #254	; 0xfe
 800222c:	0589      	lsls	r1, r1, #22
 800222e:	5099      	str	r1, [r3, r2]
        	 	           A_[48] = 1;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4a7e      	ldr	r2, [pc, #504]	; (800242c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x528>)
 8002234:	21fe      	movs	r1, #254	; 0xfe
 8002236:	0589      	lsls	r1, r1, #22
 8002238:	5099      	str	r1, [r3, r2]

        	 	           A_[4] = x1;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	497c      	ldr	r1, [pc, #496]	; (8002430 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x52c>)
 800223e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002240:	505a      	str	r2, [r3, r1]
        	 	           A_[5] = x2;
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	23a1      	movs	r3, #161	; 0xa1
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800224a:	50d1      	str	r1, [r2, r3]
        	 	           A_[6] = x3;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	4979      	ldr	r1, [pc, #484]	; (8002434 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x530>)
 8002250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002252:	505a      	str	r2, [r3, r1]

        	 	           A_[11] = x0_;
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	23a4      	movs	r3, #164	; 0xa4
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800225c:	50d1      	str	r1, [r2, r3]
        	 	           A_[12] = x3;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4975      	ldr	r1, [pc, #468]	; (8002438 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x534>)
 8002262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002264:	505a      	str	r2, [r3, r1]
        	 	           A_[13] = x2_;
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	23a5      	movs	r3, #165	; 0xa5
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800226e:	50d1      	str	r1, [r2, r3]

        	 	           A_[18] = x3_;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4972      	ldr	r1, [pc, #456]	; (800243c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x538>)
 8002274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002276:	505a      	str	r2, [r3, r1]
        	 	           A_[19] = x0_;
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	23a8      	movs	r3, #168	; 0xa8
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002280:	50d1      	str	r1, [r2, r3]
        	 	           A_[20] = x1;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	496e      	ldr	r1, [pc, #440]	; (8002440 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x53c>)
 8002286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002288:	505a      	str	r2, [r3, r1]

        	 	           A_[25] = x2;
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	23ab      	movs	r3, #171	; 0xab
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002292:	50d1      	str	r1, [r2, r3]
        	 	           A_[26] = x1_;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	496b      	ldr	r1, [pc, #428]	; (8002444 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x540>)
 8002298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800229a:	505a      	str	r2, [r3, r1]
        	 	           A_[27] = x0_;
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	23ac      	movs	r3, #172	; 0xac
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022a4:	50d1      	str	r1, [r2, r3]

        	 	           B_[0] = x1_;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	4967      	ldr	r1, [pc, #412]	; (8002448 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x544>)
 80022aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ac:	505a      	str	r2, [r3, r1]
        	 	           B_[1] = x2_;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	23d0      	movs	r3, #208	; 0xd0
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80022b6:	50d1      	str	r1, [r2, r3]
        	 	           B_[2] = x3_;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4964      	ldr	r1, [pc, #400]	; (800244c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x548>)
 80022bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022be:	505a      	str	r2, [r3, r1]

        	 	           B_[3] = x0;
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	23d1      	movs	r3, #209	; 0xd1
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80022c8:	50d1      	str	r1, [r2, r3]
        	 	           B_[4] = x3_;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4960      	ldr	r1, [pc, #384]	; (8002450 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x54c>)
 80022ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022d0:	505a      	str	r2, [r3, r1]
        	 	           B_[5] = x2;
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	23d2      	movs	r3, #210	; 0xd2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022da:	50d1      	str	r1, [r2, r3]

        	 	           B_[6] = x3;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	495d      	ldr	r1, [pc, #372]	; (8002454 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x550>)
 80022e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80022e2:	505a      	str	r2, [r3, r1]
        	 	           B_[7] = x0;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	23d3      	movs	r3, #211	; 0xd3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80022ec:	50d1      	str	r1, [r2, r3]
        	 	           B_[8] = x1_;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4959      	ldr	r1, [pc, #356]	; (8002458 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x554>)
 80022f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022f4:	505a      	str	r2, [r3, r1]

        	 	           B_[9] = x2_;
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	23d4      	movs	r3, #212	; 0xd4
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80022fe:	50d1      	str	r1, [r2, r3]
        	 	           B_[10] = x1;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4956      	ldr	r1, [pc, #344]	; (800245c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x558>)
 8002304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002306:	505a      	str	r2, [r3, r1]
        	 	           B_[11] = x0;
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	23d5      	movs	r3, #213	; 0xd5
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002310:	50d1      	str	r1, [r2, r3]
        	 	  arm_mat_init_f32(&A,7,7,A_);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2492      	movs	r4, #146	; 0x92
 8002316:	00a4      	lsls	r4, r4, #2
 8002318:	1918      	adds	r0, r3, r4
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x510>)
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	2207      	movs	r2, #7
 8002324:	2107      	movs	r1, #7
 8002326:	f002 fc45 	bl	8004bb4 <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&B,7,3,B_);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2596      	movs	r5, #150	; 0x96
 800232e:	00ad      	lsls	r5, r5, #2
 8002330:	1958      	adds	r0, r3, r5
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	4a44      	ldr	r2, [pc, #272]	; (8002448 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x544>)
 8002336:	4694      	mov	ip, r2
 8002338:	4463      	add	r3, ip
 800233a:	2203      	movs	r2, #3
 800233c:	2107      	movs	r1, #7
 800233e:	f002 fc39 	bl	8004bb4 <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&w,3,1,w_);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	22a6      	movs	r2, #166	; 0xa6
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	1898      	adds	r0, r3, r2
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4929      	ldr	r1, [pc, #164]	; (80023f4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x4f0>)
 800234e:	468c      	mov	ip, r1
 8002350:	4463      	add	r3, ip
 8002352:	2201      	movs	r2, #1
 8002354:	2103      	movs	r1, #3
 8002356:	f002 fc2d 	bl	8004bb4 <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&temp2,7,1,temp2_);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	21aa      	movs	r1, #170	; 0xaa
 800235e:	0089      	lsls	r1, r1, #2
 8002360:	1858      	adds	r0, r3, r1
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	26ce      	movs	r6, #206	; 0xce
 8002366:	00b6      	lsls	r6, r6, #2
 8002368:	46b4      	mov	ip, r6
 800236a:	4463      	add	r3, ip
 800236c:	2201      	movs	r2, #1
 800236e:	2107      	movs	r1, #7
 8002370:	f002 fc20 	bl	8004bb4 <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&AT,7,7,AT_);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2094      	movs	r0, #148	; 0x94
 8002378:	0080      	lsls	r0, r0, #2
 800237a:	1818      	adds	r0, r3, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	26b7      	movs	r6, #183	; 0xb7
 8002380:	00f6      	lsls	r6, r6, #3
 8002382:	46b4      	mov	ip, r6
 8002384:	4463      	add	r3, ip
 8002386:	2207      	movs	r2, #7
 8002388:	2107      	movs	r1, #7
 800238a:	f002 fc13 	bl	8004bb4 <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&temp4,7,7,temp4_);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	26ae      	movs	r6, #174	; 0xae
 8002392:	00b6      	lsls	r6, r6, #2
 8002394:	1998      	adds	r0, r3, r6
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2683      	movs	r6, #131	; 0x83
 800239a:	00f6      	lsls	r6, r6, #3
 800239c:	46b4      	mov	ip, r6
 800239e:	4463      	add	r3, ip
 80023a0:	2207      	movs	r2, #7
 80023a2:	2107      	movs	r1, #7
 80023a4:	f002 fc06 	bl	8004bb4 <arm_mat_init_f32>

        	 	  status = arm_mat_mult_f32 (&A, &x, &temp1);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1918      	adds	r0, r3, r4
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	268e      	movs	r6, #142	; 0x8e
 80023b0:	00b6      	lsls	r6, r6, #2
 80023b2:	1999      	adds	r1, r3, r6
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	22a8      	movs	r2, #168	; 0xa8
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	001a      	movs	r2, r3
 80023c0:	f002 fa32 	bl	8004828 <arm_mat_mult_f32>
 80023c4:	0003      	movs	r3, r0
 80023c6:	0019      	movs	r1, r3
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	23c6      	movs	r3, #198	; 0xc6
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	54d1      	strb	r1, [r2, r3]
        	 	  status = arm_mat_mult_f32 (&B, &w, &temp2);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	1958      	adds	r0, r3, r5
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	22a6      	movs	r2, #166	; 0xa6
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	1899      	adds	r1, r3, r2
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	25aa      	movs	r5, #170	; 0xaa
 80023e0:	00ad      	lsls	r5, r5, #2
 80023e2:	46ac      	mov	ip, r5
 80023e4:	e03c      	b.n	8002460 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x55c>
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	200000a8 	.word	0x200000a8
 80023ec:	a226e211 	.word	0xa226e211
 80023f0:	3f91df46 	.word	0x3f91df46
 80023f4:	00000f4c 	.word	0x00000f4c
 80023f8:	200000ac 	.word	0x200000ac
 80023fc:	200000b0 	.word	0x200000b0
 8002400:	00000f54 	.word	0x00000f54
 8002404:	000004dc 	.word	0x000004dc
 8002408:	000004e4 	.word	0x000004e4
 800240c:	000004ec 	.word	0x000004ec
 8002410:	3fe00000 	.word	0x3fe00000
 8002414:	000004f4 	.word	0x000004f4
 8002418:	00000514 	.word	0x00000514
 800241c:	00000534 	.word	0x00000534
 8002420:	00000554 	.word	0x00000554
 8002424:	00000574 	.word	0x00000574
 8002428:	00000594 	.word	0x00000594
 800242c:	000005b4 	.word	0x000005b4
 8002430:	00000504 	.word	0x00000504
 8002434:	0000050c 	.word	0x0000050c
 8002438:	00000524 	.word	0x00000524
 800243c:	0000053c 	.word	0x0000053c
 8002440:	00000544 	.word	0x00000544
 8002444:	0000055c 	.word	0x0000055c
 8002448:	0000067c 	.word	0x0000067c
 800244c:	00000684 	.word	0x00000684
 8002450:	0000068c 	.word	0x0000068c
 8002454:	00000694 	.word	0x00000694
 8002458:	0000069c 	.word	0x0000069c
 800245c:	000006a4 	.word	0x000006a4
 8002460:	4463      	add	r3, ip
 8002462:	001a      	movs	r2, r3
 8002464:	f002 f9e0 	bl	8004828 <arm_mat_mult_f32>
 8002468:	0003      	movs	r3, r0
 800246a:	0019      	movs	r1, r3
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	23c6      	movs	r3, #198	; 0xc6
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	54d1      	strb	r1, [r2, r3]

        	 	  status = arm_mat_add_f32 (&temp1, &temp2,&x);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	25a8      	movs	r5, #168	; 0xa8
 8002478:	00ad      	lsls	r5, r5, #2
 800247a:	1958      	adds	r0, r3, r5
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	21aa      	movs	r1, #170	; 0xaa
 8002480:	0089      	lsls	r1, r1, #2
 8002482:	1859      	adds	r1, r3, r1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	258e      	movs	r5, #142	; 0x8e
 8002488:	00ad      	lsls	r5, r5, #2
 800248a:	46ac      	mov	ip, r5
 800248c:	4463      	add	r3, ip
 800248e:	001a      	movs	r2, r3
 8002490:	f002 fb94 	bl	8004bbc <arm_mat_add_f32>
 8002494:	0003      	movs	r3, r0
 8002496:	0019      	movs	r1, r3
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	23c6      	movs	r3, #198	; 0xc6
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	54d1      	strb	r1, [r2, r3]
        	 	  status = arm_mat_mult_f32 (&A, &P, &temp3);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	1918      	adds	r0, r3, r4
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2598      	movs	r5, #152	; 0x98
 80024a8:	00ad      	lsls	r5, r5, #2
 80024aa:	1959      	adds	r1, r3, r5
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	22ac      	movs	r2, #172	; 0xac
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4694      	mov	ip, r2
 80024b4:	4463      	add	r3, ip
 80024b6:	001a      	movs	r2, r3
 80024b8:	f002 f9b6 	bl	8004828 <arm_mat_mult_f32>
 80024bc:	0003      	movs	r3, r0
 80024be:	0019      	movs	r1, r3
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	23c6      	movs	r3, #198	; 0xc6
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	54d1      	strb	r1, [r2, r3]

        	 	  status = arm_mat_trans_f32 (&A, &AT);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	191a      	adds	r2, r3, r4
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2194      	movs	r1, #148	; 0x94
 80024d0:	0089      	lsls	r1, r1, #2
 80024d2:	468c      	mov	ip, r1
 80024d4:	4463      	add	r3, ip
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f002 f94d 	bl	8004778 <arm_mat_trans_f32>
 80024de:	0003      	movs	r3, r0
 80024e0:	0019      	movs	r1, r3
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	23c6      	movs	r3, #198	; 0xc6
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	54d1      	strb	r1, [r2, r3]
        	 	  status = arm_mat_mult_f32 (&temp3, &AT, &temp4);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	21ac      	movs	r1, #172	; 0xac
 80024ee:	0089      	lsls	r1, r1, #2
 80024f0:	1858      	adds	r0, r3, r1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2294      	movs	r2, #148	; 0x94
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	1899      	adds	r1, r3, r2
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	24ae      	movs	r4, #174	; 0xae
 80024fe:	00a4      	lsls	r4, r4, #2
 8002500:	46a4      	mov	ip, r4
 8002502:	4463      	add	r3, ip
 8002504:	001a      	movs	r2, r3
 8002506:	f002 f98f 	bl	8004828 <arm_mat_mult_f32>
 800250a:	0003      	movs	r3, r0
 800250c:	0019      	movs	r1, r3
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	23c6      	movs	r3, #198	; 0xc6
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	54d1      	strb	r1, [r2, r3]
        	 //
        	 	  status = arm_mat_add_f32 (&temp4, &Q, &P);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	22ae      	movs	r2, #174	; 0xae
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	1898      	adds	r0, r3, r2
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	229a      	movs	r2, #154	; 0x9a
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	1899      	adds	r1, r3, r2
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2298      	movs	r2, #152	; 0x98
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4694      	mov	ip, r2
 800252e:	4463      	add	r3, ip
 8002530:	001a      	movs	r2, r3
 8002532:	f002 fb43 	bl	8004bbc <arm_mat_add_f32>
 8002536:	0003      	movs	r3, r0
 8002538:	0019      	movs	r1, r3
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	23c6      	movs	r3, #198	; 0xc6
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	54d1      	strb	r1, [r2, r3]

        	 	  x02 = x_[0]*(-2);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	21c0      	movs	r1, #192	; 0xc0
 8002548:	0609      	lsls	r1, r1, #24
 800254a:	1c18      	adds	r0, r3, #0
 800254c:	f7fe fa10 	bl	8000970 <__aeabi_fmul>
 8002550:	1c03      	adds	r3, r0, #0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
        	 	  x12 = x_[1]*(-2);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	21c0      	movs	r1, #192	; 0xc0
 800255a:	0609      	lsls	r1, r1, #24
 800255c:	1c18      	adds	r0, r3, #0
 800255e:	f7fe fa07 	bl	8000970 <__aeabi_fmul>
 8002562:	1c03      	adds	r3, r0, #0
 8002564:	63bb      	str	r3, [r7, #56]	; 0x38
        	 	  x22 = x_[2]*(-2);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	21c0      	movs	r1, #192	; 0xc0
 800256c:	0609      	lsls	r1, r1, #24
 800256e:	1c18      	adds	r0, r3, #0
 8002570:	f7fe f9fe 	bl	8000970 <__aeabi_fmul>
 8002574:	1c03      	adds	r3, r0, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
        	 	  x32 = x_[3]*(-2);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	21c0      	movs	r1, #192	; 0xc0
 800257e:	0609      	lsls	r1, r1, #24
 8002580:	1c18      	adds	r0, r3, #0
 8002582:	f7fe f9f5 	bl	8000970 <__aeabi_fmul>
 8002586:	1c03      	adds	r3, r0, #0
 8002588:	633b      	str	r3, [r7, #48]	; 0x30

        	 	  x02_ = -x02;
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	0612      	lsls	r2, r2, #24
 8002590:	4053      	eors	r3, r2
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
        	 	  x12_ = -x12;
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0612      	lsls	r2, r2, #24
 800259a:	4053      	eors	r3, r2
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
        	 	  x22_ = -x22;
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0612      	lsls	r2, r2, #24
 80025a4:	4053      	eors	r3, r2
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
        	 	  x32_ = -x32;
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	0612      	lsls	r2, r2, #24
 80025ae:	4053      	eors	r3, r2
 80025b0:	623b      	str	r3, [r7, #32]

        	 	  H_[0] = x22_;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	49fe      	ldr	r1, [pc, #1016]	; (80029b0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xaac>)
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	505a      	str	r2, [r3, r1]
        	 	  H_[1] = x32;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	49fd      	ldr	r1, [pc, #1012]	; (80029b4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xab0>)
 80025be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c0:	505a      	str	r2, [r3, r1]
        	 	  H_[2] = x02_;
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	23b0      	movs	r3, #176	; 0xb0
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025ca:	50d1      	str	r1, [r2, r3]
        	 	  H_[3] = x12;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	49fa      	ldr	r1, [pc, #1000]	; (80029b8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xab4>)
 80025d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d2:	505a      	str	r2, [r3, r1]

        	 	  H_[7] = x12;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	49f9      	ldr	r1, [pc, #996]	; (80029bc <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xab8>)
 80025d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025da:	505a      	str	r2, [r3, r1]
        	 	  H_[8] = x02;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	49f8      	ldr	r1, [pc, #992]	; (80029c0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xabc>)
 80025e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025e2:	505a      	str	r2, [r3, r1]
        	 	  H_[9] = x32;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	49f7      	ldr	r1, [pc, #988]	; (80029c4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xac0>)
 80025e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ea:	505a      	str	r2, [r3, r1]
        	 	  H_[10] = x22;
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	23b2      	movs	r3, #178	; 0xb2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025f4:	50d1      	str	r1, [r2, r3]

        	 	  H_[14] = x02;
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	23b3      	movs	r3, #179	; 0xb3
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025fe:	50d1      	str	r1, [r2, r3]
        	 	  H_[15] = x12_;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	49f1      	ldr	r1, [pc, #964]	; (80029c8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xac4>)
 8002604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002606:	505a      	str	r2, [r3, r1]
        	 	  H_[16] = x22_;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	49f0      	ldr	r1, [pc, #960]	; (80029cc <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xac8>)
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	505a      	str	r2, [r3, r1]
        	 	  H_[17] = x32;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	49ef      	ldr	r1, [pc, #956]	; (80029d0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xacc>)
 8002614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002616:	505a      	str	r2, [r3, r1]


        	 	          H_[21] = x32;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	49ee      	ldr	r1, [pc, #952]	; (80029d4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xad0>)
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	505a      	str	r2, [r3, r1]
        	 	          H_[22] = x22;
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	23b5      	movs	r3, #181	; 0xb5
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002628:	50d1      	str	r1, [r2, r3]
        	 	          H_[23] = x12;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	49ea      	ldr	r1, [pc, #936]	; (80029d8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xad4>)
 800262e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002630:	505a      	str	r2, [r3, r1]
        	 	          H_[24] = x02;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	49e9      	ldr	r1, [pc, #932]	; (80029dc <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xad8>)
 8002636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002638:	505a      	str	r2, [r3, r1]

        	 	          H_[28] = x02;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	49e8      	ldr	r1, [pc, #928]	; (80029e0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xadc>)
 800263e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002640:	505a      	str	r2, [r3, r1]
        	 	          H_[29] = x12_;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	49e7      	ldr	r1, [pc, #924]	; (80029e4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xae0>)
 8002646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002648:	505a      	str	r2, [r3, r1]
        	 	          H_[30] = x22;
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	23b7      	movs	r3, #183	; 0xb7
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002652:	50d1      	str	r1, [r2, r3]
        	 	          H_[31] = x32_;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	49e4      	ldr	r1, [pc, #912]	; (80029e8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xae4>)
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	505a      	str	r2, [r3, r1]

        	 	          H_[35] = x12_;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	49e3      	ldr	r1, [pc, #908]	; (80029ec <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xae8>)
 8002660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002662:	505a      	str	r2, [r3, r1]
        	 	          H_[36] = x02_;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	49e2      	ldr	r1, [pc, #904]	; (80029f0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xaec>)
 8002668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266a:	505a      	str	r2, [r3, r1]
        	 	          H_[37] = x32;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	49e1      	ldr	r1, [pc, #900]	; (80029f4 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xaf0>)
 8002670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002672:	505a      	str	r2, [r3, r1]
        	 	          H_[38] = x22;
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	23b9      	movs	r3, #185	; 0xb9
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800267c:	50d1      	str	r1, [r2, r3]

        	 	          arm_mat_init_f32(&HT,7,6,HT_);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	22b2      	movs	r2, #178	; 0xb2
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	1898      	adds	r0, r3, r2
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	21da      	movs	r1, #218	; 0xda
 800268a:	00c9      	lsls	r1, r1, #3
 800268c:	468c      	mov	ip, r1
 800268e:	4463      	add	r3, ip
 8002690:	2206      	movs	r2, #6
 8002692:	2107      	movs	r1, #7
 8002694:	f002 fa8e 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&H,6,7,H_);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	249c      	movs	r4, #156	; 0x9c
 800269c:	00a4      	lsls	r4, r4, #2
 800269e:	1918      	adds	r0, r3, r4
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	49c3      	ldr	r1, [pc, #780]	; (80029b0 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xaac>)
 80026a4:	468c      	mov	ip, r1
 80026a6:	4463      	add	r3, ip
 80026a8:	2207      	movs	r2, #7
 80026aa:	2106      	movs	r1, #6
 80026ac:	f002 fa82 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&HPHT,6,6,HPHT_);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	21bc      	movs	r1, #188	; 0xbc
 80026b4:	0089      	lsls	r1, r1, #2
 80026b6:	1858      	adds	r0, r3, r1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	49cf      	ldr	r1, [pc, #828]	; (80029f8 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xaf4>)
 80026bc:	468c      	mov	ip, r1
 80026be:	4463      	add	r3, ip
 80026c0:	2206      	movs	r2, #6
 80026c2:	2106      	movs	r1, #6
 80026c4:	f002 fa76 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&PHT,6,7,PHT_);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	21b8      	movs	r1, #184	; 0xb8
 80026cc:	0089      	lsls	r1, r1, #2
 80026ce:	1858      	adds	r0, r3, r1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	4aca      	ldr	r2, [pc, #808]	; (80029fc <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xaf8>)
 80026d4:	4694      	mov	ip, r2
 80026d6:	4463      	add	r3, ip
 80026d8:	2207      	movs	r2, #7
 80026da:	2106      	movs	r1, #6
 80026dc:	f002 fa6a 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&P_HT,7,6,P_HT_);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	22ba      	movs	r2, #186	; 0xba
 80026e4:	0092      	lsls	r2, r2, #2
 80026e6:	1898      	adds	r0, r3, r2
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	219c      	movs	r1, #156	; 0x9c
 80026ec:	0109      	lsls	r1, r1, #4
 80026ee:	468c      	mov	ip, r1
 80026f0:	4463      	add	r3, ip
 80026f2:	2206      	movs	r2, #6
 80026f4:	2107      	movs	r1, #7
 80026f6:	f002 fa5d 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&S,6,6,S_);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	21a0      	movs	r1, #160	; 0xa0
 80026fe:	0089      	lsls	r1, r1, #2
 8002700:	1858      	adds	r0, r3, r1
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	49be      	ldr	r1, [pc, #760]	; (8002a00 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xafc>)
 8002706:	468c      	mov	ip, r1
 8002708:	4463      	add	r3, ip
 800270a:	2206      	movs	r2, #6
 800270c:	2106      	movs	r1, #6
 800270e:	f002 fa51 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&Sinv,6,6,Sinv_);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	21b6      	movs	r1, #182	; 0xb6
 8002716:	0089      	lsls	r1, r1, #2
 8002718:	1858      	adds	r0, r3, r1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	49b9      	ldr	r1, [pc, #740]	; (8002a04 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xb00>)
 800271e:	468c      	mov	ip, r1
 8002720:	4463      	add	r3, ip
 8002722:	2206      	movs	r2, #6
 8002724:	2106      	movs	r1, #6
 8002726:	f002 fa45 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&K,7,6,K_);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	219e      	movs	r1, #158	; 0x9e
 800272e:	0089      	lsls	r1, r1, #2
 8002730:	1858      	adds	r0, r3, r1
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	22ba      	movs	r2, #186	; 0xba
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	4694      	mov	ip, r2
 800273a:	4463      	add	r3, ip
 800273c:	2206      	movs	r2, #6
 800273e:	2107      	movs	r1, #7
 8002740:	f002 fa38 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&Hx,7,6,Hx_);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	20b4      	movs	r0, #180	; 0xb4
 8002748:	0080      	lsls	r0, r0, #2
 800274a:	1818      	adds	r0, r3, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2290      	movs	r2, #144	; 0x90
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	4694      	mov	ip, r2
 8002754:	4463      	add	r3, ip
 8002756:	2206      	movs	r2, #6
 8002758:	2107      	movs	r1, #7
 800275a:	f002 fa2b 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&Kino,7,7,Kino_);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	20c0      	movs	r0, #192	; 0xc0
 8002762:	0080      	lsls	r0, r0, #2
 8002764:	1818      	adds	r0, r3, r0
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	21ef      	movs	r1, #239	; 0xef
 800276a:	00c9      	lsls	r1, r1, #3
 800276c:	468c      	mov	ip, r1
 800276e:	4463      	add	r3, ip
 8002770:	2207      	movs	r2, #7
 8002772:	2107      	movs	r1, #7
 8002774:	f002 fa1e 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&inovation,6,1,ino_);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	20be      	movs	r0, #190	; 0xbe
 800277c:	0080      	lsls	r0, r0, #2
 800277e:	1818      	adds	r0, r3, r0
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	49a1      	ldr	r1, [pc, #644]	; (8002a08 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xb04>)
 8002784:	468c      	mov	ip, r1
 8002786:	4463      	add	r3, ip
 8002788:	2201      	movs	r2, #1
 800278a:	2106      	movs	r1, #6
 800278c:	f002 fa12 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&KH,7,7,KH_);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	21c2      	movs	r1, #194	; 0xc2
 8002794:	0089      	lsls	r1, r1, #2
 8002796:	1858      	adds	r0, r3, r1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	4a9c      	ldr	r2, [pc, #624]	; (8002a0c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xb08>)
 800279c:	4694      	mov	ip, r2
 800279e:	4463      	add	r3, ip
 80027a0:	2207      	movs	r2, #7
 80027a2:	2107      	movs	r1, #7
 80027a4:	f002 fa06 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&I,7,7,I_);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	20a4      	movs	r0, #164	; 0xa4
 80027ac:	0080      	lsls	r0, r0, #2
 80027ae:	1818      	adds	r0, r3, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	4a97      	ldr	r2, [pc, #604]	; (8002a10 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xb0c>)
 80027b4:	4694      	mov	ip, r2
 80027b6:	4463      	add	r3, ip
 80027b8:	2207      	movs	r2, #7
 80027ba:	2107      	movs	r1, #7
 80027bc:	f002 f9fa 	bl	8004bb4 <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&IKH,7,7,IKH_);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	22c4      	movs	r2, #196	; 0xc4
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	1898      	adds	r0, r3, r2
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4992      	ldr	r1, [pc, #584]	; (8002a14 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xb10>)
 80027cc:	468c      	mov	ip, r1
 80027ce:	4463      	add	r3, ip
 80027d0:	2207      	movs	r2, #7
 80027d2:	2107      	movs	r1, #7
 80027d4:	f002 f9ee 	bl	8004bb4 <arm_mat_init_f32>
        	 //	    	  arm_mat_init_f32(&temp2,7,1,temp2_);



        	 	    	  status = arm_mat_trans_f32 (&H, &HT);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	191a      	adds	r2, r3, r4
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	21b2      	movs	r1, #178	; 0xb2
 80027e0:	0089      	lsls	r1, r1, #2
 80027e2:	468c      	mov	ip, r1
 80027e4:	4463      	add	r3, ip
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f001 ffc5 	bl	8004778 <arm_mat_trans_f32>
 80027ee:	0003      	movs	r3, r0
 80027f0:	0019      	movs	r1, r3
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	23c6      	movs	r3, #198	; 0xc6
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_mult_f32 (&H, &P, &PHT);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1918      	adds	r0, r3, r4
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1959      	adds	r1, r3, r5
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	22b8      	movs	r2, #184	; 0xb8
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4694      	mov	ip, r2
 800280a:	4463      	add	r3, ip
 800280c:	001a      	movs	r2, r3
 800280e:	f002 f80b 	bl	8004828 <arm_mat_mult_f32>
 8002812:	0003      	movs	r3, r0
 8002814:	0019      	movs	r1, r3
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	23c6      	movs	r3, #198	; 0xc6
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	54d1      	strb	r1, [r2, r3]


        	 	    	  status = arm_mat_mult_f32 (&PHT, &HT, &HPHT);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	20b8      	movs	r0, #184	; 0xb8
 8002822:	0080      	lsls	r0, r0, #2
 8002824:	1818      	adds	r0, r3, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	22b2      	movs	r2, #178	; 0xb2
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	1899      	adds	r1, r3, r2
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	22bc      	movs	r2, #188	; 0xbc
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	4694      	mov	ip, r2
 8002836:	4463      	add	r3, ip
 8002838:	001a      	movs	r2, r3
 800283a:	f001 fff5 	bl	8004828 <arm_mat_mult_f32>
 800283e:	0003      	movs	r3, r0
 8002840:	0019      	movs	r1, r3
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	23c6      	movs	r3, #198	; 0xc6
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_add_f32 (&HPHT, &R, &S);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	20bc      	movs	r0, #188	; 0xbc
 800284e:	0080      	lsls	r0, r0, #2
 8002850:	1818      	adds	r0, r3, r0
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	21a2      	movs	r1, #162	; 0xa2
 8002856:	0089      	lsls	r1, r1, #2
 8002858:	1859      	adds	r1, r3, r1
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	22a0      	movs	r2, #160	; 0xa0
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4694      	mov	ip, r2
 8002862:	4463      	add	r3, ip
 8002864:	001a      	movs	r2, r3
 8002866:	f002 f9a9 	bl	8004bbc <arm_mat_add_f32>
 800286a:	0003      	movs	r3, r0
 800286c:	0019      	movs	r1, r3
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	23c6      	movs	r3, #198	; 0xc6
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_inverse_f32(&S,&Sinv);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	20a0      	movs	r0, #160	; 0xa0
 800287a:	0080      	lsls	r0, r0, #2
 800287c:	181a      	adds	r2, r3, r0
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	21b6      	movs	r1, #182	; 0xb6
 8002882:	0089      	lsls	r1, r1, #2
 8002884:	468c      	mov	ip, r1
 8002886:	4463      	add	r3, ip
 8002888:	0019      	movs	r1, r3
 800288a:	0010      	movs	r0, r2
 800288c:	f002 f840 	bl	8004910 <arm_mat_inverse_f32>
 8002890:	0003      	movs	r3, r0
 8002892:	0019      	movs	r1, r3
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	23c6      	movs	r3, #198	; 0xc6
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	54d1      	strb	r1, [r2, r3]
        	 //
        	 	    	  status = arm_mat_mult_f32 (&P, &HT, &P_HT);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1958      	adds	r0, r3, r5
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	22b2      	movs	r2, #178	; 0xb2
 80028a4:	0092      	lsls	r2, r2, #2
 80028a6:	1899      	adds	r1, r3, r2
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	22ba      	movs	r2, #186	; 0xba
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	4694      	mov	ip, r2
 80028b0:	4463      	add	r3, ip
 80028b2:	001a      	movs	r2, r3
 80028b4:	f001 ffb8 	bl	8004828 <arm_mat_mult_f32>
 80028b8:	0003      	movs	r3, r0
 80028ba:	0019      	movs	r1, r3
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	23c6      	movs	r3, #198	; 0xc6
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_mult_f32 (&P_HT, &Sinv, &K);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	22ba      	movs	r2, #186	; 0xba
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	1898      	adds	r0, r3, r2
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	22b6      	movs	r2, #182	; 0xb6
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	1899      	adds	r1, r3, r2
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	229e      	movs	r2, #158	; 0x9e
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4694      	mov	ip, r2
 80028dc:	4463      	add	r3, ip
 80028de:	001a      	movs	r2, r3
 80028e0:	f001 ffa2 	bl	8004828 <arm_mat_mult_f32>
 80028e4:	0003      	movs	r3, r0
 80028e6:	0019      	movs	r1, r3
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	23c6      	movs	r3, #198	; 0xc6
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	54d1      	strb	r1, [r2, r3]

        	 //
        	 	    	  status = arm_mat_mult_f32 (&H, &x, &Hx);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1918      	adds	r0, r3, r4
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1999      	adds	r1, r3, r6
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	22b4      	movs	r2, #180	; 0xb4
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4694      	mov	ip, r2
 8002900:	4463      	add	r3, ip
 8002902:	001a      	movs	r2, r3
 8002904:	f001 ff90 	bl	8004828 <arm_mat_mult_f32>
 8002908:	0003      	movs	r3, r0
 800290a:	0019      	movs	r1, r3
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	23c6      	movs	r3, #198	; 0xc6
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_sub_f32(&y,&Hx, &inovation);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2190      	movs	r1, #144	; 0x90
 8002918:	0089      	lsls	r1, r1, #2
 800291a:	1858      	adds	r0, r3, r1
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	22b4      	movs	r2, #180	; 0xb4
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	1899      	adds	r1, r3, r2
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	22be      	movs	r2, #190	; 0xbe
 8002928:	0092      	lsls	r2, r2, #2
 800292a:	4694      	mov	ip, r2
 800292c:	4463      	add	r3, ip
 800292e:	001a      	movs	r2, r3
 8002930:	f001 ff54 	bl	80047dc <arm_mat_sub_f32>
 8002934:	0003      	movs	r3, r0
 8002936:	0019      	movs	r1, r3
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	23c6      	movs	r3, #198	; 0xc6
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_sub_f32(&K,&inovation, &Kino);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	219e      	movs	r1, #158	; 0x9e
 8002944:	0089      	lsls	r1, r1, #2
 8002946:	1858      	adds	r0, r3, r1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	22be      	movs	r2, #190	; 0xbe
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	1899      	adds	r1, r3, r2
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	22c0      	movs	r2, #192	; 0xc0
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	4694      	mov	ip, r2
 8002958:	4463      	add	r3, ip
 800295a:	001a      	movs	r2, r3
 800295c:	f001 ff3e 	bl	80047dc <arm_mat_sub_f32>
 8002960:	0003      	movs	r3, r0
 8002962:	0019      	movs	r1, r3
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	23c6      	movs	r3, #198	; 0xc6
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	54d1      	strb	r1, [r2, r3]

        	 	    	  status = arm_mat_add_f32(&x,&Kino, &x);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1998      	adds	r0, r3, r6
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	22c0      	movs	r2, #192	; 0xc0
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	1899      	adds	r1, r3, r2
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	268e      	movs	r6, #142	; 0x8e
 800297c:	00b6      	lsls	r6, r6, #2
 800297e:	46b4      	mov	ip, r6
 8002980:	4463      	add	r3, ip
 8002982:	001a      	movs	r2, r3
 8002984:	f002 f91a 	bl	8004bbc <arm_mat_add_f32>
 8002988:	0003      	movs	r3, r0
 800298a:	0019      	movs	r1, r3
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	23c6      	movs	r3, #198	; 0xc6
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_add_f32(&K,&H, &KH);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	219e      	movs	r1, #158	; 0x9e
 8002998:	0089      	lsls	r1, r1, #2
 800299a:	1858      	adds	r0, r3, r1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	1919      	adds	r1, r3, r4
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	24c2      	movs	r4, #194	; 0xc2
 80029a4:	00a4      	lsls	r4, r4, #2
 80029a6:	46a4      	mov	ip, r4
 80029a8:	4463      	add	r3, ip
 80029aa:	001a      	movs	r2, r3
 80029ac:	e034      	b.n	8002a18 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xb14>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	00000af8 	.word	0x00000af8
 80029b4:	00000afc 	.word	0x00000afc
 80029b8:	00000b04 	.word	0x00000b04
 80029bc:	00000b14 	.word	0x00000b14
 80029c0:	00000b18 	.word	0x00000b18
 80029c4:	00000b1c 	.word	0x00000b1c
 80029c8:	00000b34 	.word	0x00000b34
 80029cc:	00000b38 	.word	0x00000b38
 80029d0:	00000b3c 	.word	0x00000b3c
 80029d4:	00000b4c 	.word	0x00000b4c
 80029d8:	00000b54 	.word	0x00000b54
 80029dc:	00000b58 	.word	0x00000b58
 80029e0:	00000b68 	.word	0x00000b68
 80029e4:	00000b6c 	.word	0x00000b6c
 80029e8:	00000b74 	.word	0x00000b74
 80029ec:	00000b84 	.word	0x00000b84
 80029f0:	00000b88 	.word	0x00000b88
 80029f4:	00000b8c 	.word	0x00000b8c
 80029f8:	00000a68 	.word	0x00000a68
 80029fc:	00000918 	.word	0x00000918
 8002a00:	00000d0c 	.word	0x00000d0c
 8002a04:	00000d9c 	.word	0x00000d9c
 8002a08:	00000e2c 	.word	0x00000e2c
 8002a0c:	00000c48 	.word	0x00000c48
 8002a10:	00000f58 	.word	0x00000f58
 8002a14:	0000083c 	.word	0x0000083c
 8002a18:	f002 f8d0 	bl	8004bbc <arm_mat_add_f32>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	0019      	movs	r1, r3
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	23c6      	movs	r3, #198	; 0xc6
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_sub_f32(&I,&KH, &IKH);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	20a4      	movs	r0, #164	; 0xa4
 8002a2c:	0080      	lsls	r0, r0, #2
 8002a2e:	1818      	adds	r0, r3, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	21c2      	movs	r1, #194	; 0xc2
 8002a34:	0089      	lsls	r1, r1, #2
 8002a36:	1859      	adds	r1, r3, r1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	24c4      	movs	r4, #196	; 0xc4
 8002a3c:	00a4      	lsls	r4, r4, #2
 8002a3e:	46a4      	mov	ip, r4
 8002a40:	4463      	add	r3, ip
 8002a42:	001a      	movs	r2, r3
 8002a44:	f001 feca 	bl	80047dc <arm_mat_sub_f32>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	23c6      	movs	r3, #198	; 0xc6
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	54d1      	strb	r1, [r2, r3]
        	 	    	  status = arm_mat_mult_f32 (&IKH, &P, &P);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	22c4      	movs	r2, #196	; 0xc4
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	1898      	adds	r0, r3, r2
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	1959      	adds	r1, r3, r5
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2298      	movs	r2, #152	; 0x98
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4694      	mov	ip, r2
 8002a68:	4463      	add	r3, ip
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	f001 fedc 	bl	8004828 <arm_mat_mult_f32>
 8002a70:	0003      	movs	r3, r0
 8002a72:	0019      	movs	r1, r3
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	23c6      	movs	r3, #198	; 0xc6
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	54d1      	strb	r1, [r2, r3]

               	       float temp = (float) (x_[0] * x_[0]  + x_[1] * x_[1] + x_[2] * x_[2] + x_[3] * x_[3]);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	1c19      	adds	r1, r3, #0
 8002a86:	1c10      	adds	r0, r2, #0
 8002a88:	f7fd ff72 	bl	8000970 <__aeabi_fmul>
 8002a8c:	1c03      	adds	r3, r0, #0
 8002a8e:	1c1c      	adds	r4, r3, #0
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	1c19      	adds	r1, r3, #0
 8002a9a:	1c10      	adds	r0, r2, #0
 8002a9c:	f7fd ff68 	bl	8000970 <__aeabi_fmul>
 8002aa0:	1c03      	adds	r3, r0, #0
 8002aa2:	1c19      	adds	r1, r3, #0
 8002aa4:	1c20      	adds	r0, r4, #0
 8002aa6:	f7fd fbf1 	bl	800028c <__aeabi_fadd>
 8002aaa:	1c03      	adds	r3, r0, #0
 8002aac:	1c1c      	adds	r4, r3, #0
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	1c19      	adds	r1, r3, #0
 8002ab8:	1c10      	adds	r0, r2, #0
 8002aba:	f7fd ff59 	bl	8000970 <__aeabi_fmul>
 8002abe:	1c03      	adds	r3, r0, #0
 8002ac0:	1c19      	adds	r1, r3, #0
 8002ac2:	1c20      	adds	r0, r4, #0
 8002ac4:	f7fd fbe2 	bl	800028c <__aeabi_fadd>
 8002ac8:	1c03      	adds	r3, r0, #0
 8002aca:	1c1c      	adds	r4, r3, #0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	1c19      	adds	r1, r3, #0
 8002ad6:	1c10      	adds	r0, r2, #0
 8002ad8:	f7fd ff4a 	bl	8000970 <__aeabi_fmul>
 8002adc:	1c03      	adds	r3, r0, #0
 8002ade:	1c19      	adds	r1, r3, #0
 8002ae0:	1c20      	adds	r0, r4, #0
 8002ae2:	f7fd fbd3 	bl	800028c <__aeabi_fadd>
 8002ae6:	1c03      	adds	r3, r0, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
               	       temp = sqrt(temp);
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1c18      	adds	r0, r3, #0
 8002aee:	f7ff f8d0 	bl	8001c92 <_ZSt4sqrtf>
 8002af2:	1c03      	adds	r3, r0, #0
 8002af4:	61bb      	str	r3, [r7, #24]
               	       float recipNorm;
               	    	  recipNorm = 1/(temp);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1c19      	adds	r1, r3, #0
 8002afa:	20fe      	movs	r0, #254	; 0xfe
 8002afc:	0580      	lsls	r0, r0, #22
 8002afe:	f7fd fd5f 	bl	80005c0 <__aeabi_fdiv>
 8002b02:	1c03      	adds	r3, r0, #0
 8002b04:	61fb      	str	r3, [r7, #28]
               	    	  x_[0] *= recipNorm;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	69f9      	ldr	r1, [r7, #28]
 8002b0c:	1c18      	adds	r0, r3, #0
 8002b0e:	f7fd ff2f 	bl	8000970 <__aeabi_fmul>
 8002b12:	1c03      	adds	r3, r0, #0
 8002b14:	1c1a      	adds	r2, r3, #0
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	605a      	str	r2, [r3, #4]
               	    	  x_[1] *= recipNorm;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	69f9      	ldr	r1, [r7, #28]
 8002b20:	1c18      	adds	r0, r3, #0
 8002b22:	f7fd ff25 	bl	8000970 <__aeabi_fmul>
 8002b26:	1c03      	adds	r3, r0, #0
 8002b28:	1c1a      	adds	r2, r3, #0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	609a      	str	r2, [r3, #8]
               	    	  x_[2] *= recipNorm;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	69f9      	ldr	r1, [r7, #28]
 8002b34:	1c18      	adds	r0, r3, #0
 8002b36:	f7fd ff1b 	bl	8000970 <__aeabi_fmul>
 8002b3a:	1c03      	adds	r3, r0, #0
 8002b3c:	1c1a      	adds	r2, r3, #0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	60da      	str	r2, [r3, #12]
               	    	  x_[3] *= recipNorm;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	69f9      	ldr	r1, [r7, #28]
 8002b48:	1c18      	adds	r0, r3, #0
 8002b4a:	f7fd ff11 	bl	8000970 <__aeabi_fmul>
 8002b4e:	1c03      	adds	r3, r0, #0
 8002b50:	1c1a      	adds	r2, r3, #0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	611a      	str	r2, [r3, #16]

               	    	  angle = getAngle1(x_[0],x_[1],x_[2],x_[3]);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	685e      	ldr	r6, [r3, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	469c      	mov	ip, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	697c      	ldr	r4, [r7, #20]
 8002b6a:	4d0a      	ldr	r5, [pc, #40]	; (8002b94 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xc90>)
 8002b6c:	0038      	movs	r0, r7
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	9200      	str	r2, [sp, #0]
 8002b74:	4663      	mov	r3, ip
 8002b76:	1c32      	adds	r2, r6, #0
 8002b78:	f000 f80e 	bl	8002b98 <_ZN4EKF29getAngle1Effff>
 8002b7c:	003a      	movs	r2, r7
 8002b7e:	1963      	adds	r3, r4, r5
 8002b80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b82:	c313      	stmia	r3!, {r0, r1, r4}
//         H.print(huart3);
//         P.print(huart3);
//         S.print(huart3);
          }

	}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b019      	add	sp, #100	; 0x64
 8002b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b8c:	bc08      	pop	{r3}
 8002b8e:	b004      	add	sp, #16
 8002b90:	4718      	bx	r3
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	0000101c 	.word	0x0000101c

08002b98 <_ZN4EKF29getAngle1Effff>:
		q.q1 = x_[1];
		q.q2 = x_[2];
		q.q3 = x_[3];
		return q;
	}
	EULER_angle getAngle1(float q0,float q1, float q2,float q3){
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b08d      	sub	sp, #52	; 0x34
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
		float r,p,y;
		EULER_angle angle_e;


		float sinr = 2*(q0*q1 + q2 * q3);
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fd fee1 	bl	8000970 <__aeabi_fmul>
 8002bae:	1c03      	adds	r3, r0, #0
 8002bb0:	1c1c      	adds	r4, r3, #0
 8002bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002bb6:	f7fd fedb 	bl	8000970 <__aeabi_fmul>
 8002bba:	1c03      	adds	r3, r0, #0
 8002bbc:	1c19      	adds	r1, r3, #0
 8002bbe:	1c20      	adds	r0, r4, #0
 8002bc0:	f7fd fb64 	bl	800028c <__aeabi_fadd>
 8002bc4:	1c03      	adds	r3, r0, #0
 8002bc6:	1c19      	adds	r1, r3, #0
 8002bc8:	1c18      	adds	r0, r3, #0
 8002bca:	f7fd fb5f 	bl	800028c <__aeabi_fadd>
 8002bce:	1c03      	adds	r3, r0, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
		float cosr = 1 - 2*(q1*q1 + q2 * q2);
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	6838      	ldr	r0, [r7, #0]
 8002bd6:	f7fd fecb 	bl	8000970 <__aeabi_fmul>
 8002bda:	1c03      	adds	r3, r0, #0
 8002bdc:	1c1c      	adds	r4, r3, #0
 8002bde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002be0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002be2:	f7fd fec5 	bl	8000970 <__aeabi_fmul>
 8002be6:	1c03      	adds	r3, r0, #0
 8002be8:	1c19      	adds	r1, r3, #0
 8002bea:	1c20      	adds	r0, r4, #0
 8002bec:	f7fd fb4e 	bl	800028c <__aeabi_fadd>
 8002bf0:	1c03      	adds	r3, r0, #0
 8002bf2:	1c19      	adds	r1, r3, #0
 8002bf4:	1c18      	adds	r0, r3, #0
 8002bf6:	f7fd fb49 	bl	800028c <__aeabi_fadd>
 8002bfa:	1c03      	adds	r3, r0, #0
 8002bfc:	1c19      	adds	r1, r3, #0
 8002bfe:	20fe      	movs	r0, #254	; 0xfe
 8002c00:	0580      	lsls	r0, r0, #22
 8002c02:	f7fd ffe7 	bl	8000bd4 <__aeabi_fsub>
 8002c06:	1c03      	adds	r3, r0, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
		r = atan2(sinr, cosr);
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	1c11      	adds	r1, r2, #0
 8002c10:	1c18      	adds	r0, r3, #0
 8002c12:	f7ff f82e 	bl	8001c72 <_ZSt5atan2ff>
 8002c16:	1c03      	adds	r3, r0, #0
 8002c18:	623b      	str	r3, [r7, #32]


			float sinp = 2*( q0*q2 - q3*q1);
 8002c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fd fea7 	bl	8000970 <__aeabi_fmul>
 8002c22:	1c03      	adds	r3, r0, #0
 8002c24:	1c1c      	adds	r4, r3, #0
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c2a:	f7fd fea1 	bl	8000970 <__aeabi_fmul>
 8002c2e:	1c03      	adds	r3, r0, #0
 8002c30:	1c19      	adds	r1, r3, #0
 8002c32:	1c20      	adds	r0, r4, #0
 8002c34:	f7fd ffce 	bl	8000bd4 <__aeabi_fsub>
 8002c38:	1c03      	adds	r3, r0, #0
 8002c3a:	1c19      	adds	r1, r3, #0
 8002c3c:	1c18      	adds	r0, r3, #0
 8002c3e:	f7fd fb25 	bl	800028c <__aeabi_fadd>
 8002c42:	1c03      	adds	r3, r0, #0
 8002c44:	61fb      	str	r3, [r7, #28]
		    if (sinp >= 1)
 8002c46:	21fe      	movs	r1, #254	; 0xfe
 8002c48:	0589      	lsls	r1, r1, #22
 8002c4a:	69f8      	ldr	r0, [r7, #28]
 8002c4c:	f7fd fb14 	bl	8000278 <__aeabi_fcmpge>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d002      	beq.n	8002c5a <_ZN4EKF29getAngle1Effff+0xc2>
		    	p = PI/2;
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <_ZN4EKF29getAngle1Effff+0x1c0>)
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c58:	e00e      	b.n	8002c78 <_ZN4EKF29getAngle1Effff+0xe0>
		    else{
		    	if(sinp <= -1){
 8002c5a:	4940      	ldr	r1, [pc, #256]	; (8002d5c <_ZN4EKF29getAngle1Effff+0x1c4>)
 8002c5c:	69f8      	ldr	r0, [r7, #28]
 8002c5e:	f7fd faf7 	bl	8000250 <__aeabi_fcmple>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d002      	beq.n	8002c6c <_ZN4EKF29getAngle1Effff+0xd4>
		    	p = -PI/2;
 8002c66:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <_ZN4EKF29getAngle1Effff+0x1c8>)
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6a:	e005      	b.n	8002c78 <_ZN4EKF29getAngle1Effff+0xe0>
		    }
		    else{
		    	p = asin(sinp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	1c18      	adds	r0, r3, #0
 8002c70:	f7fe fff2 	bl	8001c58 <_ZSt4asinf>
 8002c74:	1c03      	adds	r3, r0, #0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
		    }
		    }


			float siny = 2*( q0*q3 + q2*q1);
 8002c78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fe78 	bl	8000970 <__aeabi_fmul>
 8002c80:	1c03      	adds	r3, r0, #0
 8002c82:	1c1c      	adds	r4, r3, #0
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c88:	f7fd fe72 	bl	8000970 <__aeabi_fmul>
 8002c8c:	1c03      	adds	r3, r0, #0
 8002c8e:	1c19      	adds	r1, r3, #0
 8002c90:	1c20      	adds	r0, r4, #0
 8002c92:	f7fd fafb 	bl	800028c <__aeabi_fadd>
 8002c96:	1c03      	adds	r3, r0, #0
 8002c98:	1c19      	adds	r1, r3, #0
 8002c9a:	1c18      	adds	r0, r3, #0
 8002c9c:	f7fd faf6 	bl	800028c <__aeabi_fadd>
 8002ca0:	1c03      	adds	r3, r0, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
			float cosy = 1 - 2*( q1*q1 + q3*q3);
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	6838      	ldr	r0, [r7, #0]
 8002ca8:	f7fd fe62 	bl	8000970 <__aeabi_fmul>
 8002cac:	1c03      	adds	r3, r0, #0
 8002cae:	1c1c      	adds	r4, r3, #0
 8002cb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002cb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002cb4:	f7fd fe5c 	bl	8000970 <__aeabi_fmul>
 8002cb8:	1c03      	adds	r3, r0, #0
 8002cba:	1c19      	adds	r1, r3, #0
 8002cbc:	1c20      	adds	r0, r4, #0
 8002cbe:	f7fd fae5 	bl	800028c <__aeabi_fadd>
 8002cc2:	1c03      	adds	r3, r0, #0
 8002cc4:	1c19      	adds	r1, r3, #0
 8002cc6:	1c18      	adds	r0, r3, #0
 8002cc8:	f7fd fae0 	bl	800028c <__aeabi_fadd>
 8002ccc:	1c03      	adds	r3, r0, #0
 8002cce:	1c19      	adds	r1, r3, #0
 8002cd0:	20fe      	movs	r0, #254	; 0xfe
 8002cd2:	0580      	lsls	r0, r0, #22
 8002cd4:	f7fd ff7e 	bl	8000bd4 <__aeabi_fsub>
 8002cd8:	1c03      	adds	r3, r0, #0
 8002cda:	617b      	str	r3, [r7, #20]
			y = atan2(siny, cosy);
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	1c11      	adds	r1, r2, #0
 8002ce2:	1c18      	adds	r0, r3, #0
 8002ce4:	f7fe ffc5 	bl	8001c72 <_ZSt5atan2ff>
 8002ce8:	1c03      	adds	r3, r0, #0
 8002cea:	613b      	str	r3, [r7, #16]

			angle_e.roll = r*RAD2DEC;
 8002cec:	6a38      	ldr	r0, [r7, #32]
 8002cee:	f7fe febf 	bl	8001a70 <__aeabi_f2d>
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <_ZN4EKF29getAngle1Effff+0x1cc>)
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <_ZN4EKF29getAngle1Effff+0x1d0>)
 8002cf6:	f7fe fc49 	bl	800158c <__aeabi_dmul>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	000c      	movs	r4, r1
 8002cfe:	0018      	movs	r0, r3
 8002d00:	0021      	movs	r1, r4
 8002d02:	f7fe ff07 	bl	8001b14 <__aeabi_d2f>
 8002d06:	1c02      	adds	r2, r0, #0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]
			angle_e.pitch = p*RAD2DEC;
 8002d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d0e:	f7fe feaf 	bl	8001a70 <__aeabi_f2d>
 8002d12:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <_ZN4EKF29getAngle1Effff+0x1cc>)
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <_ZN4EKF29getAngle1Effff+0x1d0>)
 8002d16:	f7fe fc39 	bl	800158c <__aeabi_dmul>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	000c      	movs	r4, r1
 8002d1e:	0018      	movs	r0, r3
 8002d20:	0021      	movs	r1, r4
 8002d22:	f7fe fef7 	bl	8001b14 <__aeabi_d2f>
 8002d26:	1c02      	adds	r2, r0, #0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
			angle_e.yaw = y*RAD2DEC;
 8002d2c:	6938      	ldr	r0, [r7, #16]
 8002d2e:	f7fe fe9f 	bl	8001a70 <__aeabi_f2d>
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <_ZN4EKF29getAngle1Effff+0x1cc>)
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <_ZN4EKF29getAngle1Effff+0x1d0>)
 8002d36:	f7fe fc29 	bl	800158c <__aeabi_dmul>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	000c      	movs	r4, r1
 8002d3e:	0018      	movs	r0, r3
 8002d40:	0021      	movs	r1, r4
 8002d42:	f7fe fee7 	bl	8001b14 <__aeabi_d2f>
 8002d46:	1c02      	adds	r2, r0, #0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
			return angle_e;
 8002d4c:	46c0      	nop			; (mov r8, r8)
	}
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b00d      	add	sp, #52	; 0x34
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	3fc90fdb 	.word	0x3fc90fdb
 8002d5c:	bf800000 	.word	0xbf800000
 8002d60:	bfc90fdb 	.word	0xbfc90fdb
 8002d64:	1a5d2372 	.word	0x1a5d2372
 8002d68:	404ca5dc 	.word	0x404ca5dc

08002d6c <_ZN4EKF2C1Ev>:

	EULER_angle angle;
	virtual ~EKF2();
};
EKF2::EKF2(){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	4a5c      	ldr	r2, [pc, #368]	; (8002ee8 <_ZN4EKF2C1Ev+0x17c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	22fe      	movs	r2, #254	; 0xfe
 8002d7e:	0592      	lsls	r2, r2, #22
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3320      	adds	r3, #32
 8002daa:	22c4      	movs	r2, #196	; 0xc4
 8002dac:	2100      	movs	r1, #0
 8002dae:	0018      	movs	r0, r3
 8002db0:	f002 fb52 	bl	8005458 <memset>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	22a0      	movs	r2, #160	; 0xa0
 8002db8:	494c      	ldr	r1, [pc, #304]	; (8002eec <_ZN4EKF2C1Ev+0x180>)
 8002dba:	5099      	str	r1, [r3, r2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	22c0      	movs	r2, #192	; 0xc0
 8002dc0:	494a      	ldr	r1, [pc, #296]	; (8002eec <_ZN4EKF2C1Ev+0x180>)
 8002dc2:	5099      	str	r1, [r3, r2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	22e0      	movs	r2, #224	; 0xe0
 8002dc8:	4948      	ldr	r1, [pc, #288]	; (8002eec <_ZN4EKF2C1Ev+0x180>)
 8002dca:	5099      	str	r1, [r3, r2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	22e4      	movs	r2, #228	; 0xe4
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	22c4      	movs	r2, #196	; 0xc4
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f002 fb3e 	bl	8005458 <memset>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	22e4      	movs	r2, #228	; 0xe4
 8002de0:	21fe      	movs	r1, #254	; 0xfe
 8002de2:	0589      	lsls	r1, r1, #22
 8002de4:	5099      	str	r1, [r3, r2]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	2382      	movs	r3, #130	; 0x82
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	21fe      	movs	r1, #254	; 0xfe
 8002dee:	0589      	lsls	r1, r1, #22
 8002df0:	50d1      	str	r1, [r2, r3]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	2392      	movs	r3, #146	; 0x92
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	21fe      	movs	r1, #254	; 0xfe
 8002dfa:	0589      	lsls	r1, r1, #22
 8002dfc:	50d1      	str	r1, [r2, r3]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	23a2      	movs	r3, #162	; 0xa2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	21fe      	movs	r1, #254	; 0xfe
 8002e06:	0589      	lsls	r1, r1, #22
 8002e08:	50d1      	str	r1, [r2, r3]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	23b2      	movs	r3, #178	; 0xb2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	21fe      	movs	r1, #254	; 0xfe
 8002e12:	0589      	lsls	r1, r1, #22
 8002e14:	50d1      	str	r1, [r2, r3]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	23c2      	movs	r3, #194	; 0xc2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	21fe      	movs	r1, #254	; 0xfe
 8002e1e:	0589      	lsls	r1, r1, #22
 8002e20:	50d1      	str	r1, [r2, r3]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	23d2      	movs	r3, #210	; 0xd2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	21fe      	movs	r1, #254	; 0xfe
 8002e2a:	0589      	lsls	r1, r1, #22
 8002e2c:	50d1      	str	r1, [r2, r3]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	23d4      	movs	r3, #212	; 0xd4
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	2290      	movs	r2, #144	; 0x90
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f002 fb0c 	bl	8005458 <memset>
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	23d4      	movs	r3, #212	; 0xd4
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	492a      	ldr	r1, [pc, #168]	; (8002ef0 <_ZN4EKF2C1Ev+0x184>)
 8002e48:	50d1      	str	r1, [r2, r3]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	23e2      	movs	r3, #226	; 0xe2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4927      	ldr	r1, [pc, #156]	; (8002ef0 <_ZN4EKF2C1Ev+0x184>)
 8002e52:	50d1      	str	r1, [r2, r3]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	23f0      	movs	r3, #240	; 0xf0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <_ZN4EKF2C1Ev+0x184>)
 8002e5c:	50d1      	str	r1, [r2, r3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	23fe      	movs	r3, #254	; 0xfe
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4922      	ldr	r1, [pc, #136]	; (8002ef0 <_ZN4EKF2C1Ev+0x184>)
 8002e66:	50d1      	str	r1, [r2, r3]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	2386      	movs	r3, #134	; 0x86
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4920      	ldr	r1, [pc, #128]	; (8002ef0 <_ZN4EKF2C1Ev+0x184>)
 8002e70:	50d1      	str	r1, [r2, r3]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	238d      	movs	r3, #141	; 0x8d
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	491d      	ldr	r1, [pc, #116]	; (8002ef0 <_ZN4EKF2C1Ev+0x184>)
 8002e7a:	50d1      	str	r1, [r2, r3]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	23c6      	movs	r3, #198	; 0xc6
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	21fa      	movs	r1, #250	; 0xfa
 8002e84:	54d1      	strb	r1, [r2, r3]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <_ZN4EKF2C1Ev+0x188>)
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	22c4      	movs	r2, #196	; 0xc4
 8002e8e:	2100      	movs	r1, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f002 fae1 	bl	8005458 <memset>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <_ZN4EKF2C1Ev+0x188>)
 8002e9a:	21fe      	movs	r1, #254	; 0xfe
 8002e9c:	0589      	lsls	r1, r1, #22
 8002e9e:	5099      	str	r1, [r3, r2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <_ZN4EKF2C1Ev+0x18c>)
 8002ea4:	21fe      	movs	r1, #254	; 0xfe
 8002ea6:	0589      	lsls	r1, r1, #22
 8002ea8:	5099      	str	r1, [r3, r2]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <_ZN4EKF2C1Ev+0x190>)
 8002eae:	21fe      	movs	r1, #254	; 0xfe
 8002eb0:	0589      	lsls	r1, r1, #22
 8002eb2:	5099      	str	r1, [r3, r2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <_ZN4EKF2C1Ev+0x194>)
 8002eb8:	21fe      	movs	r1, #254	; 0xfe
 8002eba:	0589      	lsls	r1, r1, #22
 8002ebc:	5099      	str	r1, [r3, r2]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <_ZN4EKF2C1Ev+0x198>)
 8002ec2:	21fe      	movs	r1, #254	; 0xfe
 8002ec4:	0589      	lsls	r1, r1, #22
 8002ec6:	5099      	str	r1, [r3, r2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <_ZN4EKF2C1Ev+0x19c>)
 8002ecc:	21fe      	movs	r1, #254	; 0xfe
 8002ece:	0589      	lsls	r1, r1, #22
 8002ed0:	5099      	str	r1, [r3, r2]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <_ZN4EKF2C1Ev+0x1a0>)
 8002ed6:	21fe      	movs	r1, #254	; 0xfe
 8002ed8:	0589      	lsls	r1, r1, #22
 8002eda:	5099      	str	r1, [r3, r2]

}
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	08005660 	.word	0x08005660
 8002eec:	3a83126f 	.word	0x3a83126f
 8002ef0:	38d1b717 	.word	0x38d1b717
 8002ef4:	00000f58 	.word	0x00000f58
 8002ef8:	00000f78 	.word	0x00000f78
 8002efc:	00000f98 	.word	0x00000f98
 8002f00:	00000fb8 	.word	0x00000fb8
 8002f04:	00000fd8 	.word	0x00000fd8
 8002f08:	00000ff8 	.word	0x00000ff8
 8002f0c:	00001018 	.word	0x00001018

08002f10 <_ZN4EKF2D1Ev>:
EKF2::~EKF2() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <_ZN4EKF2D1Ev+0x18>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	 // free(this->data);
}
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08005660 	.word	0x08005660

08002f2c <_ZN4EKF2D0Ev>:
EKF2::~EKF2() {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
}
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff ffea 	bl	8002f10 <_ZN4EKF2D1Ev>
 8002f3c:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <_ZN4EKF2D0Ev+0x28>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0011      	movs	r1, r2
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 fe60 	bl	8004c08 <_ZdlPvj>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	00001028 	.word	0x00001028

08002f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5e:	f000 fa39 	bl	80033d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f62:	f000 f85f 	bl	8003024 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f66:	f000 f915 	bl	8003194 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8002f6a:	f000 f8c7 	bl	80030fc <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  ekf.x_[4] = bGx * DEC2RAD;
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <main+0xa8>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	4a23      	ldr	r2, [pc, #140]	; (8003004 <main+0xac>)
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <main+0xb0>)
 8002f78:	f7fe fb08 	bl	800158c <__aeabi_dmul>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	000c      	movs	r4, r1
 8002f80:	0018      	movs	r0, r3
 8002f82:	0021      	movs	r1, r4
 8002f84:	f7fe fdc6 	bl	8001b14 <__aeabi_d2f>
 8002f88:	1c02      	adds	r2, r0, #0
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <main+0xb4>)
 8002f8c:	615a      	str	r2, [r3, #20]
   ekf.x_[5] = bGy * DEC2RAD;
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <main+0xb8>)
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <main+0xac>)
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <main+0xb0>)
 8002f98:	f7fe faf8 	bl	800158c <__aeabi_dmul>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	000c      	movs	r4, r1
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	f7fe fdb6 	bl	8001b14 <__aeabi_d2f>
 8002fa8:	1c02      	adds	r2, r0, #0
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <main+0xb4>)
 8002fac:	619a      	str	r2, [r3, #24]
   ekf.x_[6] = bGz * DEC2RAD;
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <main+0xbc>)
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <main+0xac>)
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <main+0xb0>)
 8002fb8:	f7fe fae8 	bl	800158c <__aeabi_dmul>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	000c      	movs	r4, r1
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	0021      	movs	r1, r4
 8002fc4:	f7fe fda6 	bl	8001b14 <__aeabi_d2f>
 8002fc8:	1c02      	adds	r2, r0, #0
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <main+0xb4>)
 8002fcc:	61da      	str	r2, [r3, #28]

 //  ekf.x4 = bGx * DEC2RAD;
 //   ekf.x4 = bGy * DEC2RAD;
 //   ekf.x6 = bGz * DEC2RAD;

   ekf.loadEKF();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <main+0xb4>)
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7fe fe7d 	bl	8001cd0 <_ZN4EKF27loadEKFEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ekf.updateEKF(data_imu_buffer,mag, 0.01);
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <main+0xc0>)
 8002fd8:	480c      	ldr	r0, [pc, #48]	; (800300c <main+0xb4>)
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <main+0xc4>)
 8002fdc:	9206      	str	r2, [sp, #24]
 8002fde:	4910      	ldr	r1, [pc, #64]	; (8003020 <main+0xc8>)
 8002fe0:	220c      	movs	r2, #12
 8002fe2:	446a      	add	r2, sp
 8002fe4:	c970      	ldmia	r1!, {r4, r5, r6}
 8002fe6:	c270      	stmia	r2!, {r4, r5, r6}
 8002fe8:	466a      	mov	r2, sp
 8002fea:	0011      	movs	r1, r2
 8002fec:	001a      	movs	r2, r3
 8002fee:	320c      	adds	r2, #12
 8002ff0:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002ff2:	c170      	stmia	r1!, {r4, r5, r6}
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f7fe ff83 	bl	8001f04 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf>
 8002ffe:	e7ea      	b.n	8002fd6 <main+0x7e>
 8003000:	20000090 	.word	0x20000090
 8003004:	a226e211 	.word	0xa226e211
 8003008:	3f91df46 	.word	0x3f91df46
 800300c:	20000124 	.word	0x20000124
 8003010:	20000098 	.word	0x20000098
 8003014:	200000a0 	.word	0x200000a0
 8003018:	20000100 	.word	0x20000100
 800301c:	3c23d70a 	.word	0x3c23d70a
 8003020:	20000118 	.word	0x20000118

08003024 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b099      	sub	sp, #100	; 0x64
 8003028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800302a:	242c      	movs	r4, #44	; 0x2c
 800302c:	193b      	adds	r3, r7, r4
 800302e:	0018      	movs	r0, r3
 8003030:	2334      	movs	r3, #52	; 0x34
 8003032:	001a      	movs	r2, r3
 8003034:	2100      	movs	r1, #0
 8003036:	f002 fa0f 	bl	8005458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800303a:	231c      	movs	r3, #28
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	0018      	movs	r0, r3
 8003040:	2310      	movs	r3, #16
 8003042:	001a      	movs	r2, r3
 8003044:	2100      	movs	r1, #0
 8003046:	f002 fa07 	bl	8005458 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	0018      	movs	r0, r3
 800304e:	2318      	movs	r3, #24
 8003050:	001a      	movs	r2, r3
 8003052:	2100      	movs	r1, #0
 8003054:	f002 fa00 	bl	8005458 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	0018      	movs	r0, r3
 800305e:	f000 fd85 	bl	8003b6c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003062:	193b      	adds	r3, r7, r4
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003068:	193b      	adds	r3, r7, r4
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	0052      	lsls	r2, r2, #1
 800306e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003070:	193b      	adds	r3, r7, r4
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003082:	193b      	adds	r3, r7, r4
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fdb1 	bl	8003bec <HAL_RCC_OscConfig>
 800308a:	0003      	movs	r3, r0
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	4193      	sbcs	r3, r2
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8003096:	f000 f89f 	bl	80031d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800309a:	211c      	movs	r1, #28
 800309c:	187b      	adds	r3, r7, r1
 800309e:	2207      	movs	r2, #7
 80030a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	2200      	movs	r2, #0
 80030a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2100      	movs	r1, #0
 80030b8:	0018      	movs	r0, r3
 80030ba:	f001 f8ad 	bl	8004218 <HAL_RCC_ClockConfig>
 80030be:	0003      	movs	r3, r0
 80030c0:	1e5a      	subs	r2, r3, #1
 80030c2:	4193      	sbcs	r3, r2
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80030ca:	f000 f885 	bl	80031d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2220      	movs	r2, #32
 80030d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	0018      	movs	r0, r3
 80030de:	f001 fa25 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 80030e2:	0003      	movs	r3, r0
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	4193      	sbcs	r3, r2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80030ee:	f000 f873 	bl	80031d8 <Error_Handler>
  }
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b019      	add	sp, #100	; 0x64
 80030f8:	bd90      	pop	{r4, r7, pc}
	...

080030fc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <_ZL12MX_I2C1_Initv+0x90>)
 8003104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003108:	4a21      	ldr	r2, [pc, #132]	; (8003190 <_ZL12MX_I2C1_Initv+0x94>)
 800310a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003114:	2201      	movs	r2, #1
 8003116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 800312c:	2200      	movs	r2, #0
 800312e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003132:	2200      	movs	r2, #0
 8003134:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003138:	0018      	movs	r0, r3
 800313a:	f000 fbe9 	bl	8003910 <HAL_I2C_Init>
 800313e:	0003      	movs	r3, r0
 8003140:	1e5a      	subs	r2, r3, #1
 8003142:	4193      	sbcs	r3, r2
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 800314a:	f000 f845 	bl	80031d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 8003150:	2100      	movs	r1, #0
 8003152:	0018      	movs	r0, r3
 8003154:	f000 fc72 	bl	8003a3c <HAL_I2CEx_ConfigAnalogFilter>
 8003158:	0003      	movs	r3, r0
 800315a:	1e5a      	subs	r2, r3, #1
 800315c:	4193      	sbcs	r3, r2
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8003164:	f000 f838 	bl	80031d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <_ZL12MX_I2C1_Initv+0x8c>)
 800316a:	2100      	movs	r1, #0
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fcb1 	bl	8003ad4 <HAL_I2CEx_ConfigDigitalFilter>
 8003172:	0003      	movs	r3, r0
 8003174:	1e5a      	subs	r2, r3, #1
 8003176:	4193      	sbcs	r3, r2
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 800317e:	f000 f82b 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200000b4 	.word	0x200000b4
 800318c:	40005400 	.word	0x40005400
 8003190:	00303d5b 	.word	0x00303d5b

08003194 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <_ZL12MX_GPIO_Initv+0x40>)
 800319c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <_ZL12MX_GPIO_Initv+0x40>)
 80031a0:	2120      	movs	r1, #32
 80031a2:	430a      	orrs	r2, r1
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <_ZL12MX_GPIO_Initv+0x40>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	2220      	movs	r2, #32
 80031ac:	4013      	ands	r3, r2
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <_ZL12MX_GPIO_Initv+0x40>)
 80031b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <_ZL12MX_GPIO_Initv+0x40>)
 80031b8:	2102      	movs	r1, #2
 80031ba:	430a      	orrs	r2, r1
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <_ZL12MX_GPIO_Initv+0x40>)
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	2202      	movs	r2, #2
 80031c4:	4013      	ands	r3, r2
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]

}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000

080031d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031de:	e7fe      	b.n	80031de <Error_Handler+0x6>

080031e0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d107      	bne.n	8003200 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d103      	bne.n	8003200 <_Z41__static_initialization_and_destruction_0ii+0x20>
EKF2 ekf;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff fdb6 	bl	8002d6c <_ZN4EKF2C1Ev>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	4a05      	ldr	r2, [pc, #20]	; (8003220 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d103      	bne.n	8003216 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff fe7d 	bl	8002f10 <_ZN4EKF2D1Ev>
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	0000ffff 	.word	0x0000ffff
 8003224:	20000124 	.word	0x20000124

08003228 <_GLOBAL__sub_I_Q>:
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <_GLOBAL__sub_I_Q+0x14>)
 800322e:	0019      	movs	r1, r3
 8003230:	2001      	movs	r0, #1
 8003232:	f7ff ffd5 	bl	80031e0 <_Z41__static_initialization_and_destruction_0ii>
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	0000ffff 	.word	0x0000ffff

08003240 <_GLOBAL__sub_D_Q>:
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <_GLOBAL__sub_D_Q+0x14>)
 8003246:	0019      	movs	r1, r3
 8003248:	2000      	movs	r0, #0
 800324a:	f7ff ffc9 	bl	80031e0 <_Z41__static_initialization_and_destruction_0ii>
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	0000ffff 	.word	0x0000ffff

08003258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_MspInit+0x44>)
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_MspInit+0x44>)
 8003264:	2101      	movs	r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_MspInit+0x44>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_MspInit+0x44>)
 8003278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_MspInit+0x44>)
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	0549      	lsls	r1, r1, #21
 8003280:	430a      	orrs	r2, r1
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_MspInit+0x44>)
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	055b      	lsls	r3, r3, #21
 800328c:	4013      	ands	r3, r2
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	40021000 	.word	0x40021000

080032a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	2314      	movs	r3, #20
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	0018      	movs	r0, r3
 80032ae:	2314      	movs	r3, #20
 80032b0:	001a      	movs	r2, r3
 80032b2:	2100      	movs	r1, #0
 80032b4:	f002 f8d0 	bl	8005458 <memset>
  if(hi2c->Instance==I2C1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_I2C_MspInit+0x8c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12f      	bne.n	8003322 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_I2C_MspInit+0x90>)
 80032c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_I2C_MspInit+0x90>)
 80032c8:	2102      	movs	r1, #2
 80032ca:	430a      	orrs	r2, r1
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_I2C_MspInit+0x90>)
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	2202      	movs	r2, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032da:	2114      	movs	r1, #20
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	22c0      	movs	r2, #192	; 0xc0
 80032e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2212      	movs	r2, #18
 80032e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2201      	movs	r2, #1
 80032ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	2200      	movs	r2, #0
 80032f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	2206      	movs	r2, #6
 80032f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_I2C_MspInit+0x94>)
 80032fe:	0019      	movs	r1, r3
 8003300:	0010      	movs	r0, r2
 8003302:	f000 f9a1 	bl	8003648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_I2C_MspInit+0x90>)
 8003308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_I2C_MspInit+0x90>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0389      	lsls	r1, r1, #14
 8003310:	430a      	orrs	r2, r1
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_I2C_MspInit+0x90>)
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	039b      	lsls	r3, r3, #14
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b00a      	add	sp, #40	; 0x28
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40005400 	.word	0x40005400
 8003330:	40021000 	.word	0x40021000
 8003334:	50000400 	.word	0x50000400

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800333c:	e7fe      	b.n	800333c <NMI_Handler+0x4>

0800333e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003342:	e7fe      	b.n	8003342 <HardFault_Handler+0x4>

08003344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800335c:	f000 f8a4 	bl	80034a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <SystemInit+0x14>)
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	0512      	lsls	r2, r2, #20
 8003372:	609a      	str	r2, [r3, #8]
#endif
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003380:	480d      	ldr	r0, [pc, #52]	; (80033b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003382:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003384:	f7ff fff0 	bl	8003368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <LoopForever+0x6>)
  ldr r1, =_edata
 800338a:	490d      	ldr	r1, [pc, #52]	; (80033c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <LoopForever+0xe>)
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003390:	e002      	b.n	8003398 <LoopCopyDataInit>

08003392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003396:	3304      	adds	r3, #4

08003398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800339c:	d3f9      	bcc.n	8003392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033a0:	4c0a      	ldr	r4, [pc, #40]	; (80033cc <LoopForever+0x16>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a4:	e001      	b.n	80033aa <LoopFillZerobss>

080033a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a8:	3204      	adds	r2, #4

080033aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033ac:	d3fb      	bcc.n	80033a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033ae:	f002 f825 	bl	80053fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80033b2:	f7ff fdd1 	bl	8002f58 <main>

080033b6 <LoopForever>:

LoopForever:
  b LoopForever
 80033b6:	e7fe      	b.n	80033b6 <LoopForever>
  ldr   r0, =_estack
 80033b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80033bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80033c4:	080056e4 	.word	0x080056e4
  ldr r2, =_sbss
 80033c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80033cc:	20001154 	.word	0x20001154

080033d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033d0:	e7fe      	b.n	80033d0 <ADC1_IRQHandler>
	...

080033d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_Init+0x3c>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_Init+0x3c>)
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	0049      	lsls	r1, r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ee:	2000      	movs	r0, #0
 80033f0:	f000 f810 	bl	8003414 <HAL_InitTick>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d003      	beq.n	8003400 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e001      	b.n	8003404 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003400:	f7ff ff2a 	bl	8003258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40022000 	.word	0x40022000

08003414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_InitTick+0x88>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02b      	beq.n	8003484 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_InitTick+0x8c>)
 800342e:	681c      	ldr	r4, [r3, #0]
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_InitTick+0x88>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	0019      	movs	r1, r3
 8003436:	23fa      	movs	r3, #250	; 0xfa
 8003438:	0098      	lsls	r0, r3, #2
 800343a:	f7fc fe61 	bl	8000100 <__udivsi3>
 800343e:	0003      	movs	r3, r0
 8003440:	0019      	movs	r1, r3
 8003442:	0020      	movs	r0, r4
 8003444:	f7fc fe5c 	bl	8000100 <__udivsi3>
 8003448:	0003      	movs	r3, r0
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f8ef 	bl	800362e <HAL_SYSTICK_Config>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d112      	bne.n	800347a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d80a      	bhi.n	8003470 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	2301      	movs	r3, #1
 800345e:	425b      	negs	r3, r3
 8003460:	2200      	movs	r2, #0
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f8ce 	bl	8003604 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_InitTick+0x90>)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e00d      	b.n	800348c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003470:	230f      	movs	r3, #15
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e008      	b.n	800348c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800347a:	230f      	movs	r3, #15
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e003      	b.n	800348c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003484:	230f      	movs	r3, #15
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800348c:	230f      	movs	r3, #15
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	781b      	ldrb	r3, [r3, #0]
}
 8003492:	0018      	movs	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	b005      	add	sp, #20
 8003498:	bd90      	pop	{r4, r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	20000008 	.word	0x20000008
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_IncTick+0x1c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	001a      	movs	r2, r3
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_IncTick+0x20>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	18d2      	adds	r2, r2, r3
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_IncTick+0x20>)
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	20000008 	.word	0x20000008
 80034c8:	20001150 	.word	0x20001150

080034cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  return uwTick;
 80034d0:	4b02      	ldr	r3, [pc, #8]	; (80034dc <HAL_GetTick+0x10>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	20001150 	.word	0x20001150

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	0002      	movs	r2, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	1dfb      	adds	r3, r7, #7
 80034ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b7f      	cmp	r3, #127	; 0x7f
 80034f4:	d828      	bhi.n	8003548 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <__NVIC_SetPriority+0xd4>)
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	33c0      	adds	r3, #192	; 0xc0
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	589b      	ldr	r3, [r3, r2]
 8003506:	1dfa      	adds	r2, r7, #7
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	0011      	movs	r1, r2
 800350c:	2203      	movs	r2, #3
 800350e:	400a      	ands	r2, r1
 8003510:	00d2      	lsls	r2, r2, #3
 8003512:	21ff      	movs	r1, #255	; 0xff
 8003514:	4091      	lsls	r1, r2
 8003516:	000a      	movs	r2, r1
 8003518:	43d2      	mvns	r2, r2
 800351a:	401a      	ands	r2, r3
 800351c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	401a      	ands	r2, r3
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	0018      	movs	r0, r3
 800352c:	2303      	movs	r3, #3
 800352e:	4003      	ands	r3, r0
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003534:	481f      	ldr	r0, [pc, #124]	; (80035b4 <__NVIC_SetPriority+0xd4>)
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b25b      	sxtb	r3, r3
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	430a      	orrs	r2, r1
 8003540:	33c0      	adds	r3, #192	; 0xc0
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003546:	e031      	b.n	80035ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <__NVIC_SetPriority+0xd8>)
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	0019      	movs	r1, r3
 8003550:	230f      	movs	r3, #15
 8003552:	400b      	ands	r3, r1
 8003554:	3b08      	subs	r3, #8
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3306      	adds	r3, #6
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	3304      	adds	r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1dfa      	adds	r2, r7, #7
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	0011      	movs	r1, r2
 8003568:	2203      	movs	r2, #3
 800356a:	400a      	ands	r2, r1
 800356c:	00d2      	lsls	r2, r2, #3
 800356e:	21ff      	movs	r1, #255	; 0xff
 8003570:	4091      	lsls	r1, r2
 8003572:	000a      	movs	r2, r1
 8003574:	43d2      	mvns	r2, r2
 8003576:	401a      	ands	r2, r3
 8003578:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	401a      	ands	r2, r3
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	2303      	movs	r3, #3
 800358a:	4003      	ands	r3, r0
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003590:	4809      	ldr	r0, [pc, #36]	; (80035b8 <__NVIC_SetPriority+0xd8>)
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	001c      	movs	r4, r3
 8003598:	230f      	movs	r3, #15
 800359a:	4023      	ands	r3, r4
 800359c:	3b08      	subs	r3, #8
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	430a      	orrs	r2, r1
 80035a2:	3306      	adds	r3, #6
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	18c3      	adds	r3, r0, r3
 80035a8:	3304      	adds	r3, #4
 80035aa:	601a      	str	r2, [r3, #0]
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b003      	add	sp, #12
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	e000e100 	.word	0xe000e100
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <SysTick_Config+0x40>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ce:	2301      	movs	r3, #1
 80035d0:	e010      	b.n	80035f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <SysTick_Config+0x44>)
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	3a01      	subs	r2, #1
 80035d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035da:	2301      	movs	r3, #1
 80035dc:	425b      	negs	r3, r3
 80035de:	2103      	movs	r1, #3
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff ff7d 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <SysTick_Config+0x44>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <SysTick_Config+0x44>)
 80035ee:	2207      	movs	r2, #7
 80035f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	00ffffff 	.word	0x00ffffff
 8003600:	e000e010 	.word	0xe000e010

08003604 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	210f      	movs	r1, #15
 8003610:	187b      	adds	r3, r7, r1
 8003612:	1c02      	adds	r2, r0, #0
 8003614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	187b      	adds	r3, r7, r1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b25b      	sxtb	r3, r3
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff ff5d 	bl	80034e0 <__NVIC_SetPriority>
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff ffbf 	bl	80035bc <SysTick_Config>
 800363e:	0003      	movs	r3, r0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b002      	add	sp, #8
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003656:	e147      	b.n	80038e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4091      	lsls	r1, r2
 8003662:	000a      	movs	r2, r1
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d100      	bne.n	8003670 <HAL_GPIO_Init+0x28>
 800366e:	e138      	b.n	80038e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d00b      	beq.n	8003690 <HAL_GPIO_Init+0x48>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d007      	beq.n	8003690 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003684:	2b11      	cmp	r3, #17
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b12      	cmp	r3, #18
 800368e:	d130      	bne.n	80036f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	2203      	movs	r2, #3
 800369c:	409a      	lsls	r2, r3
 800369e:	0013      	movs	r3, r2
 80036a0:	43da      	mvns	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	409a      	lsls	r2, r3
 80036b2:	0013      	movs	r3, r2
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036c6:	2201      	movs	r2, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	43da      	mvns	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	2201      	movs	r2, #1
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	43da      	mvns	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	409a      	lsls	r2, r3
 8003714:	0013      	movs	r3, r2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0xea>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b12      	cmp	r3, #18
 8003730:	d123      	bne.n	800377a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	08da      	lsrs	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	0092      	lsls	r2, r2, #2
 800373c:	58d3      	ldr	r3, [r2, r3]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2207      	movs	r2, #7
 8003744:	4013      	ands	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	220f      	movs	r2, #15
 800374a:	409a      	lsls	r2, r3
 800374c:	0013      	movs	r3, r2
 800374e:	43da      	mvns	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2107      	movs	r1, #7
 800375e:	400b      	ands	r3, r1
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	409a      	lsls	r2, r3
 8003764:	0013      	movs	r3, r2
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	6939      	ldr	r1, [r7, #16]
 8003778:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2203      	movs	r2, #3
 8003786:	409a      	lsls	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	43da      	mvns	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2203      	movs	r2, #3
 8003798:	401a      	ands	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	0013      	movs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	055b      	lsls	r3, r3, #21
 80037b6:	4013      	ands	r3, r2
 80037b8:	d100      	bne.n	80037bc <HAL_GPIO_Init+0x174>
 80037ba:	e092      	b.n	80038e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80037bc:	4a50      	ldr	r2, [pc, #320]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	3318      	adds	r3, #24
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	589b      	ldr	r3, [r3, r2]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2203      	movs	r2, #3
 80037ce:	4013      	ands	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	220f      	movs	r2, #15
 80037d4:	409a      	lsls	r2, r3
 80037d6:	0013      	movs	r3, r2
 80037d8:	43da      	mvns	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	23a0      	movs	r3, #160	; 0xa0
 80037e4:	05db      	lsls	r3, r3, #23
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d013      	beq.n	8003812 <HAL_GPIO_Init+0x1ca>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a45      	ldr	r2, [pc, #276]	; (8003904 <HAL_GPIO_Init+0x2bc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00d      	beq.n	800380e <HAL_GPIO_Init+0x1c6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a44      	ldr	r2, [pc, #272]	; (8003908 <HAL_GPIO_Init+0x2c0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <HAL_GPIO_Init+0x1c2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a43      	ldr	r2, [pc, #268]	; (800390c <HAL_GPIO_Init+0x2c4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_GPIO_Init+0x1be>
 8003802:	2303      	movs	r3, #3
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x1cc>
 8003806:	2305      	movs	r3, #5
 8003808:	e004      	b.n	8003814 <HAL_GPIO_Init+0x1cc>
 800380a:	2302      	movs	r3, #2
 800380c:	e002      	b.n	8003814 <HAL_GPIO_Init+0x1cc>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x1cc>
 8003812:	2300      	movs	r3, #0
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	2103      	movs	r1, #3
 8003818:	400a      	ands	r2, r1
 800381a:	00d2      	lsls	r2, r2, #3
 800381c:	4093      	lsls	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003824:	4936      	ldr	r1, [pc, #216]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	3318      	adds	r3, #24
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003832:	4a33      	ldr	r2, [pc, #204]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	58d3      	ldr	r3, [r2, r3]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	43da      	mvns	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	025b      	lsls	r3, r3, #9
 800384c:	4013      	ands	r3, r2
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003858:	4929      	ldr	r1, [pc, #164]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 8003862:	2384      	movs	r3, #132	; 0x84
 8003864:	58d3      	ldr	r3, [r2, r3]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43da      	mvns	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	029b      	lsls	r3, r3, #10
 800387a:	4013      	ands	r3, r2
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003886:	491e      	ldr	r1, [pc, #120]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 8003888:	2284      	movs	r2, #132	; 0x84
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	43da      	mvns	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	035b      	lsls	r3, r3, #13
 80038a6:	4013      	ands	r3, r2
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	43da      	mvns	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	039b      	lsls	r3, r3, #14
 80038d0:	4013      	ands	r3, r2
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_GPIO_Init+0x2b8>)
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3301      	adds	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	40da      	lsrs	r2, r3
 80038f0:	1e13      	subs	r3, r2, #0
 80038f2:	d000      	beq.n	80038f6 <HAL_GPIO_Init+0x2ae>
 80038f4:	e6b0      	b.n	8003658 <HAL_GPIO_Init+0x10>
  }
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b006      	add	sp, #24
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	40021800 	.word	0x40021800
 8003904:	50000400 	.word	0x50000400
 8003908:	50000800 	.word	0x50000800
 800390c:	50000c00 	.word	0x50000c00

08003910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e082      	b.n	8003a28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2241      	movs	r2, #65	; 0x41
 8003926:	5c9b      	ldrb	r3, [r3, r2]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff fcb1 	bl	80032a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2241      	movs	r2, #65	; 0x41
 8003942:	2124      	movs	r1, #36	; 0x24
 8003944:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	438a      	bics	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4934      	ldr	r1, [pc, #208]	; (8003a30 <HAL_I2C_Init+0x120>)
 8003960:	400a      	ands	r2, r1
 8003962:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4931      	ldr	r1, [pc, #196]	; (8003a34 <HAL_I2C_Init+0x124>)
 8003970:	400a      	ands	r2, r1
 8003972:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	0209      	lsls	r1, r1, #8
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	e007      	b.n	800399e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2184      	movs	r1, #132	; 0x84
 8003998:	0209      	lsls	r1, r1, #8
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d104      	bne.n	80039b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	491f      	ldr	r1, [pc, #124]	; (8003a38 <HAL_I2C_Init+0x128>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	491a      	ldr	r1, [pc, #104]	; (8003a34 <HAL_I2C_Init+0x124>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	431a      	orrs	r2, r3
 80039da:	0011      	movs	r1, r2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	021a      	lsls	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69d9      	ldr	r1, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2241      	movs	r2, #65	; 0x41
 8003a14:	2120      	movs	r1, #32
 8003a16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2242      	movs	r2, #66	; 0x42
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	f0ffffff 	.word	0xf0ffffff
 8003a34:	ffff7fff 	.word	0xffff7fff
 8003a38:	02008000 	.word	0x02008000

08003a3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2241      	movs	r2, #65	; 0x41
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d138      	bne.n	8003ac4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	; 0x40
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e032      	b.n	8003ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2241      	movs	r2, #65	; 0x41
 8003a6c:	2124      	movs	r1, #36	; 0x24
 8003a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4911      	ldr	r1, [pc, #68]	; (8003ad0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2241      	movs	r2, #65	; 0x41
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	ffffefff 	.word	0xffffefff

08003ad4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2241      	movs	r2, #65	; 0x41
 8003ae2:	5c9b      	ldrb	r3, [r3, r2]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d139      	bne.n	8003b5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e033      	b.n	8003b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	2101      	movs	r1, #1
 8003afe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2241      	movs	r2, #65	; 0x41
 8003b04:	2124      	movs	r1, #36	; 0x24
 8003b06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2101      	movs	r1, #1
 8003b14:	438a      	bics	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2241      	movs	r2, #65	; 0x41
 8003b4e:	2120      	movs	r1, #32
 8003b50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	2100      	movs	r1, #0
 8003b58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
  }
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	fffff0ff 	.word	0xfffff0ff

08003b6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d11f      	bne.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	0013      	movs	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4912      	ldr	r1, [pc, #72]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fc faae 	bl	8000100 <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003baa:	e008      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e001      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e009      	b.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0ed      	beq.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	fffff9ff 	.word	0xfffff9ff
 8003be4:	20000000 	.word	0x20000000
 8003be8:	000f4240 	.word	0x000f4240

08003bec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e2f9      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	d100      	bne.n	8003c0a <HAL_RCC_OscConfig+0x1e>
 8003c08:	e07c      	b.n	8003d04 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0a:	4bc3      	ldr	r3, [pc, #780]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2238      	movs	r2, #56	; 0x38
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c14:	4bc0      	ldr	r3, [pc, #768]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d102      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3e>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_OscConfig+0x44>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	4bb9      	ldr	r3, [pc, #740]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	029b      	lsls	r3, r3, #10
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d062      	beq.n	8003d02 <HAL_RCC_OscConfig+0x116>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d15e      	bne.n	8003d02 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e2d4      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	025b      	lsls	r3, r3, #9
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x78>
 8003c54:	4bb0      	ldr	r3, [pc, #704]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4baf      	ldr	r3, [pc, #700]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	0249      	lsls	r1, r1, #9
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e020      	b.n	8003ca6 <HAL_RCC_OscConfig+0xba>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	23a0      	movs	r3, #160	; 0xa0
 8003c6a:	02db      	lsls	r3, r3, #11
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d10e      	bne.n	8003c8e <HAL_RCC_OscConfig+0xa2>
 8003c70:	4ba9      	ldr	r3, [pc, #676]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4ba8      	ldr	r3, [pc, #672]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	02c9      	lsls	r1, r1, #11
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	4ba6      	ldr	r3, [pc, #664]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4ba5      	ldr	r3, [pc, #660]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c84:	2180      	movs	r1, #128	; 0x80
 8003c86:	0249      	lsls	r1, r1, #9
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0xba>
 8003c8e:	4ba2      	ldr	r3, [pc, #648]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4ba1      	ldr	r3, [pc, #644]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c94:	49a1      	ldr	r1, [pc, #644]	; (8003f1c <HAL_RCC_OscConfig+0x330>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	4b9f      	ldr	r3, [pc, #636]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b9e      	ldr	r3, [pc, #632]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	499f      	ldr	r1, [pc, #636]	; (8003f20 <HAL_RCC_OscConfig+0x334>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d014      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7ff fc0d 	bl	80034cc <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7ff fc08 	bl	80034cc <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e293      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	4b93      	ldr	r3, [pc, #588]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xcc>
 8003cd6:	e015      	b.n	8003d04 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7ff fbf8 	bl	80034cc <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce2:	f7ff fbf3 	bl	80034cc <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	; 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e27e      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf4:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0xf6>
 8003d00:	e000      	b.n	8003d04 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d100      	bne.n	8003d10 <HAL_RCC_OscConfig+0x124>
 8003d0e:	e099      	b.n	8003e44 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d10:	4b81      	ldr	r3, [pc, #516]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2238      	movs	r2, #56	; 0x38
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1a:	4b7f      	ldr	r3, [pc, #508]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	4013      	ands	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_OscConfig+0x144>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d002      	beq.n	8003d36 <HAL_RCC_OscConfig+0x14a>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d135      	bne.n	8003da2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d36:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x162>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e251      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b72      	ldr	r3, [pc, #456]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4a74      	ldr	r2, [pc, #464]	; (8003f24 <HAL_RCC_OscConfig+0x338>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	4b6e      	ldr	r3, [pc, #440]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d112      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6e      	ldr	r2, [pc, #440]	; (8003f28 <HAL_RCC_OscConfig+0x33c>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d7e:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	0adb      	lsrs	r3, r3, #11
 8003d84:	2207      	movs	r2, #7
 8003d86:	4013      	ands	r3, r2
 8003d88:	4a68      	ldr	r2, [pc, #416]	; (8003f2c <HAL_RCC_OscConfig+0x340>)
 8003d8a:	40da      	lsrs	r2, r3
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_OscConfig+0x344>)
 8003d8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d90:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <HAL_RCC_OscConfig+0x348>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff fb3d 	bl	8003414 <HAL_InitTick>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d051      	beq.n	8003e42 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e227      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d030      	beq.n	8003e0c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5e      	ldr	r2, [pc, #376]	; (8003f28 <HAL_RCC_OscConfig+0x33c>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	4b57      	ldr	r3, [pc, #348]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003dbe:	4b56      	ldr	r3, [pc, #344]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b55      	ldr	r3, [pc, #340]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	0049      	lsls	r1, r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7ff fb7e 	bl	80034cc <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7ff fb79 	bl	80034cc <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e204      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4013      	ands	r3, r2
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <HAL_RCC_OscConfig+0x338>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	4b44      	ldr	r3, [pc, #272]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	e01b      	b.n	8003e44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e0c:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e12:	4949      	ldr	r1, [pc, #292]	; (8003f38 <HAL_RCC_OscConfig+0x34c>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7ff fb58 	bl	80034cc <HAL_GetTick>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e22:	f7ff fb53 	bl	80034cc <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1de      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e34:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x236>
 8003e40:	e000      	b.n	8003e44 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d047      	beq.n	8003ede <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e4e:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2238      	movs	r2, #56	; 0x38
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b18      	cmp	r3, #24
 8003e58:	d10a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e5a:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4013      	ands	r3, r2
 8003e62:	d03c      	beq.n	8003ede <HAL_RCC_OscConfig+0x2f2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d138      	bne.n	8003ede <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e1c0      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d019      	beq.n	8003eac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	430a      	orrs	r2, r1
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7ff fb22 	bl	80034cc <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8e:	f7ff fb1d 	bl	80034cc <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e1a8      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d0f1      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2a2>
 8003eaa:	e018      	b.n	8003ede <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7ff fb08 	bl	80034cc <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7ff fb03 	bl	80034cc <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e18e      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	2202      	movs	r2, #2
 8003eda:	4013      	ands	r3, r2
 8003edc:	d1f1      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d100      	bne.n	8003eea <HAL_RCC_OscConfig+0x2fe>
 8003ee8:	e0c6      	b.n	8004078 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	231f      	movs	r3, #31
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2238      	movs	r2, #56	; 0x38
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d11e      	bne.n	8003f3c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_OscConfig+0x32c>)
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d100      	bne.n	8003f0a <HAL_RCC_OscConfig+0x31e>
 8003f08:	e0b6      	b.n	8004078 <HAL_RCC_OscConfig+0x48c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d000      	beq.n	8003f14 <HAL_RCC_OscConfig+0x328>
 8003f12:	e0b1      	b.n	8004078 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e16c      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	fffeffff 	.word	0xfffeffff
 8003f20:	fffbffff 	.word	0xfffbffff
 8003f24:	ffff80ff 	.word	0xffff80ff
 8003f28:	ffffc7ff 	.word	0xffffc7ff
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	20000000 	.word	0x20000000
 8003f34:	20000004 	.word	0x20000004
 8003f38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f3c:	4baf      	ldr	r3, [pc, #700]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	055b      	lsls	r3, r3, #21
 8003f44:	4013      	ands	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x360>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x362>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d011      	beq.n	8003f76 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4baa      	ldr	r3, [pc, #680]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f56:	4ba9      	ldr	r3, [pc, #676]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	0549      	lsls	r1, r1, #21
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f60:	4ba6      	ldr	r3, [pc, #664]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	055b      	lsls	r3, r3, #21
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f6e:	231f      	movs	r3, #31
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f76:	4ba2      	ldr	r3, [pc, #648]	; (8004200 <HAL_RCC_OscConfig+0x614>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d11a      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f82:	4b9f      	ldr	r3, [pc, #636]	; (8004200 <HAL_RCC_OscConfig+0x614>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b9e      	ldr	r3, [pc, #632]	; (8004200 <HAL_RCC_OscConfig+0x614>)
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	0049      	lsls	r1, r1, #1
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f90:	f7ff fa9c 	bl	80034cc <HAL_GetTick>
 8003f94:	0003      	movs	r3, r0
 8003f96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9a:	f7ff fa97 	bl	80034cc <HAL_GetTick>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e122      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fac:	4b94      	ldr	r3, [pc, #592]	; (8004200 <HAL_RCC_OscConfig+0x614>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x3e2>
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fc4:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fcc:	e01c      	b.n	8004008 <HAL_RCC_OscConfig+0x41c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x404>
 8003fd6:	4b89      	ldr	r3, [pc, #548]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003fd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fda:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003fdc:	2104      	movs	r1, #4
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fe2:	4b86      	ldr	r3, [pc, #536]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fe6:	4b85      	ldr	r3, [pc, #532]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	430a      	orrs	r2, r1
 8003fec:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0x41c>
 8003ff0:	4b82      	ldr	r3, [pc, #520]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff4:	4b81      	ldr	r3, [pc, #516]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ffc:	4b7f      	ldr	r3, [pc, #508]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8003ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004000:	4b7e      	ldr	r3, [pc, #504]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004002:	2104      	movs	r1, #4
 8004004:	438a      	bics	r2, r1
 8004006:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d014      	beq.n	800403a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7ff fa5c 	bl	80034cc <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004018:	e009      	b.n	800402e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7ff fa57 	bl	80034cc <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_RCC_OscConfig+0x618>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e0e1      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402e:	4b73      	ldr	r3, [pc, #460]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	2202      	movs	r2, #2
 8004034:	4013      	ands	r3, r2
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x42e>
 8004038:	e013      	b.n	8004062 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7ff fa47 	bl	80034cc <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004042:	e009      	b.n	8004058 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7ff fa42 	bl	80034cc <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	4a6d      	ldr	r2, [pc, #436]	; (8004204 <HAL_RCC_OscConfig+0x618>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0cc      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	2202      	movs	r2, #2
 800405e:	4013      	ands	r3, r2
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004062:	231f      	movs	r3, #31
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800406c:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800406e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004070:	4b62      	ldr	r3, [pc, #392]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004072:	4965      	ldr	r1, [pc, #404]	; (8004208 <HAL_RCC_OscConfig+0x61c>)
 8004074:	400a      	ands	r2, r1
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d100      	bne.n	8004082 <HAL_RCC_OscConfig+0x496>
 8004080:	e0b6      	b.n	80041f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004082:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2238      	movs	r2, #56	; 0x38
 8004088:	4013      	ands	r3, r2
 800408a:	2b10      	cmp	r3, #16
 800408c:	d100      	bne.n	8004090 <HAL_RCC_OscConfig+0x4a4>
 800408e:	e07e      	b.n	800418e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d153      	bne.n	8004140 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800409e:	495b      	ldr	r1, [pc, #364]	; (800420c <HAL_RCC_OscConfig+0x620>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7ff fa12 	bl	80034cc <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ae:	f7ff fa0d 	bl	80034cc <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e098      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c0:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a4f      	ldr	r2, [pc, #316]	; (8004210 <HAL_RCC_OscConfig+0x624>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1a      	ldr	r2, [r3, #32]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	431a      	orrs	r2, r3
 80040f4:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fa:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0449      	lsls	r1, r1, #17
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004108:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	0549      	lsls	r1, r1, #21
 8004112:	430a      	orrs	r2, r1
 8004114:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7ff f9d9 	bl	80034cc <HAL_GetTick>
 800411a:	0003      	movs	r3, r0
 800411c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004120:	f7ff f9d4 	bl	80034cc <HAL_GetTick>
 8004124:	0002      	movs	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e05f      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	4b32      	ldr	r3, [pc, #200]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	049b      	lsls	r3, r3, #18
 800413a:	4013      	ands	r3, r2
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x534>
 800413e:	e057      	b.n	80041f0 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004146:	4931      	ldr	r1, [pc, #196]	; (800420c <HAL_RCC_OscConfig+0x620>)
 8004148:	400a      	ands	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800414c:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004152:	2103      	movs	r1, #3
 8004154:	438a      	bics	r2, r1
 8004156:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800415e:	492d      	ldr	r1, [pc, #180]	; (8004214 <HAL_RCC_OscConfig+0x628>)
 8004160:	400a      	ands	r2, r1
 8004162:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7ff f9b2 	bl	80034cc <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7ff f9ad 	bl	80034cc <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e038      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	049b      	lsls	r3, r3, #18
 8004188:	4013      	ands	r3, r2
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x582>
 800418c:	e030      	b.n	80041f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e02b      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_RCC_OscConfig+0x610>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2203      	movs	r2, #3
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d11e      	bne.n	80041ec <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2270      	movs	r2, #112	; 0x70
 80041b2:	401a      	ands	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d117      	bne.n	80041ec <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	23fe      	movs	r3, #254	; 0xfe
 80041c0:	01db      	lsls	r3, r3, #7
 80041c2:	401a      	ands	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10e      	bne.n	80041ec <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	23f8      	movs	r3, #248	; 0xf8
 80041d2:	039b      	lsls	r3, r3, #14
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	0f5b      	lsrs	r3, r3, #29
 80041e2:	075a      	lsls	r2, r3, #29
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b008      	add	sp, #32
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	40021000 	.word	0x40021000
 8004200:	40007000 	.word	0x40007000
 8004204:	00001388 	.word	0x00001388
 8004208:	efffffff 	.word	0xefffffff
 800420c:	feffffff 	.word	0xfeffffff
 8004210:	1fc1808c 	.word	0x1fc1808c
 8004214:	effeffff 	.word	0xeffeffff

08004218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0e9      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2207      	movs	r2, #7
 8004232:	4013      	ands	r3, r2
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d91e      	bls.n	8004278 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2207      	movs	r2, #7
 8004240:	4393      	bics	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800424c:	f7ff f93e 	bl	80034cc <HAL_GetTick>
 8004250:	0003      	movs	r3, r0
 8004252:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004254:	e009      	b.n	800426a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004256:	f7ff f939 	bl	80034cc <HAL_GetTick>
 800425a:	0002      	movs	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	4a6a      	ldr	r2, [pc, #424]	; (800440c <HAL_RCC_ClockConfig+0x1f4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0ca      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2207      	movs	r2, #7
 8004270:	4013      	ands	r3, r2
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d1ee      	bne.n	8004256 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2202      	movs	r2, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d015      	beq.n	80042ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2204      	movs	r2, #4
 8004288:	4013      	ands	r3, r2
 800428a:	d006      	beq.n	800429a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800428c:	4b60      	ldr	r3, [pc, #384]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 8004292:	21e0      	movs	r1, #224	; 0xe0
 8004294:	01c9      	lsls	r1, r1, #7
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429a:	4b5d      	ldr	r3, [pc, #372]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4a5d      	ldr	r2, [pc, #372]	; (8004414 <HAL_RCC_ClockConfig+0x1fc>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	d057      	beq.n	8004368 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4013      	ands	r3, r2
 80042ca:	d12b      	bne.n	8004324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e097      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d8:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	049b      	lsls	r3, r3, #18
 80042e0:	4013      	ands	r3, r2
 80042e2:	d11f      	bne.n	8004324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e08b      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f0:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4013      	ands	r3, r2
 80042fa:	d113      	bne.n	8004324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e07f      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d106      	bne.n	8004316 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	2202      	movs	r2, #2
 800430e:	4013      	ands	r3, r2
 8004310:	d108      	bne.n	8004324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e074      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004316:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e06d      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004324:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2207      	movs	r2, #7
 800432a:	4393      	bics	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7ff f8c8 	bl	80034cc <HAL_GetTick>
 800433c:	0003      	movs	r3, r0
 800433e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004340:	e009      	b.n	8004356 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004342:	f7ff f8c3 	bl	80034cc <HAL_GetTick>
 8004346:	0002      	movs	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	4a2f      	ldr	r2, [pc, #188]	; (800440c <HAL_RCC_ClockConfig+0x1f4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e054      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2238      	movs	r2, #56	; 0x38
 800435c:	401a      	ands	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	429a      	cmp	r2, r3
 8004366:	d1ec      	bne.n	8004342 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2207      	movs	r2, #7
 800436e:	4013      	ands	r3, r2
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d21e      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2207      	movs	r2, #7
 800437c:	4393      	bics	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004388:	f7ff f8a0 	bl	80034cc <HAL_GetTick>
 800438c:	0003      	movs	r3, r0
 800438e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004390:	e009      	b.n	80043a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004392:	f7ff f89b 	bl	80034cc <HAL_GetTick>
 8004396:	0002      	movs	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_RCC_ClockConfig+0x1f4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e02c      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_RCC_ClockConfig+0x1f0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2207      	movs	r2, #7
 80043ac:	4013      	ands	r3, r2
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2204      	movs	r2, #4
 80043ba:	4013      	ands	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_RCC_ClockConfig+0x200>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80043d2:	f000 f829 	bl	8004428 <HAL_RCC_GetSysClockFreq>
 80043d6:	0001      	movs	r1, r0
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_RCC_ClockConfig+0x1f8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	220f      	movs	r2, #15
 80043e0:	401a      	ands	r2, r3
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_RCC_ClockConfig+0x204>)
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	58d3      	ldr	r3, [r2, r3]
 80043e8:	221f      	movs	r2, #31
 80043ea:	4013      	ands	r3, r2
 80043ec:	000a      	movs	r2, r1
 80043ee:	40da      	lsrs	r2, r3
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_ClockConfig+0x208>)
 80043f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_ClockConfig+0x20c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7ff f80b 	bl	8003414 <HAL_InitTick>
 80043fe:	0003      	movs	r3, r0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b004      	add	sp, #16
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40022000 	.word	0x40022000
 800440c:	00001388 	.word	0x00001388
 8004410:	40021000 	.word	0x40021000
 8004414:	fffff0ff 	.word	0xfffff0ff
 8004418:	ffff8fff 	.word	0xffff8fff
 800441c:	08005668 	.word	0x08005668
 8004420:	20000000 	.word	0x20000000
 8004424:	20000004 	.word	0x20000004

08004428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442e:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2238      	movs	r2, #56	; 0x38
 8004434:	4013      	ands	r3, r2
 8004436:	d10f      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004438:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	0adb      	lsrs	r3, r3, #11
 800443e:	2207      	movs	r2, #7
 8004440:	4013      	ands	r3, r2
 8004442:	2201      	movs	r2, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800444a:	6839      	ldr	r1, [r7, #0]
 800444c:	4835      	ldr	r0, [pc, #212]	; (8004524 <HAL_RCC_GetSysClockFreq+0xfc>)
 800444e:	f7fb fe57 	bl	8000100 <__udivsi3>
 8004452:	0003      	movs	r3, r0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	e05d      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004458:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2238      	movs	r2, #56	; 0x38
 800445e:	4013      	ands	r3, r2
 8004460:	2b08      	cmp	r3, #8
 8004462:	d102      	bne.n	800446a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004464:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_RCC_GetSysClockFreq+0x100>)
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e054      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446a:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2238      	movs	r2, #56	; 0x38
 8004470:	4013      	ands	r3, r2
 8004472:	2b10      	cmp	r3, #16
 8004474:	d138      	bne.n	80044e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004476:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2203      	movs	r2, #3
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	2207      	movs	r2, #7
 8004488:	4013      	ands	r3, r2
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d10d      	bne.n	80044b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	4824      	ldr	r0, [pc, #144]	; (8004528 <HAL_RCC_GetSysClockFreq+0x100>)
 8004498:	f7fb fe32 	bl	8000100 <__udivsi3>
 800449c:	0003      	movs	r3, r0
 800449e:	0019      	movs	r1, r3
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	227f      	movs	r2, #127	; 0x7f
 80044a8:	4013      	ands	r3, r2
 80044aa:	434b      	muls	r3, r1
 80044ac:	617b      	str	r3, [r7, #20]
        break;
 80044ae:	e00d      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	481c      	ldr	r0, [pc, #112]	; (8004524 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044b4:	f7fb fe24 	bl	8000100 <__udivsi3>
 80044b8:	0003      	movs	r3, r0
 80044ba:	0019      	movs	r1, r3
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	227f      	movs	r2, #127	; 0x7f
 80044c4:	4013      	ands	r3, r2
 80044c6:	434b      	muls	r3, r1
 80044c8:	617b      	str	r3, [r7, #20]
        break;
 80044ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	0f5b      	lsrs	r3, r3, #29
 80044d2:	2207      	movs	r2, #7
 80044d4:	4013      	ands	r3, r2
 80044d6:	3301      	adds	r3, #1
 80044d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	6978      	ldr	r0, [r7, #20]
 80044de:	f7fb fe0f 	bl	8000100 <__udivsi3>
 80044e2:	0003      	movs	r3, r0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e015      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2238      	movs	r2, #56	; 0x38
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d103      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044fc:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2238      	movs	r2, #56	; 0x38
 8004502:	4013      	ands	r3, r2
 8004504:	2b18      	cmp	r3, #24
 8004506:	d103      	bne.n	8004510 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004508:	23fa      	movs	r3, #250	; 0xfa
 800450a:	01db      	lsls	r3, r3, #7
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e001      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004514:	693b      	ldr	r3, [r7, #16]
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b006      	add	sp, #24
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200

0800452c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004534:	2313      	movs	r3, #19
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2312      	movs	r3, #18
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	4013      	ands	r3, r2
 800454e:	d100      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004550:	e0a4      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004552:	2311      	movs	r3, #17
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4b7f      	ldr	r3, [pc, #508]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800455c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	055b      	lsls	r3, r3, #21
 8004562:	4013      	ands	r3, r2
 8004564:	d111      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b7c      	ldr	r3, [pc, #496]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456a:	4b7b      	ldr	r3, [pc, #492]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	0549      	lsls	r1, r1, #21
 8004570:	430a      	orrs	r2, r1
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
 8004574:	4b78      	ldr	r3, [pc, #480]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	055b      	lsls	r3, r3, #21
 800457c:	4013      	ands	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004582:	2311      	movs	r3, #17
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458a:	4b74      	ldr	r3, [pc, #464]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b73      	ldr	r3, [pc, #460]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	0049      	lsls	r1, r1, #1
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004598:	f7fe ff98 	bl	80034cc <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a0:	e00b      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fe ff93 	bl	80034cc <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d904      	bls.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80045b0:	2313      	movs	r3, #19
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	2203      	movs	r2, #3
 80045b6:	701a      	strb	r2, [r3, #0]
        break;
 80045b8:	e005      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ba:	4b68      	ldr	r3, [pc, #416]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	d0ed      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80045c6:	2313      	movs	r3, #19
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d154      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045d0:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045d4:	23c0      	movs	r3, #192	; 0xc0
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4013      	ands	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d019      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d014      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045ec:	4b5a      	ldr	r3, [pc, #360]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	4a5b      	ldr	r2, [pc, #364]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045f6:	4b58      	ldr	r3, [pc, #352]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fa:	4b57      	ldr	r3, [pc, #348]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045fc:	2180      	movs	r1, #128	; 0x80
 80045fe:	0249      	lsls	r1, r1, #9
 8004600:	430a      	orrs	r2, r1
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004604:	4b54      	ldr	r3, [pc, #336]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800460a:	4956      	ldr	r1, [pc, #344]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800460c:	400a      	ands	r2, r1
 800460e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004610:	4b51      	ldr	r3, [pc, #324]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	d016      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe ff55 	bl	80034cc <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004626:	e00c      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fe ff50 	bl	80034cc <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d904      	bls.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004638:	2313      	movs	r3, #19
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	2203      	movs	r2, #3
 800463e:	701a      	strb	r2, [r3, #0]
            break;
 8004640:	e004      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004642:	4b45      	ldr	r3, [pc, #276]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d0ed      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800464c:	2313      	movs	r3, #19
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004656:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465a:	4a41      	ldr	r2, [pc, #260]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004666:	430a      	orrs	r2, r1
 8004668:	65da      	str	r2, [r3, #92]	; 0x5c
 800466a:	e00c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800466c:	2312      	movs	r3, #18
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2213      	movs	r2, #19
 8004672:	18ba      	adds	r2, r7, r2
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e005      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	2312      	movs	r3, #18
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2213      	movs	r2, #19
 8004680:	18ba      	adds	r2, r7, r2
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004686:	2311      	movs	r3, #17
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004690:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004694:	4b30      	ldr	r3, [pc, #192]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004696:	4935      	ldr	r1, [pc, #212]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004698:	400a      	ands	r2, r1
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a6:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	2203      	movs	r2, #3
 80046ac:	4393      	bics	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4b28      	ldr	r3, [pc, #160]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046b6:	430a      	orrs	r2, r1
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2220      	movs	r2, #32
 80046c0:	4013      	ands	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	4a29      	ldr	r2, [pc, #164]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	0019      	movs	r1, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	4b21      	ldr	r3, [pc, #132]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046d4:	430a      	orrs	r2, r1
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4013      	ands	r3, r2
 80046e2:	d015      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	0899      	lsrs	r1, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046f2:	430a      	orrs	r2, r1
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	05db      	lsls	r3, r3, #23
 80046fe:	429a      	cmp	r2, r3
 8004700:	d106      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0249      	lsls	r1, r1, #9
 800470c:	430a      	orrs	r2, r1
 800470e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	4013      	ands	r3, r2
 800471a:	d016      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004722:	4013      	ands	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800472c:	430a      	orrs	r2, r1
 800472e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	01db      	lsls	r3, r3, #7
 8004738:	429a      	cmp	r2, r3
 800473a:	d106      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	0249      	lsls	r1, r1, #9
 8004746:	430a      	orrs	r2, r1
 8004748:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800474a:	2312      	movs	r3, #18
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b006      	add	sp, #24
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	fffffcff 	.word	0xfffffcff
 8004764:	fffeffff 	.word	0xfffeffff
 8004768:	00001388 	.word	0x00001388
 800476c:	efffffff 	.word	0xefffffff
 8004770:	ffffcfff 	.word	0xffffcfff
 8004774:	ffff3fff 	.word	0xffff3fff

08004778 <arm_mat_trans_f32>:
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	464f      	mov	r7, r9
 800477c:	4646      	mov	r6, r8
 800477e:	b4c0      	push	{r6, r7}
 8004780:	684b      	ldr	r3, [r1, #4]
 8004782:	6846      	ldr	r6, [r0, #4]
 8004784:	4699      	mov	r9, r3
 8004786:	8803      	ldrh	r3, [r0, #0]
 8004788:	8847      	ldrh	r7, [r0, #2]
 800478a:	4698      	mov	r8, r3
 800478c:	884b      	ldrh	r3, [r1, #2]
 800478e:	4543      	cmp	r3, r8
 8004790:	d122      	bne.n	80047d8 <arm_mat_trans_f32+0x60>
 8004792:	880b      	ldrh	r3, [r1, #0]
 8004794:	42bb      	cmp	r3, r7
 8004796:	d11f      	bne.n	80047d8 <arm_mat_trans_f32+0x60>
 8004798:	4643      	mov	r3, r8
 800479a:	009c      	lsls	r4, r3, #2
 800479c:	1e7b      	subs	r3, r7, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	469c      	mov	ip, r3
 80047a6:	2500      	movs	r5, #0
 80047a8:	00aa      	lsls	r2, r5, #2
 80047aa:	444a      	add	r2, r9
 80047ac:	2f00      	cmp	r7, #0
 80047ae:	d009      	beq.n	80047c4 <arm_mat_trans_f32+0x4c>
 80047b0:	1c31      	adds	r1, r6, #0
 80047b2:	1c3b      	adds	r3, r7, #0
 80047b4:	c901      	ldmia	r1!, {r0}
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	1912      	adds	r2, r2, r4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f8      	bne.n	80047b4 <arm_mat_trans_f32+0x3c>
 80047c2:	4466      	add	r6, ip
 80047c4:	3501      	adds	r5, #1
 80047c6:	b2ad      	uxth	r5, r5
 80047c8:	4545      	cmp	r5, r8
 80047ca:	d1ed      	bne.n	80047a8 <arm_mat_trans_f32+0x30>
 80047cc:	2000      	movs	r0, #0
 80047ce:	b240      	sxtb	r0, r0
 80047d0:	bc0c      	pop	{r2, r3}
 80047d2:	4690      	mov	r8, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d8:	20fd      	movs	r0, #253	; 0xfd
 80047da:	e7f8      	b.n	80047ce <arm_mat_trans_f32+0x56>

080047dc <arm_mat_sub_f32>:
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	4647      	mov	r7, r8
 80047e0:	b480      	push	{r7}
 80047e2:	6853      	ldr	r3, [r2, #4]
 80047e4:	684f      	ldr	r7, [r1, #4]
 80047e6:	4698      	mov	r8, r3
 80047e8:	6809      	ldr	r1, [r1, #0]
 80047ea:	6803      	ldr	r3, [r0, #0]
 80047ec:	6846      	ldr	r6, [r0, #4]
 80047ee:	428b      	cmp	r3, r1
 80047f0:	d117      	bne.n	8004822 <arm_mat_sub_f32+0x46>
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d114      	bne.n	8004822 <arm_mat_sub_f32+0x46>
 80047f8:	8845      	ldrh	r5, [r0, #2]
 80047fa:	8803      	ldrh	r3, [r0, #0]
 80047fc:	2400      	movs	r4, #0
 80047fe:	435d      	muls	r5, r3
 8004800:	2d00      	cmp	r5, #0
 8004802:	d009      	beq.n	8004818 <arm_mat_sub_f32+0x3c>
 8004804:	5930      	ldr	r0, [r6, r4]
 8004806:	5939      	ldr	r1, [r7, r4]
 8004808:	f7fc f9e4 	bl	8000bd4 <__aeabi_fsub>
 800480c:	4643      	mov	r3, r8
 800480e:	3d01      	subs	r5, #1
 8004810:	5118      	str	r0, [r3, r4]
 8004812:	3404      	adds	r4, #4
 8004814:	2d00      	cmp	r5, #0
 8004816:	d1f5      	bne.n	8004804 <arm_mat_sub_f32+0x28>
 8004818:	2000      	movs	r0, #0
 800481a:	b240      	sxtb	r0, r0
 800481c:	bc04      	pop	{r2}
 800481e:	4690      	mov	r8, r2
 8004820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004822:	20fd      	movs	r0, #253	; 0xfd
 8004824:	e7f9      	b.n	800481a <arm_mat_sub_f32+0x3e>
 8004826:	46c0      	nop			; (mov r8, r8)

08004828 <arm_mat_mult_f32>:
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	465f      	mov	r7, fp
 800482c:	4656      	mov	r6, sl
 800482e:	464d      	mov	r5, r9
 8004830:	4644      	mov	r4, r8
 8004832:	b4f0      	push	{r4, r5, r6, r7}
 8004834:	6843      	ldr	r3, [r0, #4]
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	6853      	ldr	r3, [r2, #4]
 800483c:	9305      	str	r3, [sp, #20]
 800483e:	8803      	ldrh	r3, [r0, #0]
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	1c1e      	adds	r6, r3, #0
 8004844:	884b      	ldrh	r3, [r1, #2]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	1c1c      	adds	r4, r3, #0
 800484a:	8843      	ldrh	r3, [r0, #2]
 800484c:	469b      	mov	fp, r3
 800484e:	684b      	ldr	r3, [r1, #4]
 8004850:	1c1d      	adds	r5, r3, #0
 8004852:	9302      	str	r3, [sp, #8]
 8004854:	880b      	ldrh	r3, [r1, #0]
 8004856:	455b      	cmp	r3, fp
 8004858:	d157      	bne.n	800490a <arm_mat_mult_f32+0xe2>
 800485a:	8813      	ldrh	r3, [r2, #0]
 800485c:	42b3      	cmp	r3, r6
 800485e:	d154      	bne.n	800490a <arm_mat_mult_f32+0xe2>
 8004860:	8853      	ldrh	r3, [r2, #2]
 8004862:	42a3      	cmp	r3, r4
 8004864:	d151      	bne.n	800490a <arm_mat_mult_f32+0xe2>
 8004866:	465b      	mov	r3, fp
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	9306      	str	r3, [sp, #24]
 800486c:	00a3      	lsls	r3, r4, #2
 800486e:	4698      	mov	r8, r3
 8004870:	2300      	movs	r3, #0
 8004872:	9107      	str	r1, [sp, #28]
 8004874:	9303      	str	r3, [sp, #12]
 8004876:	9a05      	ldr	r2, [sp, #20]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4692      	mov	sl, r2
 800487c:	449a      	add	sl, r3
 800487e:	9b00      	ldr	r3, [sp, #0]
 8004880:	4699      	mov	r9, r3
 8004882:	465b      	mov	r3, fp
 8004884:	2b00      	cmp	r3, #0
 8004886:	d035      	beq.n	80048f4 <arm_mat_mult_f32+0xcc>
 8004888:	465c      	mov	r4, fp
 800488a:	2600      	movs	r6, #0
 800488c:	9f01      	ldr	r7, [sp, #4]
 800488e:	6829      	ldr	r1, [r5, #0]
 8004890:	cf01      	ldmia	r7!, {r0}
 8004892:	f7fc f86d 	bl	8000970 <__aeabi_fmul>
 8004896:	1c01      	adds	r1, r0, #0
 8004898:	1c30      	adds	r0, r6, #0
 800489a:	f7fb fcf7 	bl	800028c <__aeabi_fadd>
 800489e:	3c01      	subs	r4, #1
 80048a0:	b2a4      	uxth	r4, r4
 80048a2:	1c06      	adds	r6, r0, #0
 80048a4:	4445      	add	r5, r8
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	d1f1      	bne.n	800488e <arm_mat_mult_f32+0x66>
 80048aa:	4653      	mov	r3, sl
 80048ac:	c340      	stmia	r3!, {r6}
 80048ae:	469a      	mov	sl, r3
 80048b0:	464b      	mov	r3, r9
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4699      	mov	r9, r3
 80048b8:	464a      	mov	r2, r9
 80048ba:	9b00      	ldr	r3, [sp, #0]
 80048bc:	1a9d      	subs	r5, r3, r2
 80048be:	9b02      	ldr	r3, [sp, #8]
 80048c0:	00ad      	lsls	r5, r5, #2
 80048c2:	469c      	mov	ip, r3
 80048c4:	4465      	add	r5, ip
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	d1db      	bne.n	8004882 <arm_mat_mult_f32+0x5a>
 80048ca:	9a00      	ldr	r2, [sp, #0]
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	4694      	mov	ip, r2
 80048d0:	9a06      	ldr	r2, [sp, #24]
 80048d2:	4463      	add	r3, ip
 80048d4:	4694      	mov	ip, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	9303      	str	r3, [sp, #12]
 80048da:	9b01      	ldr	r3, [sp, #4]
 80048dc:	4463      	add	r3, ip
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	9b04      	ldr	r3, [sp, #16]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	9304      	str	r3, [sp, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <arm_mat_mult_f32+0xd0>
 80048ec:	9b07      	ldr	r3, [sp, #28]
 80048ee:	685d      	ldr	r5, [r3, #4]
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	e7c0      	b.n	8004876 <arm_mat_mult_f32+0x4e>
 80048f4:	2600      	movs	r6, #0
 80048f6:	e7d8      	b.n	80048aa <arm_mat_mult_f32+0x82>
 80048f8:	2000      	movs	r0, #0
 80048fa:	b240      	sxtb	r0, r0
 80048fc:	b009      	add	sp, #36	; 0x24
 80048fe:	bc3c      	pop	{r2, r3, r4, r5}
 8004900:	4690      	mov	r8, r2
 8004902:	4699      	mov	r9, r3
 8004904:	46a2      	mov	sl, r4
 8004906:	46ab      	mov	fp, r5
 8004908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490a:	20fd      	movs	r0, #253	; 0xfd
 800490c:	e7f5      	b.n	80048fa <arm_mat_mult_f32+0xd2>
 800490e:	46c0      	nop			; (mov r8, r8)

08004910 <arm_mat_inverse_f32>:
 8004910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004912:	465f      	mov	r7, fp
 8004914:	4656      	mov	r6, sl
 8004916:	464d      	mov	r5, r9
 8004918:	4644      	mov	r4, r8
 800491a:	b4f0      	push	{r4, r5, r6, r7}
 800491c:	6843      	ldr	r3, [r0, #4]
 800491e:	b093      	sub	sp, #76	; 0x4c
 8004920:	9309      	str	r3, [sp, #36]	; 0x24
 8004922:	684b      	ldr	r3, [r1, #4]
 8004924:	8802      	ldrh	r2, [r0, #0]
 8004926:	930a      	str	r3, [sp, #40]	; 0x28
 8004928:	8847      	ldrh	r7, [r0, #2]
 800492a:	23fd      	movs	r3, #253	; 0xfd
 800492c:	4297      	cmp	r7, r2
 800492e:	d007      	beq.n	8004940 <arm_mat_inverse_f32+0x30>
 8004930:	b258      	sxtb	r0, r3
 8004932:	b013      	add	sp, #76	; 0x4c
 8004934:	bc3c      	pop	{r2, r3, r4, r5}
 8004936:	4690      	mov	r8, r2
 8004938:	4699      	mov	r9, r3
 800493a:	46a2      	mov	sl, r4
 800493c:	46ab      	mov	fp, r5
 800493e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004940:	880c      	ldrh	r4, [r1, #0]
 8004942:	884a      	ldrh	r2, [r1, #2]
 8004944:	42a2      	cmp	r2, r4
 8004946:	d1f3      	bne.n	8004930 <arm_mat_inverse_f32+0x20>
 8004948:	4297      	cmp	r7, r2
 800494a:	d1f1      	bne.n	8004930 <arm_mat_inverse_f32+0x20>
 800494c:	2f00      	cmp	r7, #0
 800494e:	d060      	beq.n	8004a12 <arm_mat_inverse_f32+0x102>
 8004950:	4b97      	ldr	r3, [pc, #604]	; (8004bb0 <arm_mat_inverse_f32+0x2a0>)
 8004952:	9011      	str	r0, [sp, #68]	; 0x44
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	469a      	mov	sl, r3
 800495a:	1e7b      	subs	r3, r7, #1
 800495c:	4699      	mov	r9, r3
 800495e:	23fe      	movs	r3, #254	; 0xfe
 8004960:	059b      	lsls	r3, r3, #22
 8004962:	4698      	mov	r8, r3
 8004964:	1c3b      	adds	r3, r7, #0
 8004966:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004968:	4657      	mov	r7, sl
 800496a:	2500      	movs	r5, #0
 800496c:	469a      	mov	sl, r3
 800496e:	e007      	b.n	8004980 <arm_mat_inverse_f32+0x70>
 8004970:	1c3a      	adds	r2, r7, #0
 8004972:	1c30      	adds	r0, r6, #0
 8004974:	2100      	movs	r1, #0
 8004976:	f000 fd6f 	bl	8005458 <memset>
 800497a:	19f4      	adds	r4, r6, r7
 800497c:	3501      	adds	r5, #1
 800497e:	3f04      	subs	r7, #4
 8004980:	2d00      	cmp	r5, #0
 8004982:	d006      	beq.n	8004992 <arm_mat_inverse_f32+0x82>
 8004984:	00ae      	lsls	r6, r5, #2
 8004986:	1c20      	adds	r0, r4, #0
 8004988:	2100      	movs	r1, #0
 800498a:	1c32      	adds	r2, r6, #0
 800498c:	f000 fd64 	bl	8005458 <memset>
 8004990:	19a4      	adds	r4, r4, r6
 8004992:	4643      	mov	r3, r8
 8004994:	1d26      	adds	r6, r4, #4
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	454d      	cmp	r5, r9
 800499a:	d1e9      	bne.n	8004970 <arm_mat_inverse_f32+0x60>
 800499c:	4657      	mov	r7, sl
 800499e:	00bb      	lsls	r3, r7, #2
 80049a0:	9307      	str	r3, [sp, #28]
 80049a2:	3304      	adds	r3, #4
 80049a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a8:	46d1      	mov	r9, sl
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	00fb      	lsls	r3, r7, #3
 80049ae:	3304      	adds	r3, #4
 80049b0:	930e      	str	r3, [sp, #56]	; 0x38
 80049b2:	2301      	movs	r3, #1
 80049b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b6:	2300      	movs	r3, #0
 80049b8:	46d0      	mov	r8, sl
 80049ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049bc:	9310      	str	r3, [sp, #64]	; 0x40
 80049be:	1c7b      	adds	r3, r7, #1
 80049c0:	920c      	str	r2, [sp, #48]	; 0x30
 80049c2:	9202      	str	r2, [sp, #8]
 80049c4:	9306      	str	r3, [sp, #24]
 80049c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049c8:	2100      	movs	r1, #0
 80049ca:	1c13      	adds	r3, r2, #0
 80049cc:	4694      	mov	ip, r2
 80049ce:	3b01      	subs	r3, #1
 80049d0:	9305      	str	r3, [sp, #20]
 80049d2:	4b77      	ldr	r3, [pc, #476]	; (8004bb0 <arm_mat_inverse_f32+0x2a0>)
 80049d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049d6:	4463      	add	r3, ip
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	469c      	mov	ip, r3
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	9b02      	ldr	r3, [sp, #8]
 80049e0:	4462      	add	r2, ip
 80049e2:	681e      	ldr	r6, [r3, #0]
 80049e4:	4693      	mov	fp, r2
 80049e6:	1c30      	adds	r0, r6, #0
 80049e8:	1c1d      	adds	r5, r3, #0
 80049ea:	9c03      	ldr	r4, [sp, #12]
 80049ec:	f7fb fc20 	bl	8000230 <__aeabi_fcmpeq>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d100      	bne.n	80049f6 <arm_mat_inverse_f32+0xe6>
 80049f4:	e0ae      	b.n	8004b54 <arm_mat_inverse_f32+0x244>
 80049f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f8:	4598      	cmp	r8, r3
 80049fa:	d907      	bls.n	8004a0c <arm_mat_inverse_f32+0xfc>
 80049fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049fe:	2100      	movs	r1, #0
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f7fb fc15 	bl	8000230 <__aeabi_fcmpeq>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d100      	bne.n	8004a0c <arm_mat_inverse_f32+0xfc>
 8004a0a:	e0a9      	b.n	8004b60 <arm_mat_inverse_f32+0x250>
 8004a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d001      	beq.n	8004a16 <arm_mat_inverse_f32+0x106>
 8004a12:	23fb      	movs	r3, #251	; 0xfb
 8004a14:	e78c      	b.n	8004930 <arm_mat_inverse_f32+0x20>
 8004a16:	9a07      	ldr	r2, [sp, #28]
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	4694      	mov	ip, r2
 8004a1c:	4463      	add	r3, ip
 8004a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8004a20:	464b      	mov	r3, r9
 8004a22:	2700      	movs	r7, #0
 8004a24:	46a1      	mov	r9, r4
 8004a26:	1c1c      	adds	r4, r3, #0
 8004a28:	6828      	ldr	r0, [r5, #0]
 8004a2a:	1c31      	adds	r1, r6, #0
 8004a2c:	f7fb fdc8 	bl	80005c0 <__aeabi_fdiv>
 8004a30:	3701      	adds	r7, #1
 8004a32:	c501      	stmia	r5!, {r0}
 8004a34:	42a7      	cmp	r7, r4
 8004a36:	d1f7      	bne.n	8004a28 <arm_mat_inverse_f32+0x118>
 8004a38:	1c23      	adds	r3, r4, #0
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	464c      	mov	r4, r9
 8004a3e:	4647      	mov	r7, r8
 8004a40:	4699      	mov	r9, r3
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1c31      	adds	r1, r6, #0
 8004a46:	f7fb fdbb 	bl	80005c0 <__aeabi_fdiv>
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	c401      	stmia	r4!, {r0}
 8004a4e:	42af      	cmp	r7, r5
 8004a50:	d8f7      	bhi.n	8004a42 <arm_mat_inverse_f32+0x132>
 8004a52:	464b      	mov	r3, r9
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	9308      	str	r3, [sp, #32]
 8004a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5a:	46b8      	mov	r8, r7
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	469a      	mov	sl, r3
 8004a62:	4653      	mov	r3, sl
 8004a64:	9a05      	ldr	r2, [sp, #20]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <arm_mat_inverse_f32+0x15e>
 8004a6c:	e09c      	b.n	8004ba8 <arm_mat_inverse_f32+0x298>
 8004a6e:	465b      	mov	r3, fp
 8004a70:	465d      	mov	r5, fp
 8004a72:	2400      	movs	r4, #0
 8004a74:	681e      	ldr	r6, [r3, #0]
 8004a76:	9f02      	ldr	r7, [sp, #8]
 8004a78:	cf02      	ldmia	r7!, {r1}
 8004a7a:	1c30      	adds	r0, r6, #0
 8004a7c:	f7fb ff78 	bl	8000970 <__aeabi_fmul>
 8004a80:	1c01      	adds	r1, r0, #0
 8004a82:	6828      	ldr	r0, [r5, #0]
 8004a84:	f7fc f8a6 	bl	8000bd4 <__aeabi_fsub>
 8004a88:	3401      	adds	r4, #1
 8004a8a:	c501      	stmia	r5!, {r0}
 8004a8c:	454c      	cmp	r4, r9
 8004a8e:	d1f3      	bne.n	8004a78 <arm_mat_inverse_f32+0x168>
 8004a90:	9b08      	ldr	r3, [sp, #32]
 8004a92:	2400      	movs	r4, #0
 8004a94:	469c      	mov	ip, r3
 8004a96:	9f03      	ldr	r7, [sp, #12]
 8004a98:	9d01      	ldr	r5, [sp, #4]
 8004a9a:	44e3      	add	fp, ip
 8004a9c:	cf02      	ldmia	r7!, {r1}
 8004a9e:	1c30      	adds	r0, r6, #0
 8004aa0:	f7fb ff66 	bl	8000970 <__aeabi_fmul>
 8004aa4:	1c01      	adds	r1, r0, #0
 8004aa6:	6828      	ldr	r0, [r5, #0]
 8004aa8:	f7fc f894 	bl	8000bd4 <__aeabi_fsub>
 8004aac:	3401      	adds	r4, #1
 8004aae:	c501      	stmia	r5!, {r0}
 8004ab0:	45a0      	cmp	r8, r4
 8004ab2:	d8f3      	bhi.n	8004a9c <arm_mat_inverse_f32+0x18c>
 8004ab4:	9a07      	ldr	r2, [sp, #28]
 8004ab6:	9b01      	ldr	r3, [sp, #4]
 8004ab8:	4694      	mov	ip, r2
 8004aba:	4463      	add	r3, ip
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	469c      	mov	ip, r3
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	44e3      	add	fp, ip
 8004ac6:	469c      	mov	ip, r3
 8004ac8:	9b06      	ldr	r3, [sp, #24]
 8004aca:	44e2      	add	sl, ip
 8004acc:	459a      	cmp	sl, r3
 8004ace:	d1c8      	bne.n	8004a62 <arm_mat_inverse_f32+0x152>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	425b      	negs	r3, r3
 8004ad4:	469c      	mov	ip, r3
 8004ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ad8:	44e1      	add	r9, ip
 8004ada:	4694      	mov	ip, r2
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ae0:	4463      	add	r3, ip
 8004ae2:	4694      	mov	ip, r2
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aec:	3301      	adds	r3, #1
 8004aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004af2:	4463      	add	r3, ip
 8004af4:	930c      	str	r3, [sp, #48]	; 0x30
 8004af6:	464b      	mov	r3, r9
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d000      	beq.n	8004afe <arm_mat_inverse_f32+0x1ee>
 8004afc:	e763      	b.n	80049c6 <arm_mat_inverse_f32+0xb6>
 8004afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b00:	4647      	mov	r7, r8
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d04e      	beq.n	8004ba4 <arm_mat_inverse_f32+0x294>
 8004b06:	1c30      	adds	r0, r6, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	f7fb fb91 	bl	8000230 <__aeabi_fcmpeq>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d048      	beq.n	8004ba4 <arm_mat_inverse_f32+0x294>
 8004b12:	4646      	mov	r6, r8
 8004b14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b16:	437e      	muls	r6, r7
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	d100      	bne.n	8004b22 <arm_mat_inverse_f32+0x212>
 8004b20:	e777      	b.n	8004a12 <arm_mat_inverse_f32+0x102>
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	2100      	movs	r1, #0
 8004b26:	1c1c      	adds	r4, r3, #0
 8004b28:	f7fb fb82 	bl	8000230 <__aeabi_fcmpeq>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d039      	beq.n	8004ba4 <arm_mat_inverse_f32+0x294>
 8004b30:	1c23      	adds	r3, r4, #0
 8004b32:	3304      	adds	r3, #4
 8004b34:	1c1d      	adds	r5, r3, #0
 8004b36:	2400      	movs	r4, #0
 8004b38:	e007      	b.n	8004b4a <arm_mat_inverse_f32+0x23a>
 8004b3a:	3504      	adds	r5, #4
 8004b3c:	1f2b      	subs	r3, r5, #4
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	2100      	movs	r1, #0
 8004b42:	f7fb fb75 	bl	8000230 <__aeabi_fcmpeq>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d02c      	beq.n	8004ba4 <arm_mat_inverse_f32+0x294>
 8004b4a:	3401      	adds	r4, #1
 8004b4c:	42b4      	cmp	r4, r6
 8004b4e:	d1f4      	bne.n	8004b3a <arm_mat_inverse_f32+0x22a>
 8004b50:	23fb      	movs	r3, #251	; 0xfb
 8004b52:	e6ed      	b.n	8004930 <arm_mat_inverse_f32+0x20>
 8004b54:	9a07      	ldr	r2, [sp, #28]
 8004b56:	1c23      	adds	r3, r4, #0
 8004b58:	4694      	mov	ip, r2
 8004b5a:	4463      	add	r3, ip
 8004b5c:	930d      	str	r3, [sp, #52]	; 0x34
 8004b5e:	e75f      	b.n	8004a20 <arm_mat_inverse_f32+0x110>
 8004b60:	2300      	movs	r3, #0
 8004b62:	464e      	mov	r6, r9
 8004b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b66:	9a02      	ldr	r2, [sp, #8]
 8004b68:	6808      	ldr	r0, [r1, #0]
 8004b6a:	6817      	ldr	r7, [r2, #0]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	c180      	stmia	r1!, {r7}
 8004b70:	c201      	stmia	r2!, {r0}
 8004b72:	42b3      	cmp	r3, r6
 8004b74:	d1f8      	bne.n	8004b68 <arm_mat_inverse_f32+0x258>
 8004b76:	9907      	ldr	r1, [sp, #28]
 8004b78:	9a03      	ldr	r2, [sp, #12]
 8004b7a:	468c      	mov	ip, r1
 8004b7c:	1c13      	adds	r3, r2, #0
 8004b7e:	4463      	add	r3, ip
 8004b80:	46b1      	mov	r9, r6
 8004b82:	1c19      	adds	r1, r3, #0
 8004b84:	930d      	str	r3, [sp, #52]	; 0x34
 8004b86:	4646      	mov	r6, r8
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6808      	ldr	r0, [r1, #0]
 8004b8c:	6817      	ldr	r7, [r2, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	c180      	stmia	r1!, {r7}
 8004b92:	c201      	stmia	r2!, {r0}
 8004b94:	429e      	cmp	r6, r3
 8004b96:	d8f8      	bhi.n	8004b8a <arm_mat_inverse_f32+0x27a>
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	46b0      	mov	r8, r6
 8004b9c:	681e      	ldr	r6, [r3, #0]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	9310      	str	r3, [sp, #64]	; 0x40
 8004ba2:	e73d      	b.n	8004a20 <arm_mat_inverse_f32+0x110>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e6c3      	b.n	8004930 <arm_mat_inverse_f32+0x20>
 8004ba8:	9b08      	ldr	r3, [sp, #32]
 8004baa:	469c      	mov	ip, r3
 8004bac:	44e3      	add	fp, ip
 8004bae:	e781      	b.n	8004ab4 <arm_mat_inverse_f32+0x1a4>
 8004bb0:	3fffffff 	.word	0x3fffffff

08004bb4 <arm_mat_init_f32>:
 8004bb4:	8001      	strh	r1, [r0, #0]
 8004bb6:	8042      	strh	r2, [r0, #2]
 8004bb8:	6043      	str	r3, [r0, #4]
 8004bba:	4770      	bx	lr

08004bbc <arm_mat_add_f32>:
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	4647      	mov	r7, r8
 8004bc0:	b480      	push	{r7}
 8004bc2:	6853      	ldr	r3, [r2, #4]
 8004bc4:	684f      	ldr	r7, [r1, #4]
 8004bc6:	4698      	mov	r8, r3
 8004bc8:	6809      	ldr	r1, [r1, #0]
 8004bca:	6803      	ldr	r3, [r0, #0]
 8004bcc:	6846      	ldr	r6, [r0, #4]
 8004bce:	428b      	cmp	r3, r1
 8004bd0:	d117      	bne.n	8004c02 <arm_mat_add_f32+0x46>
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d114      	bne.n	8004c02 <arm_mat_add_f32+0x46>
 8004bd8:	8845      	ldrh	r5, [r0, #2]
 8004bda:	8803      	ldrh	r3, [r0, #0]
 8004bdc:	2400      	movs	r4, #0
 8004bde:	435d      	muls	r5, r3
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	d009      	beq.n	8004bf8 <arm_mat_add_f32+0x3c>
 8004be4:	5930      	ldr	r0, [r6, r4]
 8004be6:	5939      	ldr	r1, [r7, r4]
 8004be8:	f7fb fb50 	bl	800028c <__aeabi_fadd>
 8004bec:	4643      	mov	r3, r8
 8004bee:	3d01      	subs	r5, #1
 8004bf0:	5118      	str	r0, [r3, r4]
 8004bf2:	3404      	adds	r4, #4
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	d1f5      	bne.n	8004be4 <arm_mat_add_f32+0x28>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	b240      	sxtb	r0, r0
 8004bfc:	bc04      	pop	{r2}
 8004bfe:	4690      	mov	r8, r2
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c02:	20fd      	movs	r0, #253	; 0xfd
 8004c04:	e7f9      	b.n	8004bfa <arm_mat_add_f32+0x3e>
 8004c06:	46c0      	nop			; (mov r8, r8)

08004c08 <_ZdlPvj>:
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	f000 f801 	bl	8004c10 <_ZdlPv>
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <_ZdlPv>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	f000 fc17 	bl	8005444 <free>
 8004c16:	bd10      	pop	{r4, pc}

08004c18 <atanf>:
 8004c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c1a:	4b71      	ldr	r3, [pc, #452]	; (8004de0 <atanf+0x1c8>)
 8004c1c:	0045      	lsls	r5, r0, #1
 8004c1e:	1c04      	adds	r4, r0, #0
 8004c20:	9001      	str	r0, [sp, #4]
 8004c22:	086d      	lsrs	r5, r5, #1
 8004c24:	429d      	cmp	r5, r3
 8004c26:	dd0f      	ble.n	8004c48 <atanf+0x30>
 8004c28:	23ff      	movs	r3, #255	; 0xff
 8004c2a:	05db      	lsls	r3, r3, #23
 8004c2c:	429d      	cmp	r5, r3
 8004c2e:	dd04      	ble.n	8004c3a <atanf+0x22>
 8004c30:	1c01      	adds	r1, r0, #0
 8004c32:	f7fb fb2b 	bl	800028c <__aeabi_fadd>
 8004c36:	1c04      	adds	r4, r0, #0
 8004c38:	e004      	b.n	8004c44 <atanf+0x2c>
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	dc00      	bgt.n	8004c42 <atanf+0x2a>
 8004c40:	e0cb      	b.n	8004dda <atanf+0x1c2>
 8004c42:	4c68      	ldr	r4, [pc, #416]	; (8004de4 <atanf+0x1cc>)
 8004c44:	1c20      	adds	r0, r4, #0
 8004c46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c48:	4b67      	ldr	r3, [pc, #412]	; (8004de8 <atanf+0x1d0>)
 8004c4a:	429d      	cmp	r5, r3
 8004c4c:	dc0e      	bgt.n	8004c6c <atanf+0x54>
 8004c4e:	4b67      	ldr	r3, [pc, #412]	; (8004dec <atanf+0x1d4>)
 8004c50:	429d      	cmp	r5, r3
 8004c52:	dc08      	bgt.n	8004c66 <atanf+0x4e>
 8004c54:	4966      	ldr	r1, [pc, #408]	; (8004df0 <atanf+0x1d8>)
 8004c56:	f7fb fb19 	bl	800028c <__aeabi_fadd>
 8004c5a:	21fe      	movs	r1, #254	; 0xfe
 8004c5c:	0589      	lsls	r1, r1, #22
 8004c5e:	f7fb fb01 	bl	8000264 <__aeabi_fcmpgt>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d1ee      	bne.n	8004c44 <atanf+0x2c>
 8004c66:	2501      	movs	r5, #1
 8004c68:	426d      	negs	r5, r5
 8004c6a:	e01b      	b.n	8004ca4 <atanf+0x8c>
 8004c6c:	f000 f8e6 	bl	8004e3c <fabsf>
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <atanf+0x1dc>)
 8004c72:	1c04      	adds	r4, r0, #0
 8004c74:	429d      	cmp	r5, r3
 8004c76:	dc7b      	bgt.n	8004d70 <atanf+0x158>
 8004c78:	4b5f      	ldr	r3, [pc, #380]	; (8004df8 <atanf+0x1e0>)
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	dc67      	bgt.n	8004d4e <atanf+0x136>
 8004c7e:	1c01      	adds	r1, r0, #0
 8004c80:	f7fb fb04 	bl	800028c <__aeabi_fadd>
 8004c84:	21fe      	movs	r1, #254	; 0xfe
 8004c86:	0589      	lsls	r1, r1, #22
 8004c88:	f7fb ffa4 	bl	8000bd4 <__aeabi_fsub>
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	1c05      	adds	r5, r0, #0
 8004c90:	05c9      	lsls	r1, r1, #23
 8004c92:	1c20      	adds	r0, r4, #0
 8004c94:	f7fb fafa 	bl	800028c <__aeabi_fadd>
 8004c98:	1c01      	adds	r1, r0, #0
 8004c9a:	1c28      	adds	r0, r5, #0
 8004c9c:	f7fb fc90 	bl	80005c0 <__aeabi_fdiv>
 8004ca0:	2500      	movs	r5, #0
 8004ca2:	1c04      	adds	r4, r0, #0
 8004ca4:	1c21      	adds	r1, r4, #0
 8004ca6:	1c20      	adds	r0, r4, #0
 8004ca8:	f7fb fe62 	bl	8000970 <__aeabi_fmul>
 8004cac:	1c01      	adds	r1, r0, #0
 8004cae:	1c07      	adds	r7, r0, #0
 8004cb0:	f7fb fe5e 	bl	8000970 <__aeabi_fmul>
 8004cb4:	4951      	ldr	r1, [pc, #324]	; (8004dfc <atanf+0x1e4>)
 8004cb6:	1c06      	adds	r6, r0, #0
 8004cb8:	f7fb fe5a 	bl	8000970 <__aeabi_fmul>
 8004cbc:	4950      	ldr	r1, [pc, #320]	; (8004e00 <atanf+0x1e8>)
 8004cbe:	f7fb fae5 	bl	800028c <__aeabi_fadd>
 8004cc2:	1c31      	adds	r1, r6, #0
 8004cc4:	f7fb fe54 	bl	8000970 <__aeabi_fmul>
 8004cc8:	494e      	ldr	r1, [pc, #312]	; (8004e04 <atanf+0x1ec>)
 8004cca:	f7fb fadf 	bl	800028c <__aeabi_fadd>
 8004cce:	1c31      	adds	r1, r6, #0
 8004cd0:	f7fb fe4e 	bl	8000970 <__aeabi_fmul>
 8004cd4:	494c      	ldr	r1, [pc, #304]	; (8004e08 <atanf+0x1f0>)
 8004cd6:	f7fb fad9 	bl	800028c <__aeabi_fadd>
 8004cda:	1c31      	adds	r1, r6, #0
 8004cdc:	f7fb fe48 	bl	8000970 <__aeabi_fmul>
 8004ce0:	494a      	ldr	r1, [pc, #296]	; (8004e0c <atanf+0x1f4>)
 8004ce2:	f7fb fad3 	bl	800028c <__aeabi_fadd>
 8004ce6:	1c31      	adds	r1, r6, #0
 8004ce8:	f7fb fe42 	bl	8000970 <__aeabi_fmul>
 8004cec:	4948      	ldr	r1, [pc, #288]	; (8004e10 <atanf+0x1f8>)
 8004cee:	f7fb facd 	bl	800028c <__aeabi_fadd>
 8004cf2:	1c39      	adds	r1, r7, #0
 8004cf4:	f7fb fe3c 	bl	8000970 <__aeabi_fmul>
 8004cf8:	4946      	ldr	r1, [pc, #280]	; (8004e14 <atanf+0x1fc>)
 8004cfa:	1c07      	adds	r7, r0, #0
 8004cfc:	1c30      	adds	r0, r6, #0
 8004cfe:	f7fb fe37 	bl	8000970 <__aeabi_fmul>
 8004d02:	4945      	ldr	r1, [pc, #276]	; (8004e18 <atanf+0x200>)
 8004d04:	f7fb ff66 	bl	8000bd4 <__aeabi_fsub>
 8004d08:	1c31      	adds	r1, r6, #0
 8004d0a:	f7fb fe31 	bl	8000970 <__aeabi_fmul>
 8004d0e:	4943      	ldr	r1, [pc, #268]	; (8004e1c <atanf+0x204>)
 8004d10:	f7fb ff60 	bl	8000bd4 <__aeabi_fsub>
 8004d14:	1c31      	adds	r1, r6, #0
 8004d16:	f7fb fe2b 	bl	8000970 <__aeabi_fmul>
 8004d1a:	4941      	ldr	r1, [pc, #260]	; (8004e20 <atanf+0x208>)
 8004d1c:	f7fb ff5a 	bl	8000bd4 <__aeabi_fsub>
 8004d20:	1c31      	adds	r1, r6, #0
 8004d22:	f7fb fe25 	bl	8000970 <__aeabi_fmul>
 8004d26:	493f      	ldr	r1, [pc, #252]	; (8004e24 <atanf+0x20c>)
 8004d28:	f7fb ff54 	bl	8000bd4 <__aeabi_fsub>
 8004d2c:	1c31      	adds	r1, r6, #0
 8004d2e:	f7fb fe1f 	bl	8000970 <__aeabi_fmul>
 8004d32:	1c01      	adds	r1, r0, #0
 8004d34:	1c38      	adds	r0, r7, #0
 8004d36:	f7fb faa9 	bl	800028c <__aeabi_fadd>
 8004d3a:	1c21      	adds	r1, r4, #0
 8004d3c:	f7fb fe18 	bl	8000970 <__aeabi_fmul>
 8004d40:	1c6b      	adds	r3, r5, #1
 8004d42:	d134      	bne.n	8004dae <atanf+0x196>
 8004d44:	1c01      	adds	r1, r0, #0
 8004d46:	1c20      	adds	r0, r4, #0
 8004d48:	f7fb ff44 	bl	8000bd4 <__aeabi_fsub>
 8004d4c:	e773      	b.n	8004c36 <atanf+0x1e>
 8004d4e:	21fe      	movs	r1, #254	; 0xfe
 8004d50:	0589      	lsls	r1, r1, #22
 8004d52:	f7fb ff3f 	bl	8000bd4 <__aeabi_fsub>
 8004d56:	21fe      	movs	r1, #254	; 0xfe
 8004d58:	1c05      	adds	r5, r0, #0
 8004d5a:	0589      	lsls	r1, r1, #22
 8004d5c:	1c20      	adds	r0, r4, #0
 8004d5e:	f7fb fa95 	bl	800028c <__aeabi_fadd>
 8004d62:	1c01      	adds	r1, r0, #0
 8004d64:	1c28      	adds	r0, r5, #0
 8004d66:	f7fb fc2b 	bl	80005c0 <__aeabi_fdiv>
 8004d6a:	2501      	movs	r5, #1
 8004d6c:	1c04      	adds	r4, r0, #0
 8004d6e:	e799      	b.n	8004ca4 <atanf+0x8c>
 8004d70:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <atanf+0x210>)
 8004d72:	429d      	cmp	r5, r3
 8004d74:	dc14      	bgt.n	8004da0 <atanf+0x188>
 8004d76:	21ff      	movs	r1, #255	; 0xff
 8004d78:	0589      	lsls	r1, r1, #22
 8004d7a:	f7fb ff2b 	bl	8000bd4 <__aeabi_fsub>
 8004d7e:	21ff      	movs	r1, #255	; 0xff
 8004d80:	1c05      	adds	r5, r0, #0
 8004d82:	0589      	lsls	r1, r1, #22
 8004d84:	1c20      	adds	r0, r4, #0
 8004d86:	f7fb fdf3 	bl	8000970 <__aeabi_fmul>
 8004d8a:	21fe      	movs	r1, #254	; 0xfe
 8004d8c:	0589      	lsls	r1, r1, #22
 8004d8e:	f7fb fa7d 	bl	800028c <__aeabi_fadd>
 8004d92:	1c01      	adds	r1, r0, #0
 8004d94:	1c28      	adds	r0, r5, #0
 8004d96:	f7fb fc13 	bl	80005c0 <__aeabi_fdiv>
 8004d9a:	2502      	movs	r5, #2
 8004d9c:	1c04      	adds	r4, r0, #0
 8004d9e:	e781      	b.n	8004ca4 <atanf+0x8c>
 8004da0:	1c01      	adds	r1, r0, #0
 8004da2:	4822      	ldr	r0, [pc, #136]	; (8004e2c <atanf+0x214>)
 8004da4:	f7fb fc0c 	bl	80005c0 <__aeabi_fdiv>
 8004da8:	2503      	movs	r5, #3
 8004daa:	1c04      	adds	r4, r0, #0
 8004dac:	e77a      	b.n	8004ca4 <atanf+0x8c>
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <atanf+0x218>)
 8004db0:	00ad      	lsls	r5, r5, #2
 8004db2:	58e9      	ldr	r1, [r5, r3]
 8004db4:	f7fb ff0e 	bl	8000bd4 <__aeabi_fsub>
 8004db8:	1c21      	adds	r1, r4, #0
 8004dba:	f7fb ff0b 	bl	8000bd4 <__aeabi_fsub>
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <atanf+0x21c>)
 8004dc0:	1c01      	adds	r1, r0, #0
 8004dc2:	58e8      	ldr	r0, [r5, r3]
 8004dc4:	f7fb ff06 	bl	8000bd4 <__aeabi_fsub>
 8004dc8:	9b01      	ldr	r3, [sp, #4]
 8004dca:	1c04      	adds	r4, r0, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db00      	blt.n	8004dd2 <atanf+0x1ba>
 8004dd0:	e738      	b.n	8004c44 <atanf+0x2c>
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	18c4      	adds	r4, r0, r3
 8004dd8:	e734      	b.n	8004c44 <atanf+0x2c>
 8004dda:	4c17      	ldr	r4, [pc, #92]	; (8004e38 <atanf+0x220>)
 8004ddc:	e732      	b.n	8004c44 <atanf+0x2c>
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	507fffff 	.word	0x507fffff
 8004de4:	3fc90fdb 	.word	0x3fc90fdb
 8004de8:	3edfffff 	.word	0x3edfffff
 8004dec:	30ffffff 	.word	0x30ffffff
 8004df0:	7149f2ca 	.word	0x7149f2ca
 8004df4:	3f97ffff 	.word	0x3f97ffff
 8004df8:	3f2fffff 	.word	0x3f2fffff
 8004dfc:	3c8569d7 	.word	0x3c8569d7
 8004e00:	3d4bda59 	.word	0x3d4bda59
 8004e04:	3d886b35 	.word	0x3d886b35
 8004e08:	3dba2e6e 	.word	0x3dba2e6e
 8004e0c:	3e124925 	.word	0x3e124925
 8004e10:	3eaaaaab 	.word	0x3eaaaaab
 8004e14:	bd15a221 	.word	0xbd15a221
 8004e18:	3d6ef16b 	.word	0x3d6ef16b
 8004e1c:	3d9d8795 	.word	0x3d9d8795
 8004e20:	3de38e38 	.word	0x3de38e38
 8004e24:	3e4ccccd 	.word	0x3e4ccccd
 8004e28:	401bffff 	.word	0x401bffff
 8004e2c:	bf800000 	.word	0xbf800000
 8004e30:	080056b8 	.word	0x080056b8
 8004e34:	080056a8 	.word	0x080056a8
 8004e38:	bfc90fdb 	.word	0xbfc90fdb

08004e3c <fabsf>:
 8004e3c:	0040      	lsls	r0, r0, #1
 8004e3e:	0840      	lsrs	r0, r0, #1
 8004e40:	4770      	bx	lr
	...

08004e44 <asinf>:
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e46:	b08d      	sub	sp, #52	; 0x34
 8004e48:	1c04      	adds	r4, r0, #0
 8004e4a:	f000 f89f 	bl	8004f8c <__ieee754_asinf>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4e21      	ldr	r6, [pc, #132]	; (8004ed8 <asinf+0x94>)
 8004e52:	1c05      	adds	r5, r0, #0
 8004e54:	56f3      	ldrsb	r3, [r6, r3]
 8004e56:	3301      	adds	r3, #1
 8004e58:	d03b      	beq.n	8004ed2 <asinf+0x8e>
 8004e5a:	1c21      	adds	r1, r4, #0
 8004e5c:	1c20      	adds	r0, r4, #0
 8004e5e:	f7fc f87d 	bl	8000f5c <__aeabi_fcmpun>
 8004e62:	1e07      	subs	r7, r0, #0
 8004e64:	d135      	bne.n	8004ed2 <asinf+0x8e>
 8004e66:	1c20      	adds	r0, r4, #0
 8004e68:	f7ff ffe8 	bl	8004e3c <fabsf>
 8004e6c:	21fe      	movs	r1, #254	; 0xfe
 8004e6e:	0589      	lsls	r1, r1, #22
 8004e70:	f7fb f9f8 	bl	8000264 <__aeabi_fcmpgt>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d02c      	beq.n	8004ed2 <asinf+0x8e>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	9302      	str	r3, [sp, #8]
 8004e7c:	4b17      	ldr	r3, [pc, #92]	; (8004edc <asinf+0x98>)
 8004e7e:	1c20      	adds	r0, r4, #0
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	970a      	str	r7, [sp, #40]	; 0x28
 8004e84:	f7fc fdf4 	bl	8001a70 <__aeabi_f2d>
 8004e88:	9006      	str	r0, [sp, #24]
 8004e8a:	9107      	str	r1, [sp, #28]
 8004e8c:	9004      	str	r0, [sp, #16]
 8004e8e:	9105      	str	r1, [sp, #20]
 8004e90:	4813      	ldr	r0, [pc, #76]	; (8004ee0 <asinf+0x9c>)
 8004e92:	f000 faa7 	bl	80053e4 <nan>
 8004e96:	2300      	movs	r3, #0
 8004e98:	56f3      	ldrsb	r3, [r6, r3]
 8004e9a:	9008      	str	r0, [sp, #32]
 8004e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d104      	bne.n	8004eac <asinf+0x68>
 8004ea2:	f000 faa5 	bl	80053f0 <__errno>
 8004ea6:	2321      	movs	r3, #33	; 0x21
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	e004      	b.n	8004eb6 <asinf+0x72>
 8004eac:	a802      	add	r0, sp, #8
 8004eae:	f000 fa97 	bl	80053e0 <matherr>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d0f5      	beq.n	8004ea2 <asinf+0x5e>
 8004eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <asinf+0x84>
 8004ebe:	f000 fa97 	bl	80053f0 <__errno>
 8004ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	6003      	str	r3, [r0, #0]
 8004ec8:	9808      	ldr	r0, [sp, #32]
 8004eca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ecc:	f7fc fe22 	bl	8001b14 <__aeabi_d2f>
 8004ed0:	1c05      	adds	r5, r0, #0
 8004ed2:	1c28      	adds	r0, r5, #0
 8004ed4:	b00d      	add	sp, #52	; 0x34
 8004ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed8:	20000009 	.word	0x20000009
 8004edc:	080056c8 	.word	0x080056c8
 8004ee0:	080056cd 	.word	0x080056cd

08004ee4 <atan2f>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	f000 f99b 	bl	8005220 <__ieee754_atan2f>
 8004eea:	bd10      	pop	{r4, pc}

08004eec <sqrtf>:
 8004eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eee:	2500      	movs	r5, #0
 8004ef0:	b08d      	sub	sp, #52	; 0x34
 8004ef2:	1c04      	adds	r4, r0, #0
 8004ef4:	f000 fa1c 	bl	8005330 <__ieee754_sqrtf>
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <sqrtf+0x98>)
 8004efa:	1c06      	adds	r6, r0, #0
 8004efc:	575d      	ldrsb	r5, [r3, r5]
 8004efe:	1c6b      	adds	r3, r5, #1
 8004f00:	d030      	beq.n	8004f64 <sqrtf+0x78>
 8004f02:	1c21      	adds	r1, r4, #0
 8004f04:	1c20      	adds	r0, r4, #0
 8004f06:	f7fc f829 	bl	8000f5c <__aeabi_fcmpun>
 8004f0a:	1e07      	subs	r7, r0, #0
 8004f0c:	d12a      	bne.n	8004f64 <sqrtf+0x78>
 8004f0e:	2100      	movs	r1, #0
 8004f10:	1c20      	adds	r0, r4, #0
 8004f12:	f7fb f993 	bl	800023c <__aeabi_fcmplt>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d024      	beq.n	8004f64 <sqrtf+0x78>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <sqrtf+0x9c>)
 8004f20:	1c20      	adds	r0, r4, #0
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	970a      	str	r7, [sp, #40]	; 0x28
 8004f26:	f7fc fda3 	bl	8001a70 <__aeabi_f2d>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	9006      	str	r0, [sp, #24]
 8004f2e:	9107      	str	r1, [sp, #28]
 8004f30:	9004      	str	r0, [sp, #16]
 8004f32:	9105      	str	r1, [sp, #20]
 8004f34:	2300      	movs	r3, #0
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	d117      	bne.n	8004f6a <sqrtf+0x7e>
 8004f3a:	9208      	str	r2, [sp, #32]
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	a802      	add	r0, sp, #8
 8004f40:	f000 fa4e 	bl	80053e0 <matherr>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d018      	beq.n	8004f7a <sqrtf+0x8e>
 8004f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <sqrtf+0x6e>
 8004f50:	f000 fa4e 	bl	80053f0 <__errno>
 8004f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	6003      	str	r3, [r0, #0]
 8004f5a:	9808      	ldr	r0, [sp, #32]
 8004f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f5e:	f7fc fdd9 	bl	8001b14 <__aeabi_d2f>
 8004f62:	1c06      	adds	r6, r0, #0
 8004f64:	1c30      	adds	r0, r6, #0
 8004f66:	b00d      	add	sp, #52	; 0x34
 8004f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6a:	0010      	movs	r0, r2
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	f7fc f80b 	bl	8000f88 <__aeabi_ddiv>
 8004f72:	9008      	str	r0, [sp, #32]
 8004f74:	9109      	str	r1, [sp, #36]	; 0x24
 8004f76:	2d02      	cmp	r5, #2
 8004f78:	d1e1      	bne.n	8004f3e <sqrtf+0x52>
 8004f7a:	f000 fa39 	bl	80053f0 <__errno>
 8004f7e:	2321      	movs	r3, #33	; 0x21
 8004f80:	6003      	str	r3, [r0, #0]
 8004f82:	e7e1      	b.n	8004f48 <sqrtf+0x5c>
 8004f84:	20000009 	.word	0x20000009
 8004f88:	080056ce 	.word	0x080056ce

08004f8c <__ieee754_asinf>:
 8004f8c:	23fe      	movs	r3, #254	; 0xfe
 8004f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f90:	0045      	lsls	r5, r0, #1
 8004f92:	b085      	sub	sp, #20
 8004f94:	1c04      	adds	r4, r0, #0
 8004f96:	9002      	str	r0, [sp, #8]
 8004f98:	086d      	lsrs	r5, r5, #1
 8004f9a:	059b      	lsls	r3, r3, #22
 8004f9c:	429d      	cmp	r5, r3
 8004f9e:	d10c      	bne.n	8004fba <__ieee754_asinf+0x2e>
 8004fa0:	498d      	ldr	r1, [pc, #564]	; (80051d8 <__ieee754_asinf+0x24c>)
 8004fa2:	f7fb fce5 	bl	8000970 <__aeabi_fmul>
 8004fa6:	498d      	ldr	r1, [pc, #564]	; (80051dc <__ieee754_asinf+0x250>)
 8004fa8:	1c05      	adds	r5, r0, #0
 8004faa:	1c20      	adds	r0, r4, #0
 8004fac:	f7fb fce0 	bl	8000970 <__aeabi_fmul>
 8004fb0:	1c01      	adds	r1, r0, #0
 8004fb2:	1c28      	adds	r0, r5, #0
 8004fb4:	f7fb f96a 	bl	800028c <__aeabi_fadd>
 8004fb8:	e007      	b.n	8004fca <__ieee754_asinf+0x3e>
 8004fba:	429d      	cmp	r5, r3
 8004fbc:	dd09      	ble.n	8004fd2 <__ieee754_asinf+0x46>
 8004fbe:	1c01      	adds	r1, r0, #0
 8004fc0:	f7fb fe08 	bl	8000bd4 <__aeabi_fsub>
 8004fc4:	1c01      	adds	r1, r0, #0
 8004fc6:	f7fb fafb 	bl	80005c0 <__aeabi_fdiv>
 8004fca:	1c04      	adds	r4, r0, #0
 8004fcc:	1c20      	adds	r0, r4, #0
 8004fce:	b005      	add	sp, #20
 8004fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd2:	4b83      	ldr	r3, [pc, #524]	; (80051e0 <__ieee754_asinf+0x254>)
 8004fd4:	429d      	cmp	r5, r3
 8004fd6:	dc0b      	bgt.n	8004ff0 <__ieee754_asinf+0x64>
 8004fd8:	4b82      	ldr	r3, [pc, #520]	; (80051e4 <__ieee754_asinf+0x258>)
 8004fda:	429d      	cmp	r5, r3
 8004fdc:	dc76      	bgt.n	80050cc <__ieee754_asinf+0x140>
 8004fde:	4982      	ldr	r1, [pc, #520]	; (80051e8 <__ieee754_asinf+0x25c>)
 8004fe0:	f7fb f954 	bl	800028c <__aeabi_fadd>
 8004fe4:	21fe      	movs	r1, #254	; 0xfe
 8004fe6:	0589      	lsls	r1, r1, #22
 8004fe8:	f7fb f93c 	bl	8000264 <__aeabi_fcmpgt>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d1ed      	bne.n	8004fcc <__ieee754_asinf+0x40>
 8004ff0:	1c20      	adds	r0, r4, #0
 8004ff2:	f7ff ff23 	bl	8004e3c <fabsf>
 8004ff6:	1c01      	adds	r1, r0, #0
 8004ff8:	20fe      	movs	r0, #254	; 0xfe
 8004ffa:	0580      	lsls	r0, r0, #22
 8004ffc:	f7fb fdea 	bl	8000bd4 <__aeabi_fsub>
 8005000:	21fc      	movs	r1, #252	; 0xfc
 8005002:	0589      	lsls	r1, r1, #22
 8005004:	f7fb fcb4 	bl	8000970 <__aeabi_fmul>
 8005008:	4978      	ldr	r1, [pc, #480]	; (80051ec <__ieee754_asinf+0x260>)
 800500a:	1c04      	adds	r4, r0, #0
 800500c:	f7fb fcb0 	bl	8000970 <__aeabi_fmul>
 8005010:	4977      	ldr	r1, [pc, #476]	; (80051f0 <__ieee754_asinf+0x264>)
 8005012:	f7fb f93b 	bl	800028c <__aeabi_fadd>
 8005016:	1c21      	adds	r1, r4, #0
 8005018:	f7fb fcaa 	bl	8000970 <__aeabi_fmul>
 800501c:	4975      	ldr	r1, [pc, #468]	; (80051f4 <__ieee754_asinf+0x268>)
 800501e:	f7fb fdd9 	bl	8000bd4 <__aeabi_fsub>
 8005022:	1c21      	adds	r1, r4, #0
 8005024:	f7fb fca4 	bl	8000970 <__aeabi_fmul>
 8005028:	4973      	ldr	r1, [pc, #460]	; (80051f8 <__ieee754_asinf+0x26c>)
 800502a:	f7fb f92f 	bl	800028c <__aeabi_fadd>
 800502e:	1c21      	adds	r1, r4, #0
 8005030:	f7fb fc9e 	bl	8000970 <__aeabi_fmul>
 8005034:	4971      	ldr	r1, [pc, #452]	; (80051fc <__ieee754_asinf+0x270>)
 8005036:	f7fb fdcd 	bl	8000bd4 <__aeabi_fsub>
 800503a:	1c21      	adds	r1, r4, #0
 800503c:	f7fb fc98 	bl	8000970 <__aeabi_fmul>
 8005040:	496f      	ldr	r1, [pc, #444]	; (8005200 <__ieee754_asinf+0x274>)
 8005042:	f7fb f923 	bl	800028c <__aeabi_fadd>
 8005046:	1c21      	adds	r1, r4, #0
 8005048:	f7fb fc92 	bl	8000970 <__aeabi_fmul>
 800504c:	496d      	ldr	r1, [pc, #436]	; (8005204 <__ieee754_asinf+0x278>)
 800504e:	1c07      	adds	r7, r0, #0
 8005050:	1c20      	adds	r0, r4, #0
 8005052:	f7fb fc8d 	bl	8000970 <__aeabi_fmul>
 8005056:	496c      	ldr	r1, [pc, #432]	; (8005208 <__ieee754_asinf+0x27c>)
 8005058:	f7fb fdbc 	bl	8000bd4 <__aeabi_fsub>
 800505c:	1c21      	adds	r1, r4, #0
 800505e:	f7fb fc87 	bl	8000970 <__aeabi_fmul>
 8005062:	496a      	ldr	r1, [pc, #424]	; (800520c <__ieee754_asinf+0x280>)
 8005064:	f7fb f912 	bl	800028c <__aeabi_fadd>
 8005068:	1c21      	adds	r1, r4, #0
 800506a:	f7fb fc81 	bl	8000970 <__aeabi_fmul>
 800506e:	4968      	ldr	r1, [pc, #416]	; (8005210 <__ieee754_asinf+0x284>)
 8005070:	f7fb fdb0 	bl	8000bd4 <__aeabi_fsub>
 8005074:	1c21      	adds	r1, r4, #0
 8005076:	f7fb fc7b 	bl	8000970 <__aeabi_fmul>
 800507a:	21fe      	movs	r1, #254	; 0xfe
 800507c:	0589      	lsls	r1, r1, #22
 800507e:	f7fb f905 	bl	800028c <__aeabi_fadd>
 8005082:	9001      	str	r0, [sp, #4]
 8005084:	1c20      	adds	r0, r4, #0
 8005086:	f000 f953 	bl	8005330 <__ieee754_sqrtf>
 800508a:	4b62      	ldr	r3, [pc, #392]	; (8005214 <__ieee754_asinf+0x288>)
 800508c:	1c06      	adds	r6, r0, #0
 800508e:	429d      	cmp	r5, r3
 8005090:	dd66      	ble.n	8005160 <__ieee754_asinf+0x1d4>
 8005092:	9901      	ldr	r1, [sp, #4]
 8005094:	1c38      	adds	r0, r7, #0
 8005096:	f7fb fa93 	bl	80005c0 <__aeabi_fdiv>
 800509a:	1c31      	adds	r1, r6, #0
 800509c:	f7fb fc68 	bl	8000970 <__aeabi_fmul>
 80050a0:	1c31      	adds	r1, r6, #0
 80050a2:	f7fb f8f3 	bl	800028c <__aeabi_fadd>
 80050a6:	1c01      	adds	r1, r0, #0
 80050a8:	f7fb f8f0 	bl	800028c <__aeabi_fadd>
 80050ac:	495a      	ldr	r1, [pc, #360]	; (8005218 <__ieee754_asinf+0x28c>)
 80050ae:	f7fb f8ed 	bl	800028c <__aeabi_fadd>
 80050b2:	1c01      	adds	r1, r0, #0
 80050b4:	4848      	ldr	r0, [pc, #288]	; (80051d8 <__ieee754_asinf+0x24c>)
 80050b6:	f7fb fd8d 	bl	8000bd4 <__aeabi_fsub>
 80050ba:	9b02      	ldr	r3, [sp, #8]
 80050bc:	1c04      	adds	r4, r0, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dd00      	ble.n	80050c4 <__ieee754_asinf+0x138>
 80050c2:	e783      	b.n	8004fcc <__ieee754_asinf+0x40>
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	061b      	lsls	r3, r3, #24
 80050c8:	18c4      	adds	r4, r0, r3
 80050ca:	e77f      	b.n	8004fcc <__ieee754_asinf+0x40>
 80050cc:	1c01      	adds	r1, r0, #0
 80050ce:	f7fb fc4f 	bl	8000970 <__aeabi_fmul>
 80050d2:	4946      	ldr	r1, [pc, #280]	; (80051ec <__ieee754_asinf+0x260>)
 80050d4:	1c05      	adds	r5, r0, #0
 80050d6:	f7fb fc4b 	bl	8000970 <__aeabi_fmul>
 80050da:	4945      	ldr	r1, [pc, #276]	; (80051f0 <__ieee754_asinf+0x264>)
 80050dc:	f7fb f8d6 	bl	800028c <__aeabi_fadd>
 80050e0:	1c29      	adds	r1, r5, #0
 80050e2:	f7fb fc45 	bl	8000970 <__aeabi_fmul>
 80050e6:	4943      	ldr	r1, [pc, #268]	; (80051f4 <__ieee754_asinf+0x268>)
 80050e8:	f7fb fd74 	bl	8000bd4 <__aeabi_fsub>
 80050ec:	1c29      	adds	r1, r5, #0
 80050ee:	f7fb fc3f 	bl	8000970 <__aeabi_fmul>
 80050f2:	4941      	ldr	r1, [pc, #260]	; (80051f8 <__ieee754_asinf+0x26c>)
 80050f4:	f7fb f8ca 	bl	800028c <__aeabi_fadd>
 80050f8:	1c29      	adds	r1, r5, #0
 80050fa:	f7fb fc39 	bl	8000970 <__aeabi_fmul>
 80050fe:	493f      	ldr	r1, [pc, #252]	; (80051fc <__ieee754_asinf+0x270>)
 8005100:	f7fb fd68 	bl	8000bd4 <__aeabi_fsub>
 8005104:	1c29      	adds	r1, r5, #0
 8005106:	f7fb fc33 	bl	8000970 <__aeabi_fmul>
 800510a:	493d      	ldr	r1, [pc, #244]	; (8005200 <__ieee754_asinf+0x274>)
 800510c:	f7fb f8be 	bl	800028c <__aeabi_fadd>
 8005110:	1c29      	adds	r1, r5, #0
 8005112:	f7fb fc2d 	bl	8000970 <__aeabi_fmul>
 8005116:	493b      	ldr	r1, [pc, #236]	; (8005204 <__ieee754_asinf+0x278>)
 8005118:	1c06      	adds	r6, r0, #0
 800511a:	1c28      	adds	r0, r5, #0
 800511c:	f7fb fc28 	bl	8000970 <__aeabi_fmul>
 8005120:	4939      	ldr	r1, [pc, #228]	; (8005208 <__ieee754_asinf+0x27c>)
 8005122:	f7fb fd57 	bl	8000bd4 <__aeabi_fsub>
 8005126:	1c29      	adds	r1, r5, #0
 8005128:	f7fb fc22 	bl	8000970 <__aeabi_fmul>
 800512c:	4937      	ldr	r1, [pc, #220]	; (800520c <__ieee754_asinf+0x280>)
 800512e:	f7fb f8ad 	bl	800028c <__aeabi_fadd>
 8005132:	1c29      	adds	r1, r5, #0
 8005134:	f7fb fc1c 	bl	8000970 <__aeabi_fmul>
 8005138:	4935      	ldr	r1, [pc, #212]	; (8005210 <__ieee754_asinf+0x284>)
 800513a:	f7fb fd4b 	bl	8000bd4 <__aeabi_fsub>
 800513e:	1c29      	adds	r1, r5, #0
 8005140:	f7fb fc16 	bl	8000970 <__aeabi_fmul>
 8005144:	21fe      	movs	r1, #254	; 0xfe
 8005146:	0589      	lsls	r1, r1, #22
 8005148:	f7fb f8a0 	bl	800028c <__aeabi_fadd>
 800514c:	1c01      	adds	r1, r0, #0
 800514e:	1c30      	adds	r0, r6, #0
 8005150:	f7fb fa36 	bl	80005c0 <__aeabi_fdiv>
 8005154:	1c21      	adds	r1, r4, #0
 8005156:	f7fb fc0b 	bl	8000970 <__aeabi_fmul>
 800515a:	1c01      	adds	r1, r0, #0
 800515c:	1c20      	adds	r0, r4, #0
 800515e:	e729      	b.n	8004fb4 <__ieee754_asinf+0x28>
 8005160:	1c01      	adds	r1, r0, #0
 8005162:	0b05      	lsrs	r5, r0, #12
 8005164:	f7fb f892 	bl	800028c <__aeabi_fadd>
 8005168:	9901      	ldr	r1, [sp, #4]
 800516a:	9003      	str	r0, [sp, #12]
 800516c:	1c38      	adds	r0, r7, #0
 800516e:	f7fb fa27 	bl	80005c0 <__aeabi_fdiv>
 8005172:	1c01      	adds	r1, r0, #0
 8005174:	9803      	ldr	r0, [sp, #12]
 8005176:	f7fb fbfb 	bl	8000970 <__aeabi_fmul>
 800517a:	032d      	lsls	r5, r5, #12
 800517c:	1c07      	adds	r7, r0, #0
 800517e:	1c29      	adds	r1, r5, #0
 8005180:	1c28      	adds	r0, r5, #0
 8005182:	f7fb fbf5 	bl	8000970 <__aeabi_fmul>
 8005186:	1c01      	adds	r1, r0, #0
 8005188:	1c20      	adds	r0, r4, #0
 800518a:	f7fb fd23 	bl	8000bd4 <__aeabi_fsub>
 800518e:	1c31      	adds	r1, r6, #0
 8005190:	1c04      	adds	r4, r0, #0
 8005192:	1c28      	adds	r0, r5, #0
 8005194:	f7fb f87a 	bl	800028c <__aeabi_fadd>
 8005198:	1c01      	adds	r1, r0, #0
 800519a:	1c20      	adds	r0, r4, #0
 800519c:	f7fb fa10 	bl	80005c0 <__aeabi_fdiv>
 80051a0:	1c01      	adds	r1, r0, #0
 80051a2:	f7fb f873 	bl	800028c <__aeabi_fadd>
 80051a6:	1c01      	adds	r1, r0, #0
 80051a8:	480c      	ldr	r0, [pc, #48]	; (80051dc <__ieee754_asinf+0x250>)
 80051aa:	f7fb fd13 	bl	8000bd4 <__aeabi_fsub>
 80051ae:	1c01      	adds	r1, r0, #0
 80051b0:	1c38      	adds	r0, r7, #0
 80051b2:	f7fb fd0f 	bl	8000bd4 <__aeabi_fsub>
 80051b6:	1c29      	adds	r1, r5, #0
 80051b8:	1c04      	adds	r4, r0, #0
 80051ba:	1c28      	adds	r0, r5, #0
 80051bc:	f7fb f866 	bl	800028c <__aeabi_fadd>
 80051c0:	1c01      	adds	r1, r0, #0
 80051c2:	4816      	ldr	r0, [pc, #88]	; (800521c <__ieee754_asinf+0x290>)
 80051c4:	f7fb fd06 	bl	8000bd4 <__aeabi_fsub>
 80051c8:	1c01      	adds	r1, r0, #0
 80051ca:	1c20      	adds	r0, r4, #0
 80051cc:	f7fb fd02 	bl	8000bd4 <__aeabi_fsub>
 80051d0:	1c01      	adds	r1, r0, #0
 80051d2:	4812      	ldr	r0, [pc, #72]	; (800521c <__ieee754_asinf+0x290>)
 80051d4:	e76f      	b.n	80050b6 <__ieee754_asinf+0x12a>
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	3fc90fdb 	.word	0x3fc90fdb
 80051dc:	b33bbd2e 	.word	0xb33bbd2e
 80051e0:	3effffff 	.word	0x3effffff
 80051e4:	31ffffff 	.word	0x31ffffff
 80051e8:	7149f2ca 	.word	0x7149f2ca
 80051ec:	3811ef08 	.word	0x3811ef08
 80051f0:	3a4f7f04 	.word	0x3a4f7f04
 80051f4:	3d241146 	.word	0x3d241146
 80051f8:	3e4e0aa8 	.word	0x3e4e0aa8
 80051fc:	3ea6b090 	.word	0x3ea6b090
 8005200:	3e2aaaab 	.word	0x3e2aaaab
 8005204:	3d9dc62e 	.word	0x3d9dc62e
 8005208:	3f303361 	.word	0x3f303361
 800520c:	4001572d 	.word	0x4001572d
 8005210:	4019d139 	.word	0x4019d139
 8005214:	3f799999 	.word	0x3f799999
 8005218:	333bbd2e 	.word	0x333bbd2e
 800521c:	3f490fdb 	.word	0x3f490fdb

08005220 <__ieee754_atan2f>:
 8005220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005222:	25ff      	movs	r5, #255	; 0xff
 8005224:	004a      	lsls	r2, r1, #1
 8005226:	9101      	str	r1, [sp, #4]
 8005228:	0852      	lsrs	r2, r2, #1
 800522a:	05ed      	lsls	r5, r5, #23
 800522c:	42aa      	cmp	r2, r5
 800522e:	dc04      	bgt.n	800523a <__ieee754_atan2f+0x1a>
 8005230:	0043      	lsls	r3, r0, #1
 8005232:	0007      	movs	r7, r0
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	42ab      	cmp	r3, r5
 8005238:	dd02      	ble.n	8005240 <__ieee754_atan2f+0x20>
 800523a:	f7fb f827 	bl	800028c <__aeabi_fadd>
 800523e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005240:	24fe      	movs	r4, #254	; 0xfe
 8005242:	05a4      	lsls	r4, r4, #22
 8005244:	42a1      	cmp	r1, r4
 8005246:	d102      	bne.n	800524e <__ieee754_atan2f+0x2e>
 8005248:	f7ff fce6 	bl	8004c18 <atanf>
 800524c:	e7f7      	b.n	800523e <__ieee754_atan2f+0x1e>
 800524e:	2602      	movs	r6, #2
 8005250:	178c      	asrs	r4, r1, #30
 8005252:	4034      	ands	r4, r6
 8005254:	0fc6      	lsrs	r6, r0, #31
 8005256:	4334      	orrs	r4, r6
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <__ieee754_atan2f+0x48>
 800525c:	2c02      	cmp	r4, #2
 800525e:	d050      	beq.n	8005302 <__ieee754_atan2f+0xe2>
 8005260:	2c03      	cmp	r4, #3
 8005262:	d1ec      	bne.n	800523e <__ieee754_atan2f+0x1e>
 8005264:	4829      	ldr	r0, [pc, #164]	; (800530c <__ieee754_atan2f+0xec>)
 8005266:	e7ea      	b.n	800523e <__ieee754_atan2f+0x1e>
 8005268:	2a00      	cmp	r2, #0
 800526a:	d103      	bne.n	8005274 <__ieee754_atan2f+0x54>
 800526c:	2f00      	cmp	r7, #0
 800526e:	da4a      	bge.n	8005306 <__ieee754_atan2f+0xe6>
 8005270:	4827      	ldr	r0, [pc, #156]	; (8005310 <__ieee754_atan2f+0xf0>)
 8005272:	e7e4      	b.n	800523e <__ieee754_atan2f+0x1e>
 8005274:	42aa      	cmp	r2, r5
 8005276:	d117      	bne.n	80052a8 <__ieee754_atan2f+0x88>
 8005278:	4293      	cmp	r3, r2
 800527a:	d10b      	bne.n	8005294 <__ieee754_atan2f+0x74>
 800527c:	2c02      	cmp	r4, #2
 800527e:	d005      	beq.n	800528c <__ieee754_atan2f+0x6c>
 8005280:	2c03      	cmp	r4, #3
 8005282:	d005      	beq.n	8005290 <__ieee754_atan2f+0x70>
 8005284:	2c01      	cmp	r4, #1
 8005286:	d13a      	bne.n	80052fe <__ieee754_atan2f+0xde>
 8005288:	4822      	ldr	r0, [pc, #136]	; (8005314 <__ieee754_atan2f+0xf4>)
 800528a:	e7d8      	b.n	800523e <__ieee754_atan2f+0x1e>
 800528c:	4822      	ldr	r0, [pc, #136]	; (8005318 <__ieee754_atan2f+0xf8>)
 800528e:	e7d6      	b.n	800523e <__ieee754_atan2f+0x1e>
 8005290:	4822      	ldr	r0, [pc, #136]	; (800531c <__ieee754_atan2f+0xfc>)
 8005292:	e7d4      	b.n	800523e <__ieee754_atan2f+0x1e>
 8005294:	2c02      	cmp	r4, #2
 8005296:	d034      	beq.n	8005302 <__ieee754_atan2f+0xe2>
 8005298:	2c03      	cmp	r4, #3
 800529a:	d0e3      	beq.n	8005264 <__ieee754_atan2f+0x44>
 800529c:	2000      	movs	r0, #0
 800529e:	2c01      	cmp	r4, #1
 80052a0:	d1cd      	bne.n	800523e <__ieee754_atan2f+0x1e>
 80052a2:	2080      	movs	r0, #128	; 0x80
 80052a4:	0600      	lsls	r0, r0, #24
 80052a6:	e7ca      	b.n	800523e <__ieee754_atan2f+0x1e>
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	d0df      	beq.n	800526c <__ieee754_atan2f+0x4c>
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	15db      	asrs	r3, r3, #23
 80052b0:	2b3c      	cmp	r3, #60	; 0x3c
 80052b2:	dc14      	bgt.n	80052de <__ieee754_atan2f+0xbe>
 80052b4:	2900      	cmp	r1, #0
 80052b6:	da01      	bge.n	80052bc <__ieee754_atan2f+0x9c>
 80052b8:	333c      	adds	r3, #60	; 0x3c
 80052ba:	db12      	blt.n	80052e2 <__ieee754_atan2f+0xc2>
 80052bc:	f7fb f980 	bl	80005c0 <__aeabi_fdiv>
 80052c0:	f7ff fdbc 	bl	8004e3c <fabsf>
 80052c4:	f7ff fca8 	bl	8004c18 <atanf>
 80052c8:	2c01      	cmp	r4, #1
 80052ca:	d00c      	beq.n	80052e6 <__ieee754_atan2f+0xc6>
 80052cc:	2c02      	cmp	r4, #2
 80052ce:	d00e      	beq.n	80052ee <__ieee754_atan2f+0xce>
 80052d0:	2c00      	cmp	r4, #0
 80052d2:	d0b4      	beq.n	800523e <__ieee754_atan2f+0x1e>
 80052d4:	4912      	ldr	r1, [pc, #72]	; (8005320 <__ieee754_atan2f+0x100>)
 80052d6:	f7fa ffd9 	bl	800028c <__aeabi_fadd>
 80052da:	4912      	ldr	r1, [pc, #72]	; (8005324 <__ieee754_atan2f+0x104>)
 80052dc:	e00c      	b.n	80052f8 <__ieee754_atan2f+0xd8>
 80052de:	4812      	ldr	r0, [pc, #72]	; (8005328 <__ieee754_atan2f+0x108>)
 80052e0:	e7f2      	b.n	80052c8 <__ieee754_atan2f+0xa8>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e7f0      	b.n	80052c8 <__ieee754_atan2f+0xa8>
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	18c0      	adds	r0, r0, r3
 80052ec:	e7a7      	b.n	800523e <__ieee754_atan2f+0x1e>
 80052ee:	490c      	ldr	r1, [pc, #48]	; (8005320 <__ieee754_atan2f+0x100>)
 80052f0:	f7fa ffcc 	bl	800028c <__aeabi_fadd>
 80052f4:	1c01      	adds	r1, r0, #0
 80052f6:	480b      	ldr	r0, [pc, #44]	; (8005324 <__ieee754_atan2f+0x104>)
 80052f8:	f7fb fc6c 	bl	8000bd4 <__aeabi_fsub>
 80052fc:	e79f      	b.n	800523e <__ieee754_atan2f+0x1e>
 80052fe:	480b      	ldr	r0, [pc, #44]	; (800532c <__ieee754_atan2f+0x10c>)
 8005300:	e79d      	b.n	800523e <__ieee754_atan2f+0x1e>
 8005302:	4808      	ldr	r0, [pc, #32]	; (8005324 <__ieee754_atan2f+0x104>)
 8005304:	e79b      	b.n	800523e <__ieee754_atan2f+0x1e>
 8005306:	4808      	ldr	r0, [pc, #32]	; (8005328 <__ieee754_atan2f+0x108>)
 8005308:	e799      	b.n	800523e <__ieee754_atan2f+0x1e>
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	c0490fdb 	.word	0xc0490fdb
 8005310:	bfc90fdb 	.word	0xbfc90fdb
 8005314:	bf490fdb 	.word	0xbf490fdb
 8005318:	4016cbe4 	.word	0x4016cbe4
 800531c:	c016cbe4 	.word	0xc016cbe4
 8005320:	33bbbd2e 	.word	0x33bbbd2e
 8005324:	40490fdb 	.word	0x40490fdb
 8005328:	3fc90fdb 	.word	0x3fc90fdb
 800532c:	3f490fdb 	.word	0x3f490fdb

08005330 <__ieee754_sqrtf>:
 8005330:	4929      	ldr	r1, [pc, #164]	; (80053d8 <__ieee754_sqrtf+0xa8>)
 8005332:	0043      	lsls	r3, r0, #1
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	0002      	movs	r2, r0
 8005338:	1c04      	adds	r4, r0, #0
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	428b      	cmp	r3, r1
 800533e:	d909      	bls.n	8005354 <__ieee754_sqrtf+0x24>
 8005340:	1c01      	adds	r1, r0, #0
 8005342:	f7fb fb15 	bl	8000970 <__aeabi_fmul>
 8005346:	1c01      	adds	r1, r0, #0
 8005348:	1c20      	adds	r0, r4, #0
 800534a:	f7fa ff9f 	bl	800028c <__aeabi_fadd>
 800534e:	1c04      	adds	r4, r0, #0
 8005350:	1c20      	adds	r0, r4, #0
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0fb      	beq.n	8005350 <__ieee754_sqrtf+0x20>
 8005358:	2800      	cmp	r0, #0
 800535a:	da06      	bge.n	800536a <__ieee754_sqrtf+0x3a>
 800535c:	1c01      	adds	r1, r0, #0
 800535e:	f7fb fc39 	bl	8000bd4 <__aeabi_fsub>
 8005362:	1c01      	adds	r1, r0, #0
 8005364:	f7fb f92c 	bl	80005c0 <__aeabi_fdiv>
 8005368:	e7f1      	b.n	800534e <__ieee754_sqrtf+0x1e>
 800536a:	491c      	ldr	r1, [pc, #112]	; (80053dc <__ieee754_sqrtf+0xac>)
 800536c:	15c4      	asrs	r4, r0, #23
 800536e:	428b      	cmp	r3, r1
 8005370:	d92d      	bls.n	80053ce <__ieee754_sqrtf+0x9e>
 8005372:	0252      	lsls	r2, r2, #9
 8005374:	0a53      	lsrs	r3, r2, #9
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	3c7f      	subs	r4, #127	; 0x7f
 800537a:	0412      	lsls	r2, r2, #16
 800537c:	431a      	orrs	r2, r3
 800537e:	07e3      	lsls	r3, r4, #31
 8005380:	d500      	bpl.n	8005384 <__ieee754_sqrtf+0x54>
 8005382:	0052      	lsls	r2, r2, #1
 8005384:	2300      	movs	r3, #0
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	2019      	movs	r0, #25
 800538a:	001e      	movs	r6, r3
 800538c:	1064      	asrs	r4, r4, #1
 800538e:	0052      	lsls	r2, r2, #1
 8005390:	0449      	lsls	r1, r1, #17
 8005392:	1875      	adds	r5, r6, r1
 8005394:	4295      	cmp	r5, r2
 8005396:	dc02      	bgt.n	800539e <__ieee754_sqrtf+0x6e>
 8005398:	186e      	adds	r6, r5, r1
 800539a:	1b52      	subs	r2, r2, r5
 800539c:	185b      	adds	r3, r3, r1
 800539e:	3801      	subs	r0, #1
 80053a0:	0052      	lsls	r2, r2, #1
 80053a2:	0849      	lsrs	r1, r1, #1
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1f4      	bne.n	8005392 <__ieee754_sqrtf+0x62>
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d002      	beq.n	80053b2 <__ieee754_sqrtf+0x82>
 80053ac:	2201      	movs	r2, #1
 80053ae:	3301      	adds	r3, #1
 80053b0:	4393      	bics	r3, r2
 80053b2:	22fc      	movs	r2, #252	; 0xfc
 80053b4:	105b      	asrs	r3, r3, #1
 80053b6:	0592      	lsls	r2, r2, #22
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	05e4      	lsls	r4, r4, #23
 80053bc:	18e4      	adds	r4, r4, r3
 80053be:	e7c7      	b.n	8005350 <__ieee754_sqrtf+0x20>
 80053c0:	0052      	lsls	r2, r2, #1
 80053c2:	3301      	adds	r3, #1
 80053c4:	420a      	tst	r2, r1
 80053c6:	d0fb      	beq.n	80053c0 <__ieee754_sqrtf+0x90>
 80053c8:	3b01      	subs	r3, #1
 80053ca:	1ae4      	subs	r4, r4, r3
 80053cc:	e7d1      	b.n	8005372 <__ieee754_sqrtf+0x42>
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	2300      	movs	r3, #0
 80053d2:	0409      	lsls	r1, r1, #16
 80053d4:	e7f6      	b.n	80053c4 <__ieee754_sqrtf+0x94>
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	7f7fffff 	.word	0x7f7fffff
 80053dc:	007fffff 	.word	0x007fffff

080053e0 <matherr>:
 80053e0:	2000      	movs	r0, #0
 80053e2:	4770      	bx	lr

080053e4 <nan>:
 80053e4:	2000      	movs	r0, #0
 80053e6:	4901      	ldr	r1, [pc, #4]	; (80053ec <nan+0x8>)
 80053e8:	4770      	bx	lr
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	7ff80000 	.word	0x7ff80000

080053f0 <__errno>:
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <__errno+0x8>)
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	4770      	bx	lr
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	2000000c 	.word	0x2000000c

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	2600      	movs	r6, #0
 8005400:	4d0c      	ldr	r5, [pc, #48]	; (8005434 <__libc_init_array+0x38>)
 8005402:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005404:	1b64      	subs	r4, r4, r5
 8005406:	10a4      	asrs	r4, r4, #2
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	2600      	movs	r6, #0
 800540e:	f000 f877 	bl	8005500 <_init>
 8005412:	4d0a      	ldr	r5, [pc, #40]	; (800543c <__libc_init_array+0x40>)
 8005414:	4c0a      	ldr	r4, [pc, #40]	; (8005440 <__libc_init_array+0x44>)
 8005416:	1b64      	subs	r4, r4, r5
 8005418:	10a4      	asrs	r4, r4, #2
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	00b3      	lsls	r3, r6, #2
 8005422:	58eb      	ldr	r3, [r5, r3]
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	00b3      	lsls	r3, r6, #2
 800542c:	58eb      	ldr	r3, [r5, r3]
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	080056d4 	.word	0x080056d4
 8005438:	080056d4 	.word	0x080056d4
 800543c:	080056d4 	.word	0x080056d4
 8005440:	080056dc 	.word	0x080056dc

08005444 <free>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4b03      	ldr	r3, [pc, #12]	; (8005454 <free+0x10>)
 8005448:	0001      	movs	r1, r0
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	f000 f80c 	bl	8005468 <_free_r>
 8005450:	bd10      	pop	{r4, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	2000000c 	.word	0x2000000c

08005458 <memset>:
 8005458:	0003      	movs	r3, r0
 800545a:	1812      	adds	r2, r2, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	d100      	bne.n	8005462 <memset+0xa>
 8005460:	4770      	bx	lr
 8005462:	7019      	strb	r1, [r3, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	e7f9      	b.n	800545c <memset+0x4>

08005468 <_free_r>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	0005      	movs	r5, r0
 800546c:	2900      	cmp	r1, #0
 800546e:	d010      	beq.n	8005492 <_free_r+0x2a>
 8005470:	1f0c      	subs	r4, r1, #4
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	da00      	bge.n	800547a <_free_r+0x12>
 8005478:	18e4      	adds	r4, r4, r3
 800547a:	0028      	movs	r0, r5
 800547c:	f000 f83e 	bl	80054fc <__malloc_lock>
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <_free_r+0x90>)
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d105      	bne.n	8005494 <_free_r+0x2c>
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	6014      	str	r4, [r2, #0]
 800548c:	0028      	movs	r0, r5
 800548e:	f000 f836 	bl	80054fe <__malloc_unlock>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	42a3      	cmp	r3, r4
 8005496:	d909      	bls.n	80054ac <_free_r+0x44>
 8005498:	6821      	ldr	r1, [r4, #0]
 800549a:	1860      	adds	r0, r4, r1
 800549c:	4283      	cmp	r3, r0
 800549e:	d1f3      	bne.n	8005488 <_free_r+0x20>
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	1841      	adds	r1, r0, r1
 80054a6:	6021      	str	r1, [r4, #0]
 80054a8:	e7ee      	b.n	8005488 <_free_r+0x20>
 80054aa:	0013      	movs	r3, r2
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	d001      	beq.n	80054b6 <_free_r+0x4e>
 80054b2:	42a2      	cmp	r2, r4
 80054b4:	d9f9      	bls.n	80054aa <_free_r+0x42>
 80054b6:	6819      	ldr	r1, [r3, #0]
 80054b8:	1858      	adds	r0, r3, r1
 80054ba:	42a0      	cmp	r0, r4
 80054bc:	d10b      	bne.n	80054d6 <_free_r+0x6e>
 80054be:	6820      	ldr	r0, [r4, #0]
 80054c0:	1809      	adds	r1, r1, r0
 80054c2:	1858      	adds	r0, r3, r1
 80054c4:	6019      	str	r1, [r3, #0]
 80054c6:	4282      	cmp	r2, r0
 80054c8:	d1e0      	bne.n	800548c <_free_r+0x24>
 80054ca:	6810      	ldr	r0, [r2, #0]
 80054cc:	6852      	ldr	r2, [r2, #4]
 80054ce:	1841      	adds	r1, r0, r1
 80054d0:	6019      	str	r1, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	e7da      	b.n	800548c <_free_r+0x24>
 80054d6:	42a0      	cmp	r0, r4
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x78>
 80054da:	230c      	movs	r3, #12
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	e7d5      	b.n	800548c <_free_r+0x24>
 80054e0:	6821      	ldr	r1, [r4, #0]
 80054e2:	1860      	adds	r0, r4, r1
 80054e4:	4282      	cmp	r2, r0
 80054e6:	d103      	bne.n	80054f0 <_free_r+0x88>
 80054e8:	6810      	ldr	r0, [r2, #0]
 80054ea:	6852      	ldr	r2, [r2, #4]
 80054ec:	1841      	adds	r1, r0, r1
 80054ee:	6021      	str	r1, [r4, #0]
 80054f0:	6062      	str	r2, [r4, #4]
 80054f2:	605c      	str	r4, [r3, #4]
 80054f4:	e7ca      	b.n	800548c <_free_r+0x24>
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	2000114c 	.word	0x2000114c

080054fc <__malloc_lock>:
 80054fc:	4770      	bx	lr

080054fe <__malloc_unlock>:
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
