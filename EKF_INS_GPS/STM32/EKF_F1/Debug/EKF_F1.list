
EKF_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a60  08004a60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a60  08004a60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a60  08004a60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001134  20000070  08004ae0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011a4  08004ae0  000211a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e29f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f31  00000000  00000000  0002e338  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00030ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f91  00000000  00000000  00031c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4b4  00000000  00000000  0004bc21  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e203  00000000  00000000  000560d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  000e42d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000e43c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000148c  00000000  00000000  000e8174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080049e0 	.word	0x080049e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080049e0 	.word	0x080049e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpun>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__aeabi_fcmpun+0x14>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_fcmpun+0x20>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d102      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0001 	mov.w	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f003 f9e9 	bl	8004340 <asinf>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f003 fa29 	bl	80043dc <atan2f>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f003 fa1f 	bl	80043e0 <sqrtf>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffbc 	bl	8000f34 <__aeabi_fcmpun>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZSt5isnanf+0x1a>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <_ZSt5isnanf+0x1c>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN4EKF27loadEKFEv>:
	          0, 0, 0,1,0, 0, 0,
	          0, 0, 0, 0,1,0, 0,
	          0, 0, 0, 0, 0,1,0,
	          0, 0, 0, 0, 0, 0,1};
public:
	void loadEKF(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
		 arm_mat_init_f32(&x,  7,1, x_);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	f003 f821 	bl	800402c <arm_mat_init_f32>
		  arm_mat_init_f32(&P, 7, 7, P_full);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	33e4      	adds	r3, #228	; 0xe4
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	f003 f818 	bl	800402c <arm_mat_init_f32>
		  arm_mat_init_f32(&Q, 7, 7, Q_full);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3320      	adds	r3, #32
 8001006:	2207      	movs	r2, #7
 8001008:	2107      	movs	r1, #7
 800100a:	f003 f80f 	bl	800402c <arm_mat_init_f32>
		  arm_mat_init_f32(&R, 6, 6, R_full1);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800101a:	2206      	movs	r2, #6
 800101c:	2106      	movs	r1, #6
 800101e:	f003 f805 	bl	800402c <arm_mat_init_f32>
		  arm_mat_init_f32(&temp1, 7, 1, temp1_);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800102e:	2201      	movs	r2, #1
 8001030:	2107      	movs	r1, #7
 8001032:	f002 fffb 	bl	800402c <arm_mat_init_f32>
		  arm_mat_init_f32(&temp2, 7, 1, temp2_);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001042:	2201      	movs	r2, #1
 8001044:	2107      	movs	r1, #7
 8001046:	f002 fff1 	bl	800402c <arm_mat_init_f32>
		  arm_mat_init_f32(&temp3, 7, 7, temp3_);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001056:	2207      	movs	r2, #7
 8001058:	2107      	movs	r1, #7
 800105a:	f002 ffe7 	bl	800402c <arm_mat_init_f32>
		  for(uint8_t i = 0; i<49;i++){
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b30      	cmp	r3, #48	; 0x30
 8001066:	d836      	bhi.n	80010d6 <_ZN4EKF27loadEKFEv+0x106>
			  A_[i] = 0;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
			  AT_[i] = 0;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f502 72b7 	add.w	r2, r2, #366	; 0x16e
 8001082:	f04f 0100 	mov.w	r1, #0
 8001086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  B_[i] = 0;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
			  Kino_[i] = 0;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f502 72ef 	add.w	r2, r2, #478	; 0x1de
 80010a4:	f04f 0100 	mov.w	r1, #0
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  KH_[i] = 0;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f202 3212 	addw	r2, r2, #786	; 0x312
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  IKH_[i] = 0;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	f203 230e 	addw	r3, r3, #526	; 0x20e
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
		  for(uint8_t i = 0; i<49;i++){
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e7c5      	b.n	8001062 <_ZN4EKF27loadEKFEv+0x92>
		  }

		  for(uint8_t i = 0; i<42;i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	73bb      	strb	r3, [r7, #14]
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	2b29      	cmp	r3, #41	; 0x29
 80010de:	d823      	bhi.n	8001128 <_ZN4EKF27loadEKFEv+0x158>
			  H_[i] = 0;
 80010e0:	7bba      	ldrb	r2, [r7, #14]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f202 22be 	addw	r2, r2, #702	; 0x2be
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  K_[i] = 0;
 80010f0:	7bba      	ldrb	r2, [r7, #14]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f502 723a 	add.w	r2, r2, #744	; 0x2e8
 80010f8:	f04f 0100 	mov.w	r1, #0
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  PHT_[i] = 0;
 8001100:	7bba      	ldrb	r2, [r7, #14]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f202 2246 	addw	r2, r2, #582	; 0x246
 8001108:	f04f 0100 	mov.w	r1, #0
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  HT_[i] = 0;
 8001110:	7bba      	ldrb	r2, [r7, #14]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001118:	f04f 0100 	mov.w	r1, #0
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  for(uint8_t i = 0; i<42;i++){
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	3301      	adds	r3, #1
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	e7d8      	b.n	80010da <_ZN4EKF27loadEKFEv+0x10a>
		  }

		  for(uint8_t i = 0; i<36;i++){
 8001128:	2300      	movs	r3, #0
 800112a:	737b      	strb	r3, [r7, #13]
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	2b23      	cmp	r3, #35	; 0x23
 8001130:	d81d      	bhi.n	800116e <_ZN4EKF27loadEKFEv+0x19e>
			  HPHT_[i] = 0;
 8001132:	7b7a      	ldrb	r2, [r7, #13]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f202 229a 	addw	r2, r2, #666	; 0x29a
 800113a:	f04f 0100 	mov.w	r1, #0
 800113e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  S_[i] = 0;
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	f203 3342 	addw	r3, r3, #834	; 0x342
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
			  Sinv_[i] = 0;
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	f203 3366 	addw	r3, r3, #870	; 0x366
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
		  for(uint8_t i = 0; i<36;i++){
 8001166:	7b7b      	ldrb	r3, [r7, #13]
 8001168:	3301      	adds	r3, #1
 800116a:	737b      	strb	r3, [r7, #13]
 800116c:	e7de      	b.n	800112c <_ZN4EKF27loadEKFEv+0x15c>
		  }
	}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf>:
	EKF2();
	void updateEKF(IMU_data data_imu, MAG_data mag, float dt){
 8001178:	b084      	sub	sp, #16
 800117a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117c:	b09b      	sub	sp, #108	; 0x6c
 800117e:	af02      	add	r7, sp, #8
 8001180:	6178      	str	r0, [r7, #20]
 8001182:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//          quaternion state ;
          float recipNorm;
          if(!isnan(data_imu.Acc_x) &&!isnan(data_imu.Acc_y)&&!isnan(data_imu.Acc_z)&&!isnan(data_imu.Gyro_x)&&!isnan(data_imu.Gyro_y)&&!isnan(data_imu.Gyro_z)){
 800118a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff0c 	bl	8000fac <_ZSt5isnanf>
 8001194:	4603      	mov	r3, r0
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d037      	beq.n	8001210 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x98>
 80011a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff01 	bl	8000fac <_ZSt5isnanf>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d02c      	beq.n	8001210 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x98>
 80011b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fef6 	bl	8000fac <_ZSt5isnanf>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f083 0301 	eor.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d021      	beq.n	8001210 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x98>
 80011cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff feec 	bl	8000fac <_ZSt5isnanf>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d017      	beq.n	8001210 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x98>
 80011e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fee1 	bl	8000fac <_ZSt5isnanf>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00c      	beq.n	8001210 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x98>
 80011f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fed6 	bl	8000fac <_ZSt5isnanf>
 8001200:	4603      	mov	r3, r0
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x98>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x9a>
 8001210:	2300      	movs	r3, #0
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 84bc 	beq.w	8001b90 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0xa18>
        	  w_[0] = Gyro_x*DEC2RAD;
 8001218:	4bc3      	ldr	r3, [pc, #780]	; (8001528 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f8fb 	bl	8000418 <__aeabi_f2d>
 8001222:	a3bf      	add	r3, pc, #764	; (adr r3, 8001520 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3a8>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff f94e 	bl	80004c8 <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	f7ff fb5a 	bl	80008ec <__aeabi_d2f>
 8001238:	4602      	mov	r2, r0
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8c3 2f4c 	str.w	r2, [r3, #3916]	; 0xf4c
        	 	  w_[1] = Gyro_y*DEC2RAD;
 8001240:	4bba      	ldr	r3, [pc, #744]	; (800152c <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3b4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f8e7 	bl	8000418 <__aeabi_f2d>
 800124a:	a3b5      	add	r3, pc, #724	; (adr r3, 8001520 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3a8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f93a 	bl	80004c8 <__aeabi_dmul>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	4618      	mov	r0, r3
 800125a:	4621      	mov	r1, r4
 800125c:	f7ff fb46 	bl	80008ec <__aeabi_d2f>
 8001260:	4602      	mov	r2, r0
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8c3 2f50 	str.w	r2, [r3, #3920]	; 0xf50
        	 	  w_[2] = Gyro_z*DEC2RAD;
 8001268:	4bb1      	ldr	r3, [pc, #708]	; (8001530 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3b8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f8d3 	bl	8000418 <__aeabi_f2d>
 8001272:	a3ab      	add	r3, pc, #684	; (adr r3, 8001520 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3a8>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f926 	bl	80004c8 <__aeabi_dmul>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4618      	mov	r0, r3
 8001282:	4621      	mov	r1, r4
 8001284:	f7ff fb32 	bl	80008ec <__aeabi_d2f>
 8001288:	4602      	mov	r2, r0
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 2f54 	str.w	r2, [r3, #3924]	; 0xf54

        	 	  y_[0] = data_imu.Acc_x;
 8001290:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
        	 	  y_[1] = data_imu.Acc_y;
 800129a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        	 	  y_[2] = data_imu.Acc_z;
 80012a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

        	 	  y_[3] = mag.Mag_x;
 80012ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        	 	  y_[4] = mag.Mag_y;
 80012b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        	 	  y_[5] = mag.Mag_z;
 80012c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0


        	 	  float32_t x0,x1,x2,x3,x0_,x1_,x2_,x3_,x02,x12,x22,x32,x02_,x12_,x22_,x32_;
        	 	  x0 = x_[0]*0.5*dt;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f8a1 	bl	8000418 <__aeabi_f2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b96      	ldr	r3, [pc, #600]	; (8001534 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3bc>)
 80012dc:	f7ff f8f4 	bl	80004c8 <__aeabi_dmul>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	4625      	mov	r5, r4
 80012e6:	461c      	mov	r4, r3
 80012e8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80012ec:	f7ff f894 	bl	8000418 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7ff f8e6 	bl	80004c8 <__aeabi_dmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	4618      	mov	r0, r3
 8001302:	4621      	mov	r1, r4
 8001304:	f7ff faf2 	bl	80008ec <__aeabi_d2f>
 8001308:	4603      	mov	r3, r0
 800130a:	65fb      	str	r3, [r7, #92]	; 0x5c
        	 	  x1 = x_[1]*0.5*dt;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f881 	bl	8000418 <__aeabi_f2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b86      	ldr	r3, [pc, #536]	; (8001534 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3bc>)
 800131c:	f7ff f8d4 	bl	80004c8 <__aeabi_dmul>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4625      	mov	r5, r4
 8001326:	461c      	mov	r4, r3
 8001328:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800132c:	f7ff f874 	bl	8000418 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7ff f8c6 	bl	80004c8 <__aeabi_dmul>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	4618      	mov	r0, r3
 8001342:	4621      	mov	r1, r4
 8001344:	f7ff fad2 	bl	80008ec <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	65bb      	str	r3, [r7, #88]	; 0x58
        	 	  x2 = x_[2]*0.5*dt;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f861 	bl	8000418 <__aeabi_f2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3bc>)
 800135c:	f7ff f8b4 	bl	80004c8 <__aeabi_dmul>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4625      	mov	r5, r4
 8001366:	461c      	mov	r4, r3
 8001368:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800136c:	f7ff f854 	bl	8000418 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7ff f8a6 	bl	80004c8 <__aeabi_dmul>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f7ff fab2 	bl	80008ec <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	657b      	str	r3, [r7, #84]	; 0x54
        	 	  x3 = x_[3]*0.5*dt;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f841 	bl	8000418 <__aeabi_f2d>
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b66      	ldr	r3, [pc, #408]	; (8001534 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3bc>)
 800139c:	f7ff f894 	bl	80004c8 <__aeabi_dmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	4625      	mov	r5, r4
 80013a6:	461c      	mov	r4, r3
 80013a8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80013ac:	f7ff f834 	bl	8000418 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f886 	bl	80004c8 <__aeabi_dmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	f7ff fa92 	bl	80008ec <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	653b      	str	r3, [r7, #80]	; 0x50

        	 	  x0_ = -x0;
 80013cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
        	 	  x1_ = -x1;
 80013d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
        	 	  x2_ = -x2;
 80013dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
        	 	  x3_ = -x3;
 80013e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40

        	 	  A_[0] = 1;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f2:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
        	 	           A_[8] = 1;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013fc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        	 	           A_[16] = 1;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001406:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
        	 	           A_[24] = 1;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001410:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
        	 	           A_[32] = 1;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800141a:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
        	 	           A_[40] = 1;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001424:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
        	 	           A_[48] = 1;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800142e:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4

        	 	           A_[4] = x1;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001436:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        	 	           A_[5] = x2;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800143e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        	 	           A_[6] = x3;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001446:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

        	 	           A_[11] = x0_;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800144e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        	 	           A_[12] = x3;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001456:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
        	 	           A_[13] = x2_;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800145e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

        	 	           A_[18] = x3_;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001466:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
        	 	           A_[19] = x0_;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800146e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
        	 	           A_[20] = x1;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001476:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544

        	 	           A_[25] = x2;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800147e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        	 	           A_[26] = x1_;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001486:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
        	 	           A_[27] = x0_;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800148e:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560

        	 	           B_[0] = x1_;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001496:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
        	 	           B_[1] = x2_;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800149e:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
        	 	           B_[2] = x3_;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014a6:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684

        	 	           B_[3] = x0;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014ae:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        	 	           B_[4] = x3_;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014b6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
        	 	           B_[5] = x2;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014be:	f8c3 2690 	str.w	r2, [r3, #1680]	; 0x690

        	 	           B_[6] = x3;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014c6:	f8c3 2694 	str.w	r2, [r3, #1684]	; 0x694
        	 	           B_[7] = x0;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014ce:	f8c3 2698 	str.w	r2, [r3, #1688]	; 0x698
        	 	           B_[8] = x1_;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014d6:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c

        	 	           B_[9] = x2_;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014de:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0
        	 	           B_[10] = x1;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014e6:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
        	 	           B_[11] = x0;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014ee:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
        	 	  arm_mat_init_f32(&A,7,7,A_);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f503 7012 	add.w	r0, r3, #584	; 0x248
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 80014fe:	2207      	movs	r2, #7
 8001500:	2107      	movs	r1, #7
 8001502:	f002 fd93 	bl	800402c <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&B,7,3,B_);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f503 7016 	add.w	r0, r3, #600	; 0x258
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8001512:	2203      	movs	r2, #3
 8001514:	2107      	movs	r1, #7
 8001516:	f002 fd89 	bl	800402c <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&w,3,1,w_);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	e00c      	b.n	8001538 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf+0x3c0>
 800151e:	bf00      	nop
 8001520:	a226e211 	.word	0xa226e211
 8001524:	3f91df46 	.word	0x3f91df46
 8001528:	200000a8 	.word	0x200000a8
 800152c:	200000ac 	.word	0x200000ac
 8001530:	200000b0 	.word	0x200000b0
 8001534:	3fe00000 	.word	0x3fe00000
 8001538:	f503 7026 	add.w	r0, r3, #664	; 0x298
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f603 734c 	addw	r3, r3, #3916	; 0xf4c
 8001542:	2201      	movs	r2, #1
 8001544:	2103      	movs	r1, #3
 8001546:	f002 fd71 	bl	800402c <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&temp2,7,1,temp2_);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001556:	2201      	movs	r2, #1
 8001558:	2107      	movs	r1, #7
 800155a:	f002 fd67 	bl	800402c <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&AT,7,7,AT_);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800156a:	2207      	movs	r2, #7
 800156c:	2107      	movs	r1, #7
 800156e:	f002 fd5d 	bl	800402c <arm_mat_init_f32>
        	 	  arm_mat_init_f32(&temp4,7,7,temp4_);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800157e:	2207      	movs	r2, #7
 8001580:	2107      	movs	r1, #7
 8001582:	f002 fd53 	bl	800402c <arm_mat_init_f32>

        	 	  status = arm_mat_mult_f32 (&A, &x, &temp1);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f503 710e 	add.w	r1, r3, #568	; 0x238
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8001598:	461a      	mov	r2, r3
 800159a:	f002 fb31 	bl	8003c00 <arm_mat_mult_f32>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	  status = arm_mat_mult_f32 (&B, &w, &temp2);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f503 7016 	add.w	r0, r3, #600	; 0x258
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80015ba:	461a      	mov	r2, r3
 80015bc:	f002 fb20 	bl	8003c00 <arm_mat_mult_f32>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

        	 	  status = arm_mat_add_f32 (&temp1, &temp2,&x);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80015dc:	461a      	mov	r2, r3
 80015de:	f002 fd29 	bl	8004034 <arm_mat_add_f32>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	  status = arm_mat_mult_f32 (&A, &P, &temp3);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f503 7012 	add.w	r0, r3, #584	; 0x248
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f503 7118 	add.w	r1, r3, #608	; 0x260
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80015fe:	461a      	mov	r2, r3
 8001600:	f002 fafe 	bl	8003c00 <arm_mat_mult_f32>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

        	 	  status = arm_mat_trans_f32 (&A, &AT);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f503 7212 	add.w	r2, r3, #584	; 0x248
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f002 fa13 	bl	8003a48 <arm_mat_trans_f32>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	  status = arm_mat_mult_f32 (&temp3, &AT, &temp4);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f503 7114 	add.w	r1, r3, #592	; 0x250
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800163e:	461a      	mov	r2, r3
 8001640:	f002 fade 	bl	8003c00 <arm_mat_mult_f32>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 //
        	 	  status = arm_mat_add_f32 (&temp4, &Q, &P);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f503 711a 	add.w	r1, r3, #616	; 0x268
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001660:	461a      	mov	r2, r3
 8001662:	f002 fce7 	bl	8004034 <arm_mat_add_f32>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

        	 	  x02 = x_[0]*(-2);
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa95 	bl	8000ba8 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
        	 	  x12 = x_[1]*(-2);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa8c 	bl	8000ba8 <__aeabi_fmul>
 8001690:	4603      	mov	r3, r0
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
        	 	  x22 = x_[2]*(-2);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa83 	bl	8000ba8 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
        	 	  x32 = x_[3]*(-2);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fa7a 	bl	8000ba8 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30

        	 	  x02_ = -x02;
 80016b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
        	 	  x12_ = -x12;
 80016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
        	 	  x22_ = -x22;
 80016c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
        	 	  x32_ = -x32;
 80016d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016d6:	623b      	str	r3, [r7, #32]

        	 	  H_[0] = x22_;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
        	 	  H_[1] = x32;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016e4:	f8c3 2afc 	str.w	r2, [r3, #2812]	; 0xafc
        	 	  H_[2] = x02_;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        	 	  H_[3] = x12;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016f4:	f8c3 2b04 	str.w	r2, [r3, #2820]	; 0xb04

        	 	  H_[7] = x12;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016fc:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
        	 	  H_[8] = x02;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001704:	f8c3 2b18 	str.w	r2, [r3, #2840]	; 0xb18
        	 	  H_[9] = x32;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170c:	f8c3 2b1c 	str.w	r2, [r3, #2844]	; 0xb1c
        	 	  H_[10] = x22;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001714:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20

        	 	  H_[14] = x02;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800171c:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
        	 	  H_[15] = x12_;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001724:	f8c3 2b34 	str.w	r2, [r3, #2868]	; 0xb34
        	 	  H_[16] = x22_;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	f8c3 2b38 	str.w	r2, [r3, #2872]	; 0xb38
        	 	  H_[17] = x32;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001734:	f8c3 2b3c 	str.w	r2, [r3, #2876]	; 0xb3c


        	 	          H_[21] = x32;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800173c:	f8c3 2b4c 	str.w	r2, [r3, #2892]	; 0xb4c
        	 	          H_[22] = x22;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001744:	f8c3 2b50 	str.w	r2, [r3, #2896]	; 0xb50
        	 	          H_[23] = x12;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800174c:	f8c3 2b54 	str.w	r2, [r3, #2900]	; 0xb54
        	 	          H_[24] = x02;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001754:	f8c3 2b58 	str.w	r2, [r3, #2904]	; 0xb58

        	 	          H_[28] = x02;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800175c:	f8c3 2b68 	str.w	r2, [r3, #2920]	; 0xb68
        	 	          H_[29] = x12_;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001764:	f8c3 2b6c 	str.w	r2, [r3, #2924]	; 0xb6c
        	 	          H_[30] = x22;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800176c:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
        	 	          H_[31] = x32_;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	6a3a      	ldr	r2, [r7, #32]
 8001774:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74

        	 	          H_[35] = x12_;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800177c:	f8c3 2b84 	str.w	r2, [r3, #2948]	; 0xb84
        	 	          H_[36] = x02_;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001784:	f8c3 2b88 	str.w	r2, [r3, #2952]	; 0xb88
        	 	          H_[37] = x32;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800178c:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
        	 	          H_[38] = x22;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001794:	f8c3 2b90 	str.w	r2, [r3, #2960]	; 0xb90

        	 	          arm_mat_init_f32(&HT,7,6,HT_);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80017a4:	2206      	movs	r2, #6
 80017a6:	2107      	movs	r1, #7
 80017a8:	f002 fc40 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&H,6,7,H_);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80017b8:	2207      	movs	r2, #7
 80017ba:	2106      	movs	r1, #6
 80017bc:	f002 fc36 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&HPHT,6,6,HPHT_);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80017cc:	2206      	movs	r2, #6
 80017ce:	2106      	movs	r1, #6
 80017d0:	f002 fc2c 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&PHT,6,7,PHT_);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80017e0:	2207      	movs	r2, #7
 80017e2:	2106      	movs	r1, #6
 80017e4:	f002 fc22 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&P_HT,7,6,P_HT_);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80017f4:	2206      	movs	r2, #6
 80017f6:	2107      	movs	r1, #7
 80017f8:	f002 fc18 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&S,6,6,S_);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8001808:	2206      	movs	r2, #6
 800180a:	2106      	movs	r1, #6
 800180c:	f002 fc0e 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&Sinv,6,6,Sinv_);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f603 539c 	addw	r3, r3, #3484	; 0xd9c
 800181c:	2206      	movs	r2, #6
 800181e:	2106      	movs	r1, #6
 8001820:	f002 fc04 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&K,7,6,K_);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f503 701e 	add.w	r0, r3, #632	; 0x278
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8001830:	2206      	movs	r2, #6
 8001832:	2107      	movs	r1, #7
 8001834:	f002 fbfa 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&Hx,7,6,Hx_);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001844:	2206      	movs	r2, #6
 8001846:	2107      	movs	r1, #7
 8001848:	f002 fbf0 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&Kino,7,7,Kino_);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8001858:	2207      	movs	r2, #7
 800185a:	2107      	movs	r1, #7
 800185c:	f002 fbe6 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&inovation,6,1,ino_);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f603 632c 	addw	r3, r3, #3628	; 0xe2c
 800186c:	2201      	movs	r2, #1
 800186e:	2106      	movs	r1, #6
 8001870:	f002 fbdc 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&KH,7,7,KH_);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f503 7042 	add.w	r0, r3, #776	; 0x308
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f603 4348 	addw	r3, r3, #3144	; 0xc48
 8001880:	2207      	movs	r2, #7
 8001882:	2107      	movs	r1, #7
 8001884:	f002 fbd2 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&I,7,7,I_);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f603 7358 	addw	r3, r3, #3928	; 0xf58
 8001894:	2207      	movs	r2, #7
 8001896:	2107      	movs	r1, #7
 8001898:	f002 fbc8 	bl	800402c <arm_mat_init_f32>
        	 	    	  arm_mat_init_f32(&IKH,7,7,IKH_);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80018a8:	2207      	movs	r2, #7
 80018aa:	2107      	movs	r1, #7
 80018ac:	f002 fbbe 	bl	800402c <arm_mat_init_f32>
        	 //	    	  arm_mat_init_f32(&temp2,7,1,temp2_);



        	 	    	  status = arm_mat_trans_f32 (&H, &HT);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f503 721c 	add.w	r2, r3, #624	; 0x270
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f002 f8c2 	bl	8003a48 <arm_mat_trans_f32>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_mult_f32 (&H, &P, &PHT);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f503 7118 	add.w	r1, r3, #608	; 0x260
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80018e0:	461a      	mov	r2, r3
 80018e2:	f002 f98d 	bl	8003c00 <arm_mat_mult_f32>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318


        	 	    	  status = arm_mat_mult_f32 (&PHT, &HT, &HPHT);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8001902:	461a      	mov	r2, r3
 8001904:	f002 f97c 	bl	8003c00 <arm_mat_mult_f32>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_add_f32 (&HPHT, &R, &S);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f503 7122 	add.w	r1, r3, #648	; 0x288
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001924:	461a      	mov	r2, r3
 8001926:	f002 fb85 	bl	8004034 <arm_mat_add_f32>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_inverse_f32(&S,&Sinv);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f503 7220 	add.w	r2, r3, #640	; 0x280
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f002 fa12 	bl	8003d6c <arm_mat_inverse_f32>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 //
        	 	    	  status = arm_mat_mult_f32 (&P, &HT, &P_HT);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001964:	461a      	mov	r2, r3
 8001966:	f002 f94b 	bl	8003c00 <arm_mat_mult_f32>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_mult_f32 (&P_HT, &Sinv, &K);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f503 7136 	add.w	r1, r3, #728	; 0x2d8
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001986:	461a      	mov	r2, r3
 8001988:	f002 f93a 	bl	8003c00 <arm_mat_mult_f32>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

        	 //
        	 	    	  status = arm_mat_mult_f32 (&H, &x, &Hx);
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f503 701c 	add.w	r0, r3, #624	; 0x270
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f503 710e 	add.w	r1, r3, #568	; 0x238
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80019a8:	461a      	mov	r2, r3
 80019aa:	f002 f929 	bl	8003c00 <arm_mat_mult_f32>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_sub_f32(&y,&Hx, &inovation);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f503 7010 	add.w	r0, r3, #576	; 0x240
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80019ca:	461a      	mov	r2, r3
 80019cc:	f002 f8a6 	bl	8003b1c <arm_mat_sub_f32>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_sub_f32(&K,&inovation, &Kino);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f503 701e 	add.w	r0, r3, #632	; 0x278
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80019ec:	461a      	mov	r2, r3
 80019ee:	f002 f895 	bl	8003b1c <arm_mat_sub_f32>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

        	 	    	  status = arm_mat_add_f32(&x,&Kino, &x);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f503 7140 	add.w	r1, r3, #768	; 0x300
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f002 fb10 	bl	8004034 <arm_mat_add_f32>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_add_f32(&K,&H, &KH);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f503 711c 	add.w	r1, r3, #624	; 0x270
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8001a30:	461a      	mov	r2, r3
 8001a32:	f002 faff 	bl	8004034 <arm_mat_add_f32>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_sub_f32(&I,&KH, &IKH);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f503 7142 	add.w	r1, r3, #776	; 0x308
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001a52:	461a      	mov	r2, r3
 8001a54:	f002 f862 	bl	8003b1c <arm_mat_sub_f32>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
        	 	    	  status = arm_mat_mult_f32 (&IKH, &P, &P);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f503 7118 	add.w	r1, r3, #608	; 0x260
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001a74:	461a      	mov	r2, r3
 8001a76:	f002 f8c3 	bl	8003c00 <arm_mat_mult_f32>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

               	       float temp = (float) (x_[0] * x_[0]  + x_[1] * x_[1] + x_[2] * x_[2] + x_[3] * x_[3]);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f7ff f88a 	bl	8000ba8 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461c      	mov	r4, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7ff f880 	bl	8000ba8 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7fe ff73 	bl	8000998 <__addsf3>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff f871 	bl	8000ba8 <__aeabi_fmul>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7fe ff64 	bl	8000998 <__addsf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461c      	mov	r4, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f7ff f862 	bl	8000ba8 <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7fe ff55 	bl	8000998 <__addsf3>
 8001aee:	4603      	mov	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]
               	       temp = sqrt(temp);
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa4d 	bl	8000f94 <_ZSt4sqrtf>
 8001afa:	4603      	mov	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
               	       float recipNorm;
               	    	  recipNorm = 1/(temp);
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b06:	f7ff f903 	bl	8000d10 <__aeabi_fdiv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	61fb      	str	r3, [r7, #28]
               	    	  x_[0] *= recipNorm;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	69f9      	ldr	r1, [r7, #28]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	605a      	str	r2, [r3, #4]
               	    	  x_[1] *= recipNorm;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	69f9      	ldr	r1, [r7, #28]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f83d 	bl	8000ba8 <__aeabi_fmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	609a      	str	r2, [r3, #8]
               	    	  x_[2] *= recipNorm;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	69f9      	ldr	r1, [r7, #28]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f833 	bl	8000ba8 <__aeabi_fmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	60da      	str	r2, [r3, #12]
               	    	  x_[3] *= recipNorm;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	69f9      	ldr	r1, [r7, #28]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f829 	bl	8000ba8 <__aeabi_fmul>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	611a      	str	r2, [r3, #16]

               	    	  angle = getAngle1(x_[0],x_[1],x_[2],x_[3]);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	685d      	ldr	r5, [r3, #4]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	689e      	ldr	r6, [r3, #8]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	6912      	ldr	r2, [r2, #16]
 8001b6e:	6979      	ldr	r1, [r7, #20]
 8001b70:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
 8001b74:	341c      	adds	r4, #28
 8001b76:	4638      	mov	r0, r7
 8001b78:	9201      	str	r2, [sp, #4]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4633      	mov	r3, r6
 8001b7e:	462a      	mov	r2, r5
 8001b80:	6979      	ldr	r1, [r7, #20]
 8001b82:	f000 f80d 	bl	8001ba0 <_ZN4EKF29getAngle1Effff>
 8001b86:	463b      	mov	r3, r7
 8001b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//         H.print(huart3);
//         P.print(huart3);
//         S.print(huart3);
          }

	}
 8001b90:	bf00      	nop
 8001b92:	3764      	adds	r7, #100	; 0x64
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b9a:	b004      	add	sp, #16
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <_ZN4EKF29getAngle1Effff>:
		q.q1 = x_[1];
		q.q2 = x_[2];
		q.q3 = x_[3];
		return q;
	}
	EULER_angle getAngle1(float q0,float q1, float q2,float q3){
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b08d      	sub	sp, #52	; 0x34
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
		float r,p,y;
		EULER_angle angle_e;


		float sinr = 2*(q0*q1 + q2 * q3);
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7fe fff9 	bl	8000ba8 <__aeabi_fmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461c      	mov	r4, r3
 8001bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bbe:	f7fe fff3 	bl	8000ba8 <__aeabi_fmul>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7fe fee6 	bl	8000998 <__addsf3>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fee1 	bl	8000998 <__addsf3>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
		float cosr = 1 - 2*(q1*q1 + q2 * q2);
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f7fe ffe3 	bl	8000ba8 <__aeabi_fmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461c      	mov	r4, r3
 8001be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001be8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bea:	f7fe ffdd 	bl	8000ba8 <__aeabi_fmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe fed0 	bl	8000998 <__addsf3>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fecb 	bl	8000998 <__addsf3>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c0a:	f7fe fec3 	bl	8000994 <__aeabi_fsub>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
		r = atan2(sinr, cosr);
 8001c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c16:	f7ff f9af 	bl	8000f78 <_ZSt5atan2ff>
 8001c1a:	6238      	str	r0, [r7, #32]


			float sinp = 2*( q0*q2 - q3*q1);
 8001c1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe ffc2 	bl	8000ba8 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461c      	mov	r4, r3
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c2c:	f7fe ffbc 	bl	8000ba8 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7fe fead 	bl	8000994 <__aeabi_fsub>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe feaa 	bl	8000998 <__addsf3>
 8001c44:	4603      	mov	r3, r0
 8001c46:	61fb      	str	r3, [r7, #28]
		    if (sinp >= 1)
 8001c48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c4c:	69f8      	ldr	r0, [r7, #28]
 8001c4e:	f7ff f95d 	bl	8000f0c <__aeabi_fcmpge>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <_ZN4EKF29getAngle1Effff+0xbe>
		    	p = PI/2;
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <_ZN4EKF29getAngle1Effff+0x1c0>)
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5c:	e00d      	b.n	8001c7a <_ZN4EKF29getAngle1Effff+0xda>
		    else{
		    	if(sinp <= -1){
 8001c5e:	4941      	ldr	r1, [pc, #260]	; (8001d64 <_ZN4EKF29getAngle1Effff+0x1c4>)
 8001c60:	69f8      	ldr	r0, [r7, #28]
 8001c62:	f7ff f949 	bl	8000ef8 <__aeabi_fcmple>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <_ZN4EKF29getAngle1Effff+0xd2>
		    	p = -PI/2;
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <_ZN4EKF29getAngle1Effff+0x1c8>)
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c70:	e003      	b.n	8001c7a <_ZN4EKF29getAngle1Effff+0xda>
		    }
		    else{
		    	p = asin(sinp);
 8001c72:	69f8      	ldr	r0, [r7, #28]
 8001c74:	f7ff f974 	bl	8000f60 <_ZSt4asinf>
 8001c78:	62f8      	str	r0, [r7, #44]	; 0x2c
		    }
		    }


			float siny = 2*( q0*q3 + q2*q1);
 8001c7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7fe ff93 	bl	8000ba8 <__aeabi_fmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461c      	mov	r4, r3
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c8a:	f7fe ff8d 	bl	8000ba8 <__aeabi_fmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7fe fe80 	bl	8000998 <__addsf3>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fe7b 	bl	8000998 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	61bb      	str	r3, [r7, #24]
			float cosy = 1 - 2*( q1*q1 + q3*q3);
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f7fe ff7d 	bl	8000ba8 <__aeabi_fmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cb6:	f7fe ff77 	bl	8000ba8 <__aeabi_fmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7fe fe6a 	bl	8000998 <__addsf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fe65 	bl	8000998 <__addsf3>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001cd6:	f7fe fe5d 	bl	8000994 <__aeabi_fsub>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	617b      	str	r3, [r7, #20]
			y = atan2(siny, cosy);
 8001cde:	6979      	ldr	r1, [r7, #20]
 8001ce0:	69b8      	ldr	r0, [r7, #24]
 8001ce2:	f7ff f949 	bl	8000f78 <_ZSt5atan2ff>
 8001ce6:	6138      	str	r0, [r7, #16]

			angle_e.roll = r*RAD2DEC;
 8001ce8:	6a38      	ldr	r0, [r7, #32]
 8001cea:	f7fe fb95 	bl	8000418 <__aeabi_f2d>
 8001cee:	a31a      	add	r3, pc, #104	; (adr r3, 8001d58 <_ZN4EKF29getAngle1Effff+0x1b8>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fbe8 	bl	80004c8 <__aeabi_dmul>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4621      	mov	r1, r4
 8001d00:	f7fe fdf4 	bl	80008ec <__aeabi_d2f>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]
			angle_e.pitch = p*RAD2DEC;
 8001d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d0c:	f7fe fb84 	bl	8000418 <__aeabi_f2d>
 8001d10:	a311      	add	r3, pc, #68	; (adr r3, 8001d58 <_ZN4EKF29getAngle1Effff+0x1b8>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fbd7 	bl	80004c8 <__aeabi_dmul>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	f7fe fde3 	bl	80008ec <__aeabi_d2f>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	605a      	str	r2, [r3, #4]
			angle_e.yaw = y*RAD2DEC;
 8001d2c:	6938      	ldr	r0, [r7, #16]
 8001d2e:	f7fe fb73 	bl	8000418 <__aeabi_f2d>
 8001d32:	a309      	add	r3, pc, #36	; (adr r3, 8001d58 <_ZN4EKF29getAngle1Effff+0x1b8>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fbc6 	bl	80004c8 <__aeabi_dmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	4618      	mov	r0, r3
 8001d42:	4621      	mov	r1, r4
 8001d44:	f7fe fdd2 	bl	80008ec <__aeabi_d2f>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	609a      	str	r2, [r3, #8]
			return angle_e;
 8001d4e:	bf00      	nop
	}
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	3734      	adds	r7, #52	; 0x34
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	1a5d2372 	.word	0x1a5d2372
 8001d5c:	404ca5dc 	.word	0x404ca5dc
 8001d60:	3fc90fdb 	.word	0x3fc90fdb
 8001d64:	bf800000 	.word	0xbf800000
 8001d68:	bfc90fdb 	.word	0xbfc90fdb

08001d6c <_ZN4EKF2C1Ev>:

	EULER_angle angle;
	virtual ~EKF2();
};
EKF2::EKF2(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <_ZN4EKF2C1Ev+0x16c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3320      	adds	r3, #32
 8001db6:	22c4      	movs	r2, #196	; 0xc4
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fdba 	bl	8004934 <memset>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a46      	ldr	r2, [pc, #280]	; (8001edc <_ZN4EKF2C1Ev+0x170>)
 8001dc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a44      	ldr	r2, [pc, #272]	; (8001edc <_ZN4EKF2C1Ev+0x170>)
 8001dcc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a42      	ldr	r2, [pc, #264]	; (8001edc <_ZN4EKF2C1Ev+0x170>)
 8001dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	33e4      	adds	r3, #228	; 0xe4
 8001ddc:	22c4      	movs	r2, #196	; 0xc4
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 fda7 	bl	8004934 <memset>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001df6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e00:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e0a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e14:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e1e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e28:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001e32:	2290      	movs	r2, #144	; 0x90
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fd7c 	bl	8004934 <memset>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <_ZN4EKF2C1Ev+0x174>)
 8001e40:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <_ZN4EKF2C1Ev+0x174>)
 8001e48:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <_ZN4EKF2C1Ev+0x174>)
 8001e50:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <_ZN4EKF2C1Ev+0x174>)
 8001e58:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <_ZN4EKF2C1Ev+0x174>)
 8001e60:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <_ZN4EKF2C1Ev+0x174>)
 8001e68:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	22fa      	movs	r2, #250	; 0xfa
 8001e70:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f603 7358 	addw	r3, r3, #3928	; 0xf58
 8001e7a:	22c4      	movs	r2, #196	; 0xc4
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fd58 	bl	8004934 <memset>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e8a:	f8c3 2f58 	str.w	r2, [r3, #3928]	; 0xf58
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e94:	f8c3 2f78 	str.w	r2, [r3, #3960]	; 0xf78
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e9e:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ea8:	f8c3 2fb8 	str.w	r2, [r3, #4024]	; 0xfb8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001eb2:	f8c3 2fd8 	str.w	r2, [r3, #4056]	; 0xfd8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ebc:	f8c3 2ff8 	str.w	r2, [r3, #4088]	; 0xff8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec6:	3318      	adds	r3, #24
 8001ec8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ecc:	601a      	str	r2, [r3, #0]

}
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	08004a14 	.word	0x08004a14
 8001edc:	3a83126f 	.word	0x3a83126f
 8001ee0:	38d1b717 	.word	0x38d1b717

08001ee4 <_ZN4EKF2D1Ev>:
EKF2::~EKF2() {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <_ZN4EKF2D1Ev+0x1c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	 // free(this->data);
}
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	08004a14 	.word	0x08004a14

08001f04 <_ZN4EKF2D0Ev>:
EKF2::~EKF2() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
}
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ffe9 	bl	8001ee4 <_ZN4EKF2D1Ev>
 8001f12:	f241 0128 	movw	r1, #4136	; 0x1028
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f002 f8fe 	bl	8004118 <_ZdlPvj>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08d      	sub	sp, #52	; 0x34
 8001f2c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2e:	f000 fad1 	bl	80024d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f32:	f000 f879 	bl	8002028 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f36:	f000 f957 	bl	80021e8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001f3a:	f000 f8c5 	bl	80020c8 <_ZL12MX_I2C1_Initv>
  MX_TIM4_Init();
 8001f3e:	f000 f8f7 	bl	8002130 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  ekf.x_[4] = bGx * DEC2RAD;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <main+0xd8>)
 8001f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f48:	a32b      	add	r3, pc, #172	; (adr r3, 8001ff8 <main+0xd0>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe fabb 	bl	80004c8 <__aeabi_dmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	460c      	mov	r4, r1
 8001f56:	4618      	mov	r0, r3
 8001f58:	4621      	mov	r1, r4
 8001f5a:	f7fe fcc7 	bl	80008ec <__aeabi_d2f>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <main+0xdc>)
 8001f62:	615a      	str	r2, [r3, #20]
   ekf.x_[5] = bGy * DEC2RAD;
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <main+0xe0>)
 8001f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6a:	a323      	add	r3, pc, #140	; (adr r3, 8001ff8 <main+0xd0>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe faaa 	bl	80004c8 <__aeabi_dmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fcb6 	bl	80008ec <__aeabi_d2f>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <main+0xdc>)
 8001f84:	619a      	str	r2, [r3, #24]
   ekf.x_[6] = bGz * DEC2RAD;
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <main+0xe4>)
 8001f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8c:	a31a      	add	r3, pc, #104	; (adr r3, 8001ff8 <main+0xd0>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe fa99 	bl	80004c8 <__aeabi_dmul>
 8001f96:	4603      	mov	r3, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	f7fe fca5 	bl	80008ec <__aeabi_d2f>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <main+0xdc>)
 8001fa6:	61da      	str	r2, [r3, #28]

 //  ekf.x4 = bGx * DEC2RAD;
 //   ekf.x4 = bGy * DEC2RAD;
 //   ekf.x6 = bGz * DEC2RAD;

   ekf.loadEKF();
 8001fa8:	4816      	ldr	r0, [pc, #88]	; (8002004 <main+0xdc>)
 8001faa:	f7ff f811 	bl	8000fd0 <_ZN4EKF27loadEKFEv>
   HAL_TIM_Base_Start(&htim4);
 8001fae:	4818      	ldr	r0, [pc, #96]	; (8002010 <main+0xe8>)
 8001fb0:	f001 faf2 	bl	8003598 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int start = TIM4->CNT;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <main+0xec>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	60fb      	str	r3, [r7, #12]
//	  data_imu_buffer = process_MPU(true, true);
	  ekf.updateEKF(data_imu_buffer,mag, 0.01);
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <main+0xf0>)
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <main+0xf4>)
 8001fbe:	9206      	str	r2, [sp, #24]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <main+0xf8>)
 8001fc2:	ac03      	add	r4, sp, #12
 8001fc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fca:	466c      	mov	r4, sp
 8001fcc:	f103 020c 	add.w	r2, r3, #12
 8001fd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd8:	480a      	ldr	r0, [pc, #40]	; (8002004 <main+0xdc>)
 8001fda:	f7ff f8cd 	bl	8001178 <_ZN4EKF29updateEKFE8IMU_data8MAG_dataf>




//      HAL_Delay(10);
	  int stop = TIM4->CNT;
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <main+0xec>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <main+0xfc>)
 8001fea:	f000 fd2b 	bl	8002a44 <HAL_GPIO_TogglePin>
	  int time = stop - start;
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	607b      	str	r3, [r7, #4]
  }
 8001ff6:	e7dd      	b.n	8001fb4 <main+0x8c>
 8001ff8:	a226e211 	.word	0xa226e211
 8001ffc:	3f91df46 	.word	0x3f91df46
 8002000:	20000090 	.word	0x20000090
 8002004:	20000174 	.word	0x20000174
 8002008:	20000098 	.word	0x20000098
 800200c:	200000a0 	.word	0x200000a0
 8002010:	20000108 	.word	0x20000108
 8002014:	40000800 	.word	0x40000800
 8002018:	20000150 	.word	0x20000150
 800201c:	3c23d70a 	.word	0x3c23d70a
 8002020:	20000168 	.word	0x20000168
 8002024:	40011000 	.word	0x40011000

08002028 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202e:	f107 0318 	add.w	r3, r7, #24
 8002032:	2228      	movs	r2, #40	; 0x28
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fc7c 	bl	8004934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800204e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002052:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800205c:	2302      	movs	r3, #2
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002066:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fe39 	bl	8002ce8 <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002086:	f000 f8fb 	bl	8002280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208a:	230f      	movs	r3, #15
 800208c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	2302      	movs	r3, #2
 8002090:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2102      	movs	r1, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 f89f 	bl	80031e8 <HAL_RCC_ClockConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80020ba:	f000 f8e1 	bl	8002280 <Error_Handler>
  }
}
 80020be:	bf00      	nop
 80020c0:	3740      	adds	r7, #64	; 0x40
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020ce:	4a16      	ldr	r2, [pc, #88]	; (8002128 <_ZL12MX_I2C1_Initv+0x60>)
 80020d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <_ZL12MX_I2C1_Initv+0x64>)
 80020d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <_ZL12MX_I2C1_Initv+0x5c>)
 8002106:	f000 fcb7 	bl	8002a78 <HAL_I2C_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800211a:	f000 f8b1 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000b4 	.word	0x200000b4
 8002128:	40005400 	.word	0x40005400
 800212c:	000186a0 	.word	0x000186a0

08002130 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <_ZL12MX_TIM4_Initv+0xb4>)
 8002150:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002154:	2247      	movs	r2, #71	; 0x47
 8002156:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002164:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002172:	481b      	ldr	r0, [pc, #108]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002174:	f001 f9c0 	bl	80034f8 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002188:	f000 f87a 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4619      	mov	r1, r3
 8002198:	4811      	ldr	r0, [pc, #68]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 800219a:	f001 fa47 	bl	800362c <HAL_TIM_ConfigClockSource>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80021ae:	f000 f867 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021ba:	463b      	mov	r3, r7
 80021bc:	4619      	mov	r1, r3
 80021be:	4808      	ldr	r0, [pc, #32]	; (80021e0 <_ZL12MX_TIM4_Initv+0xb0>)
 80021c0:	f001 fbe4 	bl	800398c <HAL_TIMEx_MasterConfigSynchronization>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80021d4:	f000 f854 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000108 	.word	0x20000108
 80021e4:	40000800 	.word	0x40000800

080021e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <_ZL12MX_GPIO_Initv+0x94>)
 800224c:	f000 fbe2 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2302      	movs	r3, #2
 8002260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <_ZL12MX_GPIO_Initv+0x94>)
 800226a:	f000 fa79 	bl	8002760 <HAL_GPIO_Init>

}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40011000 	.word	0x40011000

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002286:	e7fe      	b.n	8002286 <Error_Handler+0x6>

08002288 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229e:	4293      	cmp	r3, r2
 80022a0:	d102      	bne.n	80022a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
EKF2 ekf;
 80022a2:	4809      	ldr	r0, [pc, #36]	; (80022c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022a4:	f7ff fd62 	bl	8001d6c <_ZN4EKF2C1Ev>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d102      	bne.n	80022be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022ba:	f7ff fe13 	bl	8001ee4 <_ZN4EKF2D1Ev>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000174 	.word	0x20000174

080022cc <_GLOBAL__sub_I_Q>:
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff ffd7 	bl	8002288 <_Z41__static_initialization_and_destruction_0ii>
 80022da:	bd80      	pop	{r7, pc}

080022dc <_GLOBAL__sub_D_Q>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff ffcf 	bl	8002288 <_Z41__static_initialization_and_destruction_0ii>
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_MspInit+0x5c>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_MspInit+0x5c>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6193      	str	r3, [r2, #24]
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_MspInit+0x5c>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_MspInit+0x5c>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_MspInit+0x5c>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_MspInit+0x5c>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_MspInit+0x60>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_MspInit+0x60>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000

08002350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_I2C_MspInit+0x90>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d132      	bne.n	80023d6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800238e:	2312      	movs	r3, #18
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4812      	ldr	r0, [pc, #72]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 800239e:	f000 f9df 	bl	8002760 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_I2C_MspInit+0x9c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_I2C_MspInit+0x9c>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 80023c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40005400 	.word	0x40005400
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010c00 	.word	0x40010c00
 80023ec:	40010000 	.word	0x40010000

080023f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_TIM_Base_MspInit+0x34>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10b      	bne.n	800241a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_TIM_Base_MspInit+0x38>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_TIM_Base_MspInit+0x38>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_TIM_Base_MspInit+0x38>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40000800 	.word	0x40000800
 8002428:	40021000 	.word	0x40021000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <NMI_Handler+0x4>

08002432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <MemManage_Handler+0x4>

0800243e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <UsageFault_Handler+0x4>

0800244a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002472:	f000 f875 	bl	8002560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}

0800247a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
	...

08002488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002488:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800248a:	e003      	b.n	8002494 <LoopCopyDataInit>

0800248c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800248e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002490:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002492:	3104      	adds	r1, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002494:	480a      	ldr	r0, [pc, #40]	; (80024c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002498:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800249a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800249c:	d3f6      	bcc.n	800248c <CopyDataInit>
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024a0:	e002      	b.n	80024a8 <LoopFillZerobss>

080024a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024a4:	f842 3b04 	str.w	r3, [r2], #4

080024a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024ac:	d3f9      	bcc.n	80024a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ae:	f7ff ffe4 	bl	800247a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b2:	f002 fa13 	bl	80048dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024b6:	f7ff fd37 	bl	8001f28 <main>
  bx lr
 80024ba:	4770      	bx	lr
  ldr r3, =_sidata
 80024bc:	08004a70 	.word	0x08004a70
  ldr r0, =_sdata
 80024c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024c4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80024c8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80024cc:	200011a4 	.word	0x200011a4

080024d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC1_2_IRQHandler>
	...

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_Init+0x28>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <HAL_Init+0x28>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e4:	2003      	movs	r0, #3
 80024e6:	f000 f907 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f000 f808 	bl	8002500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f0:	f7ff fefc 	bl	80022ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x54>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_InitTick+0x58>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002516:	fbb3 f3f1 	udiv	r3, r3, r1
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f911 	bl	8002746 <HAL_SYSTICK_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e00e      	b.n	800254c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b0f      	cmp	r3, #15
 8002532:	d80a      	bhi.n	800254a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002534:	2200      	movs	r2, #0
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f000 f8e7 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002540:	4a06      	ldr	r2, [pc, #24]	; (800255c <HAL_InitTick+0x5c>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000000 	.word	0x20000000
 8002558:	20000008 	.word	0x20000008
 800255c:	20000004 	.word	0x20000004

08002560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_IncTick+0x1c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_IncTick+0x20>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_IncTick+0x20>)
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000008 	.word	0x20000008
 8002580:	200011a0 	.word	0x200011a0

08002584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <HAL_GetTick+0x10>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	200011a0 	.word	0x200011a0

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7ff ff90 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff49 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff5e 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff90 	bl	8002650 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5f 	bl	80025fc <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffb0 	bl	80026b4 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	e127      	b.n	80029c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002774:	2201      	movs	r2, #1
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8116 	bne.w	80029be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b12      	cmp	r3, #18
 8002798:	d034      	beq.n	8002804 <HAL_GPIO_Init+0xa4>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d80d      	bhi.n	80027ba <HAL_GPIO_Init+0x5a>
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_Init+0x9a>
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d804      	bhi.n	80027b0 <HAL_GPIO_Init+0x50>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d031      	beq.n	800280e <HAL_GPIO_Init+0xae>
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d01c      	beq.n	80027e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ae:	e048      	b.n	8002842 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d043      	beq.n	800283c <HAL_GPIO_Init+0xdc>
 80027b4:	2b11      	cmp	r3, #17
 80027b6:	d01b      	beq.n	80027f0 <HAL_GPIO_Init+0x90>
          break;
 80027b8:	e043      	b.n	8002842 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027ba:	4a89      	ldr	r2, [pc, #548]	; (80029e0 <HAL_GPIO_Init+0x280>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d026      	beq.n	800280e <HAL_GPIO_Init+0xae>
 80027c0:	4a87      	ldr	r2, [pc, #540]	; (80029e0 <HAL_GPIO_Init+0x280>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d806      	bhi.n	80027d4 <HAL_GPIO_Init+0x74>
 80027c6:	4a87      	ldr	r2, [pc, #540]	; (80029e4 <HAL_GPIO_Init+0x284>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d020      	beq.n	800280e <HAL_GPIO_Init+0xae>
 80027cc:	4a86      	ldr	r2, [pc, #536]	; (80029e8 <HAL_GPIO_Init+0x288>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_GPIO_Init+0xae>
          break;
 80027d2:	e036      	b.n	8002842 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027d4:	4a85      	ldr	r2, [pc, #532]	; (80029ec <HAL_GPIO_Init+0x28c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d019      	beq.n	800280e <HAL_GPIO_Init+0xae>
 80027da:	4a85      	ldr	r2, [pc, #532]	; (80029f0 <HAL_GPIO_Init+0x290>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d016      	beq.n	800280e <HAL_GPIO_Init+0xae>
 80027e0:	4a84      	ldr	r2, [pc, #528]	; (80029f4 <HAL_GPIO_Init+0x294>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0xae>
          break;
 80027e6:	e02c      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	623b      	str	r3, [r7, #32]
          break;
 80027ee:	e028      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	3304      	adds	r3, #4
 80027f6:	623b      	str	r3, [r7, #32]
          break;
 80027f8:	e023      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	3308      	adds	r3, #8
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e01e      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	330c      	adds	r3, #12
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e019      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002816:	2304      	movs	r3, #4
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e012      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002824:	2308      	movs	r3, #8
 8002826:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	611a      	str	r2, [r3, #16]
          break;
 800282e:	e008      	b.n	8002842 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002830:	2308      	movs	r3, #8
 8002832:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	615a      	str	r2, [r3, #20]
          break;
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2bff      	cmp	r3, #255	; 0xff
 8002846:	d801      	bhi.n	800284c <HAL_GPIO_Init+0xec>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	e001      	b.n	8002850 <HAL_GPIO_Init+0xf0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2bff      	cmp	r3, #255	; 0xff
 8002856:	d802      	bhi.n	800285e <HAL_GPIO_Init+0xfe>
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	e002      	b.n	8002864 <HAL_GPIO_Init+0x104>
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3b08      	subs	r3, #8
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	210f      	movs	r1, #15
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	401a      	ands	r2, r3
 8002876:	6a39      	ldr	r1, [r7, #32]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	431a      	orrs	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8096 	beq.w	80029be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002892:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_GPIO_Init+0x298>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_GPIO_Init+0x298>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6193      	str	r3, [r2, #24]
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_GPIO_Init+0x298>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028aa:	4a54      	ldr	r2, [pc, #336]	; (80029fc <HAL_GPIO_Init+0x29c>)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	; (8002a00 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x19e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <HAL_GPIO_Init+0x2a4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x19a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <HAL_GPIO_Init+0x2a8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x196>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_GPIO_Init+0x2ac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x192>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x1a0>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e004      	b.n	8002900 <HAL_GPIO_Init+0x1a0>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_Init+0x1a0>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x1a0>
 80028fe:	2300      	movs	r3, #0
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	f002 0203 	and.w	r2, r2, #3
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	4093      	lsls	r3, r2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002910:	493a      	ldr	r1, [pc, #232]	; (80029fc <HAL_GPIO_Init+0x29c>)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4938      	ldr	r1, [pc, #224]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	43db      	mvns	r3, r3
 8002940:	4933      	ldr	r1, [pc, #204]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002942:	4013      	ands	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	492e      	ldr	r1, [pc, #184]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	43db      	mvns	r3, r3
 8002968:	4929      	ldr	r1, [pc, #164]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 800296a:	4013      	ands	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4924      	ldr	r1, [pc, #144]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
 8002986:	e006      	b.n	8002996 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	43db      	mvns	r3, r3
 8002990:	491f      	ldr	r1, [pc, #124]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 8002992:	4013      	ands	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	491a      	ldr	r1, [pc, #104]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60cb      	str	r3, [r1, #12]
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4915      	ldr	r1, [pc, #84]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	3301      	adds	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f47f aed0 	bne.w	8002774 <HAL_GPIO_Init+0x14>
  }
}
 80029d4:	bf00      	nop
 80029d6:	372c      	adds	r7, #44	; 0x2c
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	10210000 	.word	0x10210000
 80029e4:	10110000 	.word	0x10110000
 80029e8:	10120000 	.word	0x10120000
 80029ec:	10310000 	.word	0x10310000
 80029f0:	10320000 	.word	0x10320000
 80029f4:	10220000 	.word	0x10220000
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40010800 	.word	0x40010800
 8002a04:	40010c00 	.word	0x40010c00
 8002a08:	40011000 	.word	0x40011000
 8002a0c:	40011400 	.word	0x40011400
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43d9      	mvns	r1, r3
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	400b      	ands	r3, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e11f      	b.n	8002cca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fc56 	bl	8002350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002adc:	f000 fcda 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a7b      	ldr	r2, [pc, #492]	; (8002cd4 <HAL_I2C_Init+0x25c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d807      	bhi.n	8002afc <HAL_I2C_Init+0x84>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_I2C_Init+0x260>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e006      	b.n	8002b0a <HAL_I2C_Init+0x92>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_I2C_Init+0x264>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0db      	b.n	8002cca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <HAL_I2C_Init+0x268>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9b      	lsrs	r3, r3, #18
 8002b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_I2C_Init+0x25c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d802      	bhi.n	8002b4c <HAL_I2C_Init+0xd4>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	e009      	b.n	8002b60 <HAL_I2C_Init+0xe8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_I2C_Init+0x26c>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	3301      	adds	r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4956      	ldr	r1, [pc, #344]	; (8002cd4 <HAL_I2C_Init+0x25c>)
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d80d      	bhi.n	8002b9c <HAL_I2C_Init+0x124>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e59      	subs	r1, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	bf38      	it	cc
 8002b98:	2304      	movcc	r3, #4
 8002b9a:	e04f      	b.n	8002c3c <HAL_I2C_Init+0x1c4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_I2C_Init+0x150>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e012      	b.n	8002bee <HAL_I2C_Init+0x176>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e58      	subs	r0, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	0099      	lsls	r1, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Init+0x17e>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e022      	b.n	8002c3c <HAL_I2C_Init+0x1c4>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10e      	bne.n	8002c1c <HAL_I2C_Init+0x1a4>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e58      	subs	r0, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	e00f      	b.n	8002c3c <HAL_I2C_Init+0x1c4>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6809      	ldr	r1, [r1, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6911      	ldr	r1, [r2, #16]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	000186a0 	.word	0x000186a0
 8002cd8:	001e847f 	.word	0x001e847f
 8002cdc:	003d08ff 	.word	0x003d08ff
 8002ce0:	431bde83 	.word	0x431bde83
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e26c      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8087 	beq.w	8002e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d08:	4b92      	ldr	r3, [pc, #584]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d00c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d14:	4b8f      	ldr	r3, [pc, #572]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d112      	bne.n	8002d46 <HAL_RCC_OscConfig+0x5e>
 8002d20:	4b8c      	ldr	r3, [pc, #560]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2c:	d10b      	bne.n	8002d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2e:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d06c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x12c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d168      	bne.n	8002e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e246      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x76>
 8002d50:	4b80      	ldr	r3, [pc, #512]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a7f      	ldr	r2, [pc, #508]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e02e      	b.n	8002dbc <HAL_RCC_OscConfig+0xd4>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x98>
 8002d66:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7a      	ldr	r2, [pc, #488]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b78      	ldr	r3, [pc, #480]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a77      	ldr	r2, [pc, #476]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01d      	b.n	8002dbc <HAL_RCC_OscConfig+0xd4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0xbc>
 8002d8a:	4b72      	ldr	r3, [pc, #456]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a71      	ldr	r2, [pc, #452]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b6f      	ldr	r3, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6e      	ldr	r2, [pc, #440]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xd4>
 8002da4:	4b6b      	ldr	r3, [pc, #428]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6a      	ldr	r2, [pc, #424]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a67      	ldr	r2, [pc, #412]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7ff fbde 	bl	8002584 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7ff fbda 	bl	8002584 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1fa      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b5d      	ldr	r3, [pc, #372]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe4>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7ff fbca 	bl	8002584 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7ff fbc6 	bl	8002584 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1e6      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x10c>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d063      	beq.n	8002eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e22:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e2e:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d11c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x18c>
 8002e3a:	4b46      	ldr	r3, [pc, #280]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x176>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1ba      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4939      	ldr	r1, [pc, #228]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	e03a      	b.n	8002eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7ff fb7f 	bl	8002584 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7ff fb7b 	bl	8002584 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e19b      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4927      	ldr	r1, [pc, #156]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	e015      	b.n	8002eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fb5e 	bl	8002584 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7ff fb5a 	bl	8002584 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e17a      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03a      	beq.n	8002f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d019      	beq.n	8002f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_RCC_OscConfig+0x274>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7ff fb3e 	bl	8002584 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0c:	f7ff fb3a 	bl	8002584 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e15a      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f000 fac6 	bl	80034bc <RCC_Delay>
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_OscConfig+0x274>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7ff fb24 	bl	8002584 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3e:	e00f      	b.n	8002f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7ff fb20 	bl	8002584 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d908      	bls.n	8002f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e140      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	42420000 	.word	0x42420000
 8002f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	4b9e      	ldr	r3, [pc, #632]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e9      	bne.n	8002f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80a6 	beq.w	80030c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7e:	4b97      	ldr	r3, [pc, #604]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	4b94      	ldr	r3, [pc, #592]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a93      	ldr	r2, [pc, #588]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	61d3      	str	r3, [r2, #28]
 8002f96:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b8e      	ldr	r3, [pc, #568]	; (80031e0 <HAL_RCC_OscConfig+0x4f8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a8a      	ldr	r2, [pc, #552]	; (80031e0 <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7ff fae1 	bl	8002584 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7ff fadd 	bl	8002584 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0fd      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x4f8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x312>
 8002fec:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a7a      	ldr	r2, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	e02d      	b.n	8003056 <HAL_RCC_OscConfig+0x36e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x334>
 8003002:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a75      	ldr	r2, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	4b73      	ldr	r3, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a72      	ldr	r2, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6213      	str	r3, [r2, #32]
 800301a:	e01c      	b.n	8003056 <HAL_RCC_OscConfig+0x36e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x356>
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a6c      	ldr	r2, [pc, #432]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4a69      	ldr	r2, [pc, #420]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6213      	str	r3, [r2, #32]
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x36e>
 800303e:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a66      	ldr	r2, [pc, #408]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6213      	str	r3, [r2, #32]
 800304a:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d015      	beq.n	800308a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7ff fa91 	bl	8002584 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7ff fa8d 	bl	8002584 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0ab      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ee      	beq.n	8003066 <HAL_RCC_OscConfig+0x37e>
 8003088:	e014      	b.n	80030b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7ff fa7b 	bl	8002584 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7ff fa77 	bl	8002584 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e095      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ee      	bne.n	8003092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b48      	ldr	r3, [pc, #288]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4a47      	ldr	r2, [pc, #284]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8081 	beq.w	80031d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d0:	4b42      	ldr	r3, [pc, #264]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d061      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d146      	bne.n	8003172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e4:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_OscConfig+0x4fc>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7ff fa4b 	bl	8002584 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7ff fa47 	bl	8002584 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e067      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d108      	bne.n	800312c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	492d      	ldr	r1, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a19      	ldr	r1, [r3, #32]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	430b      	orrs	r3, r1
 800313e:	4927      	ldr	r1, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_OscConfig+0x4fc>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7ff fa1b 	bl	8002584 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003152:	f7ff fa17 	bl	8002584 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e037      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x46a>
 8003170:	e02f      	b.n	80031d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_RCC_OscConfig+0x4fc>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff fa04 	bl	8002584 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7ff fa00 	bl	8002584 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e020      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x498>
 800319e:	e018      	b.n	80031d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e013      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42420060 	.word	0x42420060

080031e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0d0      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d910      	bls.n	800322c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b67      	ldr	r3, [pc, #412]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	4965      	ldr	r1, [pc, #404]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b8      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800324e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800325c:	4b53      	ldr	r3, [pc, #332]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a52      	ldr	r2, [pc, #328]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	494d      	ldr	r1, [pc, #308]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d040      	beq.n	8003308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d115      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e073      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b6:	4b3d      	ldr	r3, [pc, #244]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06b      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4936      	ldr	r1, [pc, #216]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d8:	f7ff f954 	bl	8002584 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7ff f950 	bl	8002584 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e053      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d1eb      	bne.n	80032e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d210      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 0207 	bic.w	r2, r3, #7
 800331e:	4922      	ldr	r1, [pc, #136]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e032      	b.n	800339e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4916      	ldr	r1, [pc, #88]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003376:	f000 f821 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800337a:	4601      	mov	r1, r0
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	fa21 f303 	lsr.w	r3, r1, r3
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f8b2 	bl	8002500 <HAL_InitTick>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40021000 	.word	0x40021000
 80033b0:	08004a1c 	.word	0x08004a1c
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000004 	.word	0x20000004

080033bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	b490      	push	{r4, r7}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_RCC_GetSysClockFreq+0xb0>)
 80033c4:	1d3c      	adds	r4, r7, #4
 80033c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033e6:	4b23      	ldr	r3, [pc, #140]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x40>
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x46>
 80033fa:	e02d      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033fe:	623b      	str	r3, [r7, #32]
      break;
 8003400:	e02d      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	0c9b      	lsrs	r3, r3, #18
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800340e:	4413      	add	r3, r2
 8003410:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003414:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c5b      	lsrs	r3, r3, #17
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800342e:	4413      	add	r3, r2
 8003430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003434:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800343a:	fb02 f203 	mul.w	r2, r2, r3
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	e004      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <HAL_RCC_GetSysClockFreq+0xc0>)
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	623b      	str	r3, [r7, #32]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800345a:	623b      	str	r3, [r7, #32]
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	6a3b      	ldr	r3, [r7, #32]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3728      	adds	r7, #40	; 0x28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc90      	pop	{r4, r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	080049f8 	.word	0x080049f8
 8003470:	08004a08 	.word	0x08004a08
 8003474:	40021000 	.word	0x40021000
 8003478:	007a1200 	.word	0x007a1200
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_RCC_GetHCLKFreq+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff2 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 800349c:	4601      	mov	r1, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4a03      	ldr	r2, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08004a2c 	.word	0x08004a2c

080034bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <RCC_Delay+0x34>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <RCC_Delay+0x38>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0a5b      	lsrs	r3, r3, #9
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d8:	bf00      	nop
  }
  while (Delay --);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	60fa      	str	r2, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <RCC_Delay+0x1c>
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000
 80034f4:	10624dd3 	.word	0x10624dd3

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe ff66 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 f930 	bl	800379c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d001      	beq.n	80035b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e032      	b.n	8003616 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_TIM_Base_Start+0x88>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_TIM_Base_Start+0x48>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d009      	beq.n	80035e0 <HAL_TIM_Base_Start+0x48>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_TIM_Base_Start+0x8c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_TIM_Base_Start+0x48>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <HAL_TIM_Base_Start+0x90>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d111      	bne.n	8003604 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d010      	beq.n	8003614 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	e007      	b.n	8003614 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIM_ConfigClockSource+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e0a6      	b.n	8003792 <HAL_TIM_ConfigClockSource+0x166>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d067      	beq.n	800374c <HAL_TIM_ConfigClockSource+0x120>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d80b      	bhi.n	8003698 <HAL_TIM_ConfigClockSource+0x6c>
 8003680:	2b10      	cmp	r3, #16
 8003682:	d073      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x140>
 8003684:	2b10      	cmp	r3, #16
 8003686:	d802      	bhi.n	800368e <HAL_TIM_ConfigClockSource+0x62>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d06f      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800368c:	e078      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800368e:	2b20      	cmp	r3, #32
 8003690:	d06c      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x140>
 8003692:	2b30      	cmp	r3, #48	; 0x30
 8003694:	d06a      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003696:	e073      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003698:	2b70      	cmp	r3, #112	; 0x70
 800369a:	d00d      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x8c>
 800369c:	2b70      	cmp	r3, #112	; 0x70
 800369e:	d804      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x7e>
 80036a0:	2b50      	cmp	r3, #80	; 0x50
 80036a2:	d033      	beq.n	800370c <HAL_TIM_ConfigClockSource+0xe0>
 80036a4:	2b60      	cmp	r3, #96	; 0x60
 80036a6:	d041      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036a8:	e06a      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ae:	d066      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x152>
 80036b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b4:	d017      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036b6:	e063      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f000 f941 	bl	800394e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e04c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f000 f92a 	bl	800394e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003708:	609a      	str	r2, [r3, #8]
      break;
 800370a:	e039      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	461a      	mov	r2, r3
 800371a:	f000 f8a1 	bl	8003860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2150      	movs	r1, #80	; 0x50
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f8f8 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 800372a:	e029      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	461a      	mov	r2, r3
 800373a:	f000 f8bf 	bl	80038bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2160      	movs	r1, #96	; 0x60
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f8e8 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 800374a:	e019      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	461a      	mov	r2, r3
 800375a:	f000 f881 	bl	8003860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f8d8 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 800376a:	e009      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f000 f8cf 	bl	800391a <TIM_ITRx_SetConfig>
        break;
 800377c:	e000      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800377e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a29      	ldr	r2, [pc, #164]	; (8003854 <TIM_Base_SetConfig+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00b      	beq.n	80037cc <TIM_Base_SetConfig+0x30>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d007      	beq.n	80037cc <TIM_Base_SetConfig+0x30>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a26      	ldr	r2, [pc, #152]	; (8003858 <TIM_Base_SetConfig+0xbc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_Base_SetConfig+0x30>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a25      	ldr	r2, [pc, #148]	; (800385c <TIM_Base_SetConfig+0xc0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d108      	bne.n	80037de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <TIM_Base_SetConfig+0xb8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00b      	beq.n	80037fe <TIM_Base_SetConfig+0x62>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0x62>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <TIM_Base_SetConfig+0xbc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0x62>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <TIM_Base_SetConfig+0xc0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a07      	ldr	r2, [pc, #28]	; (8003854 <TIM_Base_SetConfig+0xb8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d103      	bne.n	8003844 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	615a      	str	r2, [r3, #20]
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800

08003860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 030a 	bic.w	r3, r3, #10
 800389c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f023 0210 	bic.w	r2, r3, #16
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	031b      	lsls	r3, r3, #12
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	f043 0307 	orr.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800394e:	b480      	push	{r7}
 8003950:	b087      	sub	sp, #28
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	431a      	orrs	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4313      	orrs	r3, r2
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	609a      	str	r2, [r3, #8]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e046      	b.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d009      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10c      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800

08003a48 <arm_mat_trans_f32>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	f8b0 8000 	ldrh.w	r8, [r0]
 8003a50:	884a      	ldrh	r2, [r1, #2]
 8003a52:	b085      	sub	sp, #20
 8003a54:	4542      	cmp	r2, r8
 8003a56:	6846      	ldr	r6, [r0, #4]
 8003a58:	8843      	ldrh	r3, [r0, #2]
 8003a5a:	f8d1 b004 	ldr.w	fp, [r1, #4]
 8003a5e:	d157      	bne.n	8003b10 <arm_mat_trans_f32+0xc8>
 8003a60:	f8b1 c000 	ldrh.w	ip, [r1]
 8003a64:	459c      	cmp	ip, r3
 8003a66:	d153      	bne.n	8003b10 <arm_mat_trans_f32+0xc8>
 8003a68:	ea4f 039c 	mov.w	r3, ip, lsr #2
 8003a6c:	f00c 0203 	and.w	r2, ip, #3
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	9201      	str	r2, [sp, #4]
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	1c59      	adds	r1, r3, #1
 8003a7c:	b292      	uxth	r2, r2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003a84:	1c50      	adds	r0, r2, #1
 8003a86:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8003a8a:	010b      	lsls	r3, r1, #4
 8003a8c:	fb01 fa0a 	mul.w	sl, r1, sl
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8003a96:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8003a9a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8003a9e:	2700      	movs	r7, #0
 8003aa0:	9b02      	ldr	r3, [sp, #8]
 8003aa2:	eb0b 0087 	add.w	r0, fp, r7, lsl #2
 8003aa6:	b1f3      	cbz	r3, 8003ae6 <arm_mat_trans_f32+0x9e>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f106 0310 	add.w	r3, r6, #16
 8003aae:	eb06 050e 	add.w	r5, r6, lr
 8003ab2:	9000      	str	r0, [sp, #0]
 8003ab4:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8003ab8:	1854      	adds	r4, r2, r1
 8003aba:	6010      	str	r0, [r2, #0]
 8003abc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8003ac0:	3310      	adds	r3, #16
 8003ac2:	5050      	str	r0, [r2, r1]
 8003ac4:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8003ac8:	f842 0011 	str.w	r0, [r2, r1, lsl #1]
 8003acc:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8003ad0:	42ab      	cmp	r3, r5
 8003ad2:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8003ad6:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8003ada:	440a      	add	r2, r1
 8003adc:	d1ea      	bne.n	8003ab4 <arm_mat_trans_f32+0x6c>
 8003ade:	9800      	ldr	r0, [sp, #0]
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	4450      	add	r0, sl
 8003ae4:	441e      	add	r6, r3
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	b14b      	cbz	r3, 8003afe <arm_mat_trans_f32+0xb6>
 8003aea:	1f33      	subs	r3, r6, #4
 8003aec:	eb06 040c 	add.w	r4, r6, ip
 8003af0:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	6002      	str	r2, [r0, #0]
 8003af8:	4408      	add	r0, r1
 8003afa:	d1f9      	bne.n	8003af0 <arm_mat_trans_f32+0xa8>
 8003afc:	444e      	add	r6, r9
 8003afe:	3701      	adds	r7, #1
 8003b00:	b2bf      	uxth	r7, r7
 8003b02:	4547      	cmp	r7, r8
 8003b04:	d1cc      	bne.n	8003aa0 <arm_mat_trans_f32+0x58>
 8003b06:	2000      	movs	r0, #0
 8003b08:	b240      	sxtb	r0, r0
 8003b0a:	b005      	add	sp, #20
 8003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b10:	20fd      	movs	r0, #253	; 0xfd
 8003b12:	b240      	sxtb	r0, r0
 8003b14:	b005      	add	sp, #20
 8003b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1a:	bf00      	nop

08003b1c <arm_mat_sub_f32>:
 8003b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	6803      	ldr	r3, [r0, #0]
 8003b22:	e891 0810 	ldmia.w	r1, {r4, fp}
 8003b26:	6851      	ldr	r1, [r2, #4]
 8003b28:	b085      	sub	sp, #20
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003b30:	9101      	str	r1, [sp, #4]
 8003b32:	d15f      	bne.n	8003bf4 <arm_mat_sub_f32+0xd8>
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d15c      	bne.n	8003bf4 <arm_mat_sub_f32+0xd8>
 8003b3a:	8843      	ldrh	r3, [r0, #2]
 8003b3c:	8807      	ldrh	r7, [r0, #0]
 8003b3e:	fb07 f303 	mul.w	r3, r7, r3
 8003b42:	9302      	str	r3, [sp, #8]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	d03e      	beq.n	8003bc8 <arm_mat_sub_f32+0xac>
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	f10a 0610 	add.w	r6, sl, #16
 8003b50:	f10b 0510 	add.w	r5, fp, #16
 8003b54:	f101 0410 	add.w	r4, r1, #16
 8003b58:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8003b5c:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 8003b60:	f7fc ff18 	bl	8000994 <__aeabi_fsub>
 8003b64:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8003b68:	4607      	mov	r7, r0
 8003b6a:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8003b6e:	f7fc ff11 	bl	8000994 <__aeabi_fsub>
 8003b72:	f856 cc08 	ldr.w	ip, [r6, #-8]
 8003b76:	f855 9c08 	ldr.w	r9, [r5, #-8]
 8003b7a:	f844 7c0c 	str.w	r7, [r4, #-12]
 8003b7e:	f844 0c10 	str.w	r0, [r4, #-16]
 8003b82:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8003b86:	f856 0c04 	ldr.w	r0, [r6, #-4]
 8003b8a:	f8cd c000 	str.w	ip, [sp]
 8003b8e:	f7fc ff01 	bl	8000994 <__aeabi_fsub>
 8003b92:	f8dd c000 	ldr.w	ip, [sp]
 8003b96:	4607      	mov	r7, r0
 8003b98:	4649      	mov	r1, r9
 8003b9a:	4660      	mov	r0, ip
 8003b9c:	f7fc fefa 	bl	8000994 <__aeabi_fsub>
 8003ba0:	f1b8 0801 	subs.w	r8, r8, #1
 8003ba4:	f844 0c08 	str.w	r0, [r4, #-8]
 8003ba8:	f844 7c04 	str.w	r7, [r4, #-4]
 8003bac:	f106 0610 	add.w	r6, r6, #16
 8003bb0:	f105 0510 	add.w	r5, r5, #16
 8003bb4:	f104 0410 	add.w	r4, r4, #16
 8003bb8:	d1ce      	bne.n	8003b58 <arm_mat_sub_f32+0x3c>
 8003bba:	9b03      	ldr	r3, [sp, #12]
 8003bbc:	9a01      	ldr	r2, [sp, #4]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	441a      	add	r2, r3
 8003bc2:	449a      	add	sl, r3
 8003bc4:	449b      	add	fp, r3
 8003bc6:	9201      	str	r2, [sp, #4]
 8003bc8:	9b02      	ldr	r3, [sp, #8]
 8003bca:	f013 0703 	ands.w	r7, r3, #3
 8003bce:	d00c      	beq.n	8003bea <arm_mat_sub_f32+0xce>
 8003bd0:	9b01      	ldr	r3, [sp, #4]
 8003bd2:	f1a3 0904 	sub.w	r9, r3, #4
 8003bd6:	f85a 0b04 	ldr.w	r0, [sl], #4
 8003bda:	f85b 1b04 	ldr.w	r1, [fp], #4
 8003bde:	f7fc fed9 	bl	8000994 <__aeabi_fsub>
 8003be2:	3f01      	subs	r7, #1
 8003be4:	f849 0f04 	str.w	r0, [r9, #4]!
 8003be8:	d1f5      	bne.n	8003bd6 <arm_mat_sub_f32+0xba>
 8003bea:	2000      	movs	r0, #0
 8003bec:	b240      	sxtb	r0, r0
 8003bee:	b005      	add	sp, #20
 8003bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf4:	20fd      	movs	r0, #253	; 0xfd
 8003bf6:	b240      	sxtb	r0, r0
 8003bf8:	b005      	add	sp, #20
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop

08003c00 <arm_mat_mult_f32>:
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	8843      	ldrh	r3, [r0, #2]
 8003c06:	6845      	ldr	r5, [r0, #4]
 8003c08:	8800      	ldrh	r0, [r0, #0]
 8003c0a:	b08d      	sub	sp, #52	; 0x34
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	9009      	str	r0, [sp, #36]	; 0x24
 8003c10:	6850      	ldr	r0, [r2, #4]
 8003c12:	880c      	ldrh	r4, [r1, #0]
 8003c14:	900a      	str	r0, [sp, #40]	; 0x28
 8003c16:	8848      	ldrh	r0, [r1, #2]
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	9500      	str	r5, [sp, #0]
 8003c1c:	9002      	str	r0, [sp, #8]
 8003c1e:	f040 80a0 	bne.w	8003d62 <arm_mat_mult_f32+0x162>
 8003c22:	8813      	ldrh	r3, [r2, #0]
 8003c24:	42b3      	cmp	r3, r6
 8003c26:	f040 809c 	bne.w	8003d62 <arm_mat_mult_f32+0x162>
 8003c2a:	8853      	ldrh	r3, [r2, #2]
 8003c2c:	4283      	cmp	r3, r0
 8003c2e:	f040 8098 	bne.w	8003d62 <arm_mat_mult_f32+0x162>
 8003c32:	08a3      	lsrs	r3, r4, #2
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	0102      	lsls	r2, r0, #4
 8003c3e:	fb02 f203 	mul.w	r2, r2, r3
 8003c42:	9206      	str	r2, [sp, #24]
 8003c44:	f004 0203 	and.w	r2, r4, #3
 8003c48:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8003c4c:	9204      	str	r2, [sp, #16]
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	b292      	uxth	r2, r2
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	00a3      	lsls	r3, r4, #2
 8003c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c58:	0093      	lsls	r3, r2, #2
 8003c5a:	9307      	str	r3, [sp, #28]
 8003c5c:	684f      	ldr	r7, [r1, #4]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9105      	str	r1, [sp, #20]
 8003c62:	0085      	lsls	r5, r0, #2
 8003c64:	9308      	str	r3, [sp, #32]
 8003c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c68:	9a08      	ldr	r2, [sp, #32]
 8003c6a:	f04f 0900 	mov.w	r9, #0
 8003c6e:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	f103 0810 	add.w	r8, r3, #16
 8003c78:	9b03      	ldr	r3, [sp, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d06d      	beq.n	8003d5a <arm_mat_mult_f32+0x15a>
 8003c7e:	463c      	mov	r4, r7
 8003c80:	9b00      	ldr	r3, [sp, #0]
 8003c82:	f04f 0b00 	mov.w	fp, #0
 8003c86:	f103 0610 	add.w	r6, r3, #16
 8003c8a:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	f7fc ff8a 	bl	8000ba8 <__aeabi_fmul>
 8003c94:	4659      	mov	r1, fp
 8003c96:	f7fc fe7f 	bl	8000998 <__addsf3>
 8003c9a:	4683      	mov	fp, r0
 8003c9c:	5961      	ldr	r1, [r4, r5]
 8003c9e:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 8003ca2:	f7fc ff81 	bl	8000ba8 <__aeabi_fmul>
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	f7fc fe76 	bl	8000998 <__addsf3>
 8003cac:	4683      	mov	fp, r0
 8003cae:	f854 1015 	ldr.w	r1, [r4, r5, lsl #1]
 8003cb2:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8003cb6:	f7fc ff77 	bl	8000ba8 <__aeabi_fmul>
 8003cba:	4659      	mov	r1, fp
 8003cbc:	f7fc fe6c 	bl	8000998 <__addsf3>
 8003cc0:	4683      	mov	fp, r0
 8003cc2:	442c      	add	r4, r5
 8003cc4:	f854 1015 	ldr.w	r1, [r4, r5, lsl #1]
 8003cc8:	f856 0c04 	ldr.w	r0, [r6, #-4]
 8003ccc:	f7fc ff6c 	bl	8000ba8 <__aeabi_fmul>
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	f7fc fe61 	bl	8000998 <__addsf3>
 8003cd6:	442c      	add	r4, r5
 8003cd8:	3610      	adds	r6, #16
 8003cda:	442c      	add	r4, r5
 8003cdc:	4546      	cmp	r6, r8
 8003cde:	442c      	add	r4, r5
 8003ce0:	4683      	mov	fp, r0
 8003ce2:	d1d2      	bne.n	8003c8a <arm_mat_mult_f32+0x8a>
 8003ce4:	9b06      	ldr	r3, [sp, #24]
 8003ce6:	9c01      	ldr	r4, [sp, #4]
 8003ce8:	441f      	add	r7, r3
 8003cea:	9b04      	ldr	r3, [sp, #16]
 8003cec:	b17b      	cbz	r3, 8003d0e <arm_mat_mult_f32+0x10e>
 8003cee:	9b07      	ldr	r3, [sp, #28]
 8003cf0:	1f26      	subs	r6, r4, #4
 8003cf2:	441c      	add	r4, r3
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8003cfa:	f7fc ff55 	bl	8000ba8 <__aeabi_fmul>
 8003cfe:	4601      	mov	r1, r0
 8003d00:	4658      	mov	r0, fp
 8003d02:	f7fc fe49 	bl	8000998 <__addsf3>
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	4683      	mov	fp, r0
 8003d0a:	442f      	add	r7, r5
 8003d0c:	d1f2      	bne.n	8003cf4 <arm_mat_mult_f32+0xf4>
 8003d0e:	9b05      	ldr	r3, [sp, #20]
 8003d10:	f84a bb04 	str.w	fp, [sl], #4
 8003d14:	f109 0901 	add.w	r9, r9, #1
 8003d18:	9a02      	ldr	r2, [sp, #8]
 8003d1a:	fa1f f989 	uxth.w	r9, r9
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4591      	cmp	r9, r2
 8003d22:	eb03 0789 	add.w	r7, r3, r9, lsl #2
 8003d26:	d1a7      	bne.n	8003c78 <arm_mat_mult_f32+0x78>
 8003d28:	9908      	ldr	r1, [sp, #32]
 8003d2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003d2c:	4449      	add	r1, r9
 8003d2e:	b289      	uxth	r1, r1
 8003d30:	9108      	str	r1, [sp, #32]
 8003d32:	9900      	ldr	r1, [sp, #0]
 8003d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d36:	460c      	mov	r4, r1
 8003d38:	9901      	ldr	r1, [sp, #4]
 8003d3a:	4404      	add	r4, r0
 8003d3c:	9400      	str	r4, [sp, #0]
 8003d3e:	460c      	mov	r4, r1
 8003d40:	3a01      	subs	r2, #1
 8003d42:	b292      	uxth	r2, r2
 8003d44:	4404      	add	r4, r0
 8003d46:	9209      	str	r2, [sp, #36]	; 0x24
 8003d48:	9401      	str	r4, [sp, #4]
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d18a      	bne.n	8003c66 <arm_mat_mult_f32+0x66>
 8003d50:	4610      	mov	r0, r2
 8003d52:	b240      	sxtb	r0, r0
 8003d54:	b00d      	add	sp, #52	; 0x34
 8003d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	9c00      	ldr	r4, [sp, #0]
 8003d5c:	f04f 0b00 	mov.w	fp, #0
 8003d60:	e7c3      	b.n	8003cea <arm_mat_mult_f32+0xea>
 8003d62:	20fd      	movs	r0, #253	; 0xfd
 8003d64:	b240      	sxtb	r0, r0
 8003d66:	b00d      	add	sp, #52	; 0x34
 8003d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d6c <arm_mat_inverse_f32>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	8803      	ldrh	r3, [r0, #0]
 8003d72:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8003d76:	6844      	ldr	r4, [r0, #4]
 8003d78:	684a      	ldr	r2, [r1, #4]
 8003d7a:	b091      	sub	sp, #68	; 0x44
 8003d7c:	4598      	cmp	r8, r3
 8003d7e:	9409      	str	r4, [sp, #36]	; 0x24
 8003d80:	920a      	str	r2, [sp, #40]	; 0x28
 8003d82:	d004      	beq.n	8003d8e <arm_mat_inverse_f32+0x22>
 8003d84:	20fd      	movs	r0, #253	; 0xfd
 8003d86:	b240      	sxtb	r0, r0
 8003d88:	b011      	add	sp, #68	; 0x44
 8003d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8e:	880a      	ldrh	r2, [r1, #0]
 8003d90:	884b      	ldrh	r3, [r1, #2]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d1f6      	bne.n	8003d84 <arm_mat_inverse_f32+0x18>
 8003d96:	4598      	cmp	r8, r3
 8003d98:	d1f4      	bne.n	8003d84 <arm_mat_inverse_f32+0x18>
 8003d9a:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d9c:	f1b8 0f00 	cmp.w	r8, #0
 8003da0:	f000 8102 	beq.w	8003fa8 <arm_mat_inverse_f32+0x23c>
 8003da4:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 8003da8:	f04f 0b00 	mov.w	fp, #0
 8003dac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003db0:	465e      	mov	r6, fp
 8003db2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003db4:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8003db8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003dbc:	f108 37ff 	add.w	r7, r8, #4294967295
 8003dc0:	e009      	b.n	8003dd6 <arm_mat_inverse_f32+0x6a>
 8003dc2:	4652      	mov	r2, sl
 8003dc4:	eb00 050a 	add.w	r5, r0, sl
 8003dc8:	f000 fdb4 	bl	8004934 <memset>
 8003dcc:	3601      	adds	r6, #1
 8003dce:	f10b 0b04 	add.w	fp, fp, #4
 8003dd2:	f1aa 0a04 	sub.w	sl, sl, #4
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	b126      	cbz	r6, 8003de4 <arm_mat_inverse_f32+0x78>
 8003dda:	4628      	mov	r0, r5
 8003ddc:	465a      	mov	r2, fp
 8003dde:	f000 fda9 	bl	8004934 <memset>
 8003de2:	445d      	add	r5, fp
 8003de4:	42be      	cmp	r6, r7
 8003de6:	f8c5 9000 	str.w	r9, [r5]
 8003dea:	f105 0004 	add.w	r0, r5, #4
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	d1e6      	bne.n	8003dc2 <arm_mat_inverse_f32+0x56>
 8003df4:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8003df8:	1d19      	adds	r1, r3, #4
 8003dfa:	9306      	str	r3, [sp, #24]
 8003dfc:	9307      	str	r3, [sp, #28]
 8003dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e00:	2200      	movs	r2, #0
 8003e02:	9203      	str	r2, [sp, #12]
 8003e04:	9402      	str	r4, [sp, #8]
 8003e06:	960b      	str	r6, [sp, #44]	; 0x2c
 8003e08:	910e      	str	r1, [sp, #56]	; 0x38
 8003e0a:	920d      	str	r2, [sp, #52]	; 0x34
 8003e0c:	9305      	str	r3, [sp, #20]
 8003e0e:	f8cd 8010 	str.w	r8, [sp, #16]
 8003e12:	9b02      	ldr	r3, [sp, #8]
 8003e14:	681d      	ldr	r5, [r3, #0]
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	4598      	cmp	r8, r3
 8003e1a:	f000 80d9 	beq.w	8003fd0 <arm_mat_inverse_f32+0x264>
 8003e1e:	461f      	mov	r7, r3
 8003e20:	9e02      	ldr	r6, [sp, #8]
 8003e22:	f04f 0900 	mov.w	r9, #0
 8003e26:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003e2a:	e009      	b.n	8003e40 <arm_mat_inverse_f32+0xd4>
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4649      	mov	r1, r9
 8003e30:	f7fd f876 	bl	8000f20 <__aeabi_fcmpgt>
 8003e34:	b100      	cbz	r0, 8003e38 <arm_mat_inverse_f32+0xcc>
 8003e36:	46a1      	mov	r9, r4
 8003e38:	3701      	adds	r7, #1
 8003e3a:	45b8      	cmp	r8, r7
 8003e3c:	4456      	add	r6, sl
 8003e3e:	d009      	beq.n	8003e54 <arm_mat_inverse_f32+0xe8>
 8003e40:	6834      	ldr	r4, [r6, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7fd f86b 	bl	8000f20 <__aeabi_fcmpgt>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d1ee      	bne.n	8003e2c <arm_mat_inverse_f32+0xc0>
 8003e4e:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8003e52:	e7eb      	b.n	8003e2c <arm_mat_inverse_f32+0xc0>
 8003e54:	4648      	mov	r0, r9
 8003e56:	2100      	movs	r1, #0
 8003e58:	f7fd f83a 	bl	8000ed0 <__aeabi_fcmpeq>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	f040 80b7 	bne.w	8003fd0 <arm_mat_inverse_f32+0x264>
 8003e62:	4628      	mov	r0, r5
 8003e64:	2100      	movs	r1, #0
 8003e66:	f7fd f85b 	bl	8000f20 <__aeabi_fcmpgt>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	f000 80b2 	beq.w	8003fd4 <arm_mat_inverse_f32+0x268>
 8003e70:	4628      	mov	r0, r5
 8003e72:	4649      	mov	r1, r9
 8003e74:	f7fd f82c 	bl	8000ed0 <__aeabi_fcmpeq>
 8003e78:	b978      	cbnz	r0, 8003e9a <arm_mat_inverse_f32+0x12e>
 8003e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e7c:	b16b      	cbz	r3, 8003e9a <arm_mat_inverse_f32+0x12e>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	2100      	movs	r1, #0
 8003e82:	f7fd f84d 	bl	8000f20 <__aeabi_fcmpgt>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f000 80a7 	beq.w	8003fda <arm_mat_inverse_f32+0x26e>
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	4649      	mov	r1, r9
 8003e90:	f7fd f81e 	bl	8000ed0 <__aeabi_fcmpeq>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f040 80a5 	bne.w	8003fe4 <arm_mat_inverse_f32+0x278>
 8003e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d007      	beq.n	8003eb0 <arm_mat_inverse_f32+0x144>
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f7fd f814 	bl	8000ed0 <__aeabi_fcmpeq>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f040 8091 	bne.w	8003fd0 <arm_mat_inverse_f32+0x264>
 8003eae:	900d      	str	r0, [sp, #52]	; 0x34
 8003eb0:	9b05      	ldr	r3, [sp, #20]
 8003eb2:	9a06      	ldr	r2, [sp, #24]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8003eb8:	9e04      	ldr	r6, [sp, #16]
 8003eba:	9c02      	ldr	r4, [sp, #8]
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc ff26 	bl	8000d10 <__aeabi_fdiv>
 8003ec4:	3e01      	subs	r6, #1
 8003ec6:	f844 0b04 	str.w	r0, [r4], #4
 8003eca:	d1f7      	bne.n	8003ebc <arm_mat_inverse_f32+0x150>
 8003ecc:	4646      	mov	r6, r8
 8003ece:	9c05      	ldr	r4, [sp, #20]
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f7fc ff1c 	bl	8000d10 <__aeabi_fdiv>
 8003ed8:	3e01      	subs	r6, #1
 8003eda:	f844 0b04 	str.w	r0, [r4], #4
 8003ede:	d1f7      	bne.n	8003ed0 <arm_mat_inverse_f32+0x164>
 8003ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee2:	9a03      	ldr	r2, [sp, #12]
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003eea:	9208      	str	r2, [sp, #32]
 8003eec:	f8cd 8004 	str.w	r8, [sp, #4]
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	429e      	cmp	r6, r3
 8003ef4:	f000 8094 	beq.w	8004020 <arm_mat_inverse_f32+0x2b4>
 8003ef8:	463c      	mov	r4, r7
 8003efa:	f8dd b010 	ldr.w	fp, [sp, #16]
 8003efe:	f8dd a008 	ldr.w	sl, [sp, #8]
 8003f02:	683d      	ldr	r5, [r7, #0]
 8003f04:	f85a 1b04 	ldr.w	r1, [sl], #4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7fc fe4d 	bl	8000ba8 <__aeabi_fmul>
 8003f0e:	f8d4 8000 	ldr.w	r8, [r4]
 8003f12:	4601      	mov	r1, r0
 8003f14:	4640      	mov	r0, r8
 8003f16:	f7fc fd3d 	bl	8000994 <__aeabi_fsub>
 8003f1a:	f1bb 0b01 	subs.w	fp, fp, #1
 8003f1e:	f844 0b04 	str.w	r0, [r4], #4
 8003f22:	d1ef      	bne.n	8003f04 <arm_mat_inverse_f32+0x198>
 8003f24:	464c      	mov	r4, r9
 8003f26:	9b07      	ldr	r3, [sp, #28]
 8003f28:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003f2c:	f8dd b014 	ldr.w	fp, [sp, #20]
 8003f30:	eb07 0803 	add.w	r8, r7, r3
 8003f34:	f85b 1b04 	ldr.w	r1, [fp], #4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f7fc fe35 	bl	8000ba8 <__aeabi_fmul>
 8003f3e:	6827      	ldr	r7, [r4, #0]
 8003f40:	4601      	mov	r1, r0
 8003f42:	4638      	mov	r0, r7
 8003f44:	f7fc fd26 	bl	8000994 <__aeabi_fsub>
 8003f48:	f1ba 0a01 	subs.w	sl, sl, #1
 8003f4c:	f844 0b04 	str.w	r0, [r4], #4
 8003f50:	d1f0      	bne.n	8003f34 <arm_mat_inverse_f32+0x1c8>
 8003f52:	9b06      	ldr	r3, [sp, #24]
 8003f54:	4499      	add	r9, r3
 8003f56:	9b08      	ldr	r3, [sp, #32]
 8003f58:	3601      	adds	r6, #1
 8003f5a:	eb08 0703 	add.w	r7, r8, r3
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	42b3      	cmp	r3, r6
 8003f62:	d1c5      	bne.n	8003ef0 <arm_mat_inverse_f32+0x184>
 8003f64:	4698      	mov	r8, r3
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	9303      	str	r3, [sp, #12]
 8003f74:	9b02      	ldr	r3, [sp, #8]
 8003f76:	4413      	add	r3, r2
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f80:	3b01      	subs	r3, #1
 8003f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f84:	9b07      	ldr	r3, [sp, #28]
 8003f86:	3b04      	subs	r3, #4
 8003f88:	9307      	str	r3, [sp, #28]
 8003f8a:	9b04      	ldr	r3, [sp, #16]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	9304      	str	r3, [sp, #16]
 8003f90:	f47f af3f 	bne.w	8003e12 <arm_mat_inverse_f32+0xa6>
 8003f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d022      	beq.n	8003fe0 <arm_mat_inverse_f32+0x274>
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f7fc ff97 	bl	8000ed0 <__aeabi_fcmpeq>
 8003fa2:	b1e8      	cbz	r0, 8003fe0 <arm_mat_inverse_f32+0x274>
 8003fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fa6:	685c      	ldr	r4, [r3, #4]
 8003fa8:	fb08 f608 	mul.w	r6, r8, r8
 8003fac:	b186      	cbz	r6, 8003fd0 <arm_mat_inverse_f32+0x264>
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f7fc ff8d 	bl	8000ed0 <__aeabi_fcmpeq>
 8003fb6:	b198      	cbz	r0, 8003fe0 <arm_mat_inverse_f32+0x274>
 8003fb8:	2500      	movs	r5, #0
 8003fba:	e004      	b.n	8003fc6 <arm_mat_inverse_f32+0x25a>
 8003fbc:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003fc0:	f7fc ff86 	bl	8000ed0 <__aeabi_fcmpeq>
 8003fc4:	b160      	cbz	r0, 8003fe0 <arm_mat_inverse_f32+0x274>
 8003fc6:	3501      	adds	r5, #1
 8003fc8:	42b5      	cmp	r5, r6
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	d1f5      	bne.n	8003fbc <arm_mat_inverse_f32+0x250>
 8003fd0:	20fb      	movs	r0, #251	; 0xfb
 8003fd2:	e6d8      	b.n	8003d86 <arm_mat_inverse_f32+0x1a>
 8003fd4:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8003fd8:	e74b      	b.n	8003e72 <arm_mat_inverse_f32+0x106>
 8003fda:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8003fde:	e756      	b.n	8003e8e <arm_mat_inverse_f32+0x122>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e6d0      	b.n	8003d86 <arm_mat_inverse_f32+0x1a>
 8003fe4:	9904      	ldr	r1, [sp, #16]
 8003fe6:	9a02      	ldr	r2, [sp, #8]
 8003fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fea:	6810      	ldr	r0, [r2, #0]
 8003fec:	681c      	ldr	r4, [r3, #0]
 8003fee:	3901      	subs	r1, #1
 8003ff0:	f842 4b04 	str.w	r4, [r2], #4
 8003ff4:	f843 0b04 	str.w	r0, [r3], #4
 8003ff8:	d1f7      	bne.n	8003fea <arm_mat_inverse_f32+0x27e>
 8003ffa:	9b05      	ldr	r3, [sp, #20]
 8003ffc:	9a06      	ldr	r2, [sp, #24]
 8003ffe:	189a      	adds	r2, r3, r2
 8004000:	920c      	str	r2, [sp, #48]	; 0x30
 8004002:	4611      	mov	r1, r2
 8004004:	4642      	mov	r2, r8
 8004006:	6808      	ldr	r0, [r1, #0]
 8004008:	681c      	ldr	r4, [r3, #0]
 800400a:	3a01      	subs	r2, #1
 800400c:	f841 4b04 	str.w	r4, [r1], #4
 8004010:	f843 0b04 	str.w	r0, [r3], #4
 8004014:	d1f7      	bne.n	8004006 <arm_mat_inverse_f32+0x29a>
 8004016:	9b02      	ldr	r3, [sp, #8]
 8004018:	681d      	ldr	r5, [r3, #0]
 800401a:	2301      	movs	r3, #1
 800401c:	930d      	str	r3, [sp, #52]	; 0x34
 800401e:	e74b      	b.n	8003eb8 <arm_mat_inverse_f32+0x14c>
 8004020:	9b07      	ldr	r3, [sp, #28]
 8004022:	eb07 0803 	add.w	r8, r7, r3
 8004026:	9b06      	ldr	r3, [sp, #24]
 8004028:	4499      	add	r9, r3
 800402a:	e794      	b.n	8003f56 <arm_mat_inverse_f32+0x1ea>

0800402c <arm_mat_init_f32>:
 800402c:	8001      	strh	r1, [r0, #0]
 800402e:	8042      	strh	r2, [r0, #2]
 8004030:	6043      	str	r3, [r0, #4]
 8004032:	4770      	bx	lr

08004034 <arm_mat_add_f32>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	6803      	ldr	r3, [r0, #0]
 800403a:	e891 0810 	ldmia.w	r1, {r4, fp}
 800403e:	6851      	ldr	r1, [r2, #4]
 8004040:	b085      	sub	sp, #20
 8004042:	42a3      	cmp	r3, r4
 8004044:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8004048:	9101      	str	r1, [sp, #4]
 800404a:	d15f      	bne.n	800410c <arm_mat_add_f32+0xd8>
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	4293      	cmp	r3, r2
 8004050:	d15c      	bne.n	800410c <arm_mat_add_f32+0xd8>
 8004052:	8843      	ldrh	r3, [r0, #2]
 8004054:	8807      	ldrh	r7, [r0, #0]
 8004056:	fb07 f303 	mul.w	r3, r7, r3
 800405a:	9302      	str	r3, [sp, #8]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	9303      	str	r3, [sp, #12]
 8004060:	d03e      	beq.n	80040e0 <arm_mat_add_f32+0xac>
 8004062:	4698      	mov	r8, r3
 8004064:	f10a 0610 	add.w	r6, sl, #16
 8004068:	f10b 0510 	add.w	r5, fp, #16
 800406c:	f101 0410 	add.w	r4, r1, #16
 8004070:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8004074:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 8004078:	f7fc fc8e 	bl	8000998 <__addsf3>
 800407c:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8004080:	4607      	mov	r7, r0
 8004082:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8004086:	f7fc fc87 	bl	8000998 <__addsf3>
 800408a:	f856 cc08 	ldr.w	ip, [r6, #-8]
 800408e:	f855 9c08 	ldr.w	r9, [r5, #-8]
 8004092:	f844 7c0c 	str.w	r7, [r4, #-12]
 8004096:	f844 0c10 	str.w	r0, [r4, #-16]
 800409a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800409e:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80040a2:	f8cd c000 	str.w	ip, [sp]
 80040a6:	f7fc fc77 	bl	8000998 <__addsf3>
 80040aa:	f8dd c000 	ldr.w	ip, [sp]
 80040ae:	4607      	mov	r7, r0
 80040b0:	4649      	mov	r1, r9
 80040b2:	4660      	mov	r0, ip
 80040b4:	f7fc fc70 	bl	8000998 <__addsf3>
 80040b8:	f1b8 0801 	subs.w	r8, r8, #1
 80040bc:	f844 0c08 	str.w	r0, [r4, #-8]
 80040c0:	f844 7c04 	str.w	r7, [r4, #-4]
 80040c4:	f106 0610 	add.w	r6, r6, #16
 80040c8:	f105 0510 	add.w	r5, r5, #16
 80040cc:	f104 0410 	add.w	r4, r4, #16
 80040d0:	d1ce      	bne.n	8004070 <arm_mat_add_f32+0x3c>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	9a01      	ldr	r2, [sp, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	441a      	add	r2, r3
 80040da:	449a      	add	sl, r3
 80040dc:	449b      	add	fp, r3
 80040de:	9201      	str	r2, [sp, #4]
 80040e0:	9b02      	ldr	r3, [sp, #8]
 80040e2:	f013 0703 	ands.w	r7, r3, #3
 80040e6:	d00c      	beq.n	8004102 <arm_mat_add_f32+0xce>
 80040e8:	9b01      	ldr	r3, [sp, #4]
 80040ea:	f1a3 0904 	sub.w	r9, r3, #4
 80040ee:	f85a 0b04 	ldr.w	r0, [sl], #4
 80040f2:	f85b 1b04 	ldr.w	r1, [fp], #4
 80040f6:	f7fc fc4f 	bl	8000998 <__addsf3>
 80040fa:	3f01      	subs	r7, #1
 80040fc:	f849 0f04 	str.w	r0, [r9, #4]!
 8004100:	d1f5      	bne.n	80040ee <arm_mat_add_f32+0xba>
 8004102:	2000      	movs	r0, #0
 8004104:	b240      	sxtb	r0, r0
 8004106:	b005      	add	sp, #20
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	20fd      	movs	r0, #253	; 0xfd
 800410e:	b240      	sxtb	r0, r0
 8004110:	b005      	add	sp, #20
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop

08004118 <_ZdlPvj>:
 8004118:	f000 b800 	b.w	800411c <_ZdlPv>

0800411c <_ZdlPv>:
 800411c:	f000 bc02 	b.w	8004924 <free>

08004120 <atanf>:
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004128:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800412c:	4604      	mov	r4, r0
 800412e:	4607      	mov	r7, r0
 8004130:	db0e      	blt.n	8004150 <atanf+0x30>
 8004132:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004136:	dd04      	ble.n	8004142 <atanf+0x22>
 8004138:	4601      	mov	r1, r0
 800413a:	f7fc fc2d 	bl	8000998 <__addsf3>
 800413e:	4604      	mov	r4, r0
 8004140:	e003      	b.n	800414a <atanf+0x2a>
 8004142:	2800      	cmp	r0, #0
 8004144:	f340 80cd 	ble.w	80042e2 <atanf+0x1c2>
 8004148:	4c67      	ldr	r4, [pc, #412]	; (80042e8 <atanf+0x1c8>)
 800414a:	4620      	mov	r0, r4
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004150:	4b66      	ldr	r3, [pc, #408]	; (80042ec <atanf+0x1cc>)
 8004152:	429d      	cmp	r5, r3
 8004154:	dc0e      	bgt.n	8004174 <atanf+0x54>
 8004156:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800415a:	da08      	bge.n	800416e <atanf+0x4e>
 800415c:	4964      	ldr	r1, [pc, #400]	; (80042f0 <atanf+0x1d0>)
 800415e:	f7fc fc1b 	bl	8000998 <__addsf3>
 8004162:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004166:	f7fc fedb 	bl	8000f20 <__aeabi_fcmpgt>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1ed      	bne.n	800414a <atanf+0x2a>
 800416e:	f04f 36ff 	mov.w	r6, #4294967295
 8004172:	e01c      	b.n	80041ae <atanf+0x8e>
 8004174:	f000 f8e0 	bl	8004338 <fabsf>
 8004178:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <atanf+0x1d4>)
 800417a:	4604      	mov	r4, r0
 800417c:	429d      	cmp	r5, r3
 800417e:	dc7c      	bgt.n	800427a <atanf+0x15a>
 8004180:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8004184:	429d      	cmp	r5, r3
 8004186:	dc67      	bgt.n	8004258 <atanf+0x138>
 8004188:	4601      	mov	r1, r0
 800418a:	f7fc fc05 	bl	8000998 <__addsf3>
 800418e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004192:	f7fc fbff 	bl	8000994 <__aeabi_fsub>
 8004196:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800419a:	4605      	mov	r5, r0
 800419c:	4620      	mov	r0, r4
 800419e:	f7fc fbfb 	bl	8000998 <__addsf3>
 80041a2:	4601      	mov	r1, r0
 80041a4:	4628      	mov	r0, r5
 80041a6:	f7fc fdb3 	bl	8000d10 <__aeabi_fdiv>
 80041aa:	2600      	movs	r6, #0
 80041ac:	4604      	mov	r4, r0
 80041ae:	4621      	mov	r1, r4
 80041b0:	4620      	mov	r0, r4
 80041b2:	f7fc fcf9 	bl	8000ba8 <__aeabi_fmul>
 80041b6:	4601      	mov	r1, r0
 80041b8:	4680      	mov	r8, r0
 80041ba:	f7fc fcf5 	bl	8000ba8 <__aeabi_fmul>
 80041be:	4605      	mov	r5, r0
 80041c0:	494d      	ldr	r1, [pc, #308]	; (80042f8 <atanf+0x1d8>)
 80041c2:	f7fc fcf1 	bl	8000ba8 <__aeabi_fmul>
 80041c6:	494d      	ldr	r1, [pc, #308]	; (80042fc <atanf+0x1dc>)
 80041c8:	f7fc fbe6 	bl	8000998 <__addsf3>
 80041cc:	4629      	mov	r1, r5
 80041ce:	f7fc fceb 	bl	8000ba8 <__aeabi_fmul>
 80041d2:	494b      	ldr	r1, [pc, #300]	; (8004300 <atanf+0x1e0>)
 80041d4:	f7fc fbe0 	bl	8000998 <__addsf3>
 80041d8:	4629      	mov	r1, r5
 80041da:	f7fc fce5 	bl	8000ba8 <__aeabi_fmul>
 80041de:	4949      	ldr	r1, [pc, #292]	; (8004304 <atanf+0x1e4>)
 80041e0:	f7fc fbda 	bl	8000998 <__addsf3>
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7fc fcdf 	bl	8000ba8 <__aeabi_fmul>
 80041ea:	4947      	ldr	r1, [pc, #284]	; (8004308 <atanf+0x1e8>)
 80041ec:	f7fc fbd4 	bl	8000998 <__addsf3>
 80041f0:	4629      	mov	r1, r5
 80041f2:	f7fc fcd9 	bl	8000ba8 <__aeabi_fmul>
 80041f6:	4945      	ldr	r1, [pc, #276]	; (800430c <atanf+0x1ec>)
 80041f8:	f7fc fbce 	bl	8000998 <__addsf3>
 80041fc:	4641      	mov	r1, r8
 80041fe:	f7fc fcd3 	bl	8000ba8 <__aeabi_fmul>
 8004202:	4943      	ldr	r1, [pc, #268]	; (8004310 <atanf+0x1f0>)
 8004204:	4680      	mov	r8, r0
 8004206:	4628      	mov	r0, r5
 8004208:	f7fc fcce 	bl	8000ba8 <__aeabi_fmul>
 800420c:	4941      	ldr	r1, [pc, #260]	; (8004314 <atanf+0x1f4>)
 800420e:	f7fc fbc1 	bl	8000994 <__aeabi_fsub>
 8004212:	4629      	mov	r1, r5
 8004214:	f7fc fcc8 	bl	8000ba8 <__aeabi_fmul>
 8004218:	493f      	ldr	r1, [pc, #252]	; (8004318 <atanf+0x1f8>)
 800421a:	f7fc fbbb 	bl	8000994 <__aeabi_fsub>
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc fcc2 	bl	8000ba8 <__aeabi_fmul>
 8004224:	493d      	ldr	r1, [pc, #244]	; (800431c <atanf+0x1fc>)
 8004226:	f7fc fbb5 	bl	8000994 <__aeabi_fsub>
 800422a:	4629      	mov	r1, r5
 800422c:	f7fc fcbc 	bl	8000ba8 <__aeabi_fmul>
 8004230:	493b      	ldr	r1, [pc, #236]	; (8004320 <atanf+0x200>)
 8004232:	f7fc fbaf 	bl	8000994 <__aeabi_fsub>
 8004236:	4629      	mov	r1, r5
 8004238:	f7fc fcb6 	bl	8000ba8 <__aeabi_fmul>
 800423c:	4601      	mov	r1, r0
 800423e:	4640      	mov	r0, r8
 8004240:	f7fc fbaa 	bl	8000998 <__addsf3>
 8004244:	4621      	mov	r1, r4
 8004246:	f7fc fcaf 	bl	8000ba8 <__aeabi_fmul>
 800424a:	1c73      	adds	r3, r6, #1
 800424c:	4601      	mov	r1, r0
 800424e:	d133      	bne.n	80042b8 <atanf+0x198>
 8004250:	4620      	mov	r0, r4
 8004252:	f7fc fb9f 	bl	8000994 <__aeabi_fsub>
 8004256:	e772      	b.n	800413e <atanf+0x1e>
 8004258:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800425c:	f7fc fb9a 	bl	8000994 <__aeabi_fsub>
 8004260:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004264:	4605      	mov	r5, r0
 8004266:	4620      	mov	r0, r4
 8004268:	f7fc fb96 	bl	8000998 <__addsf3>
 800426c:	4601      	mov	r1, r0
 800426e:	4628      	mov	r0, r5
 8004270:	f7fc fd4e 	bl	8000d10 <__aeabi_fdiv>
 8004274:	2601      	movs	r6, #1
 8004276:	4604      	mov	r4, r0
 8004278:	e799      	b.n	80041ae <atanf+0x8e>
 800427a:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <atanf+0x204>)
 800427c:	429d      	cmp	r5, r3
 800427e:	dc14      	bgt.n	80042aa <atanf+0x18a>
 8004280:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8004284:	f7fc fb86 	bl	8000994 <__aeabi_fsub>
 8004288:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800428c:	4605      	mov	r5, r0
 800428e:	4620      	mov	r0, r4
 8004290:	f7fc fc8a 	bl	8000ba8 <__aeabi_fmul>
 8004294:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004298:	f7fc fb7e 	bl	8000998 <__addsf3>
 800429c:	4601      	mov	r1, r0
 800429e:	4628      	mov	r0, r5
 80042a0:	f7fc fd36 	bl	8000d10 <__aeabi_fdiv>
 80042a4:	2602      	movs	r6, #2
 80042a6:	4604      	mov	r4, r0
 80042a8:	e781      	b.n	80041ae <atanf+0x8e>
 80042aa:	4601      	mov	r1, r0
 80042ac:	481e      	ldr	r0, [pc, #120]	; (8004328 <atanf+0x208>)
 80042ae:	f7fc fd2f 	bl	8000d10 <__aeabi_fdiv>
 80042b2:	2603      	movs	r6, #3
 80042b4:	4604      	mov	r4, r0
 80042b6:	e77a      	b.n	80041ae <atanf+0x8e>
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <atanf+0x20c>)
 80042ba:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80042be:	f7fc fb69 	bl	8000994 <__aeabi_fsub>
 80042c2:	4621      	mov	r1, r4
 80042c4:	f7fc fb66 	bl	8000994 <__aeabi_fsub>
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <atanf+0x210>)
 80042ca:	4601      	mov	r1, r0
 80042cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80042d0:	f7fc fb60 	bl	8000994 <__aeabi_fsub>
 80042d4:	2f00      	cmp	r7, #0
 80042d6:	4604      	mov	r4, r0
 80042d8:	f6bf af37 	bge.w	800414a <atanf+0x2a>
 80042dc:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80042e0:	e733      	b.n	800414a <atanf+0x2a>
 80042e2:	4c14      	ldr	r4, [pc, #80]	; (8004334 <atanf+0x214>)
 80042e4:	e731      	b.n	800414a <atanf+0x2a>
 80042e6:	bf00      	nop
 80042e8:	3fc90fdb 	.word	0x3fc90fdb
 80042ec:	3edfffff 	.word	0x3edfffff
 80042f0:	7149f2ca 	.word	0x7149f2ca
 80042f4:	3f97ffff 	.word	0x3f97ffff
 80042f8:	3c8569d7 	.word	0x3c8569d7
 80042fc:	3d4bda59 	.word	0x3d4bda59
 8004300:	3d886b35 	.word	0x3d886b35
 8004304:	3dba2e6e 	.word	0x3dba2e6e
 8004308:	3e124925 	.word	0x3e124925
 800430c:	3eaaaaab 	.word	0x3eaaaaab
 8004310:	bd15a221 	.word	0xbd15a221
 8004314:	3d6ef16b 	.word	0x3d6ef16b
 8004318:	3d9d8795 	.word	0x3d9d8795
 800431c:	3de38e38 	.word	0x3de38e38
 8004320:	3e4ccccd 	.word	0x3e4ccccd
 8004324:	401bffff 	.word	0x401bffff
 8004328:	bf800000 	.word	0xbf800000
 800432c:	08004a44 	.word	0x08004a44
 8004330:	08004a34 	.word	0x08004a34
 8004334:	bfc90fdb 	.word	0xbfc90fdb

08004338 <fabsf>:
 8004338:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800433c:	4770      	bx	lr
	...

08004340 <asinf>:
 8004340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004342:	b08b      	sub	sp, #44	; 0x2c
 8004344:	4604      	mov	r4, r0
 8004346:	f000 f895 	bl	8004474 <__ieee754_asinf>
 800434a:	4e21      	ldr	r6, [pc, #132]	; (80043d0 <asinf+0x90>)
 800434c:	4605      	mov	r5, r0
 800434e:	f996 3000 	ldrsb.w	r3, [r6]
 8004352:	3301      	adds	r3, #1
 8004354:	d038      	beq.n	80043c8 <asinf+0x88>
 8004356:	4621      	mov	r1, r4
 8004358:	4620      	mov	r0, r4
 800435a:	f7fc fdeb 	bl	8000f34 <__aeabi_fcmpun>
 800435e:	4607      	mov	r7, r0
 8004360:	2800      	cmp	r0, #0
 8004362:	d131      	bne.n	80043c8 <asinf+0x88>
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff ffe7 	bl	8004338 <fabsf>
 800436a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800436e:	f7fc fdd7 	bl	8000f20 <__aeabi_fcmpgt>
 8004372:	b348      	cbz	r0, 80043c8 <asinf+0x88>
 8004374:	2301      	movs	r3, #1
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <asinf+0x94>)
 800437a:	4620      	mov	r0, r4
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	9708      	str	r7, [sp, #32]
 8004380:	f7fc f84a 	bl	8000418 <__aeabi_f2d>
 8004384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800438c:	4812      	ldr	r0, [pc, #72]	; (80043d8 <asinf+0x98>)
 800438e:	f000 fa99 	bl	80048c4 <nan>
 8004392:	f996 3000 	ldrsb.w	r3, [r6]
 8004396:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d104      	bne.n	80043a8 <asinf+0x68>
 800439e:	f000 fa97 	bl	80048d0 <__errno>
 80043a2:	2321      	movs	r3, #33	; 0x21
 80043a4:	6003      	str	r3, [r0, #0]
 80043a6:	e004      	b.n	80043b2 <asinf+0x72>
 80043a8:	4668      	mov	r0, sp
 80043aa:	f000 fa88 	bl	80048be <matherr>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d0f5      	beq.n	800439e <asinf+0x5e>
 80043b2:	9b08      	ldr	r3, [sp, #32]
 80043b4:	b11b      	cbz	r3, 80043be <asinf+0x7e>
 80043b6:	f000 fa8b 	bl	80048d0 <__errno>
 80043ba:	9b08      	ldr	r3, [sp, #32]
 80043bc:	6003      	str	r3, [r0, #0]
 80043be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c2:	f7fc fa93 	bl	80008ec <__aeabi_d2f>
 80043c6:	4605      	mov	r5, r0
 80043c8:	4628      	mov	r0, r5
 80043ca:	b00b      	add	sp, #44	; 0x2c
 80043cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000009 	.word	0x20000009
 80043d4:	08004a54 	.word	0x08004a54
 80043d8:	08004a59 	.word	0x08004a59

080043dc <atan2f>:
 80043dc:	f000 b98c 	b.w	80046f8 <__ieee754_atan2f>

080043e0 <sqrtf>:
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b08b      	sub	sp, #44	; 0x2c
 80043e4:	4604      	mov	r4, r0
 80043e6:	f000 fa17 	bl	8004818 <__ieee754_sqrtf>
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <sqrtf+0x8c>)
 80043ec:	4606      	mov	r6, r0
 80043ee:	f993 5000 	ldrsb.w	r5, [r3]
 80043f2:	1c6b      	adds	r3, r5, #1
 80043f4:	d02a      	beq.n	800444c <sqrtf+0x6c>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7fc fd9b 	bl	8000f34 <__aeabi_fcmpun>
 80043fe:	4607      	mov	r7, r0
 8004400:	bb20      	cbnz	r0, 800444c <sqrtf+0x6c>
 8004402:	2100      	movs	r1, #0
 8004404:	4620      	mov	r0, r4
 8004406:	f7fc fd6d 	bl	8000ee4 <__aeabi_fcmplt>
 800440a:	b1f8      	cbz	r0, 800444c <sqrtf+0x6c>
 800440c:	2301      	movs	r3, #1
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <sqrtf+0x90>)
 8004412:	4620      	mov	r0, r4
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	9708      	str	r7, [sp, #32]
 8004418:	f7fb fffe 	bl	8000418 <__aeabi_f2d>
 800441c:	2200      	movs	r2, #0
 800441e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004426:	2300      	movs	r3, #0
 8004428:	b99d      	cbnz	r5, 8004452 <sqrtf+0x72>
 800442a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800442e:	4668      	mov	r0, sp
 8004430:	f000 fa45 	bl	80048be <matherr>
 8004434:	b1a8      	cbz	r0, 8004462 <sqrtf+0x82>
 8004436:	9b08      	ldr	r3, [sp, #32]
 8004438:	b11b      	cbz	r3, 8004442 <sqrtf+0x62>
 800443a:	f000 fa49 	bl	80048d0 <__errno>
 800443e:	9b08      	ldr	r3, [sp, #32]
 8004440:	6003      	str	r3, [r0, #0]
 8004442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004446:	f7fc fa51 	bl	80008ec <__aeabi_d2f>
 800444a:	4606      	mov	r6, r0
 800444c:	4630      	mov	r0, r6
 800444e:	b00b      	add	sp, #44	; 0x2c
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	f7fc f961 	bl	800071c <__aeabi_ddiv>
 800445a:	2d02      	cmp	r5, #2
 800445c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004460:	d1e5      	bne.n	800442e <sqrtf+0x4e>
 8004462:	f000 fa35 	bl	80048d0 <__errno>
 8004466:	2321      	movs	r3, #33	; 0x21
 8004468:	6003      	str	r3, [r0, #0]
 800446a:	e7e4      	b.n	8004436 <sqrtf+0x56>
 800446c:	20000009 	.word	0x20000009
 8004470:	08004a5a 	.word	0x08004a5a

08004474 <__ieee754_asinf>:
 8004474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800447c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8004480:	4604      	mov	r4, r0
 8004482:	4607      	mov	r7, r0
 8004484:	d10c      	bne.n	80044a0 <__ieee754_asinf+0x2c>
 8004486:	498c      	ldr	r1, [pc, #560]	; (80046b8 <__ieee754_asinf+0x244>)
 8004488:	f7fc fb8e 	bl	8000ba8 <__aeabi_fmul>
 800448c:	498b      	ldr	r1, [pc, #556]	; (80046bc <__ieee754_asinf+0x248>)
 800448e:	4605      	mov	r5, r0
 8004490:	4620      	mov	r0, r4
 8004492:	f7fc fb89 	bl	8000ba8 <__aeabi_fmul>
 8004496:	4601      	mov	r1, r0
 8004498:	4628      	mov	r0, r5
 800449a:	f7fc fa7d 	bl	8000998 <__addsf3>
 800449e:	e006      	b.n	80044ae <__ieee754_asinf+0x3a>
 80044a0:	dd09      	ble.n	80044b6 <__ieee754_asinf+0x42>
 80044a2:	4601      	mov	r1, r0
 80044a4:	f7fc fa76 	bl	8000994 <__aeabi_fsub>
 80044a8:	4601      	mov	r1, r0
 80044aa:	f7fc fc31 	bl	8000d10 <__aeabi_fdiv>
 80044ae:	4604      	mov	r4, r0
 80044b0:	4620      	mov	r0, r4
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80044ba:	da0b      	bge.n	80044d4 <__ieee754_asinf+0x60>
 80044bc:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 80044c0:	da73      	bge.n	80045aa <__ieee754_asinf+0x136>
 80044c2:	497f      	ldr	r1, [pc, #508]	; (80046c0 <__ieee754_asinf+0x24c>)
 80044c4:	f7fc fa68 	bl	8000998 <__addsf3>
 80044c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80044cc:	f7fc fd28 	bl	8000f20 <__aeabi_fcmpgt>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d1ed      	bne.n	80044b0 <__ieee754_asinf+0x3c>
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7ff ff2f 	bl	8004338 <fabsf>
 80044da:	4601      	mov	r1, r0
 80044dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80044e0:	f7fc fa58 	bl	8000994 <__aeabi_fsub>
 80044e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044e8:	f7fc fb5e 	bl	8000ba8 <__aeabi_fmul>
 80044ec:	4604      	mov	r4, r0
 80044ee:	4975      	ldr	r1, [pc, #468]	; (80046c4 <__ieee754_asinf+0x250>)
 80044f0:	f7fc fb5a 	bl	8000ba8 <__aeabi_fmul>
 80044f4:	4974      	ldr	r1, [pc, #464]	; (80046c8 <__ieee754_asinf+0x254>)
 80044f6:	f7fc fa4f 	bl	8000998 <__addsf3>
 80044fa:	4621      	mov	r1, r4
 80044fc:	f7fc fb54 	bl	8000ba8 <__aeabi_fmul>
 8004500:	4972      	ldr	r1, [pc, #456]	; (80046cc <__ieee754_asinf+0x258>)
 8004502:	f7fc fa47 	bl	8000994 <__aeabi_fsub>
 8004506:	4621      	mov	r1, r4
 8004508:	f7fc fb4e 	bl	8000ba8 <__aeabi_fmul>
 800450c:	4970      	ldr	r1, [pc, #448]	; (80046d0 <__ieee754_asinf+0x25c>)
 800450e:	f7fc fa43 	bl	8000998 <__addsf3>
 8004512:	4621      	mov	r1, r4
 8004514:	f7fc fb48 	bl	8000ba8 <__aeabi_fmul>
 8004518:	496e      	ldr	r1, [pc, #440]	; (80046d4 <__ieee754_asinf+0x260>)
 800451a:	f7fc fa3b 	bl	8000994 <__aeabi_fsub>
 800451e:	4621      	mov	r1, r4
 8004520:	f7fc fb42 	bl	8000ba8 <__aeabi_fmul>
 8004524:	496c      	ldr	r1, [pc, #432]	; (80046d8 <__ieee754_asinf+0x264>)
 8004526:	f7fc fa37 	bl	8000998 <__addsf3>
 800452a:	4621      	mov	r1, r4
 800452c:	f7fc fb3c 	bl	8000ba8 <__aeabi_fmul>
 8004530:	496a      	ldr	r1, [pc, #424]	; (80046dc <__ieee754_asinf+0x268>)
 8004532:	4680      	mov	r8, r0
 8004534:	4620      	mov	r0, r4
 8004536:	f7fc fb37 	bl	8000ba8 <__aeabi_fmul>
 800453a:	4969      	ldr	r1, [pc, #420]	; (80046e0 <__ieee754_asinf+0x26c>)
 800453c:	f7fc fa2a 	bl	8000994 <__aeabi_fsub>
 8004540:	4621      	mov	r1, r4
 8004542:	f7fc fb31 	bl	8000ba8 <__aeabi_fmul>
 8004546:	4967      	ldr	r1, [pc, #412]	; (80046e4 <__ieee754_asinf+0x270>)
 8004548:	f7fc fa26 	bl	8000998 <__addsf3>
 800454c:	4621      	mov	r1, r4
 800454e:	f7fc fb2b 	bl	8000ba8 <__aeabi_fmul>
 8004552:	4965      	ldr	r1, [pc, #404]	; (80046e8 <__ieee754_asinf+0x274>)
 8004554:	f7fc fa1e 	bl	8000994 <__aeabi_fsub>
 8004558:	4621      	mov	r1, r4
 800455a:	f7fc fb25 	bl	8000ba8 <__aeabi_fmul>
 800455e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004562:	f7fc fa19 	bl	8000998 <__addsf3>
 8004566:	4681      	mov	r9, r0
 8004568:	4620      	mov	r0, r4
 800456a:	f000 f955 	bl	8004818 <__ieee754_sqrtf>
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <__ieee754_asinf+0x278>)
 8004570:	4606      	mov	r6, r0
 8004572:	429d      	cmp	r5, r3
 8004574:	dd63      	ble.n	800463e <__ieee754_asinf+0x1ca>
 8004576:	4649      	mov	r1, r9
 8004578:	4640      	mov	r0, r8
 800457a:	f7fc fbc9 	bl	8000d10 <__aeabi_fdiv>
 800457e:	4631      	mov	r1, r6
 8004580:	f7fc fb12 	bl	8000ba8 <__aeabi_fmul>
 8004584:	4631      	mov	r1, r6
 8004586:	f7fc fa07 	bl	8000998 <__addsf3>
 800458a:	4601      	mov	r1, r0
 800458c:	f7fc fa04 	bl	8000998 <__addsf3>
 8004590:	4957      	ldr	r1, [pc, #348]	; (80046f0 <__ieee754_asinf+0x27c>)
 8004592:	f7fc fa01 	bl	8000998 <__addsf3>
 8004596:	4601      	mov	r1, r0
 8004598:	4847      	ldr	r0, [pc, #284]	; (80046b8 <__ieee754_asinf+0x244>)
 800459a:	f7fc f9fb 	bl	8000994 <__aeabi_fsub>
 800459e:	2f00      	cmp	r7, #0
 80045a0:	4604      	mov	r4, r0
 80045a2:	bfd8      	it	le
 80045a4:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 80045a8:	e782      	b.n	80044b0 <__ieee754_asinf+0x3c>
 80045aa:	4601      	mov	r1, r0
 80045ac:	f7fc fafc 	bl	8000ba8 <__aeabi_fmul>
 80045b0:	4605      	mov	r5, r0
 80045b2:	4944      	ldr	r1, [pc, #272]	; (80046c4 <__ieee754_asinf+0x250>)
 80045b4:	f7fc faf8 	bl	8000ba8 <__aeabi_fmul>
 80045b8:	4943      	ldr	r1, [pc, #268]	; (80046c8 <__ieee754_asinf+0x254>)
 80045ba:	f7fc f9ed 	bl	8000998 <__addsf3>
 80045be:	4629      	mov	r1, r5
 80045c0:	f7fc faf2 	bl	8000ba8 <__aeabi_fmul>
 80045c4:	4941      	ldr	r1, [pc, #260]	; (80046cc <__ieee754_asinf+0x258>)
 80045c6:	f7fc f9e5 	bl	8000994 <__aeabi_fsub>
 80045ca:	4629      	mov	r1, r5
 80045cc:	f7fc faec 	bl	8000ba8 <__aeabi_fmul>
 80045d0:	493f      	ldr	r1, [pc, #252]	; (80046d0 <__ieee754_asinf+0x25c>)
 80045d2:	f7fc f9e1 	bl	8000998 <__addsf3>
 80045d6:	4629      	mov	r1, r5
 80045d8:	f7fc fae6 	bl	8000ba8 <__aeabi_fmul>
 80045dc:	493d      	ldr	r1, [pc, #244]	; (80046d4 <__ieee754_asinf+0x260>)
 80045de:	f7fc f9d9 	bl	8000994 <__aeabi_fsub>
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fc fae0 	bl	8000ba8 <__aeabi_fmul>
 80045e8:	493b      	ldr	r1, [pc, #236]	; (80046d8 <__ieee754_asinf+0x264>)
 80045ea:	f7fc f9d5 	bl	8000998 <__addsf3>
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fc fada 	bl	8000ba8 <__aeabi_fmul>
 80045f4:	4939      	ldr	r1, [pc, #228]	; (80046dc <__ieee754_asinf+0x268>)
 80045f6:	4606      	mov	r6, r0
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7fc fad5 	bl	8000ba8 <__aeabi_fmul>
 80045fe:	4938      	ldr	r1, [pc, #224]	; (80046e0 <__ieee754_asinf+0x26c>)
 8004600:	f7fc f9c8 	bl	8000994 <__aeabi_fsub>
 8004604:	4629      	mov	r1, r5
 8004606:	f7fc facf 	bl	8000ba8 <__aeabi_fmul>
 800460a:	4936      	ldr	r1, [pc, #216]	; (80046e4 <__ieee754_asinf+0x270>)
 800460c:	f7fc f9c4 	bl	8000998 <__addsf3>
 8004610:	4629      	mov	r1, r5
 8004612:	f7fc fac9 	bl	8000ba8 <__aeabi_fmul>
 8004616:	4934      	ldr	r1, [pc, #208]	; (80046e8 <__ieee754_asinf+0x274>)
 8004618:	f7fc f9bc 	bl	8000994 <__aeabi_fsub>
 800461c:	4629      	mov	r1, r5
 800461e:	f7fc fac3 	bl	8000ba8 <__aeabi_fmul>
 8004622:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004626:	f7fc f9b7 	bl	8000998 <__addsf3>
 800462a:	4601      	mov	r1, r0
 800462c:	4630      	mov	r0, r6
 800462e:	f7fc fb6f 	bl	8000d10 <__aeabi_fdiv>
 8004632:	4621      	mov	r1, r4
 8004634:	f7fc fab8 	bl	8000ba8 <__aeabi_fmul>
 8004638:	4601      	mov	r1, r0
 800463a:	4620      	mov	r0, r4
 800463c:	e72d      	b.n	800449a <__ieee754_asinf+0x26>
 800463e:	4601      	mov	r1, r0
 8004640:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8004644:	f7fc f9a8 	bl	8000998 <__addsf3>
 8004648:	4649      	mov	r1, r9
 800464a:	4682      	mov	sl, r0
 800464c:	4640      	mov	r0, r8
 800464e:	f7fc fb5f 	bl	8000d10 <__aeabi_fdiv>
 8004652:	4601      	mov	r1, r0
 8004654:	4650      	mov	r0, sl
 8004656:	f7fc faa7 	bl	8000ba8 <__aeabi_fmul>
 800465a:	f025 050f 	bic.w	r5, r5, #15
 800465e:	4680      	mov	r8, r0
 8004660:	4629      	mov	r1, r5
 8004662:	4628      	mov	r0, r5
 8004664:	f7fc faa0 	bl	8000ba8 <__aeabi_fmul>
 8004668:	4601      	mov	r1, r0
 800466a:	4620      	mov	r0, r4
 800466c:	f7fc f992 	bl	8000994 <__aeabi_fsub>
 8004670:	4631      	mov	r1, r6
 8004672:	4604      	mov	r4, r0
 8004674:	4628      	mov	r0, r5
 8004676:	f7fc f98f 	bl	8000998 <__addsf3>
 800467a:	4601      	mov	r1, r0
 800467c:	4620      	mov	r0, r4
 800467e:	f7fc fb47 	bl	8000d10 <__aeabi_fdiv>
 8004682:	4601      	mov	r1, r0
 8004684:	f7fc f988 	bl	8000998 <__addsf3>
 8004688:	4601      	mov	r1, r0
 800468a:	480c      	ldr	r0, [pc, #48]	; (80046bc <__ieee754_asinf+0x248>)
 800468c:	f7fc f982 	bl	8000994 <__aeabi_fsub>
 8004690:	4601      	mov	r1, r0
 8004692:	4640      	mov	r0, r8
 8004694:	f7fc f97e 	bl	8000994 <__aeabi_fsub>
 8004698:	4629      	mov	r1, r5
 800469a:	4604      	mov	r4, r0
 800469c:	4628      	mov	r0, r5
 800469e:	f7fc f97b 	bl	8000998 <__addsf3>
 80046a2:	4601      	mov	r1, r0
 80046a4:	4813      	ldr	r0, [pc, #76]	; (80046f4 <__ieee754_asinf+0x280>)
 80046a6:	f7fc f975 	bl	8000994 <__aeabi_fsub>
 80046aa:	4601      	mov	r1, r0
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7fc f971 	bl	8000994 <__aeabi_fsub>
 80046b2:	4601      	mov	r1, r0
 80046b4:	480f      	ldr	r0, [pc, #60]	; (80046f4 <__ieee754_asinf+0x280>)
 80046b6:	e770      	b.n	800459a <__ieee754_asinf+0x126>
 80046b8:	3fc90fdb 	.word	0x3fc90fdb
 80046bc:	b33bbd2e 	.word	0xb33bbd2e
 80046c0:	7149f2ca 	.word	0x7149f2ca
 80046c4:	3811ef08 	.word	0x3811ef08
 80046c8:	3a4f7f04 	.word	0x3a4f7f04
 80046cc:	3d241146 	.word	0x3d241146
 80046d0:	3e4e0aa8 	.word	0x3e4e0aa8
 80046d4:	3ea6b090 	.word	0x3ea6b090
 80046d8:	3e2aaaab 	.word	0x3e2aaaab
 80046dc:	3d9dc62e 	.word	0x3d9dc62e
 80046e0:	3f303361 	.word	0x3f303361
 80046e4:	4001572d 	.word	0x4001572d
 80046e8:	4019d139 	.word	0x4019d139
 80046ec:	3f799999 	.word	0x3f799999
 80046f0:	333bbd2e 	.word	0x333bbd2e
 80046f4:	3f490fdb 	.word	0x3f490fdb

080046f8 <__ieee754_atan2f>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80046fe:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004702:	4603      	mov	r3, r0
 8004704:	dc05      	bgt.n	8004712 <__ieee754_atan2f+0x1a>
 8004706:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800470a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800470e:	4607      	mov	r7, r0
 8004710:	dd04      	ble.n	800471c <__ieee754_atan2f+0x24>
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc f940 	bl	8000998 <__addsf3>
 8004718:	4603      	mov	r3, r0
 800471a:	e024      	b.n	8004766 <__ieee754_atan2f+0x6e>
 800471c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8004720:	d103      	bne.n	800472a <__ieee754_atan2f+0x32>
 8004722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004726:	f7ff bcfb 	b.w	8004120 <atanf>
 800472a:	178c      	asrs	r4, r1, #30
 800472c:	f004 0402 	and.w	r4, r4, #2
 8004730:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004734:	b92a      	cbnz	r2, 8004742 <__ieee754_atan2f+0x4a>
 8004736:	2c02      	cmp	r4, #2
 8004738:	d057      	beq.n	80047ea <__ieee754_atan2f+0xf2>
 800473a:	2c03      	cmp	r4, #3
 800473c:	d113      	bne.n	8004766 <__ieee754_atan2f+0x6e>
 800473e:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <__ieee754_atan2f+0xfc>)
 8004740:	e011      	b.n	8004766 <__ieee754_atan2f+0x6e>
 8004742:	b91e      	cbnz	r6, 800474c <__ieee754_atan2f+0x54>
 8004744:	2f00      	cmp	r7, #0
 8004746:	da52      	bge.n	80047ee <__ieee754_atan2f+0xf6>
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <__ieee754_atan2f+0x100>)
 800474a:	e00c      	b.n	8004766 <__ieee754_atan2f+0x6e>
 800474c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004750:	d11a      	bne.n	8004788 <__ieee754_atan2f+0x90>
 8004752:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004756:	d10c      	bne.n	8004772 <__ieee754_atan2f+0x7a>
 8004758:	2c02      	cmp	r4, #2
 800475a:	d006      	beq.n	800476a <__ieee754_atan2f+0x72>
 800475c:	2c03      	cmp	r4, #3
 800475e:	d006      	beq.n	800476e <__ieee754_atan2f+0x76>
 8004760:	2c01      	cmp	r4, #1
 8004762:	d140      	bne.n	80047e6 <__ieee754_atan2f+0xee>
 8004764:	4b25      	ldr	r3, [pc, #148]	; (80047fc <__ieee754_atan2f+0x104>)
 8004766:	4618      	mov	r0, r3
 8004768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <__ieee754_atan2f+0x108>)
 800476c:	e7fb      	b.n	8004766 <__ieee754_atan2f+0x6e>
 800476e:	4b25      	ldr	r3, [pc, #148]	; (8004804 <__ieee754_atan2f+0x10c>)
 8004770:	e7f9      	b.n	8004766 <__ieee754_atan2f+0x6e>
 8004772:	2c02      	cmp	r4, #2
 8004774:	d039      	beq.n	80047ea <__ieee754_atan2f+0xf2>
 8004776:	2c03      	cmp	r4, #3
 8004778:	d0e1      	beq.n	800473e <__ieee754_atan2f+0x46>
 800477a:	2c01      	cmp	r4, #1
 800477c:	d102      	bne.n	8004784 <__ieee754_atan2f+0x8c>
 800477e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004782:	e7f0      	b.n	8004766 <__ieee754_atan2f+0x6e>
 8004784:	2300      	movs	r3, #0
 8004786:	e7ee      	b.n	8004766 <__ieee754_atan2f+0x6e>
 8004788:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800478c:	d0da      	beq.n	8004744 <__ieee754_atan2f+0x4c>
 800478e:	1b92      	subs	r2, r2, r6
 8004790:	15d2      	asrs	r2, r2, #23
 8004792:	2a3c      	cmp	r2, #60	; 0x3c
 8004794:	dc17      	bgt.n	80047c6 <__ieee754_atan2f+0xce>
 8004796:	2900      	cmp	r1, #0
 8004798:	da01      	bge.n	800479e <__ieee754_atan2f+0xa6>
 800479a:	323c      	adds	r2, #60	; 0x3c
 800479c:	db15      	blt.n	80047ca <__ieee754_atan2f+0xd2>
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fc fab6 	bl	8000d10 <__aeabi_fdiv>
 80047a4:	f7ff fdc8 	bl	8004338 <fabsf>
 80047a8:	f7ff fcba 	bl	8004120 <atanf>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2c01      	cmp	r4, #1
 80047b0:	d00d      	beq.n	80047ce <__ieee754_atan2f+0xd6>
 80047b2:	2c02      	cmp	r4, #2
 80047b4:	d00e      	beq.n	80047d4 <__ieee754_atan2f+0xdc>
 80047b6:	2c00      	cmp	r4, #0
 80047b8:	d0d5      	beq.n	8004766 <__ieee754_atan2f+0x6e>
 80047ba:	4913      	ldr	r1, [pc, #76]	; (8004808 <__ieee754_atan2f+0x110>)
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc f8eb 	bl	8000998 <__addsf3>
 80047c2:	4912      	ldr	r1, [pc, #72]	; (800480c <__ieee754_atan2f+0x114>)
 80047c4:	e00c      	b.n	80047e0 <__ieee754_atan2f+0xe8>
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <__ieee754_atan2f+0x118>)
 80047c8:	e7f1      	b.n	80047ae <__ieee754_atan2f+0xb6>
 80047ca:	2300      	movs	r3, #0
 80047cc:	e7ef      	b.n	80047ae <__ieee754_atan2f+0xb6>
 80047ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047d2:	e7c8      	b.n	8004766 <__ieee754_atan2f+0x6e>
 80047d4:	490c      	ldr	r1, [pc, #48]	; (8004808 <__ieee754_atan2f+0x110>)
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fc f8de 	bl	8000998 <__addsf3>
 80047dc:	4601      	mov	r1, r0
 80047de:	480b      	ldr	r0, [pc, #44]	; (800480c <__ieee754_atan2f+0x114>)
 80047e0:	f7fc f8d8 	bl	8000994 <__aeabi_fsub>
 80047e4:	e798      	b.n	8004718 <__ieee754_atan2f+0x20>
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <__ieee754_atan2f+0x11c>)
 80047e8:	e7bd      	b.n	8004766 <__ieee754_atan2f+0x6e>
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <__ieee754_atan2f+0x114>)
 80047ec:	e7bb      	b.n	8004766 <__ieee754_atan2f+0x6e>
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <__ieee754_atan2f+0x118>)
 80047f0:	e7b9      	b.n	8004766 <__ieee754_atan2f+0x6e>
 80047f2:	bf00      	nop
 80047f4:	c0490fdb 	.word	0xc0490fdb
 80047f8:	bfc90fdb 	.word	0xbfc90fdb
 80047fc:	bf490fdb 	.word	0xbf490fdb
 8004800:	4016cbe4 	.word	0x4016cbe4
 8004804:	c016cbe4 	.word	0xc016cbe4
 8004808:	33bbbd2e 	.word	0x33bbbd2e
 800480c:	40490fdb 	.word	0x40490fdb
 8004810:	3fc90fdb 	.word	0x3fc90fdb
 8004814:	3f490fdb 	.word	0x3f490fdb

08004818 <__ieee754_sqrtf>:
 8004818:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800481c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4603      	mov	r3, r0
 8004824:	4604      	mov	r4, r0
 8004826:	d309      	bcc.n	800483c <__ieee754_sqrtf+0x24>
 8004828:	4601      	mov	r1, r0
 800482a:	f7fc f9bd 	bl	8000ba8 <__aeabi_fmul>
 800482e:	4601      	mov	r1, r0
 8004830:	4620      	mov	r0, r4
 8004832:	f7fc f8b1 	bl	8000998 <__addsf3>
 8004836:	4604      	mov	r4, r0
 8004838:	4620      	mov	r0, r4
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	2a00      	cmp	r2, #0
 800483e:	d0fb      	beq.n	8004838 <__ieee754_sqrtf+0x20>
 8004840:	2800      	cmp	r0, #0
 8004842:	da06      	bge.n	8004852 <__ieee754_sqrtf+0x3a>
 8004844:	4601      	mov	r1, r0
 8004846:	f7fc f8a5 	bl	8000994 <__aeabi_fsub>
 800484a:	4601      	mov	r1, r0
 800484c:	f7fc fa60 	bl	8000d10 <__aeabi_fdiv>
 8004850:	e7f1      	b.n	8004836 <__ieee754_sqrtf+0x1e>
 8004852:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004856:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800485a:	d32e      	bcc.n	80048ba <__ieee754_sqrtf+0xa2>
 800485c:	3c7f      	subs	r4, #127	; 0x7f
 800485e:	07e2      	lsls	r2, r4, #31
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	ea4f 0164 	mov.w	r1, r4, asr #1
 8004868:	4616      	mov	r6, r2
 800486a:	f04f 0419 	mov.w	r4, #25
 800486e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004872:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800487a:	bf48      	it	mi
 800487c:	005b      	lslmi	r3, r3, #1
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	1835      	adds	r5, r6, r0
 8004882:	429d      	cmp	r5, r3
 8004884:	bfde      	ittt	le
 8004886:	182e      	addle	r6, r5, r0
 8004888:	1b5b      	suble	r3, r3, r5
 800488a:	1812      	addle	r2, r2, r0
 800488c:	3c01      	subs	r4, #1
 800488e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004892:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004896:	d1f3      	bne.n	8004880 <__ieee754_sqrtf+0x68>
 8004898:	b113      	cbz	r3, 80048a0 <__ieee754_sqrtf+0x88>
 800489a:	3201      	adds	r2, #1
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	1054      	asrs	r4, r2, #1
 80048a2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80048a6:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 80048aa:	e7c5      	b.n	8004838 <__ieee754_sqrtf+0x20>
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	3201      	adds	r2, #1
 80048b0:	0219      	lsls	r1, r3, #8
 80048b2:	d5fb      	bpl.n	80048ac <__ieee754_sqrtf+0x94>
 80048b4:	3a01      	subs	r2, #1
 80048b6:	1aa4      	subs	r4, r4, r2
 80048b8:	e7d0      	b.n	800485c <__ieee754_sqrtf+0x44>
 80048ba:	2200      	movs	r2, #0
 80048bc:	e7f8      	b.n	80048b0 <__ieee754_sqrtf+0x98>

080048be <matherr>:
 80048be:	2000      	movs	r0, #0
 80048c0:	4770      	bx	lr
	...

080048c4 <nan>:
 80048c4:	2000      	movs	r0, #0
 80048c6:	4901      	ldr	r1, [pc, #4]	; (80048cc <nan+0x8>)
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	7ff80000 	.word	0x7ff80000

080048d0 <__errno>:
 80048d0:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <__errno+0x8>)
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	2000000c 	.word	0x2000000c

080048dc <__libc_init_array>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	2500      	movs	r5, #0
 80048e0:	4e0c      	ldr	r6, [pc, #48]	; (8004914 <__libc_init_array+0x38>)
 80048e2:	4c0d      	ldr	r4, [pc, #52]	; (8004918 <__libc_init_array+0x3c>)
 80048e4:	1ba4      	subs	r4, r4, r6
 80048e6:	10a4      	asrs	r4, r4, #2
 80048e8:	42a5      	cmp	r5, r4
 80048ea:	d109      	bne.n	8004900 <__libc_init_array+0x24>
 80048ec:	f000 f878 	bl	80049e0 <_init>
 80048f0:	2500      	movs	r5, #0
 80048f2:	4e0a      	ldr	r6, [pc, #40]	; (800491c <__libc_init_array+0x40>)
 80048f4:	4c0a      	ldr	r4, [pc, #40]	; (8004920 <__libc_init_array+0x44>)
 80048f6:	1ba4      	subs	r4, r4, r6
 80048f8:	10a4      	asrs	r4, r4, #2
 80048fa:	42a5      	cmp	r5, r4
 80048fc:	d105      	bne.n	800490a <__libc_init_array+0x2e>
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004904:	4798      	blx	r3
 8004906:	3501      	adds	r5, #1
 8004908:	e7ee      	b.n	80048e8 <__libc_init_array+0xc>
 800490a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800490e:	4798      	blx	r3
 8004910:	3501      	adds	r5, #1
 8004912:	e7f2      	b.n	80048fa <__libc_init_array+0x1e>
 8004914:	08004a60 	.word	0x08004a60
 8004918:	08004a60 	.word	0x08004a60
 800491c:	08004a60 	.word	0x08004a60
 8004920:	08004a68 	.word	0x08004a68

08004924 <free>:
 8004924:	4b02      	ldr	r3, [pc, #8]	; (8004930 <free+0xc>)
 8004926:	4601      	mov	r1, r0
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	f000 b80b 	b.w	8004944 <_free_r>
 800492e:	bf00      	nop
 8004930:	2000000c 	.word	0x2000000c

08004934 <memset>:
 8004934:	4603      	mov	r3, r0
 8004936:	4402      	add	r2, r0
 8004938:	4293      	cmp	r3, r2
 800493a:	d100      	bne.n	800493e <memset+0xa>
 800493c:	4770      	bx	lr
 800493e:	f803 1b01 	strb.w	r1, [r3], #1
 8004942:	e7f9      	b.n	8004938 <memset+0x4>

08004944 <_free_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4605      	mov	r5, r0
 8004948:	2900      	cmp	r1, #0
 800494a:	d043      	beq.n	80049d4 <_free_r+0x90>
 800494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004950:	1f0c      	subs	r4, r1, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfb8      	it	lt
 8004956:	18e4      	addlt	r4, r4, r3
 8004958:	f000 f840 	bl	80049dc <__malloc_lock>
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <_free_r+0x94>)
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	4610      	mov	r0, r2
 8004962:	b933      	cbnz	r3, 8004972 <_free_r+0x2e>
 8004964:	6063      	str	r3, [r4, #4]
 8004966:	6014      	str	r4, [r2, #0]
 8004968:	4628      	mov	r0, r5
 800496a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800496e:	f000 b836 	b.w	80049de <__malloc_unlock>
 8004972:	42a3      	cmp	r3, r4
 8004974:	d90b      	bls.n	800498e <_free_r+0x4a>
 8004976:	6821      	ldr	r1, [r4, #0]
 8004978:	1862      	adds	r2, r4, r1
 800497a:	4293      	cmp	r3, r2
 800497c:	bf01      	itttt	eq
 800497e:	681a      	ldreq	r2, [r3, #0]
 8004980:	685b      	ldreq	r3, [r3, #4]
 8004982:	1852      	addeq	r2, r2, r1
 8004984:	6022      	streq	r2, [r4, #0]
 8004986:	6063      	str	r3, [r4, #4]
 8004988:	6004      	str	r4, [r0, #0]
 800498a:	e7ed      	b.n	8004968 <_free_r+0x24>
 800498c:	4613      	mov	r3, r2
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	b10a      	cbz	r2, 8004996 <_free_r+0x52>
 8004992:	42a2      	cmp	r2, r4
 8004994:	d9fa      	bls.n	800498c <_free_r+0x48>
 8004996:	6819      	ldr	r1, [r3, #0]
 8004998:	1858      	adds	r0, r3, r1
 800499a:	42a0      	cmp	r0, r4
 800499c:	d10b      	bne.n	80049b6 <_free_r+0x72>
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	4401      	add	r1, r0
 80049a2:	1858      	adds	r0, r3, r1
 80049a4:	4282      	cmp	r2, r0
 80049a6:	6019      	str	r1, [r3, #0]
 80049a8:	d1de      	bne.n	8004968 <_free_r+0x24>
 80049aa:	6810      	ldr	r0, [r2, #0]
 80049ac:	6852      	ldr	r2, [r2, #4]
 80049ae:	4401      	add	r1, r0
 80049b0:	6019      	str	r1, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	e7d8      	b.n	8004968 <_free_r+0x24>
 80049b6:	d902      	bls.n	80049be <_free_r+0x7a>
 80049b8:	230c      	movs	r3, #12
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	e7d4      	b.n	8004968 <_free_r+0x24>
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1821      	adds	r1, r4, r0
 80049c2:	428a      	cmp	r2, r1
 80049c4:	bf01      	itttt	eq
 80049c6:	6811      	ldreq	r1, [r2, #0]
 80049c8:	6852      	ldreq	r2, [r2, #4]
 80049ca:	1809      	addeq	r1, r1, r0
 80049cc:	6021      	streq	r1, [r4, #0]
 80049ce:	6062      	str	r2, [r4, #4]
 80049d0:	605c      	str	r4, [r3, #4]
 80049d2:	e7c9      	b.n	8004968 <_free_r+0x24>
 80049d4:	bd38      	pop	{r3, r4, r5, pc}
 80049d6:	bf00      	nop
 80049d8:	2000119c 	.word	0x2000119c

080049dc <__malloc_lock>:
 80049dc:	4770      	bx	lr

080049de <__malloc_unlock>:
 80049de:	4770      	bx	lr

080049e0 <_init>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr

080049ec <_fini>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr
