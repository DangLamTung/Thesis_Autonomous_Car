
INS_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009b78  08009b78  00019b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f68  08009f68  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f70  08009f70  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009f78  08009f78  00019f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ec  200001e0  0800a160  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200017cc  0800a160  000217cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ab8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000307a  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ff81  00000000  00000000  0003ad42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d18  00000000  00000000  0004acc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001f98  00000000  00000000  0004b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00022b9b  00000000  00000000  0004d978  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d74e  00000000  00000000  00070513  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c5f63  00000000  00000000  0007dc61  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000eb  00000000  00000000  00143bc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cf0  00000000  00000000  00143cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b5c 	.word	0x08009b5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08009b5c 	.word	0x08009b5c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <lwrb_init>:
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
    if (buff == NULL || buffdata == NULL || size == 0) {
 8000ee0:	b118      	cbz	r0, 8000eea <lwrb_init+0xa>
 8000ee2:	b189      	cbz	r1, 8000f08 <lwrb_init+0x28>
 8000ee4:	b912      	cbnz	r2, 8000eec <lwrb_init+0xc>
        return 0;
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4770      	bx	lr
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
}
 8000eea:	4770      	bx	lr
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 8000eec:	b430      	push	{r4, r5}
    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60c3      	str	r3, [r0, #12]
 8000ef2:	6103      	str	r3, [r0, #16]
 8000ef4:	6143      	str	r3, [r0, #20]
    buff->magic1 = BUF_MAGIC1;
 8000ef6:	4d05      	ldr	r5, [pc, #20]	; (8000f0c <lwrb_init+0x2c>)
    buff->magic2 = BUF_MAGIC2;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <lwrb_init+0x30>)
    buff->magic1 = BUF_MAGIC1;
 8000efa:	6005      	str	r5, [r0, #0]
    buff->buff = buffdata;
 8000efc:	e9c0 1201 	strd	r1, r2, [r0, #4]
    buff->magic2 = BUF_MAGIC2;
 8000f00:	6183      	str	r3, [r0, #24]
}
 8000f02:	bc30      	pop	{r4, r5}
    return 1;
 8000f04:	2001      	movs	r0, #1
}
 8000f06:	4770      	bx	lr
        return 0;
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4770      	bx	lr
 8000f0c:	deadbeef 	.word	0xdeadbeef
 8000f10:	21524110 	.word	0x21524110

08000f14 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 8000f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t tocopy, free;
    const uint8_t* d = data;

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000f18:	4607      	mov	r7, r0
 8000f1a:	b118      	cbz	r0, 8000f24 <lwrb_write+0x10>
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <lwrb_write+0x9c>)
 8000f1e:	683c      	ldr	r4, [r7, #0]
 8000f20:	4284      	cmp	r4, r0
 8000f22:	d002      	beq.n	8000f2a <lwrb_write+0x16>
        return 0;
 8000f24:	2000      	movs	r0, #0
    if (buff->w >= buff->size) {
        buff->w = 0;
    }
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
}
 8000f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000f2a:	4822      	ldr	r0, [pc, #136]	; (8000fb4 <lwrb_write+0xa0>)
 8000f2c:	69bc      	ldr	r4, [r7, #24]
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d1f8      	bne.n	8000f24 <lwrb_write+0x10>
 8000f32:	687d      	ldr	r5, [r7, #4]
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d0f5      	beq.n	8000f24 <lwrb_write+0x10>
 8000f38:	68b8      	ldr	r0, [r7, #8]
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d0f3      	beq.n	8000f26 <lwrb_write+0x12>
 8000f3e:	2900      	cmp	r1, #0
 8000f40:	d0f0      	beq.n	8000f24 <lwrb_write+0x10>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d0ee      	beq.n	8000f24 <lwrb_write+0x10>
        return 0;
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
    r = buff->r;
 8000f46:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
    if (w == r) {
 8000f4a:	42b3      	cmp	r3, r6
 8000f4c:	d02d      	beq.n	8000faa <lwrb_write+0x96>
        size = buff->size;
    } else if (r > w) {
        size = r - w;
    } else {
        size = buff->size - (w - r);
 8000f4e:	bf28      	it	cs
 8000f50:	1836      	addcs	r6, r6, r0
 8000f52:	1af6      	subs	r6, r6, r3
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000f54:	3e01      	subs	r6, #1
    btw = BUF_MIN(free, btw);
 8000f56:	4296      	cmp	r6, r2
 8000f58:	bf28      	it	cs
 8000f5a:	4616      	movcs	r6, r2
    if (btw == 0) {
 8000f5c:	b90e      	cbnz	r6, 8000f62 <lwrb_write+0x4e>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e7e1      	b.n	8000f26 <lwrb_write+0x12>
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000f62:	1ac4      	subs	r4, r0, r3
 8000f64:	42b4      	cmp	r4, r6
 8000f66:	bf28      	it	cs
 8000f68:	4634      	movcs	r4, r6
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000f6a:	18e8      	adds	r0, r5, r3
 8000f6c:	4622      	mov	r2, r4
 8000f6e:	4688      	mov	r8, r1
 8000f70:	f006 fe44 	bl	8007bfc <memcpy>
    buff->w += tocopy;
 8000f74:	693b      	ldr	r3, [r7, #16]
    if (btw > 0) {
 8000f76:	1b35      	subs	r5, r6, r4
    buff->w += tocopy;
 8000f78:	4423      	add	r3, r4
 8000f7a:	613b      	str	r3, [r7, #16]
    if (btw > 0) {
 8000f7c:	d007      	beq.n	8000f8e <lwrb_write+0x7a>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000f7e:	eb08 0104 	add.w	r1, r8, r4
 8000f82:	462a      	mov	r2, r5
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f006 fe39 	bl	8007bfc <memcpy>
        buff->w = btw;
 8000f8a:	613d      	str	r5, [r7, #16]
 8000f8c:	462b      	mov	r3, r5
    if (buff->w >= buff->size) {
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	429a      	cmp	r2, r3
        buff->w = 0;
 8000f92:	bf9c      	itt	ls
 8000f94:	2300      	movls	r3, #0
 8000f96:	613b      	strls	r3, [r7, #16]
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0df      	beq.n	8000f5e <lwrb_write+0x4a>
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	4632      	mov	r2, r6
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4798      	blx	r3
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7bd      	b.n	8000f26 <lwrb_write+0x12>
    if (w == r) {
 8000faa:	4606      	mov	r6, r0
 8000fac:	e7d2      	b.n	8000f54 <lwrb_write+0x40>
 8000fae:	bf00      	nop
 8000fb0:	deadbeef 	.word	0xdeadbeef
 8000fb4:	21524110 	.word	0x21524110

08000fb8 <lwrb_get_linear_block_read_address>:
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
    if (!BUF_IS_VALID(buff)) {
 8000fb8:	b178      	cbz	r0, 8000fda <lwrb_get_linear_block_read_address+0x22>
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <lwrb_get_linear_block_read_address+0x28>)
 8000fbc:	6802      	ldr	r2, [r0, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d10c      	bne.n	8000fdc <lwrb_get_linear_block_read_address+0x24>
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <lwrb_get_linear_block_read_address+0x2c>)
 8000fc4:	6982      	ldr	r2, [r0, #24]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d108      	bne.n	8000fdc <lwrb_get_linear_block_read_address+0x24>
 8000fca:	6843      	ldr	r3, [r0, #4]
 8000fcc:	b133      	cbz	r3, 8000fdc <lwrb_get_linear_block_read_address+0x24>
 8000fce:	6882      	ldr	r2, [r0, #8]
 8000fd0:	b112      	cbz	r2, 8000fd8 <lwrb_get_linear_block_read_address+0x20>
        return NULL;
    }
    return &buff->buff[buff->r];
 8000fd2:	68c0      	ldr	r0, [r0, #12]
 8000fd4:	4418      	add	r0, r3
 8000fd6:	4770      	bx	lr
        return NULL;
 8000fd8:	4610      	mov	r0, r2
}
 8000fda:	4770      	bx	lr
        return NULL;
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4770      	bx	lr
 8000fe0:	deadbeef 	.word	0xdeadbeef
 8000fe4:	21524110 	.word	0x21524110

08000fe8 <lwrb_get_linear_block_read_length>:
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b118      	cbz	r0, 8000ff4 <lwrb_get_linear_block_read_length+0xc>
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <lwrb_get_linear_block_read_length+0x38>)
 8000fee:	6801      	ldr	r1, [r0, #0]
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d001      	beq.n	8000ff8 <lwrb_get_linear_block_read_length+0x10>
        return 0;
 8000ff4:	2000      	movs	r0, #0
        len = buff->size - r;
    } else {
        len = 0;
    }
    return len;
}
 8000ff6:	4770      	bx	lr
    if (!BUF_IS_VALID(buff)) {
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <lwrb_get_linear_block_read_length+0x3c>)
 8000ffa:	6981      	ldr	r1, [r0, #24]
 8000ffc:	4291      	cmp	r1, r2
 8000ffe:	d1f9      	bne.n	8000ff4 <lwrb_get_linear_block_read_length+0xc>
 8001000:	6840      	ldr	r0, [r0, #4]
 8001002:	2800      	cmp	r0, #0
 8001004:	d0f7      	beq.n	8000ff6 <lwrb_get_linear_block_read_length+0xe>
 8001006:	6898      	ldr	r0, [r3, #8]
 8001008:	2800      	cmp	r0, #0
 800100a:	d0f4      	beq.n	8000ff6 <lwrb_get_linear_block_read_length+0xe>
    r = buff->r;
 800100c:	e9d3 3203 	ldrd	r3, r2, [r3, #12]
    if (w > r) {
 8001010:	429a      	cmp	r2, r3
 8001012:	d802      	bhi.n	800101a <lwrb_get_linear_block_read_length+0x32>
    } else if (r > w) {
 8001014:	d2ee      	bcs.n	8000ff4 <lwrb_get_linear_block_read_length+0xc>
        len = buff->size - r;
 8001016:	1ac0      	subs	r0, r0, r3
 8001018:	4770      	bx	lr
        len = w - r;
 800101a:	1ad0      	subs	r0, r2, r3
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	deadbeef 	.word	0xdeadbeef
 8001024:	21524110 	.word	0x21524110

08001028 <lwrb_skip>:
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8001028:	b358      	cbz	r0, 8001082 <lwrb_skip+0x5a>
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800102a:	b510      	push	{r4, lr}
    if (!BUF_IS_VALID(buff) || len == 0) {
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <lwrb_skip+0x64>)
 800102e:	6804      	ldr	r4, [r0, #0]
 8001030:	429c      	cmp	r4, r3
 8001032:	d002      	beq.n	800103a <lwrb_skip+0x12>
        return 0;
 8001034:	2300      	movs	r3, #0
    if (buff->r >= buff->size) {
        buff->r -= buff->size;
    }
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd10      	pop	{r4, pc}
    if (!BUF_IS_VALID(buff) || len == 0) {
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <lwrb_skip+0x68>)
 800103c:	6982      	ldr	r2, [r0, #24]
 800103e:	429a      	cmp	r2, r3
 8001040:	d1f8      	bne.n	8001034 <lwrb_skip+0xc>
 8001042:	6843      	ldr	r3, [r0, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f6      	beq.n	8001036 <lwrb_skip+0xe>
 8001048:	6883      	ldr	r3, [r0, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f3      	beq.n	8001036 <lwrb_skip+0xe>
 800104e:	2900      	cmp	r1, #0
 8001050:	d0f0      	beq.n	8001034 <lwrb_skip+0xc>
    r = buff->r;
 8001052:	e9d0 2403 	ldrd	r2, r4, [r0, #12]
    if (w == r) {
 8001056:	4294      	cmp	r4, r2
 8001058:	d016      	beq.n	8001088 <lwrb_skip+0x60>
        size = buff->size - (r - w);
 800105a:	bf98      	it	ls
 800105c:	18e4      	addls	r4, r4, r3
 800105e:	1aa4      	subs	r4, r4, r2
    len = BUF_MIN(len, full);
 8001060:	428c      	cmp	r4, r1
 8001062:	bf28      	it	cs
 8001064:	460c      	movcs	r4, r1
    buff->r += len;
 8001066:	4422      	add	r2, r4
    if (buff->r >= buff->size) {
 8001068:	4293      	cmp	r3, r2
        buff->r -= buff->size;
 800106a:	bf9c      	itt	ls
 800106c:	1ad3      	subls	r3, r2, r3
 800106e:	60c3      	strls	r3, [r0, #12]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8001070:	6943      	ldr	r3, [r0, #20]
    buff->r += len;
 8001072:	bf88      	it	hi
 8001074:	60c2      	strhi	r2, [r0, #12]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8001076:	b12b      	cbz	r3, 8001084 <lwrb_skip+0x5c>
 8001078:	4622      	mov	r2, r4
 800107a:	2100      	movs	r1, #0
 800107c:	4798      	blx	r3
    return len;
 800107e:	4623      	mov	r3, r4
 8001080:	e7d9      	b.n	8001036 <lwrb_skip+0xe>
}
 8001082:	4770      	bx	lr
    return len;
 8001084:	4623      	mov	r3, r4
 8001086:	e7d6      	b.n	8001036 <lwrb_skip+0xe>
        size = 0;
 8001088:	2400      	movs	r4, #0
 800108a:	e7e9      	b.n	8001060 <lwrb_skip+0x38>
 800108c:	deadbeef 	.word	0xdeadbeef
 8001090:	21524110 	.word	0x21524110
 8001094:	00000000 	.word	0x00000000

08001098 <_Z4ftoadPci>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b08b      	sub	sp, #44	; 0x2c
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0b02 	vstr	d0, [r7, #8]
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b0a      	cmp	r3, #10
 80010b2:	dd01      	ble.n	80010b8 <_Z4ftoadPci+0x20>
		precision = MAX_PRECISION;
 80010b4:	230a      	movs	r3, #10
 80010b6:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c4:	f7ff fcb6 	bl	8000a34 <__aeabi_dcmplt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <_Z4ftoadPci+0x4c>
	{
		f = -f;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	627a      	str	r2, [r7, #36]	; 0x24
 80010e0:	222d      	movs	r2, #45	; 0x2d
 80010e2:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da4f      	bge.n	800118a <_Z4ftoadPci+0xf2>
	{
		if (f < 1.0) precision = 6;
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <_Z4ftoadPci+0x260>)
 80010f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010f4:	f7ff fc9e 	bl	8000a34 <__aeabi_dcmplt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <_Z4ftoadPci+0x6c>
 80010fe:	2306      	movs	r3, #6
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	e042      	b.n	800118a <_Z4ftoadPci+0xf2>
		else if (f < 10.0) precision = 5;
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <_Z4ftoadPci+0x264>)
 800110a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800110e:	f7ff fc91 	bl	8000a34 <__aeabi_dcmplt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <_Z4ftoadPci+0x86>
 8001118:	2305      	movs	r3, #5
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	e035      	b.n	800118a <_Z4ftoadPci+0xf2>
		else if (f < 100.0) precision = 4;
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b77      	ldr	r3, [pc, #476]	; (8001300 <_Z4ftoadPci+0x268>)
 8001124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001128:	f7ff fc84 	bl	8000a34 <__aeabi_dcmplt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <_Z4ftoadPci+0xa0>
 8001132:	2304      	movs	r3, #4
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	e028      	b.n	800118a <_Z4ftoadPci+0xf2>
		else if (f < 1000.0) precision = 3;
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b71      	ldr	r3, [pc, #452]	; (8001304 <_Z4ftoadPci+0x26c>)
 800113e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001142:	f7ff fc77 	bl	8000a34 <__aeabi_dcmplt>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <_Z4ftoadPci+0xba>
 800114c:	2303      	movs	r3, #3
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	e01b      	b.n	800118a <_Z4ftoadPci+0xf2>
		else if (f < 10000.0) precision = 2;
 8001152:	a365      	add	r3, pc, #404	; (adr r3, 80012e8 <_Z4ftoadPci+0x250>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800115c:	f7ff fc6a 	bl	8000a34 <__aeabi_dcmplt>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <_Z4ftoadPci+0xd4>
 8001166:	2302      	movs	r3, #2
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	e00e      	b.n	800118a <_Z4ftoadPci+0xf2>
		else if (f < 100000.0) precision = 1;
 800116c:	a360      	add	r3, pc, #384	; (adr r3, 80012f0 <_Z4ftoadPci+0x258>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001176:	f7ff fc5d 	bl	8000a34 <__aeabi_dcmplt>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <_Z4ftoadPci+0xee>
 8001180:	2301      	movs	r3, #1
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	e001      	b.n	800118a <_Z4ftoadPci+0xf2>
		else precision = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00f      	beq.n	80011b0 <_Z4ftoadPci+0x118>
		f += rounders[precision];
 8001190:	4a5d      	ldr	r2, [pc, #372]	; (8001308 <_Z4ftoadPci+0x270>)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	e9d3 3400 	ldrd	r3, r4, [r3]
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a4:	f7ff f81e 	bl	80001e4 <__adddf3>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 80011b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011b4:	f7ff fc7c 	bl	8000ab0 <__aeabi_d2iz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80011bc:	69f8      	ldr	r0, [r7, #28]
 80011be:	f7ff f95d 	bl	800047c <__aeabi_i2d>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	461a      	mov	r2, r3
 80011c8:	4623      	mov	r3, r4
 80011ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ce:	f7ff f807 	bl	80001e0 <__aeabi_dsub>
 80011d2:	4603      	mov	r3, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <_Z4ftoadPci+0x154>
		*ptr++ = '0';
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	627a      	str	r2, [r7, #36]	; 0x24
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e038      	b.n	800125e <_Z4ftoadPci+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01b      	beq.n	800122e <_Z4ftoadPci+0x196>
		{
			*p++ = '0' + intPart % 10;
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <_Z4ftoadPci+0x274>)
 80011fa:	fb83 1302 	smull	r1, r3, r3, r2
 80011fe:	1099      	asrs	r1, r3, #2
 8001200:	17d3      	asrs	r3, r2, #31
 8001202:	1ac9      	subs	r1, r1, r3
 8001204:	460b      	mov	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	1ad1      	subs	r1, r2, r3
 800120e:	b2ca      	uxtb	r2, r1
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	6239      	str	r1, [r7, #32]
 8001216:	3230      	adds	r2, #48	; 0x30
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	4a3b      	ldr	r2, [pc, #236]	; (800130c <_Z4ftoadPci+0x274>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800122c:	e7e0      	b.n	80011f0 <_Z4ftoadPci+0x158>
		}

		// save end pos
		p1 = p;
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	429a      	cmp	r2, r3
 8001238:	d90f      	bls.n	800125a <_Z4ftoadPci+0x1c2>
		{
			c = *--p;
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	3b01      	subs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	627a      	str	r2, [r7, #36]	; 0x24
 8001254:	7dfa      	ldrb	r2, [r7, #23]
 8001256:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001258:	e7eb      	b.n	8001232 <_Z4ftoadPci+0x19a>
		}

		// restore end pos
		ptr = p1;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d037      	beq.n	80012d4 <_Z4ftoadPci+0x23c>
	{
		// place decimal point
		*ptr++ = '.';
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	627a      	str	r2, [r7, #36]	; 0x24
 800126a:	222e      	movs	r2, #46	; 0x2e
 800126c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	603a      	str	r2, [r7, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d028      	beq.n	80012d4 <_Z4ftoadPci+0x23c>
		{
			f *= 10.0;
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <_Z4ftoadPci+0x264>)
 8001288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800128c:	f7ff f960 	bl	8000550 <__aeabi_dmul>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 8001298:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800129c:	f7ff fc30 	bl	8000b00 <__aeabi_d2uiz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	627a      	str	r2, [r7, #36]	; 0x24
 80012aa:	7dfa      	ldrb	r2, [r7, #23]
 80012ac:	3230      	adds	r2, #48	; 0x30
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
			f -= c;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8e1 	bl	800047c <__aeabi_i2d>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	461a      	mov	r2, r3
 80012c0:	4623      	mov	r3, r4
 80012c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c6:	f7fe ff8b 	bl	80001e0 <__aeabi_dsub>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80012d2:	e7cc      	b.n	800126e <_Z4ftoadPci+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]

	return buf;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	372c      	adds	r7, #44	; 0x2c
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	f3af 8000 	nop.w
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40c38800 	.word	0x40c38800
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40f86a00 	.word	0x40f86a00
 80012f8:	3ff00000 	.word	0x3ff00000
 80012fc:	40240000 	.word	0x40240000
 8001300:	40590000 	.word	0x40590000
 8001304:	408f4000 	.word	0x408f4000
 8001308:	08009c48 	.word	0x08009c48
 800130c:	66666667 	.word	0x66666667

08001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>:
} I2C_Module_t;

I2C_Module_t i2c;

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	817b      	strh	r3, [r7, #10]
 800131e:	4613      	mov	r3, r2
 8001320:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8001322:	f002 fdc5 	bl	8003eb0 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 800132c:	897b      	ldrh	r3, [r7, #10]
 800132e:	4619      	mov	r1, r3
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f003 fa0f 	bl	8004754 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	7a7b      	ldrb	r3, [r7, #9]
 800133c:	4293      	cmp	r3, r2
 800133e:	d004      	beq.n	800134a <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x3a>
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x3a>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x3c>
 800134a:	2300      	movs	r3, #0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d017      	beq.n	8001380 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x70>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001356:	d011      	beq.n	800137c <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x6c>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x5e>
 800135e:	f002 fda7 	bl	8003eb0 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d201      	bcs.n	8001372 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x62>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x64>
 8001372:	2300      	movs	r3, #0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x6c>
            {
                ret = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 800137c:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 800137e:	e7d5      	b.n	800132c <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x1c>
    }
    return ret;
 8001380:	7dfb      	ldrb	r3, [r7, #23]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZL24I2C_ClearBusyFlagErratumP12I2C_Module_tm>:

static void I2C_ClearBusyFlagErratum(I2C_Module_t* i2c, uint32_t timeout)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b088      	sub	sp, #32
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    I2C_HandleTypeDef* handler = NULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]

    handler = i2c->instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61fb      	str	r3, [r7, #28]

    // 1. Clear PE bit.
    CLEAR_BIT(handler->Instance->CR1, I2C_CR1_PE);
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handler);
 80013ae:	69f8      	ldr	r0, [r7, #28]
 80013b0:	f003 faa2 	bl	80048f8 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80013b4:	2311      	movs	r3, #17
 80013b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = i2c->sclPin;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	899b      	ldrh	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f107 0208 	add.w	r2, r7, #8
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 f813 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = i2c->sdaPin;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	889b      	ldrh	r3, [r3, #4]
 80013d6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f107 0208 	add.w	r2, r7, #8
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 f808 	bl	80043f8 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6898      	ldr	r0, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	889b      	ldrh	r3, [r3, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	f003 f9b4 	bl	8004760 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6918      	ldr	r0, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	899b      	ldrh	r3, [r3, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	4619      	mov	r1, r3
 8001404:	f003 f9ac 	bl	8004760 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET, timeout);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6918      	ldr	r0, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	8999      	ldrh	r1, [r3, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	f7ff ff7c 	bl	8001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>
    wait_for_gpio_state_timeout(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET, timeout);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6898      	ldr	r0, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	8899      	ldrh	r1, [r3, #4]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	f7ff ff74 	bl	8001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6898      	ldr	r0, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	889b      	ldrh	r3, [r3, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f003 f994 	bl	8004760 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET, timeout);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6898      	ldr	r0, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8899      	ldrh	r1, [r3, #4]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	f7ff ff64 	bl	8001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6918      	ldr	r0, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	899b      	ldrh	r3, [r3, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	f003 f984 	bl	8004760 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET, timeout);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6918      	ldr	r0, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8999      	ldrh	r1, [r3, #12]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	f7ff ff54 	bl	8001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6918      	ldr	r0, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	899b      	ldrh	r3, [r3, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	f003 f974 	bl	8004760 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET, timeout);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6918      	ldr	r0, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	8999      	ldrh	r1, [r3, #12]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	f7ff ff44 	bl	8001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6898      	ldr	r0, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	4619      	mov	r1, r3
 8001494:	f003 f964 	bl	8004760 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET, timeout);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6898      	ldr	r0, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	8899      	ldrh	r1, [r3, #4]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f7ff ff34 	bl	8001310 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Alternate = GPIO_AF4_I2C2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]

    GPIO_InitStructure.Pin = i2c->sclPin;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	899b      	ldrh	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f107 0208 	add.w	r2, r7, #8
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 ff99 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = i2c->sdaPin;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	889b      	ldrh	r3, [r3, #4]
 80014ca:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 ff8e 	bl	80043f8 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handler->Instance->CR1, I2C_CR1_SWRST);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ea:	601a      	str	r2, [r3, #0]
    asm("nop");
 80014ec:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handler->Instance->CR1, I2C_CR1_SWRST);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fc:	601a      	str	r2, [r3, #0]
    asm("nop");
 80014fe:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handler->Instance->CR1, I2C_CR1_PE);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001510:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handler);
 8001512:	69f8      	ldr	r0, [r7, #28]
 8001514:	f003 f930 	bl	8004778 <HAL_I2C_Init>
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_Z8init_MPUv>:

/******************************************End HAL_BUSY************************************************************/
char init_MPU(){
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b08d      	sub	sp, #52	; 0x34
 8001524:	af02      	add	r7, sp, #8
    char status = 1;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 800152c:	23d0      	movs	r3, #208	; 0xd0
 800152e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t magnet_address = MAG_ADRRESS;
 8001532:	2318      	movs	r3, #24
 8001534:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


    i2c.instance = &hi2c1;
 8001538:	4bb2      	ldr	r3, [pc, #712]	; (8001804 <_Z8init_MPUv+0x2e4>)
 800153a:	4ab3      	ldr	r2, [pc, #716]	; (8001808 <_Z8init_MPUv+0x2e8>)
 800153c:	601a      	str	r2, [r3, #0]
    i2c.sdaPort =GPIOB;
 800153e:	4bb1      	ldr	r3, [pc, #708]	; (8001804 <_Z8init_MPUv+0x2e4>)
 8001540:	4ab2      	ldr	r2, [pc, #712]	; (800180c <_Z8init_MPUv+0x2ec>)
 8001542:	609a      	str	r2, [r3, #8]
    i2c.sclPort = GPIOB;
 8001544:	4baf      	ldr	r3, [pc, #700]	; (8001804 <_Z8init_MPUv+0x2e4>)
 8001546:	4ab1      	ldr	r2, [pc, #708]	; (800180c <_Z8init_MPUv+0x2ec>)
 8001548:	611a      	str	r2, [r3, #16]
    i2c.sclPin = GPIO_PIN_8;
 800154a:	4bae      	ldr	r3, [pc, #696]	; (8001804 <_Z8init_MPUv+0x2e4>)
 800154c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001550:	819a      	strh	r2, [r3, #12]
    i2c.sdaPin = GPIO_PIN_9;
 8001552:	4bac      	ldr	r3, [pc, #688]	; (8001804 <_Z8init_MPUv+0x2e4>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	809a      	strh	r2, [r3, #4]


  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 800155a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800155e:	b299      	uxth	r1, r3
 8001560:	2302      	movs	r3, #2
 8001562:	2203      	movs	r2, #3
 8001564:	48a8      	ldr	r0, [pc, #672]	; (8001808 <_Z8init_MPUv+0x2e8>)
 8001566:	f003 ff0b 	bl	8005380 <HAL_I2C_IsDeviceReady>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01e      	beq.n	80015b8 <_Z8init_MPUv+0x98>
    	if(HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) == HAL_BUSY){
 800157a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800157e:	b299      	uxth	r1, r3
 8001580:	2302      	movs	r3, #2
 8001582:	2203      	movs	r2, #3
 8001584:	48a0      	ldr	r0, [pc, #640]	; (8001808 <_Z8init_MPUv+0x2e8>)
 8001586:	f003 fefb 	bl	8005380 <HAL_I2C_IsDeviceReady>
 800158a:	4603      	mov	r3, r0
 800158c:	2b02      	cmp	r3, #2
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <_Z8init_MPUv+0x8c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800159a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159e:	489b      	ldr	r0, [pc, #620]	; (800180c <_Z8init_MPUv+0x2ec>)
 80015a0:	f003 f8e2 	bl	8004768 <HAL_GPIO_TogglePin>
			I2C_ClearBusyFlagErratum(&i2c, 10);
 80015a4:	210a      	movs	r1, #10
 80015a6:	4897      	ldr	r0, [pc, #604]	; (8001804 <_Z8init_MPUv+0x2e4>)
 80015a8:	f7ff feef 	bl	800138a <_ZL24I2C_ClearBusyFlagErratumP12I2C_Module_tm>
    	}
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80015ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b0:	4896      	ldr	r0, [pc, #600]	; (800180c <_Z8init_MPUv+0x2ec>)
 80015b2:	f003 f8d9 	bl	8004768 <HAL_GPIO_TogglePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 80015b6:	e7d0      	b.n	800155a <_Z8init_MPUv+0x3a>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015be:	4893      	ldr	r0, [pc, #588]	; (800180c <_Z8init_MPUv+0x2ec>)
 80015c0:	f003 f8ce 	bl	8004760 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ca:	4890      	ldr	r0, [pc, #576]	; (800180c <_Z8init_MPUv+0x2ec>)
 80015cc:	f003 f8c8 	bl	8004760 <HAL_GPIO_WritePin>

//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 80015d0:	236b      	movs	r3, #107	; 0x6b
 80015d2:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80015dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e0:	b299      	uxth	r1, r3
 80015e2:	f107 0220 	add.w	r2, r7, #32
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	4886      	ldr	r0, [pc, #536]	; (8001808 <_Z8init_MPUv+0x2e8>)
 80015f0:	f003 f99c 	bl	800492c <HAL_I2C_Master_Transmit>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 80015f8:	2319      	movs	r3, #25
 80015fa:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 80015fe:	2307      	movs	r3, #7
 8001600:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001608:	b299      	uxth	r1, r3
 800160a:	f107 0220 	add.w	r2, r7, #32
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2302      	movs	r3, #2
 8001616:	487c      	ldr	r0, [pc, #496]	; (8001808 <_Z8init_MPUv+0x2e8>)
 8001618:	f003 f988 	bl	800492c <HAL_I2C_Master_Transmit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d000      	beq.n	800162e <_Z8init_MPUv+0x10e>
 800162c:	e7ea      	b.n	8001604 <_Z8init_MPUv+0xe4>

	d[0] = CONFIG;
 800162e:	231a      	movs	r3, #26
 8001630:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = lpf;
 8001634:	2301      	movs	r3, #1
 8001636:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800163a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800163e:	b299      	uxth	r1, r3
 8001640:	f107 0220 	add.w	r2, r7, #32
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2302      	movs	r3, #2
 800164c:	486e      	ldr	r0, [pc, #440]	; (8001808 <_Z8init_MPUv+0x2e8>)
 800164e:	f003 f96d 	bl	800492c <HAL_I2C_Master_Transmit>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d000      	beq.n	8001664 <_Z8init_MPUv+0x144>
 8001662:	e7ea      	b.n	800163a <_Z8init_MPUv+0x11a>

	d[0] = GYRO_CONFIG;
 8001664:	231b      	movs	r3, #27
 8001666:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 800166a:	2318      	movs	r3, #24
 800166c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001674:	b299      	uxth	r1, r3
 8001676:	f107 0220 	add.w	r2, r7, #32
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2302      	movs	r3, #2
 8001682:	4861      	ldr	r0, [pc, #388]	; (8001808 <_Z8init_MPUv+0x2e8>)
 8001684:	f003 f952 	bl	800492c <HAL_I2C_Master_Transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d000      	beq.n	800169a <_Z8init_MPUv+0x17a>
 8001698:	e7ea      	b.n	8001670 <_Z8init_MPUv+0x150>

	d[0] = ACCEL_CONFIG;
 800169a:	231c      	movs	r3, #28
 800169c:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80016a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016aa:	b299      	uxth	r1, r3
 80016ac:	f107 0220 	add.w	r2, r7, #32
 80016b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2302      	movs	r3, #2
 80016b8:	4853      	ldr	r0, [pc, #332]	; (8001808 <_Z8init_MPUv+0x2e8>)
 80016ba:	f003 f937 	bl	800492c <HAL_I2C_Master_Transmit>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d000      	beq.n	80016d0 <_Z8init_MPUv+0x1b0>
 80016ce:	e7ea      	b.n	80016a6 <_Z8init_MPUv+0x186>

	d[0] = ACCEL_CONFIG2;
 80016d0:	231d      	movs	r3, #29
 80016d2:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x02;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80016dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e0:	b299      	uxth	r1, r3
 80016e2:	f107 0220 	add.w	r2, r7, #32
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2302      	movs	r3, #2
 80016ee:	4846      	ldr	r0, [pc, #280]	; (8001808 <_Z8init_MPUv+0x2e8>)
 80016f0:	f003 f91c 	bl	800492c <HAL_I2C_Master_Transmit>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d000      	beq.n	8001706 <_Z8init_MPUv+0x1e6>
 8001704:	e7ea      	b.n	80016dc <_Z8init_MPUv+0x1bc>


	d[0] = INIT_ENB;
 8001706:	2338      	movs	r3, #56	; 0x38
 8001708:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001716:	b299      	uxth	r1, r3
 8001718:	f107 0220 	add.w	r2, r7, #32
 800171c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2302      	movs	r3, #2
 8001724:	4838      	ldr	r0, [pc, #224]	; (8001808 <_Z8init_MPUv+0x2e8>)
 8001726:	f003 f901 	bl	800492c <HAL_I2C_Master_Transmit>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf14      	ite	ne
 8001730:	2301      	movne	r3, #1
 8001732:	2300      	moveq	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d000      	beq.n	800173c <_Z8init_MPUv+0x21c>
 800173a:	e7ea      	b.n	8001712 <_Z8init_MPUv+0x1f2>

	d[0] = USER_CTRL;
 800173c:	236a      	movs	r3, #106	; 0x6a
 800173e:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = zero;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001748:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174c:	b299      	uxth	r1, r3
 800174e:	f107 0220 	add.w	r2, r7, #32
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	482b      	ldr	r0, [pc, #172]	; (8001808 <_Z8init_MPUv+0x2e8>)
 800175c:	f003 f8e6 	bl	800492c <HAL_I2C_Master_Transmit>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d000      	beq.n	8001772 <_Z8init_MPUv+0x252>
 8001770:	e7ea      	b.n	8001748 <_Z8init_MPUv+0x228>

	d[0] = INT_BYPASS;
 8001772:	2337      	movs	r3, #55	; 0x37
 8001774:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = stop_i2c_master;
 8001778:	2322      	movs	r3, #34	; 0x22
 800177a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800177e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001782:	b299      	uxth	r1, r3
 8001784:	f107 0220 	add.w	r2, r7, #32
 8001788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2302      	movs	r3, #2
 8001790:	481d      	ldr	r0, [pc, #116]	; (8001808 <_Z8init_MPUv+0x2e8>)
 8001792:	f003 f8cb 	bl	800492c <HAL_I2C_Master_Transmit>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d000      	beq.n	80017a8 <_Z8init_MPUv+0x288>
 80017a6:	e7ea      	b.n	800177e <_Z8init_MPUv+0x25e>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 80017a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017ac:	b299      	uxth	r1, r3
 80017ae:	23c8      	movs	r3, #200	; 0xc8
 80017b0:	2203      	movs	r2, #3
 80017b2:	4815      	ldr	r0, [pc, #84]	; (8001808 <_Z8init_MPUv+0x2e8>)
 80017b4:	f003 fde4 	bl	8005380 <HAL_I2C_IsDeviceReady>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf14      	ite	ne
 80017be:	2301      	movne	r3, #1
 80017c0:	2300      	moveq	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d025      	beq.n	8001814 <_Z8init_MPUv+0x2f4>
	    	strcpy( rx_data, "No Device \r \n");
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <_Z8init_MPUv+0x2f0>)
 80017cc:	461c      	mov	r4, r3
 80017ce:	4613      	mov	r3, r2
 80017d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d2:	c407      	stmia	r4!, {r0, r1, r2}
 80017d4:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <_Z8init_MPUv+0x2ec>)
 80017de:	f002 ffbf 	bl	8004760 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <_Z8init_MPUv+0x2ec>)
 80017ea:	f002 ffb9 	bl	8004760 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f2:	f002 fb63 	bl	8003ebc <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <_Z8init_MPUv+0x2ec>)
 80017fe:	f002 ffaf 	bl	8004760 <HAL_GPIO_WritePin>
 8001802:	e0fc      	b.n	80019fe <_Z8init_MPUv+0x4de>
 8001804:	20000264 	.word	0x20000264
 8001808:	20000498 	.word	0x20000498
 800180c:	40020400 	.word	0x40020400
 8001810:	08009b78 	.word	0x08009b78
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8001814:	230a      	movs	r3, #10
 8001816:	f887 3020 	strb.w	r3, [r7, #32]
	    	  	d[1] = ROM_MODE;
 800181a:	231f      	movs	r3, #31
 800181c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001820:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001824:	b299      	uxth	r1, r3
 8001826:	f107 0220 	add.w	r2, r7, #32
 800182a:	2302      	movs	r3, #2
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2302      	movs	r3, #2
 8001830:	4876      	ldr	r0, [pc, #472]	; (8001a0c <_Z8init_MPUv+0x4ec>)
 8001832:	f003 f87b 	bl	800492c <HAL_I2C_Master_Transmit>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d000      	beq.n	8001848 <_Z8init_MPUv+0x328>
 8001846:	e7eb      	b.n	8001820 <_Z8init_MPUv+0x300>

	    	  	HAL_Delay(100);
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f002 fb37 	bl	8003ebc <HAL_Delay>


	    	  	uint8_t sensitive = ASAX_AD;
 800184e:	2310      	movs	r3, #16
 8001850:	70fb      	strb	r3, [r7, #3]

	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001852:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001856:	b299      	uxth	r1, r3
 8001858:	1cfa      	adds	r2, r7, #3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	486a      	ldr	r0, [pc, #424]	; (8001a0c <_Z8init_MPUv+0x4ec>)
 8001864:	f003 f862 	bl	800492c <HAL_I2C_Master_Transmit>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d000      	beq.n	800187a <_Z8init_MPUv+0x35a>
 8001878:	e7eb      	b.n	8001852 <_Z8init_MPUv+0x332>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 800187a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800187e:	b299      	uxth	r1, r3
 8001880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2303      	movs	r3, #3
 8001888:	4a61      	ldr	r2, [pc, #388]	; (8001a10 <_Z8init_MPUv+0x4f0>)
 800188a:	4860      	ldr	r0, [pc, #384]	; (8001a0c <_Z8init_MPUv+0x4ec>)
 800188c:	f003 f9ce 	bl	8004c2c <HAL_I2C_Master_Receive>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d000      	beq.n	80018a2 <_Z8init_MPUv+0x382>
 80018a0:	e7eb      	b.n	800187a <_Z8init_MPUv+0x35a>

	    	      asax = (asa[0]-128)*0.5/128+1;
 80018a2:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <_Z8init_MPUv+0x4f0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b80      	subs	r3, #128	; 0x80
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fde7 	bl	800047c <__aeabi_i2d>
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <_Z8init_MPUv+0x4f4>)
 80018b4:	f7fe fe4c 	bl	8000550 <__aeabi_dmul>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	4618      	mov	r0, r3
 80018be:	4621      	mov	r1, r4
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <_Z8init_MPUv+0x4f8>)
 80018c6:	f7fe ff6d 	bl	80007a4 <__aeabi_ddiv>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	4618      	mov	r0, r3
 80018d0:	4621      	mov	r1, r4
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <_Z8init_MPUv+0x4fc>)
 80018d8:	f7fe fc84 	bl	80001e4 <__adddf3>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	4618      	mov	r0, r3
 80018e2:	4621      	mov	r1, r4
 80018e4:	f7ff f92c 	bl	8000b40 <__aeabi_d2f>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <_Z8init_MPUv+0x500>)
 80018ec:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 80018ee:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <_Z8init_MPUv+0x4f0>)
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	3b80      	subs	r3, #128	; 0x80
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fdc1 	bl	800047c <__aeabi_i2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <_Z8init_MPUv+0x4f4>)
 8001900:	f7fe fe26 	bl	8000550 <__aeabi_dmul>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	4618      	mov	r0, r3
 800190a:	4621      	mov	r1, r4
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <_Z8init_MPUv+0x4f8>)
 8001912:	f7fe ff47 	bl	80007a4 <__aeabi_ddiv>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4618      	mov	r0, r3
 800191c:	4621      	mov	r1, r4
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <_Z8init_MPUv+0x4fc>)
 8001924:	f7fe fc5e 	bl	80001e4 <__adddf3>
 8001928:	4603      	mov	r3, r0
 800192a:	460c      	mov	r4, r1
 800192c:	4618      	mov	r0, r3
 800192e:	4621      	mov	r1, r4
 8001930:	f7ff f906 	bl	8000b40 <__aeabi_d2f>
 8001934:	4602      	mov	r2, r0
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <_Z8init_MPUv+0x504>)
 8001938:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <_Z8init_MPUv+0x4f0>)
 800193c:	789b      	ldrb	r3, [r3, #2]
 800193e:	3b80      	subs	r3, #128	; 0x80
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fd9b 	bl	800047c <__aeabi_i2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <_Z8init_MPUv+0x4f4>)
 800194c:	f7fe fe00 	bl	8000550 <__aeabi_dmul>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	4618      	mov	r0, r3
 8001956:	4621      	mov	r1, r4
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <_Z8init_MPUv+0x4f8>)
 800195e:	f7fe ff21 	bl	80007a4 <__aeabi_ddiv>
 8001962:	4603      	mov	r3, r0
 8001964:	460c      	mov	r4, r1
 8001966:	4618      	mov	r0, r3
 8001968:	4621      	mov	r1, r4
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <_Z8init_MPUv+0x4fc>)
 8001970:	f7fe fc38 	bl	80001e4 <__adddf3>
 8001974:	4603      	mov	r3, r0
 8001976:	460c      	mov	r4, r1
 8001978:	4618      	mov	r0, r3
 800197a:	4621      	mov	r1, r4
 800197c:	f7ff f8e0 	bl	8000b40 <__aeabi_d2f>
 8001980:	4602      	mov	r2, r0
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <_Z8init_MPUv+0x508>)
 8001984:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8001986:	230a      	movs	r3, #10
 8001988:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = zero;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001992:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001996:	b299      	uxth	r1, r3
 8001998:	f107 0220 	add.w	r2, r7, #32
 800199c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2302      	movs	r3, #2
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <_Z8init_MPUv+0x4ec>)
 80019a6:	f002 ffc1 	bl	800492c <HAL_I2C_Master_Transmit>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d000      	beq.n	80019bc <_Z8init_MPUv+0x49c>
 80019ba:	e7ea      	b.n	8001992 <_Z8init_MPUv+0x472>

	    	      HAL_Delay(100);
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	f002 fa7d 	bl	8003ebc <HAL_Delay>

	    	      d[0] = CNTL1_AD;
 80019c2:	230a      	movs	r3, #10
 80019c4:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = 0x16;
 80019c8:	2316      	movs	r3, #22
 80019ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80019ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019d2:	b299      	uxth	r1, r3
 80019d4:	f107 0220 	add.w	r2, r7, #32
 80019d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2302      	movs	r3, #2
 80019e0:	480a      	ldr	r0, [pc, #40]	; (8001a0c <_Z8init_MPUv+0x4ec>)
 80019e2:	f002 ffa3 	bl	800492c <HAL_I2C_Master_Transmit>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d000      	beq.n	80019f8 <_Z8init_MPUv+0x4d8>
 80019f6:	e7ea      	b.n	80019ce <_Z8init_MPUv+0x4ae>
	    	      HAL_Delay(100);
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f002 fa5f 	bl	8003ebc <HAL_Delay>
	      }


  return status;
 80019fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	372c      	adds	r7, #44	; 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000498 	.word	0x20000498
 8001a10:	20000260 	.word	0x20000260
 8001a14:	3fe00000 	.word	0x3fe00000
 8001a18:	40600000 	.word	0x40600000
 8001a1c:	3ff00000 	.word	0x3ff00000
 8001a20:	20000200 	.word	0x20000200
 8001a24:	20000204 	.word	0x20000204
 8001a28:	20000208 	.word	0x20000208
 8001a2c:	00000000 	.word	0x00000000

08001a30 <_Z15process_MPU_DMAbb>:
		data_raw.Acc_z = Acc_z;
    }

    return data_raw;
}
IMU_data process_MPU_DMA(bool EKF, bool LPF){
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 8001a40:	233b      	movs	r3, #59	; 0x3b
 8001a42:	73fb      	strb	r3, [r7, #15]
	uint8_t device_address = MPU_ADDRESS;
 8001a44:	23d0      	movs	r3, #208	; 0xd0
 8001a46:	77fb      	strb	r3, [r7, #31]


	while(HAL_I2C_Master_Transmit_DMA(&hi2c1,(uint16_t)device_address, &reg, 1) != HAL_OK){
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	f107 020f 	add.w	r2, r7, #15
 8001a50:	2301      	movs	r3, #1
 8001a52:	489f      	ldr	r0, [pc, #636]	; (8001cd0 <_Z15process_MPU_DMAbb+0x2a0>)
 8001a54:	f003 fb50 	bl	80050f8 <HAL_I2C_Master_Transmit_DMA>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf14      	ite	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	2300      	moveq	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d000      	beq.n	8001a6a <_Z15process_MPU_DMAbb+0x3a>
 8001a68:	e7ee      	b.n	8001a48 <_Z15process_MPU_DMAbb+0x18>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//			I2C_ClearBusyFlagErratum(&i2c, 10);
//	    }
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}
	while(HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)device_address, data,14) != HAL_OK){
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	f107 0210 	add.w	r2, r7, #16
 8001a72:	230e      	movs	r3, #14
 8001a74:	4896      	ldr	r0, [pc, #600]	; (8001cd0 <_Z15process_MPU_DMAbb+0x2a0>)
 8001a76:	f003 fbe1 	bl	800523c <HAL_I2C_Master_Receive_DMA>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf14      	ite	ne
 8001a80:	2301      	movne	r3, #1
 8001a82:	2300      	moveq	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d000      	beq.n	8001a8c <_Z15process_MPU_DMAbb+0x5c>
 8001a8a:	e7ee      	b.n	8001a6a <_Z15process_MPU_DMAbb+0x3a>
//					I2C_ClearBusyFlagErratum(&i2c, 10);
//			    }
//			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001a8c:	7c3b      	ldrb	r3, [r7, #16]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	7c7b      	ldrb	r3, [r7, #17]
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <_Z15process_MPU_DMAbb+0x2a4>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8001aa8:	7cbb      	ldrb	r3, [r7, #18]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	7cfb      	ldrb	r3, [r7, #19]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abe:	4b86      	ldr	r3, [pc, #536]	; (8001cd8 <_Z15process_MPU_DMAbb+0x2a8>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8001ac4:	7d3b      	ldrb	r3, [r7, #20]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	7d7b      	ldrb	r3, [r7, #21]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <_Z15process_MPU_DMAbb+0x2ac>)
 8001adc:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <_Z15process_MPU_DMAbb+0x2b0>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8001afc:	7e3b      	ldrb	r3, [r7, #24]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	7e7b      	ldrb	r3, [r7, #25]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <_Z15process_MPU_DMAbb+0x2b4>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8001b18:	7ebb      	ldrb	r3, [r7, #26]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	7efb      	ldrb	r3, [r7, #27]
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <_Z15process_MPU_DMAbb+0x2b8>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8001b34:	7f3b      	ldrb	r3, [r7, #28]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	7f7b      	ldrb	r3, [r7, #29]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4a:	4b68      	ldr	r3, [pc, #416]	; (8001cec <_Z15process_MPU_DMAbb+0x2bc>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 8001b50:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <_Z15process_MPU_DMAbb+0x2a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fca3 	bl	80004a0 <__aeabi_f2d>
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b64      	ldr	r3, [pc, #400]	; (8001cf0 <_Z15process_MPU_DMAbb+0x2c0>)
 8001b60:	f7fe fe20 	bl	80007a4 <__aeabi_ddiv>
 8001b64:	4603      	mov	r3, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <_Z15process_MPU_DMAbb+0x2c4>)
 8001b6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4623      	mov	r3, r4
 8001b76:	f7fe fb33 	bl	80001e0 <__aeabi_dsub>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460c      	mov	r4, r1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4621      	mov	r1, r4
 8001b82:	f7fe ffdd 	bl	8000b40 <__aeabi_d2f>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <_Z15process_MPU_DMAbb+0x2a4>)
 8001b8a:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <_Z15process_MPU_DMAbb+0x2a8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fc85 	bl	80004a0 <__aeabi_f2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <_Z15process_MPU_DMAbb+0x2c0>)
 8001b9c:	f7fe fe02 	bl	80007a4 <__aeabi_ddiv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <_Z15process_MPU_DMAbb+0x2c8>)
 8001baa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7fe fb15 	bl	80001e0 <__aeabi_dsub>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f7fe ffbf 	bl	8000b40 <__aeabi_d2f>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <_Z15process_MPU_DMAbb+0x2a8>)
 8001bc6:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <_Z15process_MPU_DMAbb+0x2ac>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc67 	bl	80004a0 <__aeabi_f2d>
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <_Z15process_MPU_DMAbb+0x2c0>)
 8001bd8:	f7fe fde4 	bl	80007a4 <__aeabi_ddiv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	4618      	mov	r0, r3
 8001be2:	4621      	mov	r1, r4
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <_Z15process_MPU_DMAbb+0x2cc>)
 8001be6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4623      	mov	r3, r4
 8001bee:	f7fe faf9 	bl	80001e4 <__adddf3>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	f7fe ffa1 	bl	8000b40 <__aeabi_d2f>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <_Z15process_MPU_DMAbb+0x2ac>)
 8001c02:	601a      	str	r2, [r3, #0]
    if(!EKF){
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f083 0301 	eor.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d07d      	beq.n	8001d0c <_Z15process_MPU_DMAbb+0x2dc>
	Gyro_x = (Gyro_x )/16.4- bGx;
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <_Z15process_MPU_DMAbb+0x2b4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc43 	bl	80004a0 <__aeabi_f2d>
 8001c1a:	a32b      	add	r3, pc, #172	; (adr r3, 8001cc8 <_Z15process_MPU_DMAbb+0x298>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fdc0 	bl	80007a4 <__aeabi_ddiv>
 8001c24:	4603      	mov	r3, r0
 8001c26:	460c      	mov	r4, r1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <_Z15process_MPU_DMAbb+0x2d0>)
 8001c2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4623      	mov	r3, r4
 8001c36:	f7fe fad3 	bl	80001e0 <__aeabi_dsub>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4621      	mov	r1, r4
 8001c42:	f7fe ff7d 	bl	8000b40 <__aeabi_d2f>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <_Z15process_MPU_DMAbb+0x2b4>)
 8001c4a:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <_Z15process_MPU_DMAbb+0x2b8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc25 	bl	80004a0 <__aeabi_f2d>
 8001c56:	a31c      	add	r3, pc, #112	; (adr r3, 8001cc8 <_Z15process_MPU_DMAbb+0x298>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fda2 	bl	80007a4 <__aeabi_ddiv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	4618      	mov	r0, r3
 8001c66:	4621      	mov	r1, r4
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <_Z15process_MPU_DMAbb+0x2d4>)
 8001c6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4623      	mov	r3, r4
 8001c72:	f7fe fab5 	bl	80001e0 <__aeabi_dsub>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	f7fe ff5f 	bl	8000b40 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <_Z15process_MPU_DMAbb+0x2b8>)
 8001c86:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <_Z15process_MPU_DMAbb+0x2bc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc07 	bl	80004a0 <__aeabi_f2d>
 8001c92:	a30d      	add	r3, pc, #52	; (adr r3, 8001cc8 <_Z15process_MPU_DMAbb+0x298>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fd84 	bl	80007a4 <__aeabi_ddiv>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <_Z15process_MPU_DMAbb+0x2d8>)
 8001ca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4623      	mov	r3, r4
 8001cae:	f7fe fa97 	bl	80001e0 <__aeabi_dsub>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4621      	mov	r1, r4
 8001cba:	f7fe ff41 	bl	8000b40 <__aeabi_d2f>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <_Z15process_MPU_DMAbb+0x2bc>)
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e05b      	b.n	8001d7e <_Z15process_MPU_DMAbb+0x34e>
 8001cc6:	bf00      	nop
 8001cc8:	66666666 	.word	0x66666666
 8001ccc:	40306666 	.word	0x40306666
 8001cd0:	20000498 	.word	0x20000498
 8001cd4:	20000248 	.word	0x20000248
 8001cd8:	2000024c 	.word	0x2000024c
 8001cdc:	20000250 	.word	0x20000250
 8001ce0:	200001fc 	.word	0x200001fc
 8001ce4:	20000254 	.word	0x20000254
 8001ce8:	20000258 	.word	0x20000258
 8001cec:	2000025c 	.word	0x2000025c
 8001cf0:	40d00000 	.word	0x40d00000
 8001cf4:	20000210 	.word	0x20000210
 8001cf8:	20000218 	.word	0x20000218
 8001cfc:	20000220 	.word	0x20000220
 8001d00:	20000228 	.word	0x20000228
 8001d04:	20000230 	.word	0x20000230
 8001d08:	20000238 	.word	0x20000238
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <_Z15process_MPU_DMAbb+0x3a0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fbc5 	bl	80004a0 <__aeabi_f2d>
 8001d16:	a32c      	add	r3, pc, #176	; (adr r3, 8001dc8 <_Z15process_MPU_DMAbb+0x398>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fd42 	bl	80007a4 <__aeabi_ddiv>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	f7fe ff0a 	bl	8000b40 <__aeabi_d2f>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <_Z15process_MPU_DMAbb+0x3a0>)
 8001d30:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <_Z15process_MPU_DMAbb+0x3a4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fbb2 	bl	80004a0 <__aeabi_f2d>
 8001d3c:	a322      	add	r3, pc, #136	; (adr r3, 8001dc8 <_Z15process_MPU_DMAbb+0x398>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fd2f 	bl	80007a4 <__aeabi_ddiv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	460c      	mov	r4, r1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	f7fe fef7 	bl	8000b40 <__aeabi_d2f>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <_Z15process_MPU_DMAbb+0x3a4>)
 8001d56:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <_Z15process_MPU_DMAbb+0x3a8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fb9f 	bl	80004a0 <__aeabi_f2d>
 8001d62:	a319      	add	r3, pc, #100	; (adr r3, 8001dc8 <_Z15process_MPU_DMAbb+0x398>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fd1c 	bl	80007a4 <__aeabi_ddiv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	4618      	mov	r0, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	f7fe fee4 	bl	8000b40 <__aeabi_d2f>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <_Z15process_MPU_DMAbb+0x3a8>)
 8001d7c:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 8001d7e:	78bb      	ldrb	r3, [r7, #2]
 8001d80:	f083 0301 	eor.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d018      	beq.n	8001dbc <_Z15process_MPU_DMAbb+0x38c>
		data_raw.Gyro_x = Gyro_x;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_Z15process_MPU_DMAbb+0x3a0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
		data_raw.Gyro_y = Gyro_y;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <_Z15process_MPU_DMAbb+0x3a4>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	605a      	str	r2, [r3, #4]
		data_raw.Gyro_z = Gyro_z;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <_Z15process_MPU_DMAbb+0x3a8>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	609a      	str	r2, [r3, #8]
		data_raw.Acc_x = Acc_x;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <_Z15process_MPU_DMAbb+0x3ac>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60da      	str	r2, [r3, #12]
		data_raw.Acc_y = Acc_y;
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <_Z15process_MPU_DMAbb+0x3b0>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]
		data_raw.Acc_z = Acc_z;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <_Z15process_MPU_DMAbb+0x3b4>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	615a      	str	r2, [r3, #20]
    }

    return data_raw;
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
}
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	66666666 	.word	0x66666666
 8001dcc:	40306666 	.word	0x40306666
 8001dd0:	20000254 	.word	0x20000254
 8001dd4:	20000258 	.word	0x20000258
 8001dd8:	2000025c 	.word	0x2000025c
 8001ddc:	20000248 	.word	0x20000248
 8001de0:	2000024c 	.word	0x2000024c
 8001de4:	20000250 	.word	0x20000250

08001de8 <_Z15calibration_IMUv>:
		angle_e.roll = r*RAD2DEC;
		angle_e.pitch = p*RAD2DEC;
		angle_e.yaw = y*RAD2DEC;
		return angle_e;
}
IMU_calib_data calibration_IMU(){
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b08b      	sub	sp, #44	; 0x2c
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]
	    IMU_calib_data data_;
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
//	    print_msg("Calibrating the sensor....\n");
		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8001df0:	233b      	movs	r3, #59	; 0x3b
 8001df2:	72fb      	strb	r3, [r7, #11]
		uint8_t device_address = MPU_ADDRESS;
 8001df4:	23d0      	movs	r3, #208	; 0xd0
 8001df6:	76fb      	strb	r3, [r7, #27]

        for(int i = 0; i<200; i++){
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2bc7      	cmp	r3, #199	; 0xc7
 8001e00:	f300 8166 	bgt.w	80020d0 <_Z15calibration_IMUv+0x2e8>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001e04:	7efb      	ldrb	r3, [r7, #27]
 8001e06:	b299      	uxth	r1, r3
 8001e08:	f107 020b 	add.w	r2, r7, #11
 8001e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	489e      	ldr	r0, [pc, #632]	; (8002090 <_Z15calibration_IMUv+0x2a8>)
 8001e16:	f002 fd89 	bl	800492c <HAL_I2C_Master_Transmit>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d000      	beq.n	8001e2c <_Z15calibration_IMUv+0x44>
 8001e2a:	e7eb      	b.n	8001e04 <_Z15calibration_IMUv+0x1c>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001e2c:	7efb      	ldrb	r3, [r7, #27]
 8001e2e:	b299      	uxth	r1, r3
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	230e      	movs	r3, #14
 8001e3c:	4894      	ldr	r0, [pc, #592]	; (8002090 <_Z15calibration_IMUv+0x2a8>)
 8001e3e:	f002 fef5 	bl	8004c2c <HAL_I2C_Master_Receive>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d000      	beq.n	8001e54 <_Z15calibration_IMUv+0x6c>
 8001e52:	e7eb      	b.n	8001e2c <_Z15calibration_IMUv+0x44>

		Acc_x = (int16_t)(data[0] << 8 | data[1])/accel_factor;
 8001e54:	7b3b      	ldrb	r3, [r7, #12]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	7b7b      	ldrb	r3, [r7, #13]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb0a 	bl	800047c <__aeabi_i2d>
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b89      	ldr	r3, [pc, #548]	; (8002094 <_Z15calibration_IMUv+0x2ac>)
 8001e6e:	f7fe fc99 	bl	80007a4 <__aeabi_ddiv>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	4618      	mov	r0, r3
 8001e78:	4621      	mov	r1, r4
 8001e7a:	f7fe fe61 	bl	8000b40 <__aeabi_d2f>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b85      	ldr	r3, [pc, #532]	; (8002098 <_Z15calibration_IMUv+0x2b0>)
 8001e82:	601a      	str	r2, [r3, #0]
		Acc_y = (int16_t)(data[2] << 8 | data[3])/accel_factor;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe faf2 	bl	800047c <__aeabi_i2d>
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <_Z15calibration_IMUv+0x2ac>)
 8001e9e:	f7fe fc81 	bl	80007a4 <__aeabi_ddiv>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f7fe fe49 	bl	8000b40 <__aeabi_d2f>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b7a      	ldr	r3, [pc, #488]	; (800209c <_Z15calibration_IMUv+0x2b4>)
 8001eb2:	601a      	str	r2, [r3, #0]
		Acc_z = (int16_t)(data[4] << 8 | data[5])/accel_factor;
 8001eb4:	7c3b      	ldrb	r3, [r7, #16]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	7c7b      	ldrb	r3, [r7, #17]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fada 	bl	800047c <__aeabi_i2d>
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <_Z15calibration_IMUv+0x2ac>)
 8001ece:	f7fe fc69 	bl	80007a4 <__aeabi_ddiv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4621      	mov	r1, r4
 8001eda:	f7fe fe31 	bl	8000b40 <__aeabi_d2f>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <_Z15calibration_IMUv+0x2b8>)
 8001ee2:	601a      	str	r2, [r3, #0]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 8001ee4:	7cbb      	ldrb	r3, [r7, #18]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <_Z15calibration_IMUv+0x2bc>)
 8001efc:	edc3 7a00 	vstr	s15, [r3]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9])/gyro_factor;
 8001f00:	7d3b      	ldrb	r3, [r7, #20]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	7d7b      	ldrb	r3, [r7, #21]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fab4 	bl	800047c <__aeabi_i2d>
 8001f14:	a35c      	add	r3, pc, #368	; (adr r3, 8002088 <_Z15calibration_IMUv+0x2a0>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe fc43 	bl	80007a4 <__aeabi_ddiv>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	460c      	mov	r4, r1
 8001f22:	4618      	mov	r0, r3
 8001f24:	4621      	mov	r1, r4
 8001f26:	f7fe fe0b 	bl	8000b40 <__aeabi_d2f>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <_Z15calibration_IMUv+0x2c0>)
 8001f2e:	601a      	str	r2, [r3, #0]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11])/gyro_factor;
 8001f30:	7dbb      	ldrb	r3, [r7, #22]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fa9c 	bl	800047c <__aeabi_i2d>
 8001f44:	a350      	add	r3, pc, #320	; (adr r3, 8002088 <_Z15calibration_IMUv+0x2a0>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fc2b 	bl	80007a4 <__aeabi_ddiv>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	4618      	mov	r0, r3
 8001f54:	4621      	mov	r1, r4
 8001f56:	f7fe fdf3 	bl	8000b40 <__aeabi_d2f>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <_Z15calibration_IMUv+0x2c4>)
 8001f5e:	601a      	str	r2, [r3, #0]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13])/gyro_factor;
 8001f60:	7e3b      	ldrb	r3, [r7, #24]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	7e7b      	ldrb	r3, [r7, #25]
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa84 	bl	800047c <__aeabi_i2d>
 8001f74:	a344      	add	r3, pc, #272	; (adr r3, 8002088 <_Z15calibration_IMUv+0x2a0>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fc13 	bl	80007a4 <__aeabi_ddiv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	4618      	mov	r0, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	f7fe fddb 	bl	8000b40 <__aeabi_d2f>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <_Z15calibration_IMUv+0x2c8>)
 8001f8e:	601a      	str	r2, [r3, #0]

	    bAx += Acc_x;
 8001f90:	4b41      	ldr	r3, [pc, #260]	; (8002098 <_Z15calibration_IMUv+0x2b0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fa83 	bl	80004a0 <__aeabi_f2d>
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <_Z15calibration_IMUv+0x2cc>)
 8001f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	f7fe f91e 	bl	80001e4 <__adddf3>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	460c      	mov	r4, r1
 8001fac:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <_Z15calibration_IMUv+0x2cc>)
 8001fae:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <_Z15calibration_IMUv+0x2b4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa72 	bl	80004a0 <__aeabi_f2d>
 8001fbc:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <_Z15calibration_IMUv+0x2d0>)
 8001fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	f7fe f90d 	bl	80001e4 <__adddf3>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460c      	mov	r4, r1
 8001fce:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <_Z15calibration_IMUv+0x2d0>)
 8001fd0:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <_Z15calibration_IMUv+0x2b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fa61 	bl	80004a0 <__aeabi_f2d>
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <_Z15calibration_IMUv+0x2d4>)
 8001fe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	f7fe f8fc 	bl	80001e4 <__adddf3>
 8001fec:	4603      	mov	r3, r0
 8001fee:	460c      	mov	r4, r1
 8001ff0:	4a32      	ldr	r2, [pc, #200]	; (80020bc <_Z15calibration_IMUv+0x2d4>)
 8001ff2:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <_Z15calibration_IMUv+0x2c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa50 	bl	80004a0 <__aeabi_f2d>
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <_Z15calibration_IMUv+0x2d8>)
 8002002:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002006:	461a      	mov	r2, r3
 8002008:	4623      	mov	r3, r4
 800200a:	f7fe f8eb 	bl	80001e4 <__adddf3>
 800200e:	4603      	mov	r3, r0
 8002010:	460c      	mov	r4, r1
 8002012:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <_Z15calibration_IMUv+0x2d8>)
 8002014:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <_Z15calibration_IMUv+0x2c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa3f 	bl	80004a0 <__aeabi_f2d>
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <_Z15calibration_IMUv+0x2dc>)
 8002024:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	f7fe f8da 	bl	80001e4 <__adddf3>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <_Z15calibration_IMUv+0x2dc>)
 8002036:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <_Z15calibration_IMUv+0x2c8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa2e 	bl	80004a0 <__aeabi_f2d>
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <_Z15calibration_IMUv+0x2e0>)
 8002046:	e9d3 3400 	ldrd	r3, r4, [r3]
 800204a:	461a      	mov	r2, r3
 800204c:	4623      	mov	r3, r4
 800204e:	f7fe f8c9 	bl	80001e4 <__adddf3>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <_Z15calibration_IMUv+0x2e0>)
 8002058:	e9c2 3400 	strd	r3, r4, [r2]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800205c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002060:	481a      	ldr	r0, [pc, #104]	; (80020cc <_Z15calibration_IMUv+0x2e4>)
 8002062:	f002 fb81 	bl	8004768 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800206a:	4818      	ldr	r0, [pc, #96]	; (80020cc <_Z15calibration_IMUv+0x2e4>)
 800206c:	f002 fb7c 	bl	8004768 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002070:	2104      	movs	r1, #4
 8002072:	4816      	ldr	r0, [pc, #88]	; (80020cc <_Z15calibration_IMUv+0x2e4>)
 8002074:	f002 fb78 	bl	8004768 <HAL_GPIO_TogglePin>
	    HAL_Delay(30);
 8002078:	201e      	movs	r0, #30
 800207a:	f001 ff1f 	bl	8003ebc <HAL_Delay>
        for(int i = 0; i<200; i++){
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e6ba      	b.n	8001dfc <_Z15calibration_IMUv+0x14>
 8002086:	bf00      	nop
 8002088:	66666666 	.word	0x66666666
 800208c:	40306666 	.word	0x40306666
 8002090:	20000498 	.word	0x20000498
 8002094:	40d00000 	.word	0x40d00000
 8002098:	20000248 	.word	0x20000248
 800209c:	2000024c 	.word	0x2000024c
 80020a0:	20000250 	.word	0x20000250
 80020a4:	200001fc 	.word	0x200001fc
 80020a8:	20000254 	.word	0x20000254
 80020ac:	20000258 	.word	0x20000258
 80020b0:	2000025c 	.word	0x2000025c
 80020b4:	20000210 	.word	0x20000210
 80020b8:	20000218 	.word	0x20000218
 80020bc:	20000220 	.word	0x20000220
 80020c0:	20000228 	.word	0x20000228
 80020c4:	20000230 	.word	0x20000230
 80020c8:	20000238 	.word	0x20000238
 80020cc:	40020400 	.word	0x40020400
        }

     bAx /= 200;
 80020d0:	4b98      	ldr	r3, [pc, #608]	; (8002334 <_Z15calibration_IMUv+0x54c>)
 80020d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b97      	ldr	r3, [pc, #604]	; (8002338 <_Z15calibration_IMUv+0x550>)
 80020dc:	f7fe fb62 	bl	80007a4 <__aeabi_ddiv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	4a93      	ldr	r2, [pc, #588]	; (8002334 <_Z15calibration_IMUv+0x54c>)
 80020e6:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 200;
 80020ea:	4b94      	ldr	r3, [pc, #592]	; (800233c <_Z15calibration_IMUv+0x554>)
 80020ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	4b90      	ldr	r3, [pc, #576]	; (8002338 <_Z15calibration_IMUv+0x550>)
 80020f6:	f7fe fb55 	bl	80007a4 <__aeabi_ddiv>
 80020fa:	4603      	mov	r3, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	4a8f      	ldr	r2, [pc, #572]	; (800233c <_Z15calibration_IMUv+0x554>)
 8002100:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 200;
 8002104:	4b8e      	ldr	r3, [pc, #568]	; (8002340 <_Z15calibration_IMUv+0x558>)
 8002106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <_Z15calibration_IMUv+0x550>)
 8002110:	f7fe fb48 	bl	80007a4 <__aeabi_ddiv>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	4a89      	ldr	r2, [pc, #548]	; (8002340 <_Z15calibration_IMUv+0x558>)
 800211a:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <_Z15calibration_IMUv+0x54c>)
 8002120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002124:	4b83      	ldr	r3, [pc, #524]	; (8002334 <_Z15calibration_IMUv+0x54c>)
 8002126:	e9d3 3400 	ldrd	r3, r4, [r3]
 800212a:	461a      	mov	r2, r3
 800212c:	4623      	mov	r3, r4
 800212e:	f7fe fa0f 	bl	8000550 <__aeabi_dmul>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	461d      	mov	r5, r3
 8002138:	4626      	mov	r6, r4
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <_Z15calibration_IMUv+0x554>)
 800213c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002140:	4b7e      	ldr	r3, [pc, #504]	; (800233c <_Z15calibration_IMUv+0x554>)
 8002142:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002146:	461a      	mov	r2, r3
 8002148:	4623      	mov	r3, r4
 800214a:	f7fe fa01 	bl	8000550 <__aeabi_dmul>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	461a      	mov	r2, r3
 8002154:	4623      	mov	r3, r4
 8002156:	4628      	mov	r0, r5
 8002158:	4631      	mov	r1, r6
 800215a:	f7fe f843 	bl	80001e4 <__adddf3>
 800215e:	4603      	mov	r3, r0
 8002160:	460c      	mov	r4, r1
 8002162:	461d      	mov	r5, r3
 8002164:	4626      	mov	r6, r4
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <_Z15calibration_IMUv+0x558>)
 8002168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800216c:	4b74      	ldr	r3, [pc, #464]	; (8002340 <_Z15calibration_IMUv+0x558>)
 800216e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002172:	461a      	mov	r2, r3
 8002174:	4623      	mov	r3, r4
 8002176:	f7fe f9eb 	bl	8000550 <__aeabi_dmul>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	461a      	mov	r2, r3
 8002180:	4623      	mov	r3, r4
 8002182:	4628      	mov	r0, r5
 8002184:	4631      	mov	r1, r6
 8002186:	f7fe f82d 	bl	80001e4 <__adddf3>
 800218a:	4603      	mov	r3, r0
 800218c:	460c      	mov	r4, r1
 800218e:	ec44 3b17 	vmov	d7, r3, r4
 8002192:	eeb0 0a47 	vmov.f32	s0, s14
 8002196:	eef0 0a67 	vmov.f32	s1, s15
 800219a:	f005 fbc7 	bl	800792c <sqrt>
 800219e:	eeb0 7a40 	vmov.f32	s14, s0
 80021a2:	eef0 7a60 	vmov.f32	s15, s1
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <_Z15calibration_IMUv+0x55c>)
 80021a8:	ed83 7b00 	vstr	d7, [r3]
     bAz = -1 - bAz;
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <_Z15calibration_IMUv+0x558>)
 80021ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4623      	mov	r3, r4
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	4963      	ldr	r1, [pc, #396]	; (8002348 <_Z15calibration_IMUv+0x560>)
 80021bc:	f7fe f810 	bl	80001e0 <__aeabi_dsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <_Z15calibration_IMUv+0x558>)
 80021c6:	e9c2 3400 	strd	r3, r4, [r2]
     bGx /= 200;
 80021ca:	4b60      	ldr	r3, [pc, #384]	; (800234c <_Z15calibration_IMUv+0x564>)
 80021cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b58      	ldr	r3, [pc, #352]	; (8002338 <_Z15calibration_IMUv+0x550>)
 80021d6:	f7fe fae5 	bl	80007a4 <__aeabi_ddiv>
 80021da:	4603      	mov	r3, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	4a5b      	ldr	r2, [pc, #364]	; (800234c <_Z15calibration_IMUv+0x564>)
 80021e0:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 200;
 80021e4:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <_Z15calibration_IMUv+0x568>)
 80021e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b52      	ldr	r3, [pc, #328]	; (8002338 <_Z15calibration_IMUv+0x550>)
 80021f0:	f7fe fad8 	bl	80007a4 <__aeabi_ddiv>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	4a55      	ldr	r2, [pc, #340]	; (8002350 <_Z15calibration_IMUv+0x568>)
 80021fa:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 200;
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <_Z15calibration_IMUv+0x56c>)
 8002200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <_Z15calibration_IMUv+0x550>)
 800220a:	f7fe facb 	bl	80007a4 <__aeabi_ddiv>
 800220e:	4603      	mov	r3, r0
 8002210:	460c      	mov	r4, r1
 8002212:	4a50      	ldr	r2, [pc, #320]	; (8002354 <_Z15calibration_IMUv+0x56c>)
 8002214:	e9c2 3400 	strd	r3, r4, [r2]

     data_.bAx = bAx;
 8002218:	4b46      	ldr	r3, [pc, #280]	; (8002334 <_Z15calibration_IMUv+0x54c>)
 800221a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800221e:	4618      	mov	r0, r3
 8002220:	4621      	mov	r1, r4
 8002222:	f7fe fc8d 	bl	8000b40 <__aeabi_d2f>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
     data_.bAy = bAy;
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <_Z15calibration_IMUv+0x554>)
 800222e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002232:	4618      	mov	r0, r3
 8002234:	4621      	mov	r1, r4
 8002236:	f7fe fc83 	bl	8000b40 <__aeabi_d2f>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	611a      	str	r2, [r3, #16]
     data_.bAz = bAz;
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <_Z15calibration_IMUv+0x558>)
 8002242:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002246:	4618      	mov	r0, r3
 8002248:	4621      	mov	r1, r4
 800224a:	f7fe fc79 	bl	8000b40 <__aeabi_d2f>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	615a      	str	r2, [r3, #20]

     data_.bGx = bGx;
 8002254:	4b3d      	ldr	r3, [pc, #244]	; (800234c <_Z15calibration_IMUv+0x564>)
 8002256:	e9d3 3400 	ldrd	r3, r4, [r3]
 800225a:	4618      	mov	r0, r3
 800225c:	4621      	mov	r1, r4
 800225e:	f7fe fc6f 	bl	8000b40 <__aeabi_d2f>
 8002262:	4602      	mov	r2, r0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	601a      	str	r2, [r3, #0]
     data_.bGy = bGy;
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <_Z15calibration_IMUv+0x568>)
 800226a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800226e:	4618      	mov	r0, r3
 8002270:	4621      	mov	r1, r4
 8002272:	f7fe fc65 	bl	8000b40 <__aeabi_d2f>
 8002276:	4602      	mov	r2, r0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	605a      	str	r2, [r3, #4]
     data_.bGz = bGz;
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <_Z15calibration_IMUv+0x56c>)
 800227e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	f7fe fc5b 	bl	8000b40 <__aeabi_d2f>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]

     data_.data[0] = bAx;
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <_Z15calibration_IMUv+0x54c>)
 8002292:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002296:	4618      	mov	r0, r3
 8002298:	4621      	mov	r1, r4
 800229a:	f7fe fc51 	bl	8000b40 <__aeabi_d2f>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
     data_.data[1] = bAy;
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <_Z15calibration_IMUv+0x554>)
 80022a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022aa:	4618      	mov	r0, r3
 80022ac:	4621      	mov	r1, r4
 80022ae:	f7fe fc47 	bl	8000b40 <__aeabi_d2f>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	61da      	str	r2, [r3, #28]
     data_.data[2] = bAz;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <_Z15calibration_IMUv+0x558>)
 80022ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022be:	4618      	mov	r0, r3
 80022c0:	4621      	mov	r1, r4
 80022c2:	f7fe fc3d 	bl	8000b40 <__aeabi_d2f>
 80022c6:	4602      	mov	r2, r0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	621a      	str	r2, [r3, #32]

     data_.data[3] = bGx;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <_Z15calibration_IMUv+0x564>)
 80022ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022d2:	4618      	mov	r0, r3
 80022d4:	4621      	mov	r1, r4
 80022d6:	f7fe fc33 	bl	8000b40 <__aeabi_d2f>
 80022da:	4602      	mov	r2, r0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
     data_.data[4] = bGy;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <_Z15calibration_IMUv+0x568>)
 80022e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022e6:	4618      	mov	r0, r3
 80022e8:	4621      	mov	r1, r4
 80022ea:	f7fe fc29 	bl	8000b40 <__aeabi_d2f>
 80022ee:	4602      	mov	r2, r0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
     data_.data[5] = bGz;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <_Z15calibration_IMUv+0x56c>)
 80022f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022fa:	4618      	mov	r0, r3
 80022fc:	4621      	mov	r1, r4
 80022fe:	f7fe fc1f 	bl	8000b40 <__aeabi_d2f>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800230e:	4812      	ldr	r0, [pc, #72]	; (8002358 <_Z15calibration_IMUv+0x570>)
 8002310:	f002 fa26 	bl	8004760 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800231a:	480f      	ldr	r0, [pc, #60]	; (8002358 <_Z15calibration_IMUv+0x570>)
 800231c:	f002 fa20 	bl	8004760 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2104      	movs	r1, #4
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <_Z15calibration_IMUv+0x570>)
 8002326:	f002 fa1b 	bl	8004760 <HAL_GPIO_WritePin>
	 return data_;
 800232a:	bf00      	nop
}
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	3724      	adds	r7, #36	; 0x24
 8002330:	46bd      	mov	sp, r7
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002334:	20000210 	.word	0x20000210
 8002338:	40690000 	.word	0x40690000
 800233c:	20000218 	.word	0x20000218
 8002340:	20000220 	.word	0x20000220
 8002344:	20000240 	.word	0x20000240
 8002348:	bff00000 	.word	0xbff00000
 800234c:	20000228 	.word	0x20000228
 8002350:	20000230 	.word	0x20000230
 8002354:	20000238 	.word	0x20000238
 8002358:	40020400 	.word	0x40020400

0800235c <_ZN4EKF27loadEKFEv>:
	          0, 0, 0,1,0, 0, 0,
	          0, 0, 0, 0,1,0, 0,
	          0, 0, 0, 0, 0,1,0,
	          0, 0, 0, 0, 0, 0,1};
public:
	void loadEKF(){
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
		 arm_mat_init_f32(&x,  7,1, x_);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f503 700e 	add.w	r0, r3, #568	; 0x238
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	2201      	movs	r2, #1
 8002370:	2107      	movs	r1, #7
 8002372:	f005 fad3 	bl	800791c <arm_mat_init_f32>
		  arm_mat_init_f32(&P, 7, 7, P_full);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f503 7018 	add.w	r0, r3, #608	; 0x260
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	33e4      	adds	r3, #228	; 0xe4
 8002380:	2207      	movs	r2, #7
 8002382:	2107      	movs	r1, #7
 8002384:	f005 faca 	bl	800791c <arm_mat_init_f32>
		  arm_mat_init_f32(&Q, 7, 7, Q_full);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 701a 	add.w	r0, r3, #616	; 0x268
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3320      	adds	r3, #32
 8002392:	2207      	movs	r2, #7
 8002394:	2107      	movs	r1, #7
 8002396:	f005 fac1 	bl	800791c <arm_mat_init_f32>
		  arm_mat_init_f32(&R, 6, 6, R_full1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 7022 	add.w	r0, r3, #648	; 0x288
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80023a6:	2206      	movs	r2, #6
 80023a8:	2106      	movs	r1, #6
 80023aa:	f005 fab7 	bl	800791c <arm_mat_init_f32>
		  arm_mat_init_f32(&temp1, 7, 1, temp1_);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80023ba:	2201      	movs	r2, #1
 80023bc:	2107      	movs	r1, #7
 80023be:	f005 faad 	bl	800791c <arm_mat_init_f32>
		  arm_mat_init_f32(&temp2, 7, 1, temp2_);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80023ce:	2201      	movs	r2, #1
 80023d0:	2107      	movs	r1, #7
 80023d2:	f005 faa3 	bl	800791c <arm_mat_init_f32>
		  arm_mat_init_f32(&temp3, 7, 7, temp3_);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80023e2:	2207      	movs	r2, #7
 80023e4:	2107      	movs	r1, #7
 80023e6:	f005 fa99 	bl	800791c <arm_mat_init_f32>
		  for(uint8_t i = 0; i<49;i++){
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b30      	cmp	r3, #48	; 0x30
 80023f2:	d83c      	bhi.n	800246e <_ZN4EKF27loadEKFEv+0x112>
			  A_[i] = 0;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3304      	adds	r3, #4
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
			  AT_[i] = 0;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
			  B_[i] = 0;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
			  Kino_[i] = 0;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	f503 73ef 	add.w	r3, r3, #478	; 0x1de
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
			  KH_[i] = 0;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	f203 3312 	addw	r3, r3, #786	; 0x312
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
			  IKH_[i] = 0;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	f203 230e 	addw	r3, r3, #526	; 0x20e
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3304      	adds	r3, #4
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0; i<49;i++){
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	3301      	adds	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e7bf      	b.n	80023ee <_ZN4EKF27loadEKFEv+0x92>
		  }

		  for(uint8_t i = 0; i<42;i++){
 800246e:	2300      	movs	r3, #0
 8002470:	73bb      	strb	r3, [r7, #14]
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	2b29      	cmp	r3, #41	; 0x29
 8002476:	d827      	bhi.n	80024c8 <_ZN4EKF27loadEKFEv+0x16c>
			  H_[i] = 0;
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
			  K_[i] = 0;
 800248a:	7bbb      	ldrb	r3, [r7, #14]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
			  PHT_[i] = 0;
 800249c:	7bbb      	ldrb	r3, [r7, #14]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	f203 2346 	addw	r3, r3, #582	; 0x246
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
			  HT_[i] = 0;
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0; i<42;i++){
 80024c0:	7bbb      	ldrb	r3, [r7, #14]
 80024c2:	3301      	adds	r3, #1
 80024c4:	73bb      	strb	r3, [r7, #14]
 80024c6:	e7d4      	b.n	8002472 <_ZN4EKF27loadEKFEv+0x116>
		  }

		  for(uint8_t i = 0; i<36;i++){
 80024c8:	2300      	movs	r3, #0
 80024ca:	737b      	strb	r3, [r7, #13]
 80024cc:	7b7b      	ldrb	r3, [r7, #13]
 80024ce:	2b23      	cmp	r3, #35	; 0x23
 80024d0:	d820      	bhi.n	8002514 <_ZN4EKF27loadEKFEv+0x1b8>
			  HPHT_[i] = 0;
 80024d2:	7b7b      	ldrb	r3, [r7, #13]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	f203 239a 	addw	r3, r3, #666	; 0x29a
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
			  S_[i] = 0;
 80024e4:	7b7b      	ldrb	r3, [r7, #13]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	f203 3342 	addw	r3, r3, #834	; 0x342
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3304      	adds	r3, #4
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
			  Sinv_[i] = 0;
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	f203 3366 	addw	r3, r3, #870	; 0x366
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0; i<36;i++){
 800250c:	7b7b      	ldrb	r3, [r7, #13]
 800250e:	3301      	adds	r3, #1
 8002510:	737b      	strb	r3, [r7, #13]
 8002512:	e7db      	b.n	80024cc <_ZN4EKF27loadEKFEv+0x170>
		  }
	}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZN4EKF2C1Ev>:
	}

	EULER_angle angle;
	virtual ~EKF2();
};
EKF2::EKF2(){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	4a5b      	ldr	r2, [pc, #364]	; (8002694 <_ZN4EKF2C1Ev+0x178>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3320      	adds	r3, #32
 8002566:	22c4      	movs	r2, #196	; 0xc4
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f005 fb51 	bl	8007c12 <memset>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a49      	ldr	r2, [pc, #292]	; (8002698 <_ZN4EKF2C1Ev+0x17c>)
 8002574:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a47      	ldr	r2, [pc, #284]	; (8002698 <_ZN4EKF2C1Ev+0x17c>)
 800257c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a45      	ldr	r2, [pc, #276]	; (8002698 <_ZN4EKF2C1Ev+0x17c>)
 8002584:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	33e4      	adds	r3, #228	; 0xe4
 800258c:	22c4      	movs	r2, #196	; 0xc4
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f005 fb3e 	bl	8007c12 <memset>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800259c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025ba:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025c4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025ce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025d8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025e2:	2290      	movs	r2, #144	; 0x90
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 fb13 	bl	8007c12 <memset>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a2b      	ldr	r2, [pc, #172]	; (800269c <_ZN4EKF2C1Ev+0x180>)
 80025f0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a29      	ldr	r2, [pc, #164]	; (800269c <_ZN4EKF2C1Ev+0x180>)
 80025f8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a27      	ldr	r2, [pc, #156]	; (800269c <_ZN4EKF2C1Ev+0x180>)
 8002600:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a25      	ldr	r2, [pc, #148]	; (800269c <_ZN4EKF2C1Ev+0x180>)
 8002608:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a23      	ldr	r2, [pc, #140]	; (800269c <_ZN4EKF2C1Ev+0x180>)
 8002610:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <_ZN4EKF2C1Ev+0x180>)
 8002618:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	22fa      	movs	r2, #250	; 0xfa
 8002620:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f603 7358 	addw	r3, r3, #3928	; 0xf58
 800262a:	22c4      	movs	r2, #196	; 0xc4
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f005 faef 	bl	8007c12 <memset>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f603 7358 	addw	r3, r3, #3928	; 0xf58
 800263a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 8002646:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f603 7398 	addw	r3, r3, #3992	; 0xf98
 8002652:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 800265e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f603 73d8 	addw	r3, r3, #4056	; 0xfd8
 800266a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8002676:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002682:	3318      	adds	r3, #24
 8002684:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002688:	601a      	str	r2, [r3, #0]

}
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	08009ca8 	.word	0x08009ca8
 8002698:	3a83126f 	.word	0x3a83126f
 800269c:	38d1b717 	.word	0x38d1b717

080026a0 <_ZN4EKF2D1Ev>:
EKF2::~EKF2() {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <_ZN4EKF2D1Ev+0x1c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	 // free(this->data);
}
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	08009ca8 	.word	0x08009ca8

080026c0 <_ZN4EKF2D0Ev>:
EKF2::~EKF2() {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
}
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ffe9 	bl	80026a0 <_ZN4EKF2D1Ev>
 80026ce:	f241 0128 	movw	r1, #4136	; 0x1028
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f005 f926 	bl	8007924 <_ZdlPvj>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <_Z12calib_magnetv>:

#include "arm_math.h"
void calib_magnet(){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	f6ad 5da8 	subw	sp, sp, #3496	; 0xda8
 80026ea:	af00      	add	r7, sp, #0
	arm_status status  = ARM_MATH_TEST_FAILURE;
 80026ec:	23fa      	movs	r3, #250	; 0xfa
 80026ee:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e
    int size = 9;
 80026f2:	2309      	movs	r3, #9
 80026f4:	f8c7 3d98 	str.w	r3, [r7, #3480]	; 0xd98
    float invS22_[16];
    float S12invS22_[24];
    float S12_invS22_S21_[36];
    float sub_mat_[36];
    float E_[36];
    float C_[36] = {
 80026f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026fc:	4add      	ldr	r2, [pc, #884]	; (8002a74 <_Z12calib_magnetv+0x390>)
 80026fe:	4618      	mov	r0, r3
 8002700:	4611      	mov	r1, r2
 8002702:	2390      	movs	r3, #144	; 0x90
 8002704:	461a      	mov	r2, r3
 8002706:	f005 fa79 	bl	8007bfc <memcpy>
    		    0.5000  ,  0.5000    ,     0   ,      0   ,      0   ,      0,
    		         0    ,     0     ,    0  , -0.2500   ,      0     ,    0,
    		         0    ,     0    ,     0      ,   0  , -0.2500      ,   0,
    		         0      ,   0      ,   0    ,     0 ,        0 ,  -0.2500
    };
       for(uint8_t i = 0; i < size; i++){
 800270a:	2300      	movs	r3, #0
 800270c:	f887 3da7 	strb.w	r3, [r7, #3495]	; 0xda7
 8002710:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002714:	f8d7 2d98 	ldr.w	r2, [r7, #3480]	; 0xd98
 8002718:	429a      	cmp	r2, r3
 800271a:	f340 811f 	ble.w	800295c <_Z12calib_magnetv+0x278>

			D[i*10] = x[i]*x[i];
 800271e:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 8002728:	4413      	add	r3, r2
 800272a:	3b60      	subs	r3, #96	; 0x60
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 800273a:	4413      	add	r3, r2
 800273c:	3b60      	subs	r3, #96	; 0x60
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002752:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+1] = x[i]*x[i];
 800275e:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 8002768:	4413      	add	r3, r2
 800276a:	3b60      	subs	r3, #96	; 0x60
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 800277a:	4413      	add	r3, r2
 800277c:	3b60      	subs	r3, #96	; 0x60
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	3301      	adds	r3, #1
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+2] = x[i]*x[i];
 80027a0:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 80027aa:	4413      	add	r3, r2
 80027ac:	3b60      	subs	r3, #96	; 0x60
 80027ae:	ed93 7a00 	vldr	s14, [r3]
 80027b2:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 80027bc:	4413      	add	r3, r2
 80027be:	3b60      	subs	r3, #96	; 0x60
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	3302      	adds	r3, #2
 80027d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d6:	f607 1288 	addw	r2, r7, #2440	; 0x988
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+3] = x[i]*y[i];
 80027e2:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 80027ec:	4413      	add	r3, r2
 80027ee:	3b60      	subs	r3, #96	; 0x60
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 80027fe:	4413      	add	r3, r2
 8002800:	3bb0      	subs	r3, #176	; 0xb0
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	3303      	adds	r3, #3
 8002814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002818:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+4] = y[i]*z[i];
 8002824:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 800282e:	4413      	add	r3, r2
 8002830:	3bb0      	subs	r3, #176	; 0xb0
 8002832:	ed93 7a00 	vldr	s14, [r3]
 8002836:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 800283a:	f607 42a8 	addw	r2, r7, #3240	; 0xca8
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	3304      	adds	r3, #4
 8002854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002858:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+5] = z[i]*x[i];
 8002864:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002868:	f607 42a8 	addw	r2, r7, #3240	; 0xca8
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	ed93 7a00 	vldr	s14, [r3]
 8002874:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 800287e:	4413      	add	r3, r2
 8002880:	3b60      	subs	r3, #96	; 0x60
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	3305      	adds	r3, #5
 8002894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002898:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	edc3 7a00 	vstr	s15, [r3]

			D[i*10+6] = x[i]*2;
 80028a4:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 80028ae:	4413      	add	r3, r2
 80028b0:	3b60      	subs	r3, #96	; 0x60
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	3306      	adds	r3, #6
 80028c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028c8:	f607 1288 	addw	r2, r7, #2440	; 0x988
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+7] = x[i]*2;
 80028d4:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 80028de:	4413      	add	r3, r2
 80028e0:	3b60      	subs	r3, #96	; 0x60
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	3307      	adds	r3, #7
 80028f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028f8:	f607 1288 	addw	r2, r7, #2440	; 0x988
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+8] = x[i]*2;
 8002904:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f607 52a8 	addw	r2, r7, #3496	; 0xda8
 800290e:	4413      	add	r3, r2
 8002910:	3b60      	subs	r3, #96	; 0x60
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	3308      	adds	r3, #8
 8002924:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002928:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	edc3 7a00 	vstr	s15, [r3]
			D[i*10+9] = 1;
 8002934:	f897 2da7 	ldrb.w	r2, [r7, #3495]	; 0xda7
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	3309      	adds	r3, #9
 8002942:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800294e:	601a      	str	r2, [r3, #0]
       for(uint8_t i = 0; i < size; i++){
 8002950:	f897 3da7 	ldrb.w	r3, [r7, #3495]	; 0xda7
 8002954:	3301      	adds	r3, #1
 8002956:	f887 3da7 	strb.w	r3, [r7, #3495]	; 0xda7
 800295a:	e6d9      	b.n	8002710 <_Z12calib_magnetv+0x2c>
       arm_matrix_instance_f32 DT;
       arm_matrix_instance_f32 C;
       arm_matrix_instance_f32 sub_mat;
       arm_matrix_instance_f32 E;

       arm_mat_init_f32(&S,  10,10, S_);
 800295c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8002960:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002964:	220a      	movs	r2, #10
 8002966:	210a      	movs	r1, #10
 8002968:	f004 ffd8 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&Dm, size, 10, D);
 800296c:	f8d7 3d98 	ldr.w	r3, [r7, #3480]	; 0xd98
 8002970:	b299      	uxth	r1, r3
 8002972:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002976:	f107 0020 	add.w	r0, r7, #32
 800297a:	220a      	movs	r2, #10
 800297c:	f004 ffce 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&DT, 10, size, DT_);
 8002980:	f8d7 3d98 	ldr.w	r3, [r7, #3480]	; 0xd98
 8002984:	b29a      	uxth	r2, r3
 8002986:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800298a:	f107 0018 	add.w	r0, r7, #24
 800298e:	210a      	movs	r1, #10
 8002990:	f004 ffc4 	bl	800791c <arm_mat_init_f32>

       for(uint8_t i = 0; i < 6; i++){
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3da6 	strb.w	r3, [r7, #3494]	; 0xda6
 800299a:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d830      	bhi.n	8002a04 <_Z12calib_magnetv+0x320>
    	   for(uint8_t j = 0; j < 6; j++){
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3da5 	strb.w	r3, [r7, #3493]	; 0xda5
 80029a8:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d823      	bhi.n	80029f8 <_Z12calib_magnetv+0x314>
    		   S11_[i*6 + j] = S_[i*10 + j];
 80029b0:	f897 2da6 	ldrb.w	r2, [r7, #3494]	; 0xda6
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	461a      	mov	r2, r3
 80029be:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 80029c2:	18d0      	adds	r0, r2, r3
 80029c4:	f897 2da6 	ldrb.w	r2, [r7, #3494]	; 0xda6
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	461a      	mov	r2, r3
 80029d2:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 80029d6:	4413      	add	r3, r2
 80029d8:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80029dc:	0082      	lsls	r2, r0, #2
 80029de:	440a      	add	r2, r1
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	601a      	str	r2, [r3, #0]
    	   for(uint8_t j = 0; j < 6; j++){
 80029ec:	f897 3da5 	ldrb.w	r3, [r7, #3493]	; 0xda5
 80029f0:	3301      	adds	r3, #1
 80029f2:	f887 3da5 	strb.w	r3, [r7, #3493]	; 0xda5
 80029f6:	e7d7      	b.n	80029a8 <_Z12calib_magnetv+0x2c4>
       for(uint8_t i = 0; i < 6; i++){
 80029f8:	f897 3da6 	ldrb.w	r3, [r7, #3494]	; 0xda6
 80029fc:	3301      	adds	r3, #1
 80029fe:	f887 3da6 	strb.w	r3, [r7, #3494]	; 0xda6
 8002a02:	e7ca      	b.n	800299a <_Z12calib_magnetv+0x2b6>
    	   }
       }

       for(uint8_t i = 0; i < 6; i++){
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3da4 	strb.w	r3, [r7, #3492]	; 0xda4
 8002a0a:	f897 3da4 	ldrb.w	r3, [r7, #3492]	; 0xda4
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d832      	bhi.n	8002a78 <_Z12calib_magnetv+0x394>
    	   for(uint8_t j = 6; j < 10; j++){
 8002a12:	2306      	movs	r3, #6
 8002a14:	f887 3da3 	strb.w	r3, [r7, #3491]	; 0xda3
 8002a18:	f897 3da3 	ldrb.w	r3, [r7, #3491]	; 0xda3
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d823      	bhi.n	8002a68 <_Z12calib_magnetv+0x384>
    		   S12_[i*6 + j] = S_[i*10 + j];
 8002a20:	f897 2da4 	ldrb.w	r2, [r7, #3492]	; 0xda4
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f897 3da3 	ldrb.w	r3, [r7, #3491]	; 0xda3
 8002a32:	18d0      	adds	r0, r2, r3
 8002a34:	f897 2da4 	ldrb.w	r2, [r7, #3492]	; 0xda4
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	461a      	mov	r2, r3
 8002a42:	f897 3da3 	ldrb.w	r3, [r7, #3491]	; 0xda3
 8002a46:	4413      	add	r3, r2
 8002a48:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8002a4c:	0082      	lsls	r2, r0, #2
 8002a4e:	440a      	add	r2, r1
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f507 717a 	add.w	r1, r7, #1000	; 0x3e8
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    	   for(uint8_t j = 6; j < 10; j++){
 8002a5c:	f897 3da3 	ldrb.w	r3, [r7, #3491]	; 0xda3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f887 3da3 	strb.w	r3, [r7, #3491]	; 0xda3
 8002a66:	e7d7      	b.n	8002a18 <_Z12calib_magnetv+0x334>
       for(uint8_t i = 0; i < 6; i++){
 8002a68:	f897 3da4 	ldrb.w	r3, [r7, #3492]	; 0xda4
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f887 3da4 	strb.w	r3, [r7, #3492]	; 0xda4
 8002a72:	e7ca      	b.n	8002a0a <_Z12calib_magnetv+0x326>
 8002a74:	08009b8c 	.word	0x08009b8c
    	   }
       }

       for(uint8_t i = 6; i < 10; i++){
 8002a78:	2306      	movs	r3, #6
 8002a7a:	f887 3da2 	strb.w	r3, [r7, #3490]	; 0xda2
 8002a7e:	f897 3da2 	ldrb.w	r3, [r7, #3490]	; 0xda2
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d82c      	bhi.n	8002ae0 <_Z12calib_magnetv+0x3fc>
    	   for(uint8_t j = 0; j < 6; j++){
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 3da1 	strb.w	r3, [r7, #3489]	; 0xda1
 8002a8c:	f897 3da1 	ldrb.w	r3, [r7, #3489]	; 0xda1
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d81f      	bhi.n	8002ad4 <_Z12calib_magnetv+0x3f0>
    		   S21_[i*4 + j] = S_[i*10 + j];
 8002a94:	f897 2da2 	ldrb.w	r2, [r7, #3490]	; 0xda2
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f897 3da1 	ldrb.w	r3, [r7, #3489]	; 0xda1
 8002aa6:	441a      	add	r2, r3
 8002aa8:	f897 3da2 	ldrb.w	r3, [r7, #3490]	; 0xda2
 8002aac:	0099      	lsls	r1, r3, #2
 8002aae:	f897 3da1 	ldrb.w	r3, [r7, #3489]	; 0xda1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	440a      	add	r2, r1
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	f507 7162 	add.w	r1, r7, #904	; 0x388
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	601a      	str	r2, [r3, #0]
    	   for(uint8_t j = 0; j < 6; j++){
 8002ac8:	f897 3da1 	ldrb.w	r3, [r7, #3489]	; 0xda1
 8002acc:	3301      	adds	r3, #1
 8002ace:	f887 3da1 	strb.w	r3, [r7, #3489]	; 0xda1
 8002ad2:	e7db      	b.n	8002a8c <_Z12calib_magnetv+0x3a8>
       for(uint8_t i = 6; i < 10; i++){
 8002ad4:	f897 3da2 	ldrb.w	r3, [r7, #3490]	; 0xda2
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f887 3da2 	strb.w	r3, [r7, #3490]	; 0xda2
 8002ade:	e7ce      	b.n	8002a7e <_Z12calib_magnetv+0x39a>
    	   }
       }

       for(uint8_t i = 6; i < 10; i++){
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	f887 3da0 	strb.w	r3, [r7, #3488]	; 0xda0
 8002ae6:	f897 3da0 	ldrb.w	r3, [r7, #3488]	; 0xda0
 8002aea:	2b09      	cmp	r3, #9
 8002aec:	d82c      	bhi.n	8002b48 <_Z12calib_magnetv+0x464>
    	   for(uint8_t j = 6; j < 10; j++){
 8002aee:	2306      	movs	r3, #6
 8002af0:	f887 3d9f 	strb.w	r3, [r7, #3487]	; 0xd9f
 8002af4:	f897 3d9f 	ldrb.w	r3, [r7, #3487]	; 0xd9f
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d81f      	bhi.n	8002b3c <_Z12calib_magnetv+0x458>
    		   S22_[i*4 + j] = S_[i*10 + j];
 8002afc:	f897 2da0 	ldrb.w	r2, [r7, #3488]	; 0xda0
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f897 3d9f 	ldrb.w	r3, [r7, #3487]	; 0xd9f
 8002b0e:	441a      	add	r2, r3
 8002b10:	f897 3da0 	ldrb.w	r3, [r7, #3488]	; 0xda0
 8002b14:	0099      	lsls	r1, r3, #2
 8002b16:	f897 3d9f 	ldrb.w	r3, [r7, #3487]	; 0xd9f
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	440a      	add	r2, r1
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	f507 7152 	add.w	r1, r7, #840	; 0x348
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	601a      	str	r2, [r3, #0]
    	   for(uint8_t j = 6; j < 10; j++){
 8002b30:	f897 3d9f 	ldrb.w	r3, [r7, #3487]	; 0xd9f
 8002b34:	3301      	adds	r3, #1
 8002b36:	f887 3d9f 	strb.w	r3, [r7, #3487]	; 0xd9f
 8002b3a:	e7db      	b.n	8002af4 <_Z12calib_magnetv+0x410>
       for(uint8_t i = 6; i < 10; i++){
 8002b3c:	f897 3da0 	ldrb.w	r3, [r7, #3488]	; 0xda0
 8002b40:	3301      	adds	r3, #1
 8002b42:	f887 3da0 	strb.w	r3, [r7, #3488]	; 0xda0
 8002b46:	e7ce      	b.n	8002ae6 <_Z12calib_magnetv+0x402>
    	   }
       }

       arm_mat_init_f32(&S11, 6,6, S11_);
 8002b48:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8002b4c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002b50:	2206      	movs	r2, #6
 8002b52:	2106      	movs	r1, #6
 8002b54:	f004 fee2 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&S12, 6,4, S12_);
 8002b58:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002b5c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b60:	2204      	movs	r2, #4
 8002b62:	2106      	movs	r1, #6
 8002b64:	f004 feda 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&S21, 4,6, S21_);
 8002b68:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8002b6c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002b70:	2206      	movs	r2, #6
 8002b72:	2104      	movs	r1, #4
 8002b74:	f004 fed2 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&S22, 4,4, S22_);
 8002b78:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002b7c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002b80:	2204      	movs	r2, #4
 8002b82:	2104      	movs	r1, #4
 8002b84:	f004 feca 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&invS22, 4,4, invS22_);
 8002b88:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002b8c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002b90:	2204      	movs	r2, #4
 8002b92:	2104      	movs	r1, #4
 8002b94:	f004 fec2 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&S12invS22, 6,4, S12invS22_);
 8002b98:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002b9c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	2106      	movs	r1, #6
 8002ba4:	f004 feba 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&S12_invS22_S21, 6,6, S12_invS22_S21_);
 8002ba8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002bac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	2106      	movs	r1, #6
 8002bb4:	f004 feb2 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&C, 4,4, C_);
 8002bb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bbc:	f107 0010 	add.w	r0, r7, #16
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	f004 feaa 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&sub_mat, 6,6, sub_mat_);
 8002bc8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002bcc:	f107 0008 	add.w	r0, r7, #8
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	2106      	movs	r1, #6
 8002bd4:	f004 fea2 	bl	800791c <arm_mat_init_f32>
       arm_mat_init_f32(&E, 6,6, E_);
 8002bd8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bdc:	4638      	mov	r0, r7
 8002bde:	2206      	movs	r2, #6
 8002be0:	2106      	movs	r1, #6
 8002be2:	f004 fe9b 	bl	800791c <arm_mat_init_f32>

       status = arm_mat_trans_f32 (&Dm, &DT);
 8002be6:	f107 0218 	add.w	r2, r7, #24
 8002bea:	f107 0320 	add.w	r3, r7, #32
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fbe3 	bl	80073bc <arm_mat_trans_f32>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e
       status = arm_mat_mult_f32 (&DT, &Dm,&S);
 8002bfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c00:	f107 0120 	add.w	r1, r7, #32
 8002c04:	f107 0318 	add.w	r3, r7, #24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 fca5 	bl	8007558 <arm_mat_mult_f32>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e

       //inv(C)*(S11 - S12*inv(S22)*S21)
       status = arm_mat_inverse_f32 (&S22, &invS22);
 8002c14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fd3e 	bl	80076a0 <arm_mat_inverse_f32>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e
       status = arm_mat_mult_f32 (&S12, &invS22,&S12invS22);
 8002c2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 fc8e 	bl	8007558 <arm_mat_mult_f32>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e
       status = arm_mat_mult_f32 (&S12invS22, &S21,&S12_invS22_S21);
 8002c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c46:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fc82 	bl	8007558 <arm_mat_mult_f32>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e
       status = arm_mat_sub_f32 (&S11, &S12_invS22_S21,&sub_mat);
 8002c5a:	f107 0208 	add.w	r2, r7, #8
 8002c5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fc1a 	bl	80074a0 <arm_mat_sub_f32>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e
       status = arm_mat_sub_f32 (&C, &sub_mat,&E);
 8002c72:	463a      	mov	r2, r7
 8002c74:	f107 0108 	add.w	r1, r7, #8
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fc0f 	bl	80074a0 <arm_mat_sub_f32>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f887 3d9e 	strb.w	r3, [r7, #3486]	; 0xd9e

}
 8002c88:	bf00      	nop
 8002c8a:	f607 57a8 	addw	r7, r7, #3496	; 0xda8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop

08002c94 <_Z9substringPcS_ii>:
	float			err_lat;
	float			err_lon;
	float			err_alt;
}GPS;

void substring(char s[], char sub[], int p, int l) {
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
   int c = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

   while (c < l) {
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	da0e      	bge.n	8002ccc <_Z9substringPcS_ii+0x38>
      sub[c] = s[p+c-1];
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	441a      	add	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	440b      	add	r3, r1
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	701a      	strb	r2, [r3, #0]
      c++;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
   while (c < l) {
 8002cca:	e7ec      	b.n	8002ca6 <_Z9substringPcS_ii+0x12>
   }
   sub[c] = '\0';
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	0000      	movs	r0, r0
 8002ce4:	0000      	movs	r0, r0
	...

08002ce8 <_Z12process_NMEAPV3GPSPc>:

void process_NMEA(volatile GPS * gps,char * Rx_Buffer){
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b09e      	sub	sp, #120	; 0x78
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]

	char buffer[10];
	char temp_1[20];
	char time[8];
    // read GNRMC
    if(strstr (Rx_Buffer,"RMC")!= NULL ){
 8002cf2:	49d7      	ldr	r1, [pc, #860]	; (8003050 <_Z12process_NMEAPV3GPSPc+0x368>)
 8002cf4:	6838      	ldr	r0, [r7, #0]
 8002cf6:	f005 f864 	bl	8007dc2 <strstr>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 81c4 	beq.w	800308a <_Z12process_NMEAPV3GPSPc+0x3a2>

    char * n = " ";
 8002d02:	4bd4      	ldr	r3, [pc, #848]	; (8003054 <_Z12process_NMEAPV3GPSPc+0x36c>)
 8002d04:	657b      	str	r3, [r7, #84]	; 0x54
    //HAL_UART_Transmit(&huart2, (uint8_t *) Rx_Buffer, sizeof(Rx_Buffer),1000);

    pch = strtok (Rx_Buffer,",");
 8002d06:	49d4      	ldr	r1, [pc, #848]	; (8003058 <_Z12process_NMEAPV3GPSPc+0x370>)
 8002d08:	6838      	ldr	r0, [r7, #0]
 8002d0a:	f005 fe99 	bl	8008a40 <strtok>
 8002d0e:	6778      	str	r0, [r7, #116]	; 0x74

    int i = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	673b      	str	r3, [r7, #112]	; 0x70

    while (pch != NULL)
 8002d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 81b7 	beq.w	800308a <_Z12process_NMEAPV3GPSPc+0x3a2>
      {
    	i++;
 8002d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d1e:	3301      	adds	r3, #1
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
    	char tem[2];
    	char deg[8];
    	strcpy((char*)temp_1, pch);
 8002d22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d26:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f005 f842 	bl	8007db2 <strcpy>
    	switch(i){
 8002d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d30:	3b02      	subs	r3, #2
 8002d32:	2b07      	cmp	r3, #7
 8002d34:	f200 81a3 	bhi.w	800307e <_Z12process_NMEAPV3GPSPc+0x396>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <_Z12process_NMEAPV3GPSPc+0x58>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d61 	.word	0x08002d61
 8002d44:	08002e67 	.word	0x08002e67
 8002d48:	08002e71 	.word	0x08002e71
 8002d4c:	08002f21 	.word	0x08002f21
 8002d50:	08002f2b 	.word	0x08002f2b
 8002d54:	08003005 	.word	0x08003005
 8002d58:	0800300f 	.word	0x0800300f
 8002d5c:	08003061 	.word	0x08003061
    	       case 2:
                       for(int j= 0; j<8;j++){
 8002d60:	2300      	movs	r3, #0
 8002d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	2b07      	cmp	r3, #7
 8002d68:	dc09      	bgt.n	8002d7e <_Z12process_NMEAPV3GPSPc+0x96>
                    	   time[j] = NULL;
 8002d6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	4413      	add	r3, r2
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
                       for(int j= 0; j<8;j++){
 8002d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d78:	3301      	adds	r3, #1
 8002d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d7c:	e7f2      	b.n	8002d64 <_Z12process_NMEAPV3GPSPc+0x7c>
                       }
                       substring(temp_1, tem, 1, 2);
 8002d7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d82:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002d86:	2302      	movs	r3, #2
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f7ff ff83 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->UTC_Hour = atoi(tem);
 8002d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 fed9 	bl	8007b4a <atoi>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	701a      	strb	r2, [r3, #0]
    	               itoa(gps->UTC_Hour,(char*) tem,10);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dac:	220a      	movs	r2, #10
 8002dae:	4619      	mov	r1, r3
 8002db0:	f004 ff12 	bl	8007bd8 <itoa>
    	               strcat(time, tem);
 8002db4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 ffe8 	bl	8007d94 <strcat>
    	               strcat(time, ":");
 8002dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd f9fd 	bl	80001c8 <strlen>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd6:	4413      	add	r3, r2
 8002dd8:	49a0      	ldr	r1, [pc, #640]	; (800305c <_Z12process_NMEAPV3GPSPc+0x374>)
 8002dda:	461a      	mov	r2, r3
 8002ddc:	460b      	mov	r3, r1
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	8013      	strh	r3, [r2, #0]

    	               substring(temp_1, tem, 3, 2);
 8002de2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002de6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002dea:	2302      	movs	r3, #2
 8002dec:	2203      	movs	r2, #3
 8002dee:	f7ff ff51 	bl	8002c94 <_Z9substringPcS_ii>
    	               strcat(time, tem);
 8002df2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 ffc9 	bl	8007d94 <strcat>
    	               strcat(time, ":");
 8002e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd f9de 	bl	80001c8 <strlen>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e14:	4413      	add	r3, r2
 8002e16:	4991      	ldr	r1, [pc, #580]	; (800305c <_Z12process_NMEAPV3GPSPc+0x374>)
 8002e18:	461a      	mov	r2, r3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	8013      	strh	r3, [r2, #0]
    	               gps->UTC_Min = atoi((char*)tem);
 8002e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fe90 	bl	8007b4a <atoi>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	705a      	strb	r2, [r3, #1]

    	               substring(temp_1, tem, 5, 2);
 8002e32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e36:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	2205      	movs	r2, #5
 8002e3e:	f7ff ff29 	bl	8002c94 <_Z9substringPcS_ii>
    	               strcat(time, tem);
 8002e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 ffa1 	bl	8007d94 <strcat>
    	               gps->UTC_Sec = atoi((char*)tem);
 8002e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fe77 	bl	8007b4a <atoi>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	709a      	strb	r2, [r3, #2]
    	       break;
 8002e64:	e10b      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
    	       case 3:
    	    	       gps->Pos = temp_1[0];
 8002e66:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	719a      	strb	r2, [r3, #6]
    	       break;
 8002e6e:	e106      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
    	       case 4:

    	    	       substring(temp_1, tem, 1, 2);
 8002e70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e74:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002e78:	2302      	movs	r3, #2
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f7ff ff0a 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->Lat_Deg = atoi(tem);
 8002e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fe60 	bl	8007b4a <atoi>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	71da      	strb	r2, [r3, #7]

    	               substring(temp_1, deg, 3, 4);
 8002e92:	f107 0120 	add.w	r1, r7, #32
 8002e96:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	f7ff fef9 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->Lat_Minute = atoi(deg);
 8002ea2:	f107 0320 	add.w	r3, r7, #32
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 fe4f 	bl	8007b4a <atoi>
 8002eac:	ee07 0a90 	vmov	s15, r0
 8002eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edc3 7a02 	vstr	s15, [r3, #8]
    	               substring(temp_1, deg, 6, 8);
 8002eba:	f107 0120 	add.w	r1, r7, #32
 8002ebe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	2206      	movs	r2, #6
 8002ec6:	f7ff fee5 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->Lat_Minute += (float) atoi(deg)/100000.0;
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fe3b 	bl	8007b4a <atoi>
 8002ed4:	ee07 0a90 	vmov	s15, r0
 8002ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002edc:	ee17 0a90 	vmov	r0, s15
 8002ee0:	f7fd fade 	bl	80004a0 <__aeabi_f2d>
 8002ee4:	a356      	add	r3, pc, #344	; (adr r3, 8003040 <_Z12process_NMEAPV3GPSPc+0x358>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fc5b 	bl	80007a4 <__aeabi_ddiv>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	4625      	mov	r5, r4
 8002ef4:	461c      	mov	r4, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fad0 	bl	80004a0 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd f96c 	bl	80001e4 <__adddf3>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4618      	mov	r0, r3
 8002f12:	4621      	mov	r1, r4
 8002f14:	f7fd fe14 	bl	8000b40 <__aeabi_d2f>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]

    	       break;
 8002f1e:	e0ae      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
    	       case 5:
    	               gps->Lat_Dir = temp_1[0];
 8002f20:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	731a      	strb	r2, [r3, #12]
    	               break;
 8002f28:	e0a9      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
    	       case 6:
    	    	       for(uint8_t i = 0; i<8; i++){
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002f30:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d80d      	bhi.n	8002f54 <_Z12process_NMEAPV3GPSPc+0x26c>
    	    	    	   deg[i] = 0;
 8002f38:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f3c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	f803 2c58 	strb.w	r2, [r3, #-88]
    	    	       for(uint8_t i = 0; i<8; i++){
 8002f48:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002f52:	e7ed      	b.n	8002f30 <_Z12process_NMEAPV3GPSPc+0x248>
    	    	       }
    	    	       substring(temp_1, tem, 1, 3);
 8002f54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f58:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f7ff fe98 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->Lon_Deg = atoi(tem);
 8002f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fdee 	bl	8007b4a <atoi>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	735a      	strb	r2, [r3, #13]

    	               substring(temp_1, deg, 4, 5);
 8002f76:	f107 0120 	add.w	r1, r7, #32
 8002f7a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002f7e:	2305      	movs	r3, #5
 8002f80:	2204      	movs	r2, #4
 8002f82:	f7ff fe87 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->Lon_Minute = atoi(deg);
 8002f86:	f107 0320 	add.w	r3, r7, #32
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f004 fddd 	bl	8007b4a <atoi>
 8002f90:	ee07 0a90 	vmov	s15, r0
 8002f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	edc3 7a04 	vstr	s15, [r3, #16]
    	               substring(temp_1, deg, 7, 8);
 8002f9e:	f107 0120 	add.w	r1, r7, #32
 8002fa2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	2207      	movs	r2, #7
 8002faa:	f7ff fe73 	bl	8002c94 <_Z9substringPcS_ii>
    	               gps->Lon_Minute += (float) atoi(deg)/100000.0;
 8002fae:	f107 0320 	add.w	r3, r7, #32
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fdc9 	bl	8007b4a <atoi>
 8002fb8:	ee07 0a90 	vmov	s15, r0
 8002fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc0:	ee17 0a90 	vmov	r0, s15
 8002fc4:	f7fd fa6c 	bl	80004a0 <__aeabi_f2d>
 8002fc8:	a31d      	add	r3, pc, #116	; (adr r3, 8003040 <_Z12process_NMEAPV3GPSPc+0x358>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd fbe9 	bl	80007a4 <__aeabi_ddiv>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	4625      	mov	r5, r4
 8002fd8:	461c      	mov	r4, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fa5e 	bl	80004a0 <__aeabi_f2d>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd f8fa 	bl	80001e4 <__adddf3>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	f7fd fda2 	bl	8000b40 <__aeabi_d2f>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]

    	              break;
 8003002:	e03c      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
    	       case 7:
    	                gps->Lon_Dir = temp_1[0];
 8003004:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	751a      	strb	r2, [r3, #20]
    	              break;
 800300c:	e037      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
    	       case 8:
    	                gps->Speed = atof(temp_1) * 0.514444856;
 800300e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fd96 	bl	8007b44 <atof>
 8003018:	ec51 0b10 	vmov	r0, r1, d0
 800301c:	a30a      	add	r3, pc, #40	; (adr r3, 8003048 <_Z12process_NMEAPV3GPSPc+0x360>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fa95 	bl	8000550 <__aeabi_dmul>
 8003026:	4603      	mov	r3, r0
 8003028:	460c      	mov	r4, r1
 800302a:	4618      	mov	r0, r3
 800302c:	4621      	mov	r1, r4
 800302e:	f7fd fd87 	bl	8000b40 <__aeabi_d2f>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
    	              break;
 8003038:	e021      	b.n	800307e <_Z12process_NMEAPV3GPSPc+0x396>
 800303a:	bf00      	nop
 800303c:	f3af 8000 	nop.w
 8003040:	00000000 	.word	0x00000000
 8003044:	40f86a00 	.word	0x40f86a00
 8003048:	0f03b199 	.word	0x0f03b199
 800304c:	3fe07655 	.word	0x3fe07655
 8003050:	08009c1c 	.word	0x08009c1c
 8003054:	08009c20 	.word	0x08009c20
 8003058:	08009c24 	.word	0x08009c24
 800305c:	08009c28 	.word	0x08009c28
    	       case 9:
    	           	    gps->Track = atof(temp_1);
 8003060:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fd6d 	bl	8007b44 <atof>
 800306a:	ec54 3b10 	vmov	r3, r4, d0
 800306e:	4618      	mov	r0, r3
 8003070:	4621      	mov	r1, r4
 8003072:	f7fd fd65 	bl	8000b40 <__aeabi_d2f>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	61da      	str	r2, [r3, #28]
    	           	  break;
 800307c:	bf00      	nop

    	}
    	pch = strtok (NULL, ",");
 800307e:	4945      	ldr	r1, [pc, #276]	; (8003194 <_Z12process_NMEAPV3GPSPc+0x4ac>)
 8003080:	2000      	movs	r0, #0
 8003082:	f005 fcdd 	bl	8008a40 <strtok>
 8003086:	6778      	str	r0, [r7, #116]	; 0x74
    while (pch != NULL)
 8003088:	e644      	b.n	8002d14 <_Z12process_NMEAPV3GPSPc+0x2c>
      }
    }


    if(strstr (Rx_Buffer,"THS")!= NULL ){
 800308a:	4943      	ldr	r1, [pc, #268]	; (8003198 <_Z12process_NMEAPV3GPSPc+0x4b0>)
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	f004 fe98 	bl	8007dc2 <strstr>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02a      	beq.n	80030ee <_Z12process_NMEAPV3GPSPc+0x406>

    pch = strtok (Rx_Buffer,",");
 8003098:	493e      	ldr	r1, [pc, #248]	; (8003194 <_Z12process_NMEAPV3GPSPc+0x4ac>)
 800309a:	6838      	ldr	r0, [r7, #0]
 800309c:	f005 fcd0 	bl	8008a40 <strtok>
 80030a0:	6778      	str	r0, [r7, #116]	; 0x74

    int i = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	667b      	str	r3, [r7, #100]	; 0x64

    while (pch != NULL)
 80030a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <_Z12process_NMEAPV3GPSPc+0x406>
      {
       for(int i= 0; i<20;i++){
 80030ac:	2300      	movs	r3, #0
 80030ae:	663b      	str	r3, [r7, #96]	; 0x60
 80030b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b2:	2b13      	cmp	r3, #19
 80030b4:	dc09      	bgt.n	80030ca <_Z12process_NMEAPV3GPSPc+0x3e2>
    	   temp_1[i] = 0;
 80030b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030bc:	4413      	add	r3, r2
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
       for(int i= 0; i<20;i++){
 80030c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c4:	3301      	adds	r3, #1
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
 80030c8:	e7f2      	b.n	80030b0 <_Z12process_NMEAPV3GPSPc+0x3c8>
    	}
    	i++;
 80030ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030cc:	3301      	adds	r3, #1
 80030ce:	667b      	str	r3, [r7, #100]	; 0x64
    	char tem[2];
    	char deg[8];
    	strcpy(temp_1, pch);
 80030d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 fe6b 	bl	8007db2 <strcpy>
    	switch(i){
 80030dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030de:	2b02      	cmp	r3, #2

    	       case 2:

    	       break;
 80030e0:	bf00      	nop
////    	    	       gps.Pos = temp_11[0];
//    	    	   gps.sat_num = atoi(temp_11);
//    	       break;

    	}
    	pch = strtok (NULL, ",");
 80030e2:	492c      	ldr	r1, [pc, #176]	; (8003194 <_Z12process_NMEAPV3GPSPc+0x4ac>)
 80030e4:	2000      	movs	r0, #0
 80030e6:	f005 fcab 	bl	8008a40 <strtok>
 80030ea:	6778      	str	r0, [r7, #116]	; 0x74
    while (pch != NULL)
 80030ec:	e7db      	b.n	80030a6 <_Z12process_NMEAPV3GPSPc+0x3be>
      }
    }

    for(int i= 0; i<20;i++){
 80030ee:	2300      	movs	r3, #0
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	2b13      	cmp	r3, #19
 80030f6:	dc09      	bgt.n	800310c <_Z12process_NMEAPV3GPSPc+0x424>
             temp_1[i] = 0;
 80030f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fe:	4413      	add	r3, r2
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
    for(int i= 0; i<20;i++){
 8003104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003106:	3301      	adds	r3, #1
 8003108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800310a:	e7f2      	b.n	80030f2 <_Z12process_NMEAPV3GPSPc+0x40a>
        }

    if(strstr (Rx_Buffer,"GGA")!= NULL ){
 800310c:	4923      	ldr	r1, [pc, #140]	; (800319c <_Z12process_NMEAPV3GPSPc+0x4b4>)
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f004 fe57 	bl	8007dc2 <strstr>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d038      	beq.n	800318c <_Z12process_NMEAPV3GPSPc+0x4a4>

     pch = strtok (Rx_Buffer,",");
 800311a:	491e      	ldr	r1, [pc, #120]	; (8003194 <_Z12process_NMEAPV3GPSPc+0x4ac>)
 800311c:	6838      	ldr	r0, [r7, #0]
 800311e:	f005 fc8f 	bl	8008a40 <strtok>
 8003122:	6778      	str	r0, [r7, #116]	; 0x74

     int i = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	65bb      	str	r3, [r7, #88]	; 0x58

     while (pch != NULL)
 8003128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312a:	2b00      	cmp	r3, #0
 800312c:	d02e      	beq.n	800318c <_Z12process_NMEAPV3GPSPc+0x4a4>
       {
     	i++;
 800312e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003130:	3301      	adds	r3, #1
 8003132:	65bb      	str	r3, [r7, #88]	; 0x58
     	char tem[2];
     	char deg[8];
     	strcpy(temp_1, pch);
 8003134:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003138:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fe39 	bl	8007db2 <strcpy>
     	switch(i){
 8003140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003142:	2b08      	cmp	r3, #8
 8003144:	d002      	beq.n	800314c <_Z12process_NMEAPV3GPSPc+0x464>
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d00b      	beq.n	8003162 <_Z12process_NMEAPV3GPSPc+0x47a>
 800314a:	e019      	b.n	8003180 <_Z12process_NMEAPV3GPSPc+0x498>

     	       case 8:
     	//    	    	       gps.Pos = temp_1[0];
     	    	  gps->sat_num = atoi(temp_1);
 800314c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003150:	4618      	mov	r0, r3
 8003152:	f004 fcfa 	bl	8007b4a <atoi>
 8003156:	4603      	mov	r3, r0
 8003158:	b2da      	uxtb	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
     	       break;
 8003160:	e00e      	b.n	8003180 <_Z12process_NMEAPV3GPSPc+0x498>
     	       case 10:
 //    	    	       gps->Pos = temp_1[0];
     	    	   gps->altitude = atof(temp_1);
 8003162:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003166:	4618      	mov	r0, r3
 8003168:	f004 fcec 	bl	8007b44 <atof>
 800316c:	ec54 3b10 	vmov	r3, r4, d0
 8003170:	4618      	mov	r0, r3
 8003172:	4621      	mov	r1, r4
 8003174:	f7fd fce4 	bl	8000b40 <__aeabi_d2f>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c
     	       break;
 800317e:	bf00      	nop

     	}
     	pch = strtok (NULL, ",");
 8003180:	4904      	ldr	r1, [pc, #16]	; (8003194 <_Z12process_NMEAPV3GPSPc+0x4ac>)
 8003182:	2000      	movs	r0, #0
 8003184:	f005 fc5c 	bl	8008a40 <strtok>
 8003188:	6778      	str	r0, [r7, #116]	; 0x74
     while (pch != NULL)
 800318a:	e7cd      	b.n	8003128 <_Z12process_NMEAPV3GPSPc+0x440>
       }
     }

}
 800318c:	bf00      	nop
 800318e:	3778      	adds	r7, #120	; 0x78
 8003190:	46bd      	mov	sp, r7
 8003192:	bdb0      	pop	{r4, r5, r7, pc}
 8003194:	08009c24 	.word	0x08009c24
 8003198:	08009c2c 	.word	0x08009c2c
 800319c:	08009c30 	.word	0x08009c30

080031a0 <_Z10UARTTXInitv>:
#define UART_TX_MAX_MESSAGE_LEN 256

u8 txBuf[UART_TX_RINGBUFF_SZ],txLen;
lwrb_t txRing;

void UARTTXInit(void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
	lwrb_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 80031a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a8:	4902      	ldr	r1, [pc, #8]	; (80031b4 <_Z10UARTTXInitv+0x14>)
 80031aa:	4803      	ldr	r0, [pc, #12]	; (80031b8 <_Z10UARTTXInitv+0x18>)
 80031ac:	f7fd fe98 	bl	8000ee0 <lwrb_init>
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000278 	.word	0x20000278
 80031b8:	2000047c 	.word	0x2000047c

080031bc <_Z10UARTTxDatav>:

void UARTTxData(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <_Z10UARTTxDatav+0x48>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d117      	bne.n	80031fa <_Z10UARTTxDatav+0x3e>
  txLen=lwrb_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 80031ca:	480f      	ldr	r0, [pc, #60]	; (8003208 <_Z10UARTTxDatav+0x4c>)
 80031cc:	f7fd ff0c 	bl	8000fe8 <lwrb_get_linear_block_read_length>
 80031d0:	4603      	mov	r3, r0
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <_Z10UARTTxDatav+0x48>)
 80031d6:	701a      	strb	r2, [r3, #0]
  if(txLen){
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <_Z10UARTTxDatav+0x48>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <_Z10UARTTxDatav+0x40>
   void* ringData=lwrb_get_linear_block_read_address(&txRing); // Get pointer to read memory
 80031e0:	4809      	ldr	r0, [pc, #36]	; (8003208 <_Z10UARTTxDatav+0x4c>)
 80031e2:	f7fd fee9 	bl	8000fb8 <lwrb_get_linear_block_read_address>
 80031e6:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart3,(uint8_t*) ringData,txLen); // Start DMA transfer
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <_Z10UARTTxDatav+0x48>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4806      	ldr	r0, [pc, #24]	; (800320c <_Z10UARTTxDatav+0x50>)
 80031f4:	f003 ff5a 	bl	80070ac <HAL_UART_Transmit_DMA>
 80031f8:	e000      	b.n	80031fc <_Z10UARTTxDatav+0x40>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 80031fa:	bf00      	nop
  }
}
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000478 	.word	0x20000478
 8003208:	2000047c 	.word	0x2000047c
 800320c:	2000062c 	.word	0x2000062c

08003210 <_Z15UARTAddToTxBuffPKvh>:

void UARTAddToTxBuff(const void *data,u8 len) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
	lwrb_write(&txRing,data,len);
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	461a      	mov	r2, r3
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4804      	ldr	r0, [pc, #16]	; (8003234 <_Z15UARTAddToTxBuffPKvh+0x24>)
 8003224:	f7fd fe76 	bl	8000f14 <lwrb_write>
  UARTTxData();
 8003228:	f7ff ffc8 	bl	80031bc <_Z10UARTTxDatav>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2000047c 	.word	0x2000047c

08003238 <_Z14UARTTxCompletev>:



void UARTTxComplete(void) {
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  if (txLen) {
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <_Z14UARTTxCompletev+0x28>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <_Z14UARTTxCompletev+0x22>
   lwrb_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <_Z14UARTTxCompletev+0x28>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	4806      	ldr	r0, [pc, #24]	; (8003264 <_Z14UARTTxCompletev+0x2c>)
 800324c:	f7fd feec 	bl	8001028 <lwrb_skip>
   txLen=0; // Reset length = DMA is not active
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <_Z14UARTTxCompletev+0x28>)
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
   UARTTxData(); // Try to send more
 8003256:	f7ff ffb1 	bl	80031bc <_Z10UARTTxDatav>
  }
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000478 	.word	0x20000478
 8003264:	2000047c 	.word	0x2000047c

08003268 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_UART_TxCpltCallback+0x38>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10d      	bne.n	8003296 <HAL_UART_TxCpltCallback+0x2e>
   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003288:	60da      	str	r2, [r3, #12]
   huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   UARTTxComplete();
 8003292:	f7ff ffd1 	bl	8003238 <_Z14UARTTxCompletev>
  }

}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40004800 	.word	0x40004800

080032a4 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a4:	b5b0      	push	{r4, r5, r7, lr}
 80032a6:	b094      	sub	sp, #80	; 0x50
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART1)  //current UART
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6f      	ldr	r2, [pc, #444]	; (8003470 <HAL_UART_RxCpltCallback+0x1cc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	f040 80c8 	bne.w	8003448 <HAL_UART_RxCpltCallback+0x1a4>
        {
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 80032b8:	4b6e      	ldr	r3, [pc, #440]	; (8003474 <HAL_UART_RxCpltCallback+0x1d0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d111      	bne.n	80032e4 <HAL_UART_RxCpltCallback+0x40>
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80032c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032ca:	2b63      	cmp	r3, #99	; 0x63
 80032cc:	d80a      	bhi.n	80032e4 <HAL_UART_RxCpltCallback+0x40>
 80032ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032d2:	4a69      	ldr	r2, [pc, #420]	; (8003478 <HAL_UART_RxCpltCallback+0x1d4>)
 80032d4:	2100      	movs	r1, #0
 80032d6:	54d1      	strb	r1, [r2, r3]
 80032d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032dc:	3301      	adds	r3, #1
 80032de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80032e2:	e7f0      	b.n	80032c6 <HAL_UART_RxCpltCallback+0x22>

        if (Rx_data[0]!=10) //if received data different from ascii 13 (enter)
 80032e4:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_UART_RxCpltCallback+0x1d8>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b0a      	cmp	r3, #10
 80032ea:	d00b      	beq.n	8003304 <HAL_UART_RxCpltCallback+0x60>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 80032ec:	4b61      	ldr	r3, [pc, #388]	; (8003474 <HAL_UART_RxCpltCallback+0x1d0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	b2d1      	uxtb	r1, r2
 80032f4:	4a5f      	ldr	r2, [pc, #380]	; (8003474 <HAL_UART_RxCpltCallback+0x1d0>)
 80032f6:	7011      	strb	r1, [r2, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b60      	ldr	r3, [pc, #384]	; (800347c <HAL_UART_RxCpltCallback+0x1d8>)
 80032fc:	7819      	ldrb	r1, [r3, #0]
 80032fe:	4b5e      	ldr	r3, [pc, #376]	; (8003478 <HAL_UART_RxCpltCallback+0x1d4>)
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	e0a1      	b.n	8003448 <HAL_UART_RxCpltCallback+0x1a4>
            }
        else            //if received data = 13
            {
        	//Rx_Buffer[Rx_indx++] = 13;
            Rx_indx=0;
 8003304:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <HAL_UART_RxCpltCallback+0x1d0>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
            char * t = "\n";
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_UART_RxCpltCallback+0x1dc>)
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
            Transfer_cplt=1;//transfer complete, data is ready to read
 800330e:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <HAL_UART_RxCpltCallback+0x1e0>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]

            process_NMEA(&gps,Rx_Buffer);
 8003314:	4958      	ldr	r1, [pc, #352]	; (8003478 <HAL_UART_RxCpltCallback+0x1d4>)
 8003316:	485c      	ldr	r0, [pc, #368]	; (8003488 <HAL_UART_RxCpltCallback+0x1e4>)
 8003318:	f7ff fce6 	bl	8002ce8 <_Z12process_NMEAPV3GPSPc>
            UARTAddToTxBuff("helllo\n",7);
 800331c:	2107      	movs	r1, #7
 800331e:	485b      	ldr	r0, [pc, #364]	; (800348c <HAL_UART_RxCpltCallback+0x1e8>)
 8003320:	f7ff ff76 	bl	8003210 <_Z15UARTAddToTxBuffPKvh>
        	char buffer[35];
        	char temp[15];

        	float Lat = gps.Lat_Deg + gps.Lat_Minute/100.0;
 8003324:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_UART_RxCpltCallback+0x1e4>)
 8003326:	79db      	ldrb	r3, [r3, #7]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f8a6 	bl	800047c <__aeabi_i2d>
 8003330:	4604      	mov	r4, r0
 8003332:	460d      	mov	r5, r1
 8003334:	4b54      	ldr	r3, [pc, #336]	; (8003488 <HAL_UART_RxCpltCallback+0x1e4>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8b1 	bl	80004a0 <__aeabi_f2d>
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_UART_RxCpltCallback+0x1ec>)
 8003344:	f7fd fa2e 	bl	80007a4 <__aeabi_ddiv>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fc ff48 	bl	80001e4 <__adddf3>
 8003354:	4603      	mov	r3, r0
 8003356:	460c      	mov	r4, r1
 8003358:	4618      	mov	r0, r3
 800335a:	4621      	mov	r1, r4
 800335c:	f7fd fbf0 	bl	8000b40 <__aeabi_d2f>
 8003360:	4603      	mov	r3, r0
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
        	float Lon = gps.Lon_Deg + gps.Lon_Minute/100.0;
 8003364:	4b48      	ldr	r3, [pc, #288]	; (8003488 <HAL_UART_RxCpltCallback+0x1e4>)
 8003366:	7b5b      	ldrb	r3, [r3, #13]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f886 	bl	800047c <__aeabi_i2d>
 8003370:	4604      	mov	r4, r0
 8003372:	460d      	mov	r5, r1
 8003374:	4b44      	ldr	r3, [pc, #272]	; (8003488 <HAL_UART_RxCpltCallback+0x1e4>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f891 	bl	80004a0 <__aeabi_f2d>
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	4b43      	ldr	r3, [pc, #268]	; (8003490 <HAL_UART_RxCpltCallback+0x1ec>)
 8003384:	f7fd fa0e 	bl	80007a4 <__aeabi_ddiv>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4620      	mov	r0, r4
 800338e:	4629      	mov	r1, r5
 8003390:	f7fc ff28 	bl	80001e4 <__adddf3>
 8003394:	4603      	mov	r3, r0
 8003396:	460c      	mov	r4, r1
 8003398:	4618      	mov	r0, r3
 800339a:	4621      	mov	r1, r4
 800339c:	f7fd fbd0 	bl	8000b40 <__aeabi_d2f>
 80033a0:	4603      	mov	r3, r0
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
            ftoa(Lat, buffer, 15);
 80033a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80033a6:	f7fd f87b 	bl	80004a0 <__aeabi_f2d>
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	210f      	movs	r1, #15
 80033b4:	4618      	mov	r0, r3
 80033b6:	ec45 4b10 	vmov	d0, r4, r5
 80033ba:	f7fd fe6d 	bl	8001098 <_Z4ftoadPci>
            strcat(buffer," ");
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fc ff00 	bl	80001c8 <strlen>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	4413      	add	r3, r2
 80033d2:	4930      	ldr	r1, [pc, #192]	; (8003494 <HAL_UART_RxCpltCallback+0x1f0>)
 80033d4:	461a      	mov	r2, r3
 80033d6:	460b      	mov	r3, r1
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	8013      	strh	r3, [r2, #0]
            UARTAddToTxBuff((uint8_t*) buffer, strlen(buffer));
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fc fef1 	bl	80001c8 <strlen>
 80033e6:	4603      	mov	r3, r0
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff0d 	bl	8003210 <_Z15UARTAddToTxBuffPKvh>
            ftoa(Lon, buffer, 15);
 80033f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80033f8:	f7fd f852 	bl	80004a0 <__aeabi_f2d>
 80033fc:	4604      	mov	r4, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	210f      	movs	r1, #15
 8003406:	4618      	mov	r0, r3
 8003408:	ec45 4b10 	vmov	d0, r4, r5
 800340c:	f7fd fe44 	bl	8001098 <_Z4ftoadPci>
            strcat(buffer,"\n");
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	4618      	mov	r0, r3
 8003416:	f7fc fed7 	bl	80001c8 <strlen>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	f107 030c 	add.w	r3, r7, #12
 8003422:	4413      	add	r3, r2
 8003424:	4916      	ldr	r1, [pc, #88]	; (8003480 <HAL_UART_RxCpltCallback+0x1dc>)
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	8013      	strh	r3, [r2, #0]
            UARTAddToTxBuff((uint8_t*) buffer, strlen(buffer));
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4618      	mov	r0, r3
 8003434:	f7fc fec8 	bl	80001c8 <strlen>
 8003438:	4603      	mov	r3, r0
 800343a:	b2da      	uxtb	r2, r3
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fee4 	bl	8003210 <_Z15UARTAddToTxBuffPKvh>
            }


          //activate UART receive interrupt every time
        }
    HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8003448:	2201      	movs	r2, #1
 800344a:	490c      	ldr	r1, [pc, #48]	; (800347c <HAL_UART_RxCpltCallback+0x1d8>)
 800344c:	4812      	ldr	r0, [pc, #72]	; (8003498 <HAL_UART_RxCpltCallback+0x1f4>)
 800344e:	f003 fe03 	bl	8007058 <HAL_UART_Receive_IT>
    if (huart->Instance == USART3) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <HAL_UART_RxCpltCallback+0x1f8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d105      	bne.n	8003468 <HAL_UART_RxCpltCallback+0x1c4>
        if (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_IDLE)) {
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_UART_RxCpltCallback+0x1fc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b10      	cmp	r3, #16

        }
      }
}
 8003468:	bf00      	nop
 800346a:	3750      	adds	r7, #80	; 0x50
 800346c:	46bd      	mov	sp, r7
 800346e:	bdb0      	pop	{r4, r5, r7, pc}
 8003470:	40011000 	.word	0x40011000
 8003474:	2000170c 	.word	0x2000170c
 8003478:	20001714 	.word	0x20001714
 800347c:	20001710 	.word	0x20001710
 8003480:	08009c38 	.word	0x08009c38
 8003484:	20001778 	.word	0x20001778
 8003488:	2000177c 	.word	0x2000177c
 800348c:	08009c3c 	.word	0x08009c3c
 8003490:	40590000 	.word	0x40590000
 8003494:	08009c20 	.word	0x08009c20
 8003498:	200005ec 	.word	0x200005ec
 800349c:	40004800 	.word	0x40004800
 80034a0:	2000062c 	.word	0x2000062c
 80034a4:	00000000 	.word	0x00000000

080034a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b096      	sub	sp, #88	; 0x58
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ae:	f000 fcd9 	bl	8003e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034b2:	f000 f88d 	bl	80035d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034b6:	f000 fa1b 	bl	80038f0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80034ba:	f000 f9e9 	bl	8003890 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80034be:	f000 f8fb 	bl	80036b8 <_ZL12MX_I2C1_Initv>
  MX_TIM4_Init();
 80034c2:	f000 f92d 	bl	8003720 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 80034c6:	f000 f987 	bl	80037d8 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 80034ca:	f000 f9b3 	bl	8003834 <_ZL19MX_USART3_UART_Initv>

  init_MPU();
 80034ce:	f7fe f827 	bl	8001520 <_Z8init_MPUv>
  calibration_IMU();
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc86 	bl	8001de8 <_Z15calibration_IMUv>
  ekf.x_[4] = bGx * DEC2RAD;
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <main+0x100>)
 80034de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e2:	a32f      	add	r3, pc, #188	; (adr r3, 80035a0 <main+0xf8>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f7fd f832 	bl	8000550 <__aeabi_dmul>
 80034ec:	4603      	mov	r3, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	4618      	mov	r0, r3
 80034f2:	4621      	mov	r1, r4
 80034f4:	f7fd fb24 	bl	8000b40 <__aeabi_d2f>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <main+0x104>)
 80034fc:	615a      	str	r2, [r3, #20]
  ekf.x_[5] = bGy * DEC2RAD;
 80034fe:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <main+0x108>)
 8003500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003504:	a326      	add	r3, pc, #152	; (adr r3, 80035a0 <main+0xf8>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fd f821 	bl	8000550 <__aeabi_dmul>
 800350e:	4603      	mov	r3, r0
 8003510:	460c      	mov	r4, r1
 8003512:	4618      	mov	r0, r3
 8003514:	4621      	mov	r1, r4
 8003516:	f7fd fb13 	bl	8000b40 <__aeabi_d2f>
 800351a:	4602      	mov	r2, r0
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <main+0x104>)
 800351e:	619a      	str	r2, [r3, #24]
  ekf.x_[6] = bGz * DEC2RAD;
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <main+0x10c>)
 8003522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003526:	a31e      	add	r3, pc, #120	; (adr r3, 80035a0 <main+0xf8>)
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f7fd f810 	bl	8000550 <__aeabi_dmul>
 8003530:	4603      	mov	r3, r0
 8003532:	460c      	mov	r4, r1
 8003534:	4618      	mov	r0, r3
 8003536:	4621      	mov	r1, r4
 8003538:	f7fd fb02 	bl	8000b40 <__aeabi_d2f>
 800353c:	4602      	mov	r2, r0
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <main+0x104>)
 8003540:	61da      	str	r2, [r3, #28]

  ekf.loadEKF();
 8003542:	481a      	ldr	r0, [pc, #104]	; (80035ac <main+0x104>)
 8003544:	f7fe ff0a 	bl	800235c <_ZN4EKF27loadEKFEv>
  calib_magnet();
 8003548:	f7ff f8cc 	bl	80026e4 <_Z12calib_magnetv>
  HAL_TIM_Base_Start(&htim4);
 800354c:	481a      	ldr	r0, [pc, #104]	; (80035b8 <main+0x110>)
 800354e:	f003 fbe3 	bl	8006d18 <HAL_TIM_Base_Start>
  UARTTXInit();
 8003552:	f7ff fe25 	bl	80031a0 <_Z10UARTTXInitv>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8003556:	2201      	movs	r2, #1
 8003558:	4918      	ldr	r1, [pc, #96]	; (80035bc <main+0x114>)
 800355a:	4819      	ldr	r0, [pc, #100]	; (80035c0 <main+0x118>)
 800355c:	f003 fd7c 	bl	8007058 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int start = TIM4->CNT;
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <main+0x11c>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	657b      	str	r3, [r7, #84]	; 0x54
	  data_imu_buffer = process_MPU_DMA(true, true);
 8003566:	4c18      	ldr	r4, [pc, #96]	; (80035c8 <main+0x120>)
 8003568:	463b      	mov	r3, r7
 800356a:	2201      	movs	r2, #1
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fa5e 	bl	8001a30 <_Z15process_MPU_DMAbb>
 8003574:	4625      	mov	r5, r4
 8003576:	463c      	mov	r4, r7
 8003578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003580:	e885 0003 	stmia.w	r5, {r0, r1}



//      HAL_Delay(3);
//      HAL_UART_Transmit(&huart3,(uint8_t*)"hello",100,100);
	  int stop = TIM4->CNT;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <main+0x11c>)
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	653b      	str	r3, [r7, #80]	; 0x50
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 800358a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800358e:	480f      	ldr	r0, [pc, #60]	; (80035cc <main+0x124>)
 8003590:	f001 f8ea 	bl	8004768 <HAL_GPIO_TogglePin>
	  int time = stop - start;
 8003594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
 800359c:	e7e0      	b.n	8003560 <main+0xb8>
 800359e:	bf00      	nop
 80035a0:	a226e211 	.word	0xa226e211
 80035a4:	3f91df46 	.word	0x3f91df46
 80035a8:	20000228 	.word	0x20000228
 80035ac:	200006e4 	.word	0x200006e4
 80035b0:	20000230 	.word	0x20000230
 80035b4:	20000238 	.word	0x20000238
 80035b8:	200005ac 	.word	0x200005ac
 80035bc:	20001710 	.word	0x20001710
 80035c0:	200005ec 	.word	0x200005ec
 80035c4:	40000800 	.word	0x40000800
 80035c8:	200006cc 	.word	0x200006cc
 80035cc:	40020400 	.word	0x40020400

080035d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b094      	sub	sp, #80	; 0x50
 80035d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035d6:	f107 0320 	add.w	r3, r7, #32
 80035da:	2230      	movs	r2, #48	; 0x30
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 fb17 	bl	8007c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <_Z18SystemClock_Configv+0xe0>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <_Z18SystemClock_Configv+0xe0>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6413      	str	r3, [r2, #64]	; 0x40
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <_Z18SystemClock_Configv+0xe0>)
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <_Z18SystemClock_Configv+0xe4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <_Z18SystemClock_Configv+0xe4>)
 800361a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <_Z18SystemClock_Configv+0xe4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003630:	2301      	movs	r3, #1
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003634:	2310      	movs	r3, #16
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003638:	2302      	movs	r3, #2
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800363c:	2300      	movs	r3, #0
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003640:	2308      	movs	r3, #8
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003644:	23a8      	movs	r3, #168	; 0xa8
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003648:	2302      	movs	r3, #2
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800364c:	2304      	movs	r3, #4
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003650:	f107 0320 	add.w	r3, r7, #32
 8003654:	4618      	mov	r0, r3
 8003656:	f003 f809 	bl	800666c <HAL_RCC_OscConfig>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800366a:	f000 f993 	bl	8003994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800366e:	230f      	movs	r3, #15
 8003670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003672:	2302      	movs	r3, #2
 8003674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800367a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800367e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	2105      	movs	r1, #5
 800368c:	4618      	mov	r0, r3
 800368e:	f003 fa01 	bl	8006a94 <HAL_RCC_ClockConfig>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80036a2:	f000 f977 	bl	8003994 <Error_Handler>
  }
}
 80036a6:	bf00      	nop
 80036a8:	3750      	adds	r7, #80	; 0x50
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000

080036b8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036be:	4a16      	ldr	r2, [pc, #88]	; (8003718 <_ZL12MX_I2C1_Initv+0x60>)
 80036c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <_ZL12MX_I2C1_Initv+0x64>)
 80036c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036f4:	4807      	ldr	r0, [pc, #28]	; (8003714 <_ZL12MX_I2C1_Initv+0x5c>)
 80036f6:	f001 f83f 	bl	8004778 <HAL_I2C_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf14      	ite	ne
 8003700:	2301      	movne	r3, #1
 8003702:	2300      	moveq	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800370a:	f000 f943 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000498 	.word	0x20000498
 8003718:	40005400 	.word	0x40005400
 800371c:	00061a80 	.word	0x00061a80

08003720 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	463b      	mov	r3, r7
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 800373e:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <_ZL12MX_TIM4_Initv+0xb4>)
 8003740:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 8003744:	22a7      	movs	r2, #167	; 0xa7
 8003746:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 8003750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003754:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 800375e:	2200      	movs	r2, #0
 8003760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003762:	481b      	ldr	r0, [pc, #108]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 8003764:	f003 fa54 	bl	8006c10 <HAL_TIM_Base_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8003778:	f000 f90c 	bl	8003994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800377c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003782:	f107 0308 	add.w	r3, r7, #8
 8003786:	4619      	mov	r1, r3
 8003788:	4811      	ldr	r0, [pc, #68]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 800378a:	f003 fad7 	bl	8006d3c <HAL_TIM_ConfigClockSource>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 800379e:	f000 f8f9 	bl	8003994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037aa:	463b      	mov	r3, r7
 80037ac:	4619      	mov	r1, r3
 80037ae:	4808      	ldr	r0, [pc, #32]	; (80037d0 <_ZL12MX_TIM4_Initv+0xb0>)
 80037b0:	f003 fb6a 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80037c4:	f000 f8e6 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200005ac 	.word	0x200005ac
 80037d4:	40000800 	.word	0x40000800

080037d8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 80037de:	4a14      	ldr	r2, [pc, #80]	; (8003830 <_ZL19MX_USART1_UART_Initv+0x58>)
 80037e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 80037e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 80037fe:	220c      	movs	r2, #12
 8003800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 8003804:	2200      	movs	r2, #0
 8003806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800380e:	4807      	ldr	r0, [pc, #28]	; (800382c <_ZL19MX_USART1_UART_Initv+0x54>)
 8003810:	f003 fb80 	bl	8006f14 <HAL_UART_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003824:	f000 f8b6 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200005ec 	.word	0x200005ec
 8003830:	40011000 	.word	0x40011000

08003834 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003838:	4b13      	ldr	r3, [pc, #76]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <_ZL19MX_USART3_UART_Initv+0x58>)
 800383c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 800385a:	220c      	movs	r2, #12
 800385c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800386a:	4807      	ldr	r0, [pc, #28]	; (8003888 <_ZL19MX_USART3_UART_Initv+0x54>)
 800386c:	f003 fb52 	bl	8006f14 <HAL_UART_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8003880:	f000 f888 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	2000062c 	.word	0x2000062c
 800388c:	40004800 	.word	0x40004800

08003890 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <_ZL11MX_DMA_Initv+0x5c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <_ZL11MX_DMA_Initv+0x5c>)
 80038a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <_ZL11MX_DMA_Initv+0x5c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	200b      	movs	r0, #11
 80038b8:	f000 fb24 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80038bc:	200b      	movs	r0, #11
 80038be:	f000 fb57 	bl	8003f70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	200e      	movs	r0, #14
 80038c8:	f000 fb1c 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80038cc:	200e      	movs	r0, #14
 80038ce:	f000 fb4f 	bl	8003f70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2100      	movs	r1, #0
 80038d6:	2011      	movs	r0, #17
 80038d8:	f000 fb14 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80038dc:	2011      	movs	r0, #17
 80038de:	f000 fb47 	bl	8003f70 <HAL_NVIC_EnableIRQ>

}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a1f      	ldr	r2, [pc, #124]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a11      	ldr	r2, [pc, #68]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <_ZL12MX_GPIO_Initv+0x9c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800395a:	2200      	movs	r2, #0
 800395c:	f243 0104 	movw	r1, #12292	; 0x3004
 8003960:	480b      	ldr	r0, [pc, #44]	; (8003990 <_ZL12MX_GPIO_Initv+0xa0>)
 8003962:	f000 fefd 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 8003966:	f243 0304 	movw	r3, #12292	; 0x3004
 800396a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396c:	2301      	movs	r3, #1
 800396e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003978:	f107 030c 	add.w	r3, r7, #12
 800397c:	4619      	mov	r1, r3
 800397e:	4804      	ldr	r0, [pc, #16]	; (8003990 <_ZL12MX_GPIO_Initv+0xa0>)
 8003980:	f000 fd3a 	bl	80043f8 <HAL_GPIO_Init>

}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	40020400 	.word	0x40020400

08003994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003998:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800399a:	e7fe      	b.n	800399a <Error_Handler+0x6>

0800399c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d102      	bne.n	80039bc <_Z41__static_initialization_and_destruction_0ii+0x20>
EKF2 ekf;
 80039b6:	4809      	ldr	r0, [pc, #36]	; (80039dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80039b8:	f7fe fdb0 	bl	800251c <_ZN4EKF2C1Ev>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d102      	bne.n	80039d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80039cc:	4803      	ldr	r0, [pc, #12]	; (80039dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80039ce:	f7fe fe67 	bl	80026a0 <_ZN4EKF2D1Ev>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200006e4 	.word	0x200006e4

080039e0 <_GLOBAL__sub_I_Q>:
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7ff ffd7 	bl	800399c <_Z41__static_initialization_and_destruction_0ii>
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_GLOBAL__sub_D_Q>:
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039f8:	2000      	movs	r0, #0
 80039fa:	f7ff ffcf 	bl	800399c <_Z41__static_initialization_and_destruction_0ii>
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a00:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_MspInit+0x34>)
 8003a04:	2100      	movs	r1, #0
 8003a06:	9100      	str	r1, [sp, #0]
 8003a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
 8003a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a16:	9200      	str	r2, [sp, #0]
 8003a18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	9101      	str	r1, [sp, #4]
 8003a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a2e:	b002      	add	sp, #8
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8003a3a:	6802      	ldr	r2, [r0, #0]
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_I2C_MspInit+0xf4>)
{
 8003a3e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a40:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8003a42:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a48:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003a4c:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a50:	b009      	add	sp, #36	; 0x24
 8003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a54:	4f36      	ldr	r7, [pc, #216]	; (8003b30 <HAL_I2C_MspInit+0xf8>)
 8003a56:	9401      	str	r4, [sp, #4]
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a68:	f44f 7340 	mov.w	r3, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a70:	2212      	movs	r2, #18
 8003a72:	2301      	movs	r3, #1
 8003a74:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	2503      	movs	r5, #3
 8003a7e:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a80:	482c      	ldr	r0, [pc, #176]	; (8003b34 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a82:	e9cd 5306 	strd	r5, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a86:	f000 fcb7 	bl	80043f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a8a:	9402      	str	r4, [sp, #8]
 8003a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003a8e:	4d2a      	ldr	r5, [pc, #168]	; (8003b38 <HAL_I2C_MspInit+0x100>)
 8003a90:	492a      	ldr	r1, [pc, #168]	; (8003b3c <HAL_I2C_MspInit+0x104>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a92:	60ac      	str	r4, [r5, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a98:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a9c:	60ec      	str	r4, [r5, #12]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa2:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aac:	9802      	ldr	r0, [sp, #8]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aae:	626c      	str	r4, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003ab0:	4628      	mov	r0, r5
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab2:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab6:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003aba:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003abe:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003ac0:	f000 fa92 	bl	8003fe8 <HAL_DMA_Init>
 8003ac4:	bb58      	cbnz	r0, 8003b1e <HAL_I2C_MspInit+0xe6>
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003ac6:	4c1e      	ldr	r4, [pc, #120]	; (8003b40 <HAL_I2C_MspInit+0x108>)
 8003ac8:	481e      	ldr	r0, [pc, #120]	; (8003b44 <HAL_I2C_MspInit+0x10c>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003aca:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad0:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003ad6:	6020      	str	r0, [r4, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003ad8:	6063      	str	r3, [r4, #4]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003ada:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003adc:	2300      	movs	r3, #0
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003ade:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae0:	60a1      	str	r1, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae2:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ae6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003aea:	e9c4 3307 	strd	r3, r3, [r4, #28]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aee:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003af0:	f000 fa7a 	bl	8003fe8 <HAL_DMA_Init>
 8003af4:	b9b0      	cbnz	r0, 8003b24 <HAL_I2C_MspInit+0xec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003afa:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003afc:	201f      	movs	r0, #31
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003afe:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b00:	f000 fa00 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b04:	201f      	movs	r0, #31
 8003b06:	f000 fa33 	bl	8003f70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	2020      	movs	r0, #32
 8003b10:	f000 f9f8 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b14:	2020      	movs	r0, #32
 8003b16:	f000 fa2b 	bl	8003f70 <HAL_NVIC_EnableIRQ>
}
 8003b1a:	b009      	add	sp, #36	; 0x24
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003b1e:	f7ff ff39 	bl	8003994 <Error_Handler>
 8003b22:	e7d0      	b.n	8003ac6 <HAL_I2C_MspInit+0x8e>
      Error_Handler();
 8003b24:	f7ff ff36 	bl	8003994 <Error_Handler>
 8003b28:	e7e5      	b.n	8003af6 <HAL_I2C_MspInit+0xbe>
 8003b2a:	bf00      	nop
 8003b2c:	40005400 	.word	0x40005400
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40020400 	.word	0x40020400
 8003b38:	200004ec 	.word	0x200004ec
 8003b3c:	40026010 	.word	0x40026010
 8003b40:	2000054c 	.word	0x2000054c
 8003b44:	400260a0 	.word	0x400260a0

08003b48 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_I2C_MspDeInit+0x48>)
 8003b4a:	6802      	ldr	r2, [r0, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d000      	beq.n	8003b52 <HAL_I2C_MspDeInit+0xa>
 8003b50:	4770      	bx	lr
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_I2C_MspDeInit+0x4c>)
 8003b54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
{
 8003b5a:	b510      	push	{r4, lr}

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
 8003b62:	4604      	mov	r4, r0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003b64:	480c      	ldr	r0, [pc, #48]	; (8003b98 <HAL_I2C_MspDeInit+0x50>)
 8003b66:	f000 fd4b 	bl	8004600 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b6e:	480a      	ldr	r0, [pc, #40]	; (8003b98 <HAL_I2C_MspDeInit+0x50>)
 8003b70:	f000 fd46 	bl	8004600 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8003b74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b76:	f000 fad1 	bl	800411c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8003b7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b7c:	f000 face 	bl	800411c <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003b80:	201f      	movs	r0, #31
 8003b82:	f000 fa03 	bl	8003f8c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003b86:	2020      	movs	r0, #32
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003b8c:	f000 b9fe 	b.w	8003f8c <HAL_NVIC_DisableIRQ>
 8003b90:	40005400 	.word	0x40005400
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020400 	.word	0x40020400

08003b9c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_TIM_Base_MspInit+0x2c>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d000      	beq.n	8003ba6 <HAL_TIM_Base_MspInit+0xa>
 8003ba4:	4770      	bx	lr
{
 8003ba6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ba8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8003bac:	2200      	movs	r2, #0
 8003bae:	9201      	str	r2, [sp, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb2:	f042 0204 	orr.w	r2, r2, #4
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003bc2:	b002      	add	sp, #8
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40000800 	.word	0x40000800

08003bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bcc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003bce:	6803      	ldr	r3, [r0, #0]
 8003bd0:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_UART_MspInit+0x10c>)
{
 8003bd2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8003bd6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003bdc:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003be0:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8003be2:	d04a      	beq.n	8003c7a <HAL_UART_MspInit+0xae>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003be4:	4a3d      	ldr	r2, [pc, #244]	; (8003cdc <HAL_UART_MspInit+0x110>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d001      	beq.n	8003bee <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bea:	b00a      	add	sp, #40	; 0x28
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_UART_MspInit+0x114>)
 8003bf0:	9403      	str	r4, [sp, #12]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003bf4:	4d3b      	ldr	r5, [pc, #236]	; (8003ce4 <HAL_UART_MspInit+0x118>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bf6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfe:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003c02:	9203      	str	r2, [sp, #12]
 8003c04:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	9404      	str	r4, [sp, #16]
 8003c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0a:	f042 0202 	orr.w	r2, r2, #2
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c1c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c20:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c24:	f04f 0c03 	mov.w	ip, #3
 8003c28:	2307      	movs	r3, #7
 8003c2a:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2c:	482e      	ldr	r0, [pc, #184]	; (8003ce8 <HAL_UART_MspInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c30:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f000 fbe0 	bl	80043f8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003c38:	482c      	ldr	r0, [pc, #176]	; (8003cec <HAL_UART_MspInit+0x120>)
 8003c3a:	6028      	str	r0, [r5, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003c3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c40:	2240      	movs	r2, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c46:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c48:	60ec      	str	r4, [r5, #12]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4a:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c4e:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c52:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c54:	e9c5 1201 	strd	r1, r2, [r5, #4]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c58:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c5a:	f000 f9c5 	bl	8003fe8 <HAL_DMA_Init>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d136      	bne.n	8003cd0 <HAL_UART_MspInit+0x104>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c64:	6335      	str	r5, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c66:	4611      	mov	r1, r2
 8003c68:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c6a:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c6c:	f000 f94a 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c70:	2027      	movs	r0, #39	; 0x27
 8003c72:	f000 f97d 	bl	8003f70 <HAL_NVIC_EnableIRQ>
}
 8003c76:	b00a      	add	sp, #40	; 0x28
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_UART_MspInit+0x114>)
 8003c7c:	9401      	str	r4, [sp, #4]
 8003c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c80:	4819      	ldr	r0, [pc, #100]	; (8003ce8 <HAL_UART_MspInit+0x11c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c82:	f042 0210 	orr.w	r2, r2, #16
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	f002 0210 	and.w	r2, r2, #16
 8003c8e:	9201      	str	r2, [sp, #4]
 8003c90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c92:	9402      	str	r4, [sp, #8]
 8003c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c96:	f042 0202 	orr.w	r2, r2, #2
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ca4:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca8:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003caa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cae:	2307      	movs	r3, #7
 8003cb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb8:	f000 fb9e 	bl	80043f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	2025      	movs	r0, #37	; 0x25
 8003cc2:	f000 f91f 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cc6:	2025      	movs	r0, #37	; 0x25
 8003cc8:	f000 f952 	bl	8003f70 <HAL_NVIC_EnableIRQ>
}
 8003ccc:	b00a      	add	sp, #40	; 0x28
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003cd0:	f7ff fe60 	bl	8003994 <Error_Handler>
 8003cd4:	e7c5      	b.n	8003c62 <HAL_UART_MspInit+0x96>
 8003cd6:	bf00      	nop
 8003cd8:	40011000 	.word	0x40011000
 8003cdc:	40004800 	.word	0x40004800
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	2000066c 	.word	0x2000066c
 8003ce8:	40020400 	.word	0x40020400
 8003cec:	40026058 	.word	0x40026058

08003cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf0:	e7fe      	b.n	8003cf0 <NMI_Handler>
 8003cf2:	bf00      	nop

08003cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf4:	e7fe      	b.n	8003cf4 <HardFault_Handler>
 8003cf6:	bf00      	nop

08003cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cf8:	e7fe      	b.n	8003cf8 <MemManage_Handler>
 8003cfa:	bf00      	nop

08003cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cfc:	e7fe      	b.n	8003cfc <BusFault_Handler>
 8003cfe:	bf00      	nop

08003d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d00:	e7fe      	b.n	8003d00 <UsageFault_Handler>
 8003d02:	bf00      	nop

08003d04 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <DebugMon_Handler>:
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop

08003d0c <PendSV_Handler>:
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d10:	f000 b8c2 	b.w	8003e98 <HAL_IncTick>

08003d14 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003d14:	4801      	ldr	r0, [pc, #4]	; (8003d1c <DMA1_Stream0_IRQHandler+0x8>)
 8003d16:	f000 ba93 	b.w	8004240 <HAL_DMA_IRQHandler>
 8003d1a:	bf00      	nop
 8003d1c:	200004ec 	.word	0x200004ec

08003d20 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <DMA1_Stream3_IRQHandler+0x8>)
 8003d22:	f000 ba8d 	b.w	8004240 <HAL_DMA_IRQHandler>
 8003d26:	bf00      	nop
 8003d28:	2000066c 	.word	0x2000066c

08003d2c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <DMA1_Stream6_IRQHandler+0x8>)
 8003d2e:	f000 ba87 	b.w	8004240 <HAL_DMA_IRQHandler>
 8003d32:	bf00      	nop
 8003d34:	2000054c 	.word	0x2000054c

08003d38 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <I2C1_EV_IRQHandler+0x8>)
 8003d3a:	f001 bdbd 	b.w	80058b8 <HAL_I2C_EV_IRQHandler>
 8003d3e:	bf00      	nop
 8003d40:	20000498 	.word	0x20000498

08003d44 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <I2C1_ER_IRQHandler+0x8>)
 8003d46:	f002 bb1d 	b.w	8006384 <HAL_I2C_ER_IRQHandler>
 8003d4a:	bf00      	nop
 8003d4c:	20000498 	.word	0x20000498

08003d50 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <USART1_IRQHandler+0x8>)
 8003d52:	f003 ba6d 	b.w	8007230 <HAL_UART_IRQHandler>
 8003d56:	bf00      	nop
 8003d58:	200005ec 	.word	0x200005ec

08003d5c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <USART3_IRQHandler+0x8>)
 8003d5e:	f003 ba67 	b.w	8007230 <HAL_UART_IRQHandler>
 8003d62:	bf00      	nop
 8003d64:	2000062c 	.word	0x2000062c

08003d68 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d68:	490c      	ldr	r1, [pc, #48]	; (8003d9c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8003d6c:	680b      	ldr	r3, [r1, #0]
{
 8003d6e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d70:	4c0c      	ldr	r4, [pc, #48]	; (8003da4 <_sbrk+0x3c>)
 8003d72:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003d74:	b12b      	cbz	r3, 8003d82 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d76:	4418      	add	r0, r3
 8003d78:	4290      	cmp	r0, r2
 8003d7a:	d807      	bhi.n	8003d8c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003d7c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <_sbrk+0x40>)
 8003d84:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003d86:	4418      	add	r0, r3
 8003d88:	4290      	cmp	r0, r2
 8003d8a:	d9f7      	bls.n	8003d7c <_sbrk+0x14>
    errno = ENOMEM;
 8003d8c:	f003 fee2 	bl	8007b54 <__errno>
 8003d90:	230c      	movs	r3, #12
 8003d92:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	200017b8 	.word	0x200017b8
 8003da0:	20020000 	.word	0x20020000
 8003da4:	00000400 	.word	0x00000400
 8003da8:	200017d0 	.word	0x200017d0

08003dac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SystemInit+0x18>)
 8003dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003db2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003db6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dbe:	6099      	str	r1, [r3, #8]
#endif
}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dce:	e003      	b.n	8003dd8 <LoopCopyDataInit>

08003dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dd6:	3104      	adds	r1, #4

08003dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003de0:	d3f6      	bcc.n	8003dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8003de2:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003de4:	e002      	b.n	8003dec <LoopFillZerobss>

08003de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003de8:	f842 3b04 	str.w	r3, [r2], #4

08003dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003df0:	d3f9      	bcc.n	8003de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003df2:	f7ff ffdb 	bl	8003dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003df6:	f003 feb3 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dfa:	f7ff fb55 	bl	80034a8 <main>
  bx  lr    
 8003dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e04:	08009f80 	.word	0x08009f80
  ldr  r0, =_sdata
 8003e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e0c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003e10:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003e14:	200017cc 	.word	0x200017cc

08003e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e18:	e7fe      	b.n	8003e18 <ADC_IRQHandler>
	...

08003e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e1c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_InitTick+0x3c>)
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <HAL_InitTick+0x40>)
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
{
 8003e26:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e2c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003e30:	fbb3 f0f0 	udiv	r0, r3, r0
 8003e34:	f000 f8be 	bl	8003fb4 <HAL_SYSTICK_Config>
 8003e38:	b908      	cbnz	r0, 8003e3e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e3a:	2d0f      	cmp	r5, #15
 8003e3c:	d901      	bls.n	8003e42 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003e3e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003e40:	bd38      	pop	{r3, r4, r5, pc}
 8003e42:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e44:	4602      	mov	r2, r0
 8003e46:	4629      	mov	r1, r5
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	f000 f85a 	bl	8003f04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_InitTick+0x44>)
 8003e52:	4620      	mov	r0, r4
 8003e54:	601d      	str	r5, [r3, #0]
}
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	20000004 	.word	0x20000004
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000008 	.word	0x20000008

08003e64 <HAL_Init>:
{
 8003e64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_Init+0x30>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e80:	2003      	movs	r0, #3
 8003e82:	f000 f82d 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7ff ffc8 	bl	8003e1c <HAL_InitTick>
  HAL_MspInit();
 8003e8c:	f7ff fdb8 	bl	8003a00 <HAL_MspInit>
}
 8003e90:	2000      	movs	r0, #0
 8003e92:	bd08      	pop	{r3, pc}
 8003e94:	40023c00 	.word	0x40023c00

08003e98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003e98:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <HAL_IncTick+0x10>)
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <HAL_IncTick+0x14>)
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	440b      	add	r3, r1
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	200017c4 	.word	0x200017c4
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <HAL_GetTick+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	200017c4 	.word	0x200017c4

08003ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff fff6 	bl	8003eb0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003ec6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003ec8:	d002      	beq.n	8003ed0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eca:	4b04      	ldr	r3, [pc, #16]	; (8003edc <HAL_Delay+0x20>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ed0:	f7ff ffee 	bl	8003eb0 <HAL_GetTick>
 8003ed4:	1b40      	subs	r0, r0, r5
 8003ed6:	42a0      	cmp	r0, r4
 8003ed8:	d3fa      	bcc.n	8003ed0 <HAL_Delay+0x14>
  {
  }
}
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ee2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ee4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8003ee8:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eea:	0200      	lsls	r0, r0, #8
 8003eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003ef8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003efa:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <HAL_NVIC_SetPriority+0x64>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f0c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f0e:	f1c3 0507 	rsb	r5, r3, #7
 8003f12:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f14:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f18:	bf28      	it	cs
 8003f1a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1c:	2c06      	cmp	r4, #6
 8003f1e:	d919      	bls.n	8003f54 <HAL_NVIC_SetPriority+0x50>
 8003f20:	3b03      	subs	r3, #3
 8003f22:	f04f 34ff 	mov.w	r4, #4294967295
 8003f26:	409c      	lsls	r4, r3
 8003f28:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	40aa      	lsls	r2, r5
 8003f32:	ea21 0102 	bic.w	r1, r1, r2
 8003f36:	fa01 f203 	lsl.w	r2, r1, r3
 8003f3a:	4322      	orrs	r2, r4
 8003f3c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	db0a      	blt.n	8003f5a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003f48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003f4c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f50:	bc30      	pop	{r4, r5}
 8003f52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f54:	2400      	movs	r4, #0
 8003f56:	4623      	mov	r3, r4
 8003f58:	e7e8      	b.n	8003f2c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_NVIC_SetPriority+0x68>)
 8003f5c:	f000 000f 	and.w	r0, r0, #15
 8003f60:	4403      	add	r3, r0
 8003f62:	761a      	strb	r2, [r3, #24]
 8003f64:	bc30      	pop	{r4, r5}
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00
 8003f6c:	e000ecfc 	.word	0xe000ecfc

08003f70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f70:	2800      	cmp	r0, #0
 8003f72:	db07      	blt.n	8003f84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f74:	f000 011f 	and.w	r1, r0, #31
 8003f78:	2301      	movs	r3, #1
 8003f7a:	0940      	lsrs	r0, r0, #5
 8003f7c:	4a02      	ldr	r2, [pc, #8]	; (8003f88 <HAL_NVIC_EnableIRQ+0x18>)
 8003f7e:	408b      	lsls	r3, r1
 8003f80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000e100 	.word	0xe000e100

08003f8c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	db0d      	blt.n	8003fac <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f90:	0943      	lsrs	r3, r0, #5
 8003f92:	3320      	adds	r3, #32
 8003f94:	2201      	movs	r2, #1
 8003f96:	4906      	ldr	r1, [pc, #24]	; (8003fb0 <HAL_NVIC_DisableIRQ+0x24>)
 8003f98:	f000 001f 	and.w	r0, r0, #31
 8003f9c:	fa02 f000 	lsl.w	r0, r2, r0
 8003fa0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fa8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e100 	.word	0xe000e100

08003fb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb4:	3801      	subs	r0, #1
 8003fb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003fba:	d20e      	bcs.n	8003fda <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fbe:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc0:	4c08      	ldr	r4, [pc, #32]	; (8003fe4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc4:	20f0      	movs	r0, #240	; 0xf0
 8003fc6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fcc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003fda:	2001      	movs	r0, #1
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff ff60 	bl	8003eb0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ff0:	2c00      	cmp	r4, #0
 8003ff2:	d054      	beq.n	800409e <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff4:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ff6:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003ffc:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8003ffe:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8004000:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8004004:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8004008:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800400a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800400c:	e005      	b.n	800401a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800400e:	f7ff ff4f 	bl	8003eb0 <HAL_GetTick>
 8004012:	1b40      	subs	r0, r0, r5
 8004014:	2805      	cmp	r0, #5
 8004016:	d83b      	bhi.n	8004090 <HAL_DMA_Init+0xa8>
 8004018:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	07d1      	lsls	r1, r2, #31
 800401e:	d4f6      	bmi.n	800400e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004020:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004024:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004028:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402a:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800402c:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402e:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004030:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004034:	430a      	orrs	r2, r1
 8004036:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004038:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800403a:	4835      	ldr	r0, [pc, #212]	; (8004110 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403c:	4332      	orrs	r2, r6
 800403e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004040:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004042:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004044:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004046:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004048:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800404c:	d029      	beq.n	80040a2 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800404e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004050:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004052:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004056:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004058:	b2da      	uxtb	r2, r3
 800405a:	482e      	ldr	r0, [pc, #184]	; (8004114 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800405c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800405e:	3a10      	subs	r2, #16
 8004060:	fba0 1202 	umull	r1, r2, r0, r2
 8004064:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004066:	492c      	ldr	r1, [pc, #176]	; (8004118 <HAL_DMA_Init+0x130>)
 8004068:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800406c:	5c89      	ldrb	r1, [r1, r2]
 800406e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8004070:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8004074:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004076:	bf88      	it	hi
 8004078:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407a:	223f      	movs	r2, #63	; 0x3f
 800407c:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800407e:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004080:	2100      	movs	r1, #0
 8004082:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8004084:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004086:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004088:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800408a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004090:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004092:	2220      	movs	r2, #32
 8004094:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004096:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004098:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800409e:	2001      	movs	r0, #1
}
 80040a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040a2:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80040a6:	4301      	orrs	r1, r0
 80040a8:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80040aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80040ac:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80040ae:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80040b0:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80040b8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d0cc      	beq.n	8004058 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040be:	b17e      	cbz	r6, 80040e0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040c0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80040c4:	d016      	beq.n	80040f4 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c6:	2d02      	cmp	r5, #2
 80040c8:	d903      	bls.n	80040d2 <HAL_DMA_Init+0xea>
 80040ca:	2d03      	cmp	r5, #3
 80040cc:	d1c4      	bne.n	8004058 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ce:	01c2      	lsls	r2, r0, #7
 80040d0:	d5c2      	bpl.n	8004058 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80040d2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 80040d8:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 80040da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80040de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80040e0:	2d01      	cmp	r5, #1
 80040e2:	d003      	beq.n	80040ec <HAL_DMA_Init+0x104>
 80040e4:	d3f3      	bcc.n	80040ce <HAL_DMA_Init+0xe6>
 80040e6:	2d02      	cmp	r5, #2
 80040e8:	d1b6      	bne.n	8004058 <HAL_DMA_Init+0x70>
 80040ea:	e7f0      	b.n	80040ce <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ec:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80040f0:	d1b2      	bne.n	8004058 <HAL_DMA_Init+0x70>
 80040f2:	e7ee      	b.n	80040d2 <HAL_DMA_Init+0xea>
    switch (tmp)
 80040f4:	2d03      	cmp	r5, #3
 80040f6:	d8af      	bhi.n	8004058 <HAL_DMA_Init+0x70>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_DMA_Init+0x118>)
 80040fa:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80040fe:	bf00      	nop
 8004100:	080040d3 	.word	0x080040d3
 8004104:	080040cf 	.word	0x080040cf
 8004108:	080040d3 	.word	0x080040d3
 800410c:	080040ed 	.word	0x080040ed
 8004110:	f010803f 	.word	0xf010803f
 8004114:	aaaaaaab 	.word	0xaaaaaaab
 8004118:	08009cc8 	.word	0x08009cc8

0800411c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800411c:	2800      	cmp	r0, #0
 800411e:	d037      	beq.n	8004190 <HAL_DMA_DeInit+0x74>
 8004120:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004122:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8004126:	b2c0      	uxtb	r0, r0
 8004128:	2802      	cmp	r0, #2
 800412a:	d033      	beq.n	8004194 <HAL_DMA_DeInit+0x78>
  __HAL_DMA_DISABLE(hdma);
 800412c:	681a      	ldr	r2, [r3, #0]
{
 800412e:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004130:	b2d1      	uxtb	r1, r2
 8004132:	4d19      	ldr	r5, [pc, #100]	; (8004198 <HAL_DMA_DeInit+0x7c>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004134:	4c19      	ldr	r4, [pc, #100]	; (800419c <HAL_DMA_DeInit+0x80>)
  __HAL_DMA_DISABLE(hdma);
 8004136:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004138:	3910      	subs	r1, #16
 800413a:	fba5 5101 	umull	r5, r1, r5, r1
 800413e:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8004140:	f020 0001 	bic.w	r0, r0, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004144:	5c65      	ldrb	r5, [r4, r1]
  __HAL_DMA_DISABLE(hdma);
 8004146:	6010      	str	r0, [r2, #0]
 8004148:	f422 747f 	bic.w	r4, r2, #1020	; 0x3fc
 800414c:	f024 0403 	bic.w	r4, r4, #3
  if (stream_number > 3U)
 8004150:	2903      	cmp	r1, #3
  hdma->Instance->CR   = 0U;
 8004152:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004156:	bf88      	it	hi
 8004158:	3404      	addhi	r4, #4
  hdma->Instance->FCR  = 0x00000021U;
 800415a:	2621      	movs	r6, #33	; 0x21
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800415c:	213f      	movs	r1, #63	; 0x3f
  hdma->Instance->CR   = 0U;
 800415e:	6010      	str	r0, [r2, #0]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004160:	40a9      	lsls	r1, r5
  hdma->Instance->NDTR = 0U;
 8004162:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8004164:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8004166:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8004168:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = 0x00000021U;
 800416a:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 800416c:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416e:	65dd      	str	r5, [r3, #92]	; 0x5c
 8004170:	659c      	str	r4, [r3, #88]	; 0x58
  hdma->XferHalfCpltCallback = NULL;
 8004172:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8004176:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 800417a:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800417e:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004180:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800418c:	bc70      	pop	{r4, r5, r6}
 800418e:	4770      	bx	lr
    return HAL_ERROR;
 8004190:	2001      	movs	r0, #1
 8004192:	4770      	bx	lr
}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	aaaaaaab 	.word	0xaaaaaaab
 800419c:	08009cc8 	.word	0x08009cc8

080041a0 <HAL_DMA_Start_IT>:
{
 80041a0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80041a2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80041a6:	2c01      	cmp	r4, #1
 80041a8:	d035      	beq.n	8004216 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80041aa:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ae:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80041b0:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80041b2:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80041b4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80041b8:	d127      	bne.n	800420a <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ba:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80041bc:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041be:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c0:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041c6:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c8:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ca:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041d0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80041d2:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 80041d4:	bf0a      	itet	eq
 80041d6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80041d8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80041da:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041dc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 80041de:	bf18      	it	ne
 80041e0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e2:	233f      	movs	r3, #63	; 0x3f
 80041e4:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 80041e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e8:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f043 0316 	orr.w	r3, r3, #22
 80041f0:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80041f2:	b11a      	cbz	r2, 80041fc <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	f043 0308 	orr.w	r3, r3, #8
 80041fa:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004204:	2000      	movs	r0, #0
}
 8004206:	bcf0      	pop	{r4, r5, r6, r7}
 8004208:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800420a:	2300      	movs	r3, #0
 800420c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8004210:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8004212:	2002      	movs	r0, #2
}
 8004214:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004216:	2002      	movs	r0, #2
}
 8004218:	bcf0      	pop	{r4, r5, r6, r7}
 800421a:	4770      	bx	lr

0800421c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004220:	2b02      	cmp	r3, #2
 8004222:	d003      	beq.n	800422c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004228:	2001      	movs	r0, #1
 800422a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800422c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800422e:	2305      	movs	r3, #5
 8004230:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800423c:	2000      	movs	r0, #0
}
 800423e:	4770      	bx	lr

08004240 <HAL_DMA_IRQHandler>:
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004244:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004246:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8004248:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800424a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800424c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800424e:	4965      	ldr	r1, [pc, #404]	; (80043e4 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004250:	2208      	movs	r2, #8
 8004252:	409a      	lsls	r2, r3
 8004254:	422a      	tst	r2, r5
{
 8004256:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004258:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800425a:	d003      	beq.n	8004264 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800425c:	6801      	ldr	r1, [r0, #0]
 800425e:	6808      	ldr	r0, [r1, #0]
 8004260:	0740      	lsls	r0, r0, #29
 8004262:	d459      	bmi.n	8004318 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004264:	2201      	movs	r2, #1
 8004266:	409a      	lsls	r2, r3
 8004268:	422a      	tst	r2, r5
 800426a:	d003      	beq.n	8004274 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800426c:	6821      	ldr	r1, [r4, #0]
 800426e:	6949      	ldr	r1, [r1, #20]
 8004270:	0608      	lsls	r0, r1, #24
 8004272:	d474      	bmi.n	800435e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	2204      	movs	r2, #4
 8004276:	409a      	lsls	r2, r3
 8004278:	422a      	tst	r2, r5
 800427a:	d003      	beq.n	8004284 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800427c:	6821      	ldr	r1, [r4, #0]
 800427e:	6809      	ldr	r1, [r1, #0]
 8004280:	0789      	lsls	r1, r1, #30
 8004282:	d466      	bmi.n	8004352 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004284:	2210      	movs	r2, #16
 8004286:	409a      	lsls	r2, r3
 8004288:	422a      	tst	r2, r5
 800428a:	d003      	beq.n	8004294 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800428c:	6821      	ldr	r1, [r4, #0]
 800428e:	6808      	ldr	r0, [r1, #0]
 8004290:	0700      	lsls	r0, r0, #28
 8004292:	d44b      	bmi.n	800432c <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	2220      	movs	r2, #32
 8004296:	409a      	lsls	r2, r3
 8004298:	422a      	tst	r2, r5
 800429a:	d014      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800429c:	6821      	ldr	r1, [r4, #0]
 800429e:	6808      	ldr	r0, [r1, #0]
 80042a0:	06c0      	lsls	r0, r0, #27
 80042a2:	d510      	bpl.n	80042c6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042a4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042a6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80042aa:	2a05      	cmp	r2, #5
 80042ac:	d063      	beq.n	8004376 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ae:	680b      	ldr	r3, [r1, #0]
 80042b0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042b6:	d07e      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b8:	0319      	lsls	r1, r3, #12
 80042ba:	f140 8089 	bpl.w	80043d0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80042be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042c0:	b10b      	cbz	r3, 80042c6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80042c2:	4620      	mov	r0, r4
 80042c4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042c8:	b323      	cbz	r3, 8004314 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042cc:	07da      	lsls	r2, r3, #31
 80042ce:	d51a      	bpl.n	8004306 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d0:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80042d2:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80042d8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042da:	4943      	ldr	r1, [pc, #268]	; (80043e8 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 80042dc:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80042e0:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80042e4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042e6:	0ab6      	lsrs	r6, r6, #10
 80042e8:	e002      	b.n	80042f0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	07db      	lsls	r3, r3, #31
 80042ee:	d504      	bpl.n	80042fa <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80042f0:	9b01      	ldr	r3, [sp, #4]
 80042f2:	3301      	adds	r3, #1
 80042f4:	42b3      	cmp	r3, r6
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	d9f7      	bls.n	80042ea <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80042fa:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80042fc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80042fe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004302:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004306:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004308:	b123      	cbz	r3, 8004314 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800430a:	4620      	mov	r0, r4
}
 800430c:	b003      	add	sp, #12
 800430e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004312:	4718      	bx	r3
}
 8004314:	b003      	add	sp, #12
 8004316:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004318:	6808      	ldr	r0, [r1, #0]
 800431a:	f020 0004 	bic.w	r0, r0, #4
 800431e:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004320:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004322:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	6562      	str	r2, [r4, #84]	; 0x54
 800432a:	e79b      	b.n	8004264 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800432c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800432e:	680a      	ldr	r2, [r1, #0]
 8004330:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004334:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004336:	d118      	bne.n	800436a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004338:	05d2      	lsls	r2, r2, #23
 800433a:	d403      	bmi.n	8004344 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800433c:	680a      	ldr	r2, [r1, #0]
 800433e:	f022 0208 	bic.w	r2, r2, #8
 8004342:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004344:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004346:	2a00      	cmp	r2, #0
 8004348:	d0a4      	beq.n	8004294 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800434a:	4620      	mov	r0, r4
 800434c:	4790      	blx	r2
 800434e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004350:	e7a0      	b.n	8004294 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004352:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004354:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004356:	f042 0204 	orr.w	r2, r2, #4
 800435a:	6562      	str	r2, [r4, #84]	; 0x54
 800435c:	e792      	b.n	8004284 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800435e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004360:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004362:	f042 0202 	orr.w	r2, r2, #2
 8004366:	6562      	str	r2, [r4, #84]	; 0x54
 8004368:	e784      	b.n	8004274 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800436a:	0311      	lsls	r1, r2, #12
 800436c:	d5ea      	bpl.n	8004344 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800436e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004370:	2a00      	cmp	r2, #0
 8004372:	d1ea      	bne.n	800434a <HAL_DMA_IRQHandler+0x10a>
 8004374:	e78e      	b.n	8004294 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004376:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004378:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437a:	f022 0216 	bic.w	r2, r2, #22
 800437e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004380:	694a      	ldr	r2, [r1, #20]
 8004382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004386:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004388:	b338      	cbz	r0, 80043da <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800438a:	680a      	ldr	r2, [r1, #0]
 800438c:	f022 0208 	bic.w	r2, r2, #8
 8004390:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004392:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8004394:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800439a:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800439c:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800439e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80043a0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80043a4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d0b3      	beq.n	8004314 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80043ac:	4620      	mov	r0, r4
}
 80043ae:	b003      	add	sp, #12
 80043b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80043b4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043b6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80043ba:	d180      	bne.n	80042be <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043bc:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80043be:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043c0:	f022 0210 	bic.w	r2, r2, #16
 80043c4:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80043c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80043ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80043ce:	e776      	b.n	80042be <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80043d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af75 	bne.w	80042c2 <HAL_DMA_IRQHandler+0x82>
 80043d8:	e775      	b.n	80042c6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d1d4      	bne.n	800438a <HAL_DMA_IRQHandler+0x14a>
 80043e0:	e7d7      	b.n	8004392 <HAL_DMA_IRQHandler+0x152>
 80043e2:	bf00      	nop
 80043e4:	20000000 	.word	0x20000000
 80043e8:	1b4e81b5 	.word	0x1b4e81b5

080043ec <HAL_DMA_GetState>:
  return hdma->State;
 80043ec:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80043f4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80043f6:	4770      	bx	lr

080043f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043fc:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004400:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 80045f8 <HAL_GPIO_Init+0x200>
{
 8004404:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004406:	2400      	movs	r4, #0
 8004408:	e003      	b.n	8004412 <HAL_GPIO_Init+0x1a>
 800440a:	3401      	adds	r4, #1
 800440c:	2c10      	cmp	r4, #16
 800440e:	f000 808c 	beq.w	800452a <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8004412:	2301      	movs	r3, #1
 8004414:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004416:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800441a:	4293      	cmp	r3, r2
 800441c:	d1f5      	bne.n	800440a <HAL_GPIO_Init+0x12>
 800441e:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004422:	f026 0910 	bic.w	r9, r6, #16
 8004426:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800442a:	2303      	movs	r3, #3
 800442c:	f109 37ff 	add.w	r7, r9, #4294967295
 8004430:	fa03 f30c 	lsl.w	r3, r3, ip
 8004434:	2f01      	cmp	r7, #1
 8004436:	ea6f 0303 	mvn.w	r3, r3
 800443a:	fa05 f50c 	lsl.w	r5, r5, ip
 800443e:	d977      	bls.n	8004530 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8004440:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004442:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004444:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8004446:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8004448:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800444a:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800444e:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004450:	fa05 f30c 	lsl.w	r3, r5, ip
 8004454:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8004456:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004458:	00f3      	lsls	r3, r6, #3
 800445a:	d5d6      	bpl.n	800440a <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445c:	4d5f      	ldr	r5, [pc, #380]	; (80045dc <HAL_GPIO_Init+0x1e4>)
 800445e:	2300      	movs	r3, #0
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004468:	646b      	str	r3, [r5, #68]	; 0x44
 800446a:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800446c:	f024 0303 	bic.w	r3, r4, #3
 8004470:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8004474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004478:	9501      	str	r5, [sp, #4]
 800447a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800447e:	f004 0503 	and.w	r5, r4, #3
 8004482:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004486:	4d56      	ldr	r5, [pc, #344]	; (80045e0 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004488:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800448a:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800448e:	270f      	movs	r7, #15
 8004490:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004494:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004496:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800449a:	d01f      	beq.n	80044dc <HAL_GPIO_Init+0xe4>
 800449c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044a0:	42a8      	cmp	r0, r5
 80044a2:	d076      	beq.n	8004592 <HAL_GPIO_Init+0x19a>
 80044a4:	4d4f      	ldr	r5, [pc, #316]	; (80045e4 <HAL_GPIO_Init+0x1ec>)
 80044a6:	42a8      	cmp	r0, r5
 80044a8:	d079      	beq.n	800459e <HAL_GPIO_Init+0x1a6>
 80044aa:	4d4f      	ldr	r5, [pc, #316]	; (80045e8 <HAL_GPIO_Init+0x1f0>)
 80044ac:	42a8      	cmp	r0, r5
 80044ae:	d07c      	beq.n	80045aa <HAL_GPIO_Init+0x1b2>
 80044b0:	4d4e      	ldr	r5, [pc, #312]	; (80045ec <HAL_GPIO_Init+0x1f4>)
 80044b2:	42a8      	cmp	r0, r5
 80044b4:	d07f      	beq.n	80045b6 <HAL_GPIO_Init+0x1be>
 80044b6:	4d4e      	ldr	r5, [pc, #312]	; (80045f0 <HAL_GPIO_Init+0x1f8>)
 80044b8:	42a8      	cmp	r0, r5
 80044ba:	f000 8082 	beq.w	80045c2 <HAL_GPIO_Init+0x1ca>
 80044be:	4d4d      	ldr	r5, [pc, #308]	; (80045f4 <HAL_GPIO_Init+0x1fc>)
 80044c0:	42a8      	cmp	r0, r5
 80044c2:	f000 8084 	beq.w	80045ce <HAL_GPIO_Init+0x1d6>
 80044c6:	f8df c134 	ldr.w	ip, [pc, #308]	; 80045fc <HAL_GPIO_Init+0x204>
 80044ca:	4560      	cmp	r0, ip
 80044cc:	bf0c      	ite	eq
 80044ce:	f04f 0c07 	moveq.w	ip, #7
 80044d2:	f04f 0c08 	movne.w	ip, #8
 80044d6:	fa0c f509 	lsl.w	r5, ip, r9
 80044da:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044dc:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 80044de:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80044e2:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e4:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 80044e6:	bf54      	ite	pl
 80044e8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80044ea:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 80044ec:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80044f0:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044f4:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80044f6:	bf54      	ite	pl
 80044f8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80044fa:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80044fc:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004500:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004504:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8004506:	bf54      	ite	pl
 8004508:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800450a:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800450c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8004510:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004514:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004516:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800451a:	bf54      	ite	pl
 800451c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800451e:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004520:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8004522:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	f47f af74 	bne.w	8004412 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004530:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004532:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004536:	68cf      	ldr	r7, [r1, #12]
 8004538:	fa07 f70c 	lsl.w	r7, r7, ip
 800453c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004540:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004542:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004546:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800454a:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800454e:	40a7      	lsls	r7, r4
 8004550:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8004554:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004556:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004558:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800455a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800455c:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8004560:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004562:	f47f af71 	bne.w	8004448 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8004566:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800456a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800456e:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8004572:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004576:	00bf      	lsls	r7, r7, #2
 8004578:	f04f 0b0f 	mov.w	fp, #15
 800457c:	fa0b fb07 	lsl.w	fp, fp, r7
 8004580:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004584:	690d      	ldr	r5, [r1, #16]
 8004586:	40bd      	lsls	r5, r7
 8004588:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800458c:	f8c9 5020 	str.w	r5, [r9, #32]
 8004590:	e75a      	b.n	8004448 <HAL_GPIO_Init+0x50>
 8004592:	f04f 0c01 	mov.w	ip, #1
 8004596:	fa0c f509 	lsl.w	r5, ip, r9
 800459a:	432f      	orrs	r7, r5
 800459c:	e79e      	b.n	80044dc <HAL_GPIO_Init+0xe4>
 800459e:	f04f 0c02 	mov.w	ip, #2
 80045a2:	fa0c f509 	lsl.w	r5, ip, r9
 80045a6:	432f      	orrs	r7, r5
 80045a8:	e798      	b.n	80044dc <HAL_GPIO_Init+0xe4>
 80045aa:	f04f 0c03 	mov.w	ip, #3
 80045ae:	fa0c f509 	lsl.w	r5, ip, r9
 80045b2:	432f      	orrs	r7, r5
 80045b4:	e792      	b.n	80044dc <HAL_GPIO_Init+0xe4>
 80045b6:	f04f 0c04 	mov.w	ip, #4
 80045ba:	fa0c f509 	lsl.w	r5, ip, r9
 80045be:	432f      	orrs	r7, r5
 80045c0:	e78c      	b.n	80044dc <HAL_GPIO_Init+0xe4>
 80045c2:	f04f 0c05 	mov.w	ip, #5
 80045c6:	fa0c f509 	lsl.w	r5, ip, r9
 80045ca:	432f      	orrs	r7, r5
 80045cc:	e786      	b.n	80044dc <HAL_GPIO_Init+0xe4>
 80045ce:	f04f 0c06 	mov.w	ip, #6
 80045d2:	fa0c f509 	lsl.w	r5, ip, r9
 80045d6:	432f      	orrs	r7, r5
 80045d8:	e780      	b.n	80044dc <HAL_GPIO_Init+0xe4>
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40020000 	.word	0x40020000
 80045e4:	40020800 	.word	0x40020800
 80045e8:	40020c00 	.word	0x40020c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40021400 	.word	0x40021400
 80045f4:	40021800 	.word	0x40021800
 80045f8:	40013c00 	.word	0x40013c00
 80045fc:	40021c00 	.word	0x40021c00

08004600 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004604:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004606:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8004744 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800460a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8004748 <HAL_GPIO_DeInit+0x148>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800460e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800474c <HAL_GPIO_DeInit+0x14c>
 8004612:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8004750 <HAL_GPIO_DeInit+0x150>
 8004616:	e002      	b.n	800461e <HAL_GPIO_DeInit+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004618:	3301      	adds	r3, #1
 800461a:	2b10      	cmp	r3, #16
 800461c:	d06e      	beq.n	80046fc <HAL_GPIO_DeInit+0xfc>
    ioposition = 0x01U << position;
 800461e:	2401      	movs	r4, #1
 8004620:	fa04 f503 	lsl.w	r5, r4, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8004624:	ea05 0601 	and.w	r6, r5, r1
    if(iocurrent == ioposition)
 8004628:	42b5      	cmp	r5, r6
 800462a:	d1f5      	bne.n	8004618 <HAL_GPIO_DeInit+0x18>
 800462c:	f023 0703 	bic.w	r7, r3, #3
 8004630:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004634:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004638:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800463c:	f8d7 b008 	ldr.w	fp, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	f04f 0c0f 	mov.w	ip, #15
 8004646:	fa0c fc02 	lsl.w	ip, ip, r2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800464a:	4540      	cmp	r0, r8
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800464c:	ea0c 0b0b 	and.w	fp, ip, fp
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004650:	d016      	beq.n	8004680 <HAL_GPIO_DeInit+0x80>
 8004652:	4548      	cmp	r0, r9
 8004654:	d011      	beq.n	800467a <HAL_GPIO_DeInit+0x7a>
 8004656:	4550      	cmp	r0, sl
 8004658:	d052      	beq.n	8004700 <HAL_GPIO_DeInit+0x100>
 800465a:	4c35      	ldr	r4, [pc, #212]	; (8004730 <HAL_GPIO_DeInit+0x130>)
 800465c:	42a0      	cmp	r0, r4
 800465e:	d053      	beq.n	8004708 <HAL_GPIO_DeInit+0x108>
 8004660:	4c34      	ldr	r4, [pc, #208]	; (8004734 <HAL_GPIO_DeInit+0x134>)
 8004662:	42a0      	cmp	r0, r4
 8004664:	d054      	beq.n	8004710 <HAL_GPIO_DeInit+0x110>
 8004666:	4c34      	ldr	r4, [pc, #208]	; (8004738 <HAL_GPIO_DeInit+0x138>)
 8004668:	42a0      	cmp	r0, r4
 800466a:	d055      	beq.n	8004718 <HAL_GPIO_DeInit+0x118>
 800466c:	4c33      	ldr	r4, [pc, #204]	; (800473c <HAL_GPIO_DeInit+0x13c>)
 800466e:	42a0      	cmp	r0, r4
 8004670:	d056      	beq.n	8004720 <HAL_GPIO_DeInit+0x120>
 8004672:	4c33      	ldr	r4, [pc, #204]	; (8004740 <HAL_GPIO_DeInit+0x140>)
 8004674:	42a0      	cmp	r0, r4
 8004676:	d057      	beq.n	8004728 <HAL_GPIO_DeInit+0x128>
 8004678:	2408      	movs	r4, #8
 800467a:	fa04 f202 	lsl.w	r2, r4, r2
 800467e:	e000      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004680:	2200      	movs	r2, #0
 8004682:	4593      	cmp	fp, r2
 8004684:	d118      	bne.n	80046b8 <HAL_GPIO_DeInit+0xb8>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004686:	f8de 2000 	ldr.w	r2, [lr]
 800468a:	43f6      	mvns	r6, r6
 800468c:	4032      	ands	r2, r6
 800468e:	f8ce 2000 	str.w	r2, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004692:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004696:	4032      	ands	r2, r6
 8004698:	f8ce 2004 	str.w	r2, [lr, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800469c:	f8de 2008 	ldr.w	r2, [lr, #8]
 80046a0:	4032      	ands	r2, r6
 80046a2:	f8ce 2008 	str.w	r2, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046a6:	f8de 200c 	ldr.w	r2, [lr, #12]
 80046aa:	4016      	ands	r6, r2
 80046ac:	f8ce 600c 	str.w	r6, [lr, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	ea22 020c 	bic.w	r2, r2, ip
 80046b6:	60ba      	str	r2, [r7, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046b8:	005c      	lsls	r4, r3, #1
 80046ba:	2203      	movs	r2, #3
 80046bc:	40a2      	lsls	r2, r4
 80046be:	6804      	ldr	r4, [r0, #0]
 80046c0:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046c2:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046c4:	4014      	ands	r4, r2
 80046c6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80046ca:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046cc:	f003 0407 	and.w	r4, r3, #7
 80046d0:	6a37      	ldr	r7, [r6, #32]
 80046d2:	00a4      	lsls	r4, r4, #2
 80046d4:	f04f 0c0f 	mov.w	ip, #15
 80046d8:	fa0c f404 	lsl.w	r4, ip, r4
 80046dc:	ea27 0404 	bic.w	r4, r7, r4
 80046e0:	6234      	str	r4, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046e2:	68c4      	ldr	r4, [r0, #12]
 80046e4:	4014      	ands	r4, r2
 80046e6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e8:	6844      	ldr	r4, [r0, #4]
 80046ea:	ea24 0505 	bic.w	r5, r4, r5
 80046ee:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f0:	6884      	ldr	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f2:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f4:	4022      	ands	r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f6:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f8:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fa:	d190      	bne.n	800461e <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 80046fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004700:	2402      	movs	r4, #2
 8004702:	fa04 f202 	lsl.w	r2, r4, r2
 8004706:	e7bc      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004708:	2403      	movs	r4, #3
 800470a:	fa04 f202 	lsl.w	r2, r4, r2
 800470e:	e7b8      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004710:	2404      	movs	r4, #4
 8004712:	fa04 f202 	lsl.w	r2, r4, r2
 8004716:	e7b4      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004718:	2405      	movs	r4, #5
 800471a:	fa04 f202 	lsl.w	r2, r4, r2
 800471e:	e7b0      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004720:	2406      	movs	r4, #6
 8004722:	fa04 f202 	lsl.w	r2, r4, r2
 8004726:	e7ac      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004728:	2407      	movs	r4, #7
 800472a:	fa04 f202 	lsl.w	r2, r4, r2
 800472e:	e7a8      	b.n	8004682 <HAL_GPIO_DeInit+0x82>
 8004730:	40020c00 	.word	0x40020c00
 8004734:	40021000 	.word	0x40021000
 8004738:	40021400 	.word	0x40021400
 800473c:	40021800 	.word	0x40021800
 8004740:	40021c00 	.word	0x40021c00
 8004744:	40020000 	.word	0x40020000
 8004748:	40013c00 	.word	0x40013c00
 800474c:	40020400 	.word	0x40020400
 8004750:	40020800 	.word	0x40020800

08004754 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004754:	6903      	ldr	r3, [r0, #16]
 8004756:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004758:	bf14      	ite	ne
 800475a:	2001      	movne	r0, #1
 800475c:	2000      	moveq	r0, #0
 800475e:	4770      	bx	lr

08004760 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004760:	b902      	cbnz	r2, 8004764 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004762:	0409      	lsls	r1, r1, #16
 8004764:	6181      	str	r1, [r0, #24]
  }
}
 8004766:	4770      	bx	lr

08004768 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004768:	6943      	ldr	r3, [r0, #20]
 800476a:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800476e:	bf08      	it	eq
 8004770:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8004772:	6181      	str	r1, [r0, #24]
  }
}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004778:	2800      	cmp	r0, #0
 800477a:	f000 809f 	beq.w	80048bc <HAL_I2C_Init+0x144>
{
 800477e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004780:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004784:	4604      	mov	r4, r0
 8004786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 808f 	beq.w	80048ae <HAL_I2C_Init+0x136>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004790:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b0:	f002 fa0e 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047b4:	6861      	ldr	r1, [r4, #4]
 80047b6:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <HAL_I2C_Init+0x16c>)
 80047b8:	4299      	cmp	r1, r3
 80047ba:	d84b      	bhi.n	8004854 <HAL_I2C_Init+0xdc>
 80047bc:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_I2C_Init+0x170>)
 80047be:	4298      	cmp	r0, r3
 80047c0:	d97a      	bls.n	80048b8 <HAL_I2C_Init+0x140>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047c2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80047c4:	4b49      	ldr	r3, [pc, #292]	; (80048ec <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047c6:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80047c8:	fba3 6300 	umull	r6, r3, r3, r0
 80047cc:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ce:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80047d2:	431d      	orrs	r5, r3
 80047d4:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047d6:	6a15      	ldr	r5, [r2, #32]
 80047d8:	3301      	adds	r3, #1
 80047da:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80047de:	432b      	orrs	r3, r5
 80047e0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e2:	69d5      	ldr	r5, [r2, #28]
 80047e4:	0049      	lsls	r1, r1, #1
 80047e6:	1e43      	subs	r3, r0, #1
 80047e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ec:	3301      	adds	r3, #1
 80047ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f2:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf38      	it	cc
 80047fa:	2304      	movcc	r3, #4
 80047fc:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004800:	432b      	orrs	r3, r5
 8004802:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004804:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8004808:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800480a:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800480c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004810:	432b      	orrs	r3, r5
 8004812:	4303      	orrs	r3, r0
 8004814:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004816:	6890      	ldr	r0, [r2, #8]
 8004818:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800481a:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800481c:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8004820:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004824:	4329      	orrs	r1, r5
 8004826:	4301      	orrs	r1, r0
 8004828:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800482a:	68d1      	ldr	r1, [r2, #12]
 800482c:	69a0      	ldr	r0, [r4, #24]
 800482e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004832:	4303      	orrs	r3, r0
 8004834:	430b      	orrs	r3, r1
 8004836:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004838:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483a:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800483c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8004840:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8004842:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8004844:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004846:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004848:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004854:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_I2C_Init+0x178>)
 8004856:	4298      	cmp	r0, r3
 8004858:	d92e      	bls.n	80048b8 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800485a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800485c:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800485e:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004860:	4f24      	ldr	r7, [pc, #144]	; (80048f4 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8004862:	fba3 5300 	umull	r5, r3, r3, r0
 8004866:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004868:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800486c:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800486e:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004872:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004874:	fb03 f305 	mul.w	r3, r3, r5
 8004878:	fba7 5303 	umull	r5, r3, r7, r3
 800487c:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800487e:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004886:	3301      	adds	r3, #1
 8004888:	432b      	orrs	r3, r5
 800488a:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800488c:	69d5      	ldr	r5, [r2, #28]
 800488e:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8004892:	3801      	subs	r0, #1
 8004894:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004898:	b996      	cbnz	r6, 80048c0 <HAL_I2C_Init+0x148>
 800489a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800489e:	fbb0 f0f1 	udiv	r0, r0, r1
 80048a2:	3001      	adds	r0, #1
 80048a4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80048a8:	b9c0      	cbnz	r0, 80048dc <HAL_I2C_Init+0x164>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e7a8      	b.n	8004800 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 80048ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80048b2:	f7ff f8c1 	bl	8003a38 <HAL_I2C_MspInit>
 80048b6:	e76b      	b.n	8004790 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80048b8:	2001      	movs	r0, #1
}
 80048ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80048bc:	2001      	movs	r0, #1
}
 80048be:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80048c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80048c8:	fbb0 f0f1 	udiv	r0, r0, r1
 80048cc:	3001      	adds	r0, #1
 80048ce:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d0e9      	beq.n	80048aa <HAL_I2C_Init+0x132>
 80048d6:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 80048da:	e791      	b.n	8004800 <HAL_I2C_Init+0x88>
 80048dc:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 80048e0:	e78e      	b.n	8004800 <HAL_I2C_Init+0x88>
 80048e2:	bf00      	nop
 80048e4:	000186a0 	.word	0x000186a0
 80048e8:	001e847f 	.word	0x001e847f
 80048ec:	431bde83 	.word	0x431bde83
 80048f0:	003d08ff 	.word	0x003d08ff
 80048f4:	10624dd3 	.word	0x10624dd3

080048f8 <HAL_I2C_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f8:	b1b0      	cbz	r0, 8004928 <HAL_I2C_DeInit+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80048fa:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80048fc:	2324      	movs	r3, #36	; 0x24
{
 80048fe:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004900:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004904:	6813      	ldr	r3, [r2, #0]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	4604      	mov	r4, r0
 800490c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800490e:	f7ff f91b 	bl	8003b48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004912:	2300      	movs	r3, #0
 8004914:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode          = HAL_I2C_MODE_NONE;

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004916:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 800491a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800491e:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 8004920:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004922:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004926:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
}
 800492a:	4770      	bx	lr

0800492c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	4604      	mov	r4, r0
 8004932:	b082      	sub	sp, #8
 8004934:	4699      	mov	r9, r3
 8004936:	460f      	mov	r7, r1
 8004938:	4690      	mov	r8, r2
 800493a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800493c:	f7ff fab8 	bl	8003eb0 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004940:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004944:	2b20      	cmp	r3, #32
 8004946:	d003      	beq.n	8004950 <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8004948:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 800494a:	b002      	add	sp, #8
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	4606      	mov	r6, r0
 8004952:	e005      	b.n	8004960 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004954:	f7ff faac 	bl	8003eb0 <HAL_GetTick>
 8004958:	1b80      	subs	r0, r0, r6
 800495a:	2819      	cmp	r0, #25
 800495c:	f200 80e1 	bhi.w	8004b22 <HAL_I2C_Master_Transmit+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	43d2      	mvns	r2, r2
 8004966:	f012 0a02 	ands.w	sl, r2, #2
 800496a:	d0f3      	beq.n	8004954 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800496c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004970:	2a01      	cmp	r2, #1
 8004972:	d0e9      	beq.n	8004948 <HAL_I2C_Master_Transmit+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004974:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8004976:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004978:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 800497a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800497e:	d402      	bmi.n	8004986 <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004986:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004988:	48a0      	ldr	r0, [pc, #640]	; (8004c0c <HAL_I2C_Master_Transmit+0x2e0>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800498a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004990:	2221      	movs	r2, #33	; 0x21
 8004992:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004996:	2210      	movs	r2, #16
 8004998:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800499c:	2200      	movs	r2, #0
 800499e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80049a0:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049a4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a6:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80049aa:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ae:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 80049b0:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049b2:	d071      	beq.n	8004a98 <HAL_I2C_Master_Transmit+0x16c>
 80049b4:	2a01      	cmp	r2, #1
 80049b6:	d06f      	beq.n	8004a98 <HAL_I2C_Master_Transmit+0x16c>
 80049b8:	4282      	cmp	r2, r0
 80049ba:	d06d      	beq.n	8004a98 <HAL_I2C_Master_Transmit+0x16c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049be:	2a12      	cmp	r2, #18
 80049c0:	d06a      	beq.n	8004a98 <HAL_I2C_Master_Transmit+0x16c>
 80049c2:	1c68      	adds	r0, r5, #1
 80049c4:	f040 808b 	bne.w	8004ade <HAL_I2C_Master_Transmit+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	07d1      	lsls	r1, r2, #31
 80049cc:	d5fc      	bpl.n	80049c8 <HAL_I2C_Master_Transmit+0x9c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049ce:	6922      	ldr	r2, [r4, #16]
 80049d0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80049d4:	f040 80c9 	bne.w	8004b6a <HAL_I2C_Master_Transmit+0x23e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d8:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80049dc:	611f      	str	r7, [r3, #16]
 80049de:	1c6f      	adds	r7, r5, #1
 80049e0:	d004      	beq.n	80049ec <HAL_I2C_Master_Transmit+0xc0>
 80049e2:	e0e9      	b.n	8004bb8 <HAL_I2C_Master_Transmit+0x28c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	0551      	lsls	r1, r2, #21
 80049e8:	f100 80a9 	bmi.w	8004b3e <HAL_I2C_Master_Transmit+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	0790      	lsls	r0, r2, #30
 80049f0:	d5f8      	bpl.n	80049e4 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f2:	2200      	movs	r2, #0
 80049f4:	9201      	str	r2, [sp, #4]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	9201      	str	r2, [sp, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	9201      	str	r2, [sp, #4]
 80049fe:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8004a00:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004a02:	2a00      	cmp	r2, #0
 8004a04:	f000 80e7 	beq.w	8004bd6 <HAL_I2C_Master_Transmit+0x2aa>
 8004a08:	1c68      	adds	r0, r5, #1
 8004a0a:	d003      	beq.n	8004a14 <HAL_I2C_Master_Transmit+0xe8>
 8004a0c:	e049      	b.n	8004aa2 <HAL_I2C_Master_Transmit+0x176>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	0552      	lsls	r2, r2, #21
 8004a12:	d42a      	bmi.n	8004a6a <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	0611      	lsls	r1, r2, #24
 8004a18:	d5f9      	bpl.n	8004a0e <HAL_I2C_Master_Transmit+0xe2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1a:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004a1c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	4638      	mov	r0, r7
      hi2c->XferSize--;
 8004a22:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004a2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004a2e:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004a30:	3a01      	subs	r2, #1
 8004a32:	b292      	uxth	r2, r2
 8004a34:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a36:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8004a38:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a3a:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8004a3c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a3e:	d50c      	bpl.n	8004a5a <HAL_I2C_Master_Transmit+0x12e>
 8004a40:	b159      	cbz	r1, 8004a5a <HAL_I2C_Master_Transmit+0x12e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a42:	787a      	ldrb	r2, [r7, #1]
 8004a44:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004a46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a48:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8004a4a:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8004a4e:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8004a50:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8004a52:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004a56:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004a58:	8562      	strh	r2, [r4, #42]	; 0x2a
 8004a5a:	1c6f      	adds	r7, r5, #1
 8004a5c:	d130      	bne.n	8004ac0 <HAL_I2C_Master_Transmit+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	0750      	lsls	r0, r2, #29
 8004a62:	d4cd      	bmi.n	8004a00 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	0551      	lsls	r1, r2, #21
 8004a68:	d5f9      	bpl.n	8004a5e <HAL_I2C_Master_Transmit+0x132>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a76:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a80:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a84:	f043 0304 	orr.w	r3, r3, #4
 8004a88:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d07e      	beq.n	8004b8e <HAL_I2C_Master_Transmit+0x262>
      return HAL_ERROR;
 8004a90:	2001      	movs	r0, #1
}
 8004a92:	b002      	add	sp, #8
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e78f      	b.n	80049c2 <HAL_I2C_Master_Transmit+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	0617      	lsls	r7, r2, #24
 8004aa6:	d4b8      	bmi.n	8004a1a <HAL_I2C_Master_Transmit+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	0557      	lsls	r7, r2, #21
 8004aac:	d4dd      	bmi.n	8004a6a <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7ff f9ff 	bl	8003eb0 <HAL_GetTick>
 8004ab2:	1b80      	subs	r0, r0, r6
 8004ab4:	4285      	cmp	r5, r0
 8004ab6:	d371      	bcc.n	8004b9c <HAL_I2C_Master_Transmit+0x270>
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	d06f      	beq.n	8004b9c <HAL_I2C_Master_Transmit+0x270>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	e7a3      	b.n	8004a08 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	0752      	lsls	r2, r2, #29
 8004ac4:	d49c      	bmi.n	8004a00 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	0552      	lsls	r2, r2, #21
 8004aca:	d4ce      	bmi.n	8004a6a <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7ff f9f0 	bl	8003eb0 <HAL_GetTick>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	4285      	cmp	r5, r0
 8004ad4:	d362      	bcc.n	8004b9c <HAL_I2C_Master_Transmit+0x270>
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	d060      	beq.n	8004b9c <HAL_I2C_Master_Transmit+0x270>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	e7bd      	b.n	8004a5a <HAL_I2C_Master_Transmit+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	07d2      	lsls	r2, r2, #31
 8004ae2:	f53f af74 	bmi.w	80049ce <HAL_I2C_Master_Transmit+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7ff f9e3 	bl	8003eb0 <HAL_GetTick>
 8004aea:	1b80      	subs	r0, r0, r6
 8004aec:	4285      	cmp	r5, r0
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	d302      	bcc.n	8004af8 <HAL_I2C_Master_Transmit+0x1cc>
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	f47f af65 	bne.w	80049c2 <HAL_I2C_Master_Transmit+0x96>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004af8:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004afa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004afc:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004afe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b02:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b06:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b08:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	f042 0220 	orr.w	r2, r2, #32
 8004b10:	6422      	str	r2, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	05dd      	lsls	r5, r3, #23
 8004b16:	d5bb      	bpl.n	8004a90 <HAL_I2C_Master_Transmit+0x164>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1c:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e713      	b.n	800494a <HAL_I2C_Master_Transmit+0x1e>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b22:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b24:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b2c:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b32:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b36:	f043 0320 	orr.w	r3, r3, #32
 8004b3a:	6423      	str	r3, [r4, #64]	; 0x40
 8004b3c:	e704      	b.n	8004948 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b40:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b42:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b44:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004b4c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4e:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b50:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b52:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b56:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004b5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004b66:	2001      	movs	r0, #1
 8004b68:	e6ef      	b.n	800494a <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b6a:	11fa      	asrs	r2, r7, #7
 8004b6c:	f002 0206 	and.w	r2, r2, #6
 8004b70:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004b74:	611a      	str	r2, [r3, #16]
 8004b76:	1c69      	adds	r1, r5, #1
 8004b78:	d003      	beq.n	8004b82 <HAL_I2C_Master_Transmit+0x256>
 8004b7a:	e039      	b.n	8004bf0 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	0550      	lsls	r0, r2, #21
 8004b80:	d4dd      	bmi.n	8004b3e <HAL_I2C_Master_Transmit+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	0712      	lsls	r2, r2, #28
 8004b86:	d5f9      	bpl.n	8004b7c <HAL_I2C_Master_Transmit+0x250>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b88:	b2ff      	uxtb	r7, r7
 8004b8a:	611f      	str	r7, [r3, #16]
 8004b8c:	e727      	b.n	80049de <HAL_I2C_Master_Transmit+0xb2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b96:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004b98:	2001      	movs	r0, #1
 8004b9a:	e6d6      	b.n	800494a <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b9c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b9e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ba0:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ba2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ba6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004bac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	6423      	str	r3, [r4, #64]	; 0x40
 8004bb6:	e768      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	0792      	lsls	r2, r2, #30
 8004bbc:	f53f af19 	bmi.w	80049f2 <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	0552      	lsls	r2, r2, #21
 8004bc4:	d4bb      	bmi.n	8004b3e <HAL_I2C_Master_Transmit+0x212>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc6:	f7ff f973 	bl	8003eb0 <HAL_GetTick>
 8004bca:	1b80      	subs	r0, r0, r6
 8004bcc:	4285      	cmp	r5, r0
 8004bce:	d31f      	bcc.n	8004c10 <HAL_I2C_Master_Transmit+0x2e4>
 8004bd0:	b1f5      	cbz	r5, 8004c10 <HAL_I2C_Master_Transmit+0x2e4>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	e703      	b.n	80049de <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	6819      	ldr	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd8:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004bde:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 8004be0:	4610      	mov	r0, r2
    hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004be6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 8004bee:	e6ac      	b.n	800494a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	0711      	lsls	r1, r2, #28
 8004bf4:	d4c8      	bmi.n	8004b88 <HAL_I2C_Master_Transmit+0x25c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	0550      	lsls	r0, r2, #21
 8004bfa:	d4a0      	bmi.n	8004b3e <HAL_I2C_Master_Transmit+0x212>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7ff f958 	bl	8003eb0 <HAL_GetTick>
 8004c00:	1b80      	subs	r0, r0, r6
 8004c02:	4285      	cmp	r5, r0
 8004c04:	d304      	bcc.n	8004c10 <HAL_I2C_Master_Transmit+0x2e4>
 8004c06:	b11d      	cbz	r5, 8004c10 <HAL_I2C_Master_Transmit+0x2e4>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	e7b4      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x24a>
 8004c0c:	ffff0000 	.word	0xffff0000
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c10:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c12:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c20:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	f043 0320 	orr.w	r3, r3, #32
 8004c28:	6423      	str	r3, [r4, #64]	; 0x40
 8004c2a:	e731      	b.n	8004a90 <HAL_I2C_Master_Transmit+0x164>

08004c2c <HAL_I2C_Master_Receive>:
{
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	4604      	mov	r4, r0
 8004c32:	b086      	sub	sp, #24
 8004c34:	4699      	mov	r9, r3
 8004c36:	460f      	mov	r7, r1
 8004c38:	4690      	mov	r8, r2
 8004c3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff f938 	bl	8003eb0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c40:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d003      	beq.n	8004c50 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8004c48:	2002      	movs	r0, #2
}
 8004c4a:	b006      	add	sp, #24
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	4606      	mov	r6, r0
 8004c52:	e005      	b.n	8004c60 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c54:	f7ff f92c 	bl	8003eb0 <HAL_GetTick>
 8004c58:	1b80      	subs	r0, r0, r6
 8004c5a:	2819      	cmp	r0, #25
 8004c5c:	f200 808c 	bhi.w	8004d78 <HAL_I2C_Master_Receive+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	43d2      	mvns	r2, r2
 8004c66:	f012 0a02 	ands.w	sl, r2, #2
 8004c6a:	d0f3      	beq.n	8004c54 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8004c6c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004c70:	2a01      	cmp	r2, #1
 8004c72:	d0e9      	beq.n	8004c48 <HAL_I2C_Master_Receive+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c74:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8004c76:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c78:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 8004c7a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c7e:	d402      	bmi.n	8004c86 <HAL_I2C_Master_Receive+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c86:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c88:	4999      	ldr	r1, [pc, #612]	; (8004ef0 <HAL_I2C_Master_Receive+0x2c4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c90:	2222      	movs	r2, #34	; 0x22
 8004c92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c96:	2210      	movs	r2, #16
 8004c98:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004ca0:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca6:	62e1      	str	r1, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ca8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	681a      	ldr	r2, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8004cac:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cb4:	2908      	cmp	r1, #8
    hi2c->XferSize    = hi2c->XferCount;
 8004cb6:	8520      	strh	r0, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb8:	601a      	str	r2, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cba:	d034      	beq.n	8004d26 <HAL_I2C_Master_Receive+0xfa>
 8004cbc:	2901      	cmp	r1, #1
 8004cbe:	d032      	beq.n	8004d26 <HAL_I2C_Master_Receive+0xfa>
 8004cc0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8004cc4:	d02f      	beq.n	8004d26 <HAL_I2C_Master_Receive+0xfa>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004cc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cc8:	2a11      	cmp	r2, #17
 8004cca:	d02c      	beq.n	8004d26 <HAL_I2C_Master_Receive+0xfa>
 8004ccc:	1c69      	adds	r1, r5, #1
 8004cce:	d12f      	bne.n	8004d30 <HAL_I2C_Master_Receive+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	07d2      	lsls	r2, r2, #31
 8004cd4:	d5fc      	bpl.n	8004cd0 <HAL_I2C_Master_Receive+0xa4>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd6:	6922      	ldr	r2, [r4, #16]
 8004cd8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004cdc:	f040 80f1 	bne.w	8004ec2 <HAL_I2C_Master_Receive+0x296>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ce0:	f047 0201 	orr.w	r2, r7, #1
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	611a      	str	r2, [r3, #16]
 8004ce8:	1c6a      	adds	r2, r5, #1
 8004cea:	d003      	beq.n	8004cf4 <HAL_I2C_Master_Receive+0xc8>
 8004cec:	e19f      	b.n	800502e <HAL_I2C_Master_Receive+0x402>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	0550      	lsls	r0, r2, #21
 8004cf2:	d44f      	bmi.n	8004d94 <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	0797      	lsls	r7, r2, #30
 8004cf8:	d5f9      	bpl.n	8004cee <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 8004cfa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	d15f      	bne.n	8004dc0 <HAL_I2C_Master_Receive+0x194>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d00:	9201      	str	r2, [sp, #4]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	9201      	str	r2, [sp, #4]
 8004d06:	699a      	ldr	r2, [r3, #24]
 8004d08:	9201      	str	r2, [sp, #4]
 8004d0a:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d12:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004d16:	2320      	movs	r3, #32
 8004d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004d1c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8004d24:	e791      	b.n	8004c4a <HAL_I2C_Master_Receive+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e7cd      	b.n	8004ccc <HAL_I2C_Master_Receive+0xa0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	07d0      	lsls	r0, r2, #31
 8004d34:	d4cf      	bmi.n	8004cd6 <HAL_I2C_Master_Receive+0xaa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7ff f8bb 	bl	8003eb0 <HAL_GetTick>
 8004d3a:	1b80      	subs	r0, r0, r6
 8004d3c:	4285      	cmp	r5, r0
 8004d3e:	f0c0 81ba 	bcc.w	80050b6 <HAL_I2C_Master_Receive+0x48a>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	d1c0      	bne.n	8004ccc <HAL_I2C_Master_Receive+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d4a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d4c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d4e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d54:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d5a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d5e:	f043 0320 	orr.w	r3, r3, #32
 8004d62:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	680b      	ldr	r3, [r1, #0]
 8004d66:	05d8      	lsls	r0, r3, #23
 8004d68:	d502      	bpl.n	8004d70 <HAL_I2C_Master_Receive+0x144>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6e:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004d70:	2001      	movs	r0, #1
}
 8004d72:	b006      	add	sp, #24
 8004d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d78:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d7a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d82:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d88:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6423      	str	r3, [r4, #64]	; 0x40
 8004d92:	e759      	b.n	8004c48 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d96:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d98:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004da2:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da4:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004db2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	e744      	b.n	8004c4a <HAL_I2C_Master_Receive+0x1e>
    else if (hi2c->XferSize == 1U)
 8004dc0:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	6819      	ldr	r1, [r3, #0]
    else if (hi2c->XferSize == 1U)
 8004dc4:	f000 80c9 	beq.w	8004f5a <HAL_I2C_Master_Receive+0x32e>
    else if (hi2c->XferSize == 2U)
 8004dc8:	2a02      	cmp	r2, #2
 8004dca:	f000 8152 	beq.w	8005072 <HAL_I2C_Master_Receive+0x446>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd2:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	9004      	str	r0, [sp, #16]
 8004dd8:	6959      	ldr	r1, [r3, #20]
 8004dda:	9104      	str	r1, [sp, #16]
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	9104      	str	r1, [sp, #16]
 8004de0:	9904      	ldr	r1, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8004de2:	2a03      	cmp	r2, #3
 8004de4:	d848      	bhi.n	8004e78 <HAL_I2C_Master_Receive+0x24c>
        if (hi2c->XferSize == 1U)
 8004de6:	2a01      	cmp	r2, #1
 8004de8:	f000 80ef 	beq.w	8004fca <HAL_I2C_Master_Receive+0x39e>
        else if (hi2c->XferSize == 2U)
 8004dec:	2a02      	cmp	r2, #2
 8004dee:	f000 80a8 	beq.w	8004f42 <HAL_I2C_Master_Receive+0x316>
 8004df2:	1c68      	adds	r0, r5, #1
 8004df4:	f040 80c0 	bne.w	8004f78 <HAL_I2C_Master_Receive+0x34c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	0751      	lsls	r1, r2, #29
 8004dfc:	d5fc      	bpl.n	8004df8 <HAL_I2C_Master_Receive+0x1cc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfe:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e00:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e06:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004e0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004e0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004e16:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004e18:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004e1a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004e1c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e1e:	8522      	strh	r2, [r4, #40]	; 0x28
 8004e20:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	f040 80b4 	bne.w	8004f90 <HAL_I2C_Master_Receive+0x364>
 8004e28:	6953      	ldr	r3, [r2, #20]
 8004e2a:	075f      	lsls	r7, r3, #29
 8004e2c:	d5fc      	bpl.n	8004e28 <HAL_I2C_Master_Receive+0x1fc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2e:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e36:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	6913      	ldr	r3, [r2, #16]
 8004e3a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004e3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	6909      	ldr	r1, [r1, #16]
          hi2c->pBuffPtr++;
 8004e4c:	1c47      	adds	r7, r0, #1
          hi2c->XferSize--;
 8004e4e:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8004e50:	6267      	str	r7, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e52:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8004e56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004e58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004e5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e5c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004e5e:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8004e60:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004e62:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004e64:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004e66:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004e68:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004e6a:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	f43f af51 	beq.w	8004d14 <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 8004e72:	2a03      	cmp	r2, #3
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	d9b6      	bls.n	8004de6 <HAL_I2C_Master_Receive+0x1ba>
 8004e78:	b95d      	cbnz	r5, 8004e92 <HAL_I2C_Master_Receive+0x266>
 8004e7a:	e0ca      	b.n	8005012 <HAL_I2C_Master_Receive+0x3e6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	06d7      	lsls	r7, r2, #27
 8004e80:	f100 80b5 	bmi.w	8004fee <HAL_I2C_Master_Receive+0x3c2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e84:	f7ff f814 	bl	8003eb0 <HAL_GetTick>
 8004e88:	1b80      	subs	r0, r0, r6
 8004e8a:	4285      	cmp	r5, r0
 8004e8c:	f0c0 808c 	bcc.w	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004e90:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	0652      	lsls	r2, r2, #25
 8004e96:	d5f1      	bpl.n	8004e7c <HAL_I2C_Master_Receive+0x250>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004e9e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea0:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8004ea2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004ea4:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004ea6:	3901      	subs	r1, #1
 8004ea8:	b289      	uxth	r1, r1
 8004eaa:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eac:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004eb2:	1c47      	adds	r7, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eb4:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 8004eb6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004eb8:	6267      	str	r7, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eba:	d5d7      	bpl.n	8004e6c <HAL_I2C_Master_Receive+0x240>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	7043      	strb	r3, [r0, #1]
 8004ec0:	e7c9      	b.n	8004e56 <HAL_I2C_Master_Receive+0x22a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ec2:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8004ec6:	f008 0806 	and.w	r8, r8, #6
 8004eca:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8004ece:	611a      	str	r2, [r3, #16]
 8004ed0:	1c6a      	adds	r2, r5, #1
 8004ed2:	d004      	beq.n	8004ede <HAL_I2C_Master_Receive+0x2b2>
 8004ed4:	e0bc      	b.n	8005050 <HAL_I2C_Master_Receive+0x424>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	0551      	lsls	r1, r2, #21
 8004eda:	f53f af5b 	bmi.w	8004d94 <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	0710      	lsls	r0, r2, #28
 8004ee2:	d5f8      	bpl.n	8004ed6 <HAL_I2C_Master_Receive+0x2aa>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ee4:	b2ff      	uxtb	r7, r7
 8004ee6:	611f      	str	r7, [r3, #16]
 8004ee8:	1c69      	adds	r1, r5, #1
 8004eea:	d007      	beq.n	8004efc <HAL_I2C_Master_Receive+0x2d0>
 8004eec:	e0d0      	b.n	8005090 <HAL_I2C_Master_Receive+0x464>
 8004eee:	bf00      	nop
 8004ef0:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	0557      	lsls	r7, r2, #21
 8004ef8:	f53f af4c 	bmi.w	8004d94 <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	0792      	lsls	r2, r2, #30
 8004f00:	d5f8      	bpl.n	8004ef4 <HAL_I2C_Master_Receive+0x2c8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2200      	movs	r2, #0
 8004f04:	9205      	str	r2, [sp, #20]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	9205      	str	r2, [sp, #20]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	9205      	str	r2, [sp, #20]
 8004f0e:	9a05      	ldr	r2, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	1c6a      	adds	r2, r5, #1
 8004f1a:	f040 80ce 	bne.w	80050ba <HAL_I2C_Master_Receive+0x48e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	07d7      	lsls	r7, r2, #31
 8004f22:	d5fc      	bpl.n	8004f1e <HAL_I2C_Master_Receive+0x2f2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f24:	f048 02f1 	orr.w	r2, r8, #241	; 0xf1
 8004f28:	611a      	str	r2, [r3, #16]
 8004f2a:	e6dd      	b.n	8004ce8 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	0757      	lsls	r7, r2, #29
 8004f30:	d40c      	bmi.n	8004f4c <HAL_I2C_Master_Receive+0x320>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f32:	f7fe ffbd 	bl	8003eb0 <HAL_GetTick>
 8004f36:	1b80      	subs	r0, r0, r6
 8004f38:	4285      	cmp	r5, r0
 8004f3a:	d335      	bcc.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	d033      	beq.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	1c69      	adds	r1, r5, #1
 8004f44:	d1f2      	bne.n	8004f2c <HAL_I2C_Master_Receive+0x300>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	0752      	lsls	r2, r2, #29
 8004f4a:	d5fc      	bpl.n	8004f46 <HAL_I2C_Master_Receive+0x31a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f54:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	e76f      	b.n	8004e3a <HAL_I2C_Master_Receive+0x20e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2000      	movs	r0, #0
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f60:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	9002      	str	r0, [sp, #8]
 8004f64:	6959      	ldr	r1, [r3, #20]
 8004f66:	9102      	str	r1, [sp, #8]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	9102      	str	r1, [sp, #8]
 8004f6c:	9902      	ldr	r1, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004f74:	6019      	str	r1, [r3, #0]
 8004f76:	e734      	b.n	8004de2 <HAL_I2C_Master_Receive+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	0752      	lsls	r2, r2, #29
 8004f7c:	f53f af3f 	bmi.w	8004dfe <HAL_I2C_Master_Receive+0x1d2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fe ff96 	bl	8003eb0 <HAL_GetTick>
 8004f84:	1b80      	subs	r0, r0, r6
 8004f86:	4285      	cmp	r5, r0
 8004f88:	d30e      	bcc.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004f8a:	b16d      	cbz	r5, 8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	e730      	b.n	8004df2 <HAL_I2C_Master_Receive+0x1c6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f90:	6953      	ldr	r3, [r2, #20]
 8004f92:	0758      	lsls	r0, r3, #29
 8004f94:	f53f af4b 	bmi.w	8004e2e <HAL_I2C_Master_Receive+0x202>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f98:	f7fe ff8a 	bl	8003eb0 <HAL_GetTick>
 8004f9c:	1b80      	subs	r0, r0, r6
 8004f9e:	4285      	cmp	r5, r0
 8004fa0:	d302      	bcc.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	f47f af3c 	bne.w	8004e20 <HAL_I2C_Master_Receive+0x1f4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fa8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004faa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fac:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fb2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fb8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8004fc0:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fc2:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004fc4:	b006      	add	sp, #24
 8004fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fca:	b94d      	cbnz	r5, 8004fe0 <HAL_I2C_Master_Receive+0x3b4>
 8004fcc:	e02b      	b.n	8005026 <HAL_I2C_Master_Receive+0x3fa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	06d7      	lsls	r7, r2, #27
 8004fd2:	d40c      	bmi.n	8004fee <HAL_I2C_Master_Receive+0x3c2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd4:	f7fe ff6c 	bl	8003eb0 <HAL_GetTick>
 8004fd8:	1b80      	subs	r0, r0, r6
 8004fda:	4285      	cmp	r5, r0
 8004fdc:	d3e4      	bcc.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8004fde:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	0652      	lsls	r2, r2, #25
 8004fe4:	d5f3      	bpl.n	8004fce <HAL_I2C_Master_Receive+0x3a2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	7013      	strb	r3, [r2, #0]
 8004fec:	e733      	b.n	8004e56 <HAL_I2C_Master_Receive+0x22a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fee:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff0:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff4:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff6:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff8:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ffa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005002:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005004:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005008:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800500a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800500c:	b006      	add	sp, #24
 800500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	0650      	lsls	r0, r2, #25
 8005016:	f53f af3f 	bmi.w	8004e98 <HAL_I2C_Master_Receive+0x26c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	06d1      	lsls	r1, r2, #27
 800501e:	d4e6      	bmi.n	8004fee <HAL_I2C_Master_Receive+0x3c2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005020:	f7fe ff46 	bl	8003eb0 <HAL_GetTick>
 8005024:	e7c0      	b.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	0650      	lsls	r0, r2, #25
 800502a:	d5f6      	bpl.n	800501a <HAL_I2C_Master_Receive+0x3ee>
 800502c:	e7db      	b.n	8004fe6 <HAL_I2C_Master_Receive+0x3ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	0791      	lsls	r1, r2, #30
 8005032:	f53f ae62 	bmi.w	8004cfa <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	0551      	lsls	r1, r2, #21
 800503a:	f53f aeab 	bmi.w	8004d94 <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fe ff37 	bl	8003eb0 <HAL_GetTick>
 8005042:	1b80      	subs	r0, r0, r6
 8005044:	4285      	cmp	r5, r0
 8005046:	d3af      	bcc.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 8005048:	2d00      	cmp	r5, #0
 800504a:	d0ad      	beq.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	e64b      	b.n	8004ce8 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	0712      	lsls	r2, r2, #28
 8005054:	f53f af46 	bmi.w	8004ee4 <HAL_I2C_Master_Receive+0x2b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	0551      	lsls	r1, r2, #21
 800505c:	f53f ae9a 	bmi.w	8004d94 <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005060:	f7fe ff26 	bl	8003eb0 <HAL_GetTick>
 8005064:	1b80      	subs	r0, r0, r6
 8005066:	4285      	cmp	r5, r0
 8005068:	d39e      	bcc.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 800506a:	2d00      	cmp	r5, #0
 800506c:	d09c      	beq.n	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	e72e      	b.n	8004ed0 <HAL_I2C_Master_Receive+0x2a4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005076:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005078:	6819      	ldr	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005080:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	9003      	str	r0, [sp, #12]
 8005084:	6959      	ldr	r1, [r3, #20]
 8005086:	9103      	str	r1, [sp, #12]
 8005088:	6999      	ldr	r1, [r3, #24]
 800508a:	9103      	str	r1, [sp, #12]
 800508c:	9903      	ldr	r1, [sp, #12]
 800508e:	e6a8      	b.n	8004de2 <HAL_I2C_Master_Receive+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	0790      	lsls	r0, r2, #30
 8005094:	f53f af35 	bmi.w	8004f02 <HAL_I2C_Master_Receive+0x2d6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	0550      	lsls	r0, r2, #21
 800509c:	f53f ae7a 	bmi.w	8004d94 <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a0:	f7fe ff06 	bl	8003eb0 <HAL_GetTick>
 80050a4:	1b80      	subs	r0, r0, r6
 80050a6:	4285      	cmp	r5, r0
 80050a8:	f4ff af7e 	bcc.w	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	f43f af7b 	beq.w	8004fa8 <HAL_I2C_Master_Receive+0x37c>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	e718      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x2bc>
 80050b6:	6821      	ldr	r1, [r4, #0]
 80050b8:	e647      	b.n	8004d4a <HAL_I2C_Master_Receive+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	07d0      	lsls	r0, r2, #31
 80050be:	f53f af31 	bmi.w	8004f24 <HAL_I2C_Master_Receive+0x2f8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fe fef5 	bl	8003eb0 <HAL_GetTick>
 80050c6:	1b80      	subs	r0, r0, r6
 80050c8:	4285      	cmp	r5, r0
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	d302      	bcc.n	80050d4 <HAL_I2C_Master_Receive+0x4a8>
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	f47f af22 	bne.w	8004f18 <HAL_I2C_Master_Receive+0x2ec>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d4:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80050d6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d8:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050de:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80050e4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	6422      	str	r2, [r4, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	05d9      	lsls	r1, r3, #23
 80050f2:	f53f ae3a 	bmi.w	8004d6a <HAL_I2C_Master_Receive+0x13e>
 80050f6:	e63b      	b.n	8004d70 <HAL_I2C_Master_Receive+0x144>

080050f8 <HAL_I2C_Master_Transmit_DMA>:
{
 80050f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fa:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80050fc:	2400      	movs	r4, #0
 80050fe:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005100:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8005104:	2c20      	cmp	r4, #32
 8005106:	d125      	bne.n	8005154 <HAL_I2C_Master_Transmit_DMA+0x5c>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005108:	4c47      	ldr	r4, [pc, #284]	; (8005228 <HAL_I2C_Master_Transmit_DMA+0x130>)
 800510a:	4d48      	ldr	r5, [pc, #288]	; (800522c <HAL_I2C_Master_Transmit_DMA+0x134>)
 800510c:	6824      	ldr	r4, [r4, #0]
 800510e:	08e4      	lsrs	r4, r4, #3
 8005110:	fba5 5404 	umull	r5, r4, r5, r4
 8005114:	0a24      	lsrs	r4, r4, #8
 8005116:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800511a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800511e:	9401      	str	r4, [sp, #4]
 8005120:	e003      	b.n	800512a <HAL_I2C_Master_Transmit_DMA+0x32>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005122:	6804      	ldr	r4, [r0, #0]
 8005124:	69a5      	ldr	r5, [r4, #24]
 8005126:	07ae      	lsls	r6, r5, #30
 8005128:	d517      	bpl.n	800515a <HAL_I2C_Master_Transmit_DMA+0x62>
      count--;
 800512a:	9c01      	ldr	r4, [sp, #4]
 800512c:	3c01      	subs	r4, #1
 800512e:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8005130:	9c01      	ldr	r4, [sp, #4]
 8005132:	2c00      	cmp	r4, #0
 8005134:	d1f5      	bne.n	8005122 <HAL_I2C_Master_Transmit_DMA+0x2a>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005136:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005138:	6304      	str	r4, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513e:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005142:	6c03      	ldr	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005144:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005148:	f043 0320 	orr.w	r3, r3, #32
 800514c:	6403      	str	r3, [r0, #64]	; 0x40
        return HAL_ERROR;
 800514e:	2001      	movs	r0, #1
}
 8005150:	b003      	add	sp, #12
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005154:	2002      	movs	r0, #2
}
 8005156:	b003      	add	sp, #12
 8005158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800515a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 800515e:	2d01      	cmp	r5, #1
 8005160:	d0f8      	beq.n	8005154 <HAL_I2C_Master_Transmit_DMA+0x5c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005162:	6825      	ldr	r5, [r4, #0]
    __HAL_LOCK(hi2c);
 8005164:	2601      	movs	r6, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005166:	07ed      	lsls	r5, r5, #31
    __HAL_LOCK(hi2c);
 8005168:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800516c:	d402      	bmi.n	8005174 <HAL_I2C_Master_Transmit_DMA+0x7c>
      __HAL_I2C_ENABLE(hi2c);
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	4335      	orrs	r5, r6
 8005172:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005174:	6825      	ldr	r5, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005176:	4e2e      	ldr	r6, [pc, #184]	; (8005230 <HAL_I2C_Master_Transmit_DMA+0x138>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005178:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800517c:	6025      	str	r5, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800517e:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005182:	2710      	movs	r7, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005184:	2500      	movs	r5, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005186:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800518a:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518e:	6405      	str	r5, [r0, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005190:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005192:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8005194:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8005196:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005198:	62c6      	str	r6, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800519a:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 800519c:	6441      	str	r1, [r0, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 800519e:	b983      	cbnz	r3, 80051c2 <HAL_I2C_Master_Transmit_DMA+0xca>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a6:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ae:	6022      	str	r2, [r4, #0]
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b0:	6862      	ldr	r2, [r4, #4]
      __HAL_UNLOCK(hi2c);
 80051b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    return HAL_OK;
 80051ba:	4618      	mov	r0, r3
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051bc:	6062      	str	r2, [r4, #4]
}
 80051be:	b003      	add	sp, #12
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c2:	4606      	mov	r6, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80051c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80051c6:	f8df c070 	ldr.w	ip, [pc, #112]	; 8005238 <HAL_I2C_Master_Transmit_DMA+0x140>
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80051ca:	4f1a      	ldr	r7, [pc, #104]	; (8005234 <HAL_I2C_Master_Transmit_DMA+0x13c>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80051cc:	6405      	str	r5, [r0, #64]	; 0x40
 80051ce:	4611      	mov	r1, r2
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80051d0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80051d4:	f104 0210 	add.w	r2, r4, #16
      hi2c->hdmatx->XferAbortCallback = NULL;
 80051d8:	6505      	str	r5, [r0, #80]	; 0x50
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80051da:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80051de:	64c7      	str	r7, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80051e0:	f7fe ffde 	bl	80041a0 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80051e4:	b998      	cbnz	r0, 800520e <HAL_I2C_Master_Transmit_DMA+0x116>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e6:	6833      	ldr	r3, [r6, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ee:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051f8:	685a      	ldr	r2, [r3, #4]
        __HAL_UNLOCK(hi2c);
 80051fa:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005202:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	e7a3      	b.n	8005156 <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 800520e:	2320      	movs	r3, #32
 8005210:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005214:	f886 503e 	strb.w	r5, [r6, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005218:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800521a:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800521e:	f043 0310 	orr.w	r3, r3, #16
 8005222:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005224:	2001      	movs	r0, #1
 8005226:	e796      	b.n	8005156 <HAL_I2C_Master_Transmit_DMA+0x5e>
 8005228:	20000000 	.word	0x20000000
 800522c:	14f8b589 	.word	0x14f8b589
 8005230:	ffff0000 	.word	0xffff0000
 8005234:	08005669 	.word	0x08005669
 8005238:	080056ad 	.word	0x080056ad

0800523c <HAL_I2C_Master_Receive_DMA>:
{
 800523c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8005240:	2400      	movs	r4, #0
 8005242:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005244:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8005248:	2c20      	cmp	r4, #32
 800524a:	d125      	bne.n	8005298 <HAL_I2C_Master_Receive_DMA+0x5c>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800524c:	4c47      	ldr	r4, [pc, #284]	; (800536c <HAL_I2C_Master_Receive_DMA+0x130>)
 800524e:	4d48      	ldr	r5, [pc, #288]	; (8005370 <HAL_I2C_Master_Receive_DMA+0x134>)
 8005250:	6824      	ldr	r4, [r4, #0]
 8005252:	08e4      	lsrs	r4, r4, #3
 8005254:	fba5 5404 	umull	r5, r4, r5, r4
 8005258:	0a24      	lsrs	r4, r4, #8
 800525a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800525e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005262:	9401      	str	r4, [sp, #4]
 8005264:	e003      	b.n	800526e <HAL_I2C_Master_Receive_DMA+0x32>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005266:	6804      	ldr	r4, [r0, #0]
 8005268:	69a5      	ldr	r5, [r4, #24]
 800526a:	07ae      	lsls	r6, r5, #30
 800526c:	d517      	bpl.n	800529e <HAL_I2C_Master_Receive_DMA+0x62>
      count--;
 800526e:	9c01      	ldr	r4, [sp, #4]
 8005270:	3c01      	subs	r4, #1
 8005272:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8005274:	9c01      	ldr	r4, [sp, #4]
 8005276:	2c00      	cmp	r4, #0
 8005278:	d1f5      	bne.n	8005266 <HAL_I2C_Master_Receive_DMA+0x2a>
        hi2c->State               = HAL_I2C_STATE_READY;
 800527a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800527c:	6304      	str	r4, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005282:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	6c03      	ldr	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005288:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528c:	f043 0320 	orr.w	r3, r3, #32
 8005290:	6403      	str	r3, [r0, #64]	; 0x40
        return HAL_ERROR;
 8005292:	2001      	movs	r0, #1
}
 8005294:	b003      	add	sp, #12
 8005296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005298:	2002      	movs	r0, #2
}
 800529a:	b003      	add	sp, #12
 800529c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800529e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80052a2:	2d01      	cmp	r5, #1
 80052a4:	d0f8      	beq.n	8005298 <HAL_I2C_Master_Receive_DMA+0x5c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052a6:	6825      	ldr	r5, [r4, #0]
    __HAL_LOCK(hi2c);
 80052a8:	2601      	movs	r6, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052aa:	07ed      	lsls	r5, r5, #31
    __HAL_LOCK(hi2c);
 80052ac:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b0:	d402      	bmi.n	80052b8 <HAL_I2C_Master_Receive_DMA+0x7c>
      __HAL_I2C_ENABLE(hi2c);
 80052b2:	6825      	ldr	r5, [r4, #0]
 80052b4:	4335      	orrs	r5, r6
 80052b6:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b8:	6825      	ldr	r5, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ba:	4e2e      	ldr	r6, [pc, #184]	; (8005374 <HAL_I2C_Master_Receive_DMA+0x138>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052bc:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80052c0:	6025      	str	r5, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052c2:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052c6:	2710      	movs	r7, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c8:	2500      	movs	r5, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ca:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052ce:	f880 703e 	strb.w	r7, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d2:	6405      	str	r5, [r0, #64]	; 0x40
    hi2c->XferCount   = Size;
 80052d4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80052d8:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80052da:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052dc:	62c6      	str	r6, [r0, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80052de:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80052e0:	6441      	str	r1, [r0, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 80052e2:	b983      	cbnz	r3, 8005306 <HAL_I2C_Master_Receive_DMA+0xca>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ea:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f2:	6022      	str	r2, [r4, #0]
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052f4:	6862      	ldr	r2, [r4, #4]
      __HAL_UNLOCK(hi2c);
 80052f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    return HAL_OK;
 80052fe:	4618      	mov	r0, r3
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005300:	6062      	str	r2, [r4, #4]
}
 8005302:	b003      	add	sp, #12
 8005304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005306:	4606      	mov	r6, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005308:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800530a:	f8df c070 	ldr.w	ip, [pc, #112]	; 800537c <HAL_I2C_Master_Receive_DMA+0x140>
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800530e:	4f1a      	ldr	r7, [pc, #104]	; (8005378 <HAL_I2C_Master_Receive_DMA+0x13c>)
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005310:	6405      	str	r5, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005312:	f104 0110 	add.w	r1, r4, #16
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005316:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
      hi2c->hdmarx->XferAbortCallback = NULL;
 800531a:	6505      	str	r5, [r0, #80]	; 0x50
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800531c:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005320:	64c7      	str	r7, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005322:	f7fe ff3d 	bl	80041a0 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8005326:	b998      	cbnz	r0, 8005350 <HAL_I2C_Master_Receive_DMA+0x114>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005330:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005338:	601a      	str	r2, [r3, #0]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800533a:	685a      	ldr	r2, [r3, #4]
        __HAL_UNLOCK(hi2c);
 800533c:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005340:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005344:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	e7a4      	b.n	800529a <HAL_I2C_Master_Receive_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005350:	2320      	movs	r3, #32
 8005352:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005356:	f886 503e 	strb.w	r5, [r6, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800535a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800535c:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005360:	f043 0310 	orr.w	r3, r3, #16
 8005364:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005366:	2001      	movs	r0, #1
 8005368:	e797      	b.n	800529a <HAL_I2C_Master_Receive_DMA+0x5e>
 800536a:	bf00      	nop
 800536c:	20000000 	.word	0x20000000
 8005370:	14f8b589 	.word	0x14f8b589
 8005374:	ffff0000 	.word	0xffff0000
 8005378:	08005669 	.word	0x08005669
 800537c:	080056ad 	.word	0x080056ad

08005380 <HAL_I2C_IsDeviceReady>:
{
 8005380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005384:	4605      	mov	r5, r0
 8005386:	b083      	sub	sp, #12
 8005388:	461f      	mov	r7, r3
 800538a:	468a      	mov	sl, r1
 800538c:	4693      	mov	fp, r2
  uint32_t tickstart = HAL_GetTick();
 800538e:	f7fe fd8f 	bl	8003eb0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005392:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8005396:	2b20      	cmp	r3, #32
 8005398:	d003      	beq.n	80053a2 <HAL_I2C_IsDeviceReady+0x22>
      return HAL_BUSY;
 800539a:	2002      	movs	r0, #2
}
 800539c:	b003      	add	sp, #12
 800539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a2:	4606      	mov	r6, r0
 80053a4:	e005      	b.n	80053b2 <HAL_I2C_IsDeviceReady+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fe fd83 	bl	8003eb0 <HAL_GetTick>
 80053aa:	1b80      	subs	r0, r0, r6
 80053ac:	2819      	cmp	r0, #25
 80053ae:	f200 80c2 	bhi.w	8005536 <HAL_I2C_IsDeviceReady+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	43d2      	mvns	r2, r2
 80053b8:	f012 0402 	ands.w	r4, r2, #2
 80053bc:	d0f3      	beq.n	80053a6 <HAL_I2C_IsDeviceReady+0x26>
    __HAL_LOCK(hi2c);
 80053be:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80053c2:	2a01      	cmp	r2, #1
 80053c4:	d0e9      	beq.n	800539a <HAL_I2C_IsDeviceReady+0x1a>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053c6:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80053c8:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ca:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 80053cc:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053d0:	f140 80ad 	bpl.w	800552e <HAL_I2C_IsDeviceReady+0x1ae>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d4:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d6:	496d      	ldr	r1, [pc, #436]	; (800558c <HAL_I2C_IsDeviceReady+0x20c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053dc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053de:	2024      	movs	r0, #36	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053e2:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053e6:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ea:	642a      	str	r2, [r5, #64]	; 0x40
  uint32_t I2C_Trials = 1U;
 80053ec:	f04f 0901 	mov.w	r9, #1
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f0:	62e9      	str	r1, [r5, #44]	; 0x2c
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80053f2:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	1c78      	adds	r0, r7, #1
 8005400:	d165      	bne.n	80054ce <HAL_I2C_IsDeviceReady+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	07d1      	lsls	r1, r2, #31
 8005406:	d5fc      	bpl.n	8005402 <HAL_I2C_IsDeviceReady+0x82>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005408:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 800540c:	f7fe fd50 	bl	8003eb0 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005410:	682b      	ldr	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005412:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005414:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005416:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005418:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 800541c:	28a0      	cmp	r0, #160	; 0xa0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800541e:	f002 0202 	and.w	r2, r2, #2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005422:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005426:	d018      	beq.n	800545a <HAL_I2C_IsDeviceReady+0xda>
 8005428:	b9ba      	cbnz	r2, 800545a <HAL_I2C_IsDeviceReady+0xda>
 800542a:	b9b1      	cbnz	r1, 800545a <HAL_I2C_IsDeviceReady+0xda>
 800542c:	2f00      	cmp	r7, #0
 800542e:	d03e      	beq.n	80054ae <HAL_I2C_IsDeviceReady+0x12e>
 8005430:	e001      	b.n	8005436 <HAL_I2C_IsDeviceReady+0xb6>
 8005432:	b992      	cbnz	r2, 800545a <HAL_I2C_IsDeviceReady+0xda>
 8005434:	b989      	cbnz	r1, 800545a <HAL_I2C_IsDeviceReady+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fe fd3b 	bl	8003eb0 <HAL_GetTick>
 800543a:	1b80      	subs	r0, r0, r6
 800543c:	42b8      	cmp	r0, r7
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800543e:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005440:	bf88      	it	hi
 8005442:	f885 803d 	strbhi.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005446:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005448:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800544a:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 800544e:	28a0      	cmp	r0, #160	; 0xa0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005450:	f002 0202 	and.w	r2, r2, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005454:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005458:	d1eb      	bne.n	8005432 <HAL_I2C_IsDeviceReady+0xb2>
      hi2c->State = HAL_I2C_STATE_READY;
 800545a:	2220      	movs	r2, #32
 800545c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005466:	681a      	ldr	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005468:	d172      	bne.n	8005550 <HAL_I2C_IsDeviceReady+0x1d0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005472:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005474:	6159      	str	r1, [r3, #20]
 8005476:	e005      	b.n	8005484 <HAL_I2C_IsDeviceReady+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005478:	f7fe fd1a 	bl	8003eb0 <HAL_GetTick>
 800547c:	1b80      	subs	r0, r0, r6
 800547e:	2819      	cmp	r0, #25
 8005480:	d845      	bhi.n	800550e <HAL_I2C_IsDeviceReady+0x18e>
 8005482:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005484:	699c      	ldr	r4, [r3, #24]
 8005486:	43e4      	mvns	r4, r4
 8005488:	f014 0402 	ands.w	r4, r4, #2
 800548c:	d0f4      	beq.n	8005478 <HAL_I2C_IsDeviceReady+0xf8>
      I2C_Trials++;
 800548e:	f109 0901 	add.w	r9, r9, #1
    while (I2C_Trials < Trials);
 8005492:	45d9      	cmp	r9, fp
 8005494:	d3af      	bcc.n	80053f6 <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8005498:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800549a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800549e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 80054a2:	2001      	movs	r0, #1
 80054a4:	e77a      	b.n	800539c <HAL_I2C_IsDeviceReady+0x1c>
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	d1d7      	bne.n	800545a <HAL_I2C_IsDeviceReady+0xda>
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d1d5      	bne.n	800545a <HAL_I2C_IsDeviceReady+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fe fcff 	bl	8003eb0 <HAL_GetTick>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054b2:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80054b4:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054b8:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054ba:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054bc:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 80054c0:	28a0      	cmp	r0, #160	; 0xa0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054c2:	f002 0202 	and.w	r2, r2, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054c6:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054ca:	d1ec      	bne.n	80054a6 <HAL_I2C_IsDeviceReady+0x126>
 80054cc:	e7c5      	b.n	800545a <HAL_I2C_IsDeviceReady+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	07d2      	lsls	r2, r2, #31
 80054d2:	d499      	bmi.n	8005408 <HAL_I2C_IsDeviceReady+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d4:	f7fe fcec 	bl	8003eb0 <HAL_GetTick>
 80054d8:	1b80      	subs	r0, r0, r6
 80054da:	4287      	cmp	r7, r0
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	d301      	bcc.n	80054e4 <HAL_I2C_IsDeviceReady+0x164>
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	d18c      	bne.n	80053fe <HAL_I2C_IsDeviceReady+0x7e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e4:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80054e6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e8:	6329      	str	r1, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ea:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ee:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80054f4:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f8:	f042 0220 	orr.w	r2, r2, #32
 80054fc:	642a      	str	r2, [r5, #64]	; 0x40
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	05dc      	lsls	r4, r3, #23
 8005502:	d502      	bpl.n	800550a <HAL_I2C_IsDeviceReady+0x18a>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005508:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 800550a:	2003      	movs	r0, #3
 800550c:	e746      	b.n	800539c <HAL_I2C_IsDeviceReady+0x1c>
        hi2c->State             = HAL_I2C_STATE_READY;
 800550e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005510:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005512:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005516:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800551a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800551c:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8005524:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005528:	b003      	add	sp, #12
 800552a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e74e      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x54>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005536:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005538:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800553a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800553e:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005542:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005544:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	f043 0320 	orr.w	r3, r3, #32
 800554c:	642b      	str	r3, [r5, #64]	; 0x40
 800554e:	e724      	b.n	800539a <HAL_I2C_IsDeviceReady+0x1a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005554:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005558:	9101      	str	r1, [sp, #4]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	9201      	str	r2, [sp, #4]
 8005562:	9a01      	ldr	r2, [sp, #4]
 8005564:	e005      	b.n	8005572 <HAL_I2C_IsDeviceReady+0x1f2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fe fca3 	bl	8003eb0 <HAL_GetTick>
 800556a:	1b80      	subs	r0, r0, r6
 800556c:	2819      	cmp	r0, #25
 800556e:	d8ce      	bhi.n	800550e <HAL_I2C_IsDeviceReady+0x18e>
 8005570:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	43db      	mvns	r3, r3
 8005576:	f013 0402 	ands.w	r4, r3, #2
 800557a:	d0f4      	beq.n	8005566 <HAL_I2C_IsDeviceReady+0x1e6>
        hi2c->State = HAL_I2C_STATE_READY;
 800557c:	2320      	movs	r3, #32
        __HAL_UNLOCK(hi2c);
 800557e:	2000      	movs	r0, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8005580:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8005584:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        return HAL_OK;
 8005588:	e708      	b.n	800539c <HAL_I2C_IsDeviceReady+0x1c>
 800558a:	bf00      	nop
 800558c:	ffff0000 	.word	0xffff0000

08005590 <HAL_I2C_MasterTxCpltCallback>:
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop

08005594 <HAL_I2C_MasterRxCpltCallback>:
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop

08005598 <HAL_I2C_SlaveTxCpltCallback>:
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <HAL_I2C_SlaveRxCpltCallback>:
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <HAL_I2C_AddrCallback>:
}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop

080055a4 <HAL_I2C_ListenCpltCallback>:
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop

080055a8 <HAL_I2C_MemTxCpltCallback>:
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop

080055ac <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80055b0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80055b2:	b538      	push	{r3, r4, r5, lr}
 80055b4:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 80055b6:	b959      	cbnz	r1, 80055d0 <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80055b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80055ba:	6801      	ldr	r1, [r0, #0]
 80055bc:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055be:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80055c0:	d02a      	beq.n	8005618 <I2C_MemoryTransmit_TXE_BTF+0x6c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80055c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80055c6:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 80055c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80055ca:	3201      	adds	r2, #1
 80055cc:	6502      	str	r2, [r0, #80]	; 0x50
}
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 80055d0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80055d2:	2901      	cmp	r1, #1
 80055d4:	d026      	beq.n	8005624 <I2C_MemoryTransmit_TXE_BTF+0x78>
  else if (hi2c->EventCount == 2U)
 80055d6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80055d8:	2902      	cmp	r1, #2
 80055da:	d1f8      	bne.n	80055ce <I2C_MemoryTransmit_TXE_BTF+0x22>
 80055dc:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055de:	2a22      	cmp	r2, #34	; 0x22
 80055e0:	d02c      	beq.n	800563c <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055e2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80055e4:	b289      	uxth	r1, r1
 80055e6:	bb29      	cbnz	r1, 8005634 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055e8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80055ea:	b289      	uxth	r1, r1
 80055ec:	2900      	cmp	r1, #0
 80055ee:	d1ee      	bne.n	80055ce <I2C_MemoryTransmit_TXE_BTF+0x22>
 80055f0:	2a21      	cmp	r2, #33	; 0x21
 80055f2:	d1ec      	bne.n	80055ce <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f4:	6802      	ldr	r2, [r0, #0]
 80055f6:	6854      	ldr	r4, [r2, #4]
 80055f8:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 80055fc:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fe:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8005600:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8005606:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005608:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800560a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005612:	f7ff ffc9 	bl	80055a8 <HAL_I2C_MemTxCpltCallback>
}
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800561a:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 800561c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800561e:	3202      	adds	r2, #2
 8005620:	6502      	str	r2, [r0, #80]	; 0x50
}
 8005622:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005624:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005626:	6801      	ldr	r1, [r0, #0]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 800562c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800562e:	3201      	adds	r2, #1
 8005630:	6502      	str	r2, [r0, #80]	; 0x50
}
 8005632:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005634:	2a21      	cmp	r2, #33	; 0x21
 8005636:	d007      	beq.n	8005648 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 800563a:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]
}
 8005646:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005648:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800564a:	6802      	ldr	r2, [r0, #0]
 800564c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005650:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8005652:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005654:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005656:	3a01      	subs	r2, #1
 8005658:	b292      	uxth	r2, r2
 800565a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800565c:	bd38      	pop	{r3, r4, r5, pc}
 800565e:	bf00      	nop

08005660 <HAL_I2C_MemRxCpltCallback>:
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <HAL_I2C_ErrorCallback>:
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop

08005668 <I2C_DMAError>:
{
 8005668:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800566a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 800566c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800566e:	b10b      	cbz	r3, 8005674 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005670:	2200      	movs	r2, #0
 8005672:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8005674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005676:	b10b      	cbz	r3, 800567c <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005678:	2200      	movs	r2, #0
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800567c:	f7fe feba 	bl	80043f4 <HAL_DMA_GetError>
 8005680:	2802      	cmp	r0, #2
 8005682:	d012      	beq.n	80056aa <I2C_DMAError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005684:	6821      	ldr	r1, [r4, #0]
 8005686:	680b      	ldr	r3, [r1, #0]
    hi2c->XferCount = 0U;
 8005688:	2200      	movs	r2, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800568a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    hi2c->State = HAL_I2C_STATE_READY;
 800568e:	2020      	movs	r0, #32
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005690:	600b      	str	r3, [r1, #0]
    hi2c->XferCount = 0U;
 8005692:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8005694:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800569c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800569e:	f043 0310 	orr.w	r3, r3, #16
 80056a2:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff ffdd 	bl	8005664 <HAL_I2C_ErrorCallback>
}
 80056aa:	bd10      	pop	{r4, pc}

080056ac <I2C_DMAXferCplt>:
{
 80056ac:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056b0:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056b2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056b6:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056bc:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 80056be:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056c0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c4:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056c6:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056c8:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 80056ca:	b10d      	cbz	r5, 80056d0 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056cc:	2100      	movs	r1, #0
 80056ce:	63e9      	str	r1, [r5, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80056d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056d2:	b109      	cbz	r1, 80056d8 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056d4:	2500      	movs	r5, #0
 80056d6:	63cd      	str	r5, [r1, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80056d8:	f002 0121 	and.w	r1, r2, #33	; 0x21
 80056dc:	2921      	cmp	r1, #33	; 0x21
 80056de:	d03e      	beq.n	800575e <I2C_DMAXferCplt+0xb2>
 80056e0:	f002 0122 	and.w	r1, r2, #34	; 0x22
 80056e4:	2922      	cmp	r1, #34	; 0x22
 80056e6:	d038      	beq.n	800575a <I2C_DMAXferCplt+0xae>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80056e8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	d033      	beq.n	8005758 <I2C_DMAXferCplt+0xac>
    if (hi2c->XferCount == (uint16_t)1)
 80056f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056f2:	b292      	uxth	r2, r2
 80056f4:	2a01      	cmp	r2, #1
 80056f6:	d103      	bne.n	8005700 <I2C_DMAXferCplt+0x54>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005700:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005702:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005706:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800570a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800570c:	d006      	beq.n	800571c <I2C_DMAXferCplt+0x70>
 800570e:	2e08      	cmp	r6, #8
 8005710:	d004      	beq.n	800571c <I2C_DMAXferCplt+0x70>
 8005712:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8005716:	d001      	beq.n	800571c <I2C_DMAXferCplt+0x70>
 8005718:	2e20      	cmp	r6, #32
 800571a:	d103      	bne.n	8005724 <I2C_DMAXferCplt+0x78>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005722:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800572a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800572c:	685a      	ldr	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800572e:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005734:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005736:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800573a:	bb33      	cbnz	r3, 800578a <I2C_DMAXferCplt+0xde>
      hi2c->State = HAL_I2C_STATE_READY;
 800573c:	2220      	movs	r2, #32
 800573e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005742:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005746:	2a40      	cmp	r2, #64	; 0x40
 8005748:	d018      	beq.n	800577c <I2C_DMAXferCplt+0xd0>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800574a:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005750:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005752:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005754:	f7ff ff1e 	bl	8005594 <HAL_I2C_MasterRxCpltCallback>
}
 8005758:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800575a:	2820      	cmp	r0, #32
 800575c:	d1c4      	bne.n	80056e8 <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800575e:	6859      	ldr	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8005760:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005762:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005766:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005768:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 800576a:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800576c:	d011      	beq.n	8005792 <I2C_DMAXferCplt+0xe6>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800576e:	2a2a      	cmp	r2, #42	; 0x2a
 8005770:	d019      	beq.n	80057a6 <I2C_DMAXferCplt+0xfa>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005778:	605a      	str	r2, [r3, #4]
}
 800577a:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005780:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8005782:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005784:	f7ff ff6c 	bl	8005660 <HAL_I2C_MemRxCpltCallback>
}
 8005788:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_ErrorCallback(hi2c);
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff ff6a 	bl	8005664 <HAL_I2C_ErrorCallback>
}
 8005790:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005792:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005794:	2221      	movs	r2, #33	; 0x21
 8005796:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005798:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800579a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800579e:	f7ff fefb 	bl	8005598 <HAL_I2C_SlaveTxCpltCallback>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	e7e5      	b.n	8005772 <I2C_DMAXferCplt+0xc6>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057a6:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057a8:	2222      	movs	r2, #34	; 0x22
 80057aa:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ac:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057b2:	f7ff fef3 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	e7db      	b.n	8005772 <I2C_DMAXferCplt+0xc6>
 80057ba:	bf00      	nop

080057bc <HAL_I2C_AbortCpltCallback>:
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <I2C_DMAAbort>:
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <I2C_DMAAbort+0xf0>)
 80057c4:	4c3b      	ldr	r4, [pc, #236]	; (80058b4 <I2C_DMAAbort+0xf4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057c8:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80057ca:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057cc:	08db      	lsrs	r3, r3, #3
 80057ce:	fba4 2303 	umull	r2, r3, r4, r3
  __IO uint32_t count = 0U;
 80057d2:	2200      	movs	r2, #0
 80057d4:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057d6:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057d8:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
 80057dc:	680a      	ldr	r2, [r1, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80057e6:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e8:	b2c0      	uxtb	r0, r0
 80057ea:	e005      	b.n	80057f8 <I2C_DMAAbort+0x38>
    count--;
 80057ec:	9b01      	ldr	r3, [sp, #4]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	059b      	lsls	r3, r3, #22
 80057f6:	d506      	bpl.n	8005806 <I2C_DMAAbort+0x46>
    if (count == 0U)
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f6      	bne.n	80057ec <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005800:	f043 0320 	orr.w	r3, r3, #32
 8005804:	640b      	str	r3, [r1, #64]	; 0x40
 8005806:	e9d1 430d 	ldrd	r4, r3, [r1, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 800580a:	b34c      	cbz	r4, 8005860 <I2C_DMAAbort+0xa0>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800580c:	2500      	movs	r5, #0
 800580e:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8005810:	b1fb      	cbz	r3, 8005852 <I2C_DMAAbort+0x92>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005812:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005814:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005816:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 800581a:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 800581c:	854d      	strh	r5, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 800581e:	6525      	str	r5, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005820:	2400      	movs	r4, #0
 8005822:	651c      	str	r4, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8005824:	6813      	ldr	r3, [r2, #0]
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800582c:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d02a      	beq.n	800588a <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005834:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8005838:	2828      	cmp	r0, #40	; 0x28
 800583a:	d019      	beq.n	8005870 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 800583c:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800583e:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005840:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005844:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005848:	4608      	mov	r0, r1
 800584a:	f7ff ff0b 	bl	8005664 <HAL_I2C_ErrorCallback>
}
 800584e:	b002      	add	sp, #8
 8005850:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005852:	6815      	ldr	r5, [r2, #0]
 8005854:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8005858:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 800585a:	854b      	strh	r3, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 800585c:	6523      	str	r3, [r4, #80]	; 0x50
 800585e:	e7e1      	b.n	8005824 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8005860:	b1fb      	cbz	r3, 80058a2 <I2C_DMAAbort+0xe2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005864:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005866:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800586a:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 800586c:	854c      	strh	r4, [r1, #42]	; 0x2a
 800586e:	e7d7      	b.n	8005820 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8005870:	6813      	ldr	r3, [r2, #0]
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005878:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800587a:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005880:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005882:	630c      	str	r4, [r1, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005884:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 8005888:	e7de      	b.n	8005848 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800588a:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 800588c:	2220      	movs	r2, #32
 800588e:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8005892:	4608      	mov	r0, r1
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005894:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005898:	640b      	str	r3, [r1, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800589a:	f7ff ff8f 	bl	80057bc <HAL_I2C_AbortCpltCallback>
}
 800589e:	b002      	add	sp, #8
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a2:	6814      	ldr	r4, [r2, #0]
 80058a4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80058a8:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80058aa:	854b      	strh	r3, [r1, #42]	; 0x2a
 80058ac:	e7ba      	b.n	8005824 <I2C_DMAAbort+0x64>
 80058ae:	bf00      	nop
 80058b0:	20000000 	.word	0x20000000
 80058b4:	14f8b589 	.word	0x14f8b589

080058b8 <HAL_I2C_EV_IRQHandler>:
{
 80058b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058ba:	6803      	ldr	r3, [r0, #0]
{
 80058bc:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058be:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058c0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058c2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ca:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058cc:	2a10      	cmp	r2, #16
{
 80058ce:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058d0:	d020      	beq.n	8005914 <HAL_I2C_EV_IRQHandler+0x5c>
 80058d2:	2a40      	cmp	r2, #64	; 0x40
 80058d4:	d01e      	beq.n	8005914 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058d8:	b2c9      	uxtb	r1, r1
 80058da:	2a00      	cmp	r2, #0
 80058dc:	f000 80bb 	beq.w	8005a56 <HAL_I2C_EV_IRQHandler+0x19e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058e0:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80058e2:	2600      	movs	r6, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e4:	f3c2 0540 	ubfx	r5, r2, #1, #1
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	d078      	beq.n	80059de <HAL_I2C_EV_IRQHandler+0x126>
 80058ec:	0585      	lsls	r5, r0, #22
 80058ee:	d57b      	bpl.n	80059e8 <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058f2:	b102      	cbz	r2, 80058f6 <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058f4:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80058fa:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80058fe:	2a28      	cmp	r2, #40	; 0x28
 8005900:	f000 8215 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x476>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005904:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 8005908:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800590a:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800590c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005910:	b00c      	add	sp, #48	; 0x30
 8005912:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005914:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005916:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005918:	f011 0f01 	tst.w	r1, #1
 800591c:	d139      	bne.n	8005992 <HAL_I2C_EV_IRQHandler+0xda>
 800591e:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8005922:	d0f5      	beq.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005924:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8005928:	d0f2      	beq.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800592a:	070d      	lsls	r5, r1, #28
 800592c:	f140 8099 	bpl.w	8005a62 <HAL_I2C_EV_IRQHandler+0x1aa>
 8005930:	0585      	lsls	r5, r0, #22
 8005932:	f100 81ed 	bmi.w	8005d10 <HAL_I2C_EV_IRQHandler+0x458>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005936:	0776      	lsls	r6, r6, #29
 8005938:	f140 8100 	bpl.w	8005b3c <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800593c:	685d      	ldr	r5, [r3, #4]
 800593e:	052d      	lsls	r5, r5, #20
 8005940:	d4e6      	bmi.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005942:	f3c1 0580 	ubfx	r5, r1, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005946:	0609      	lsls	r1, r1, #24
 8005948:	f140 81a1 	bpl.w	8005c8e <HAL_I2C_EV_IRQHandler+0x3d6>
 800594c:	0546      	lsls	r6, r0, #21
 800594e:	f140 819e 	bpl.w	8005c8e <HAL_I2C_EV_IRQHandler+0x3d6>
 8005952:	2d00      	cmp	r5, #0
 8005954:	f040 819e 	bne.w	8005c94 <HAL_I2C_EV_IRQHandler+0x3dc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005958:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800595c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800595e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005962:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005964:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005966:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005968:	2800      	cmp	r0, #0
 800596a:	f040 8378 	bne.w	800605e <HAL_I2C_EV_IRQHandler+0x7a6>
 800596e:	2a21      	cmp	r2, #33	; 0x21
 8005970:	f000 8428 	beq.w	80061c4 <HAL_I2C_EV_IRQHandler+0x90c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005974:	2940      	cmp	r1, #64	; 0x40
 8005976:	d1cb      	bne.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005978:	2a22      	cmp	r2, #34	; 0x22
 800597a:	d1c9      	bne.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 800597c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800597e:	b292      	uxth	r2, r2
 8005980:	2a00      	cmp	r2, #0
 8005982:	f000 8440 	beq.w	8006206 <HAL_I2C_EV_IRQHandler+0x94e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005986:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800598a:	2a40      	cmp	r2, #64	; 0x40
 800598c:	f040 80b6 	bne.w	8005afc <HAL_I2C_EV_IRQHandler+0x244>
 8005990:	e186      	b.n	8005ca0 <HAL_I2C_EV_IRQHandler+0x3e8>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005992:	0585      	lsls	r5, r0, #22
 8005994:	d562      	bpl.n	8005a5c <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005996:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005998:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800599c:	f000 81e2 	beq.w	8005d64 <HAL_I2C_EV_IRQHandler+0x4ac>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80059a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80059a2:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80059a6:	bf04      	itt	eq
 80059a8:	2208      	moveq	r2, #8
 80059aa:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059ac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80059b0:	2a40      	cmp	r2, #64	; 0x40
 80059b2:	f000 81d0 	beq.w	8005d56 <HAL_I2C_EV_IRQHandler+0x49e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b6:	6922      	ldr	r2, [r4, #16]
 80059b8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80059bc:	f000 8190 	beq.w	8005ce0 <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 80059c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80059c2:	2a00      	cmp	r2, #0
 80059c4:	f000 81d1 	beq.w	8005d6a <HAL_I2C_EV_IRQHandler+0x4b2>
      else if (hi2c->EventCount == 1U)
 80059c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80059ca:	2a01      	cmp	r2, #1
 80059cc:	d1a0      	bne.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80059ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80059d0:	11d2      	asrs	r2, r2, #7
 80059d2:	f002 0206 	and.w	r2, r2, #6
 80059d6:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	e798      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059de:	06d6      	lsls	r6, r2, #27
 80059e0:	d502      	bpl.n	80059e8 <HAL_I2C_EV_IRQHandler+0x130>
 80059e2:	0586      	lsls	r6, r0, #22
 80059e4:	f100 80d8 	bmi.w	8005b98 <HAL_I2C_EV_IRQHandler+0x2e0>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059e8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80059ec:	2921      	cmp	r1, #33	; 0x21
 80059ee:	f3c2 0580 	ubfx	r5, r2, #2, #1
 80059f2:	d04e      	beq.n	8005a92 <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059f4:	0651      	lsls	r1, r2, #25
 80059f6:	f140 808b 	bpl.w	8005b10 <HAL_I2C_EV_IRQHandler+0x258>
 80059fa:	0542      	lsls	r2, r0, #21
 80059fc:	f140 8088 	bpl.w	8005b10 <HAL_I2C_EV_IRQHandler+0x258>
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	f040 8088 	bne.w	8005b16 <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a06:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8005a0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a0c:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0e:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	f43f af7d 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005a1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005a28:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a2a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8005a2c:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f47f af6e 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005a34:	292a      	cmp	r1, #42	; 0x2a
 8005a36:	f47f af6b 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a3e:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a44:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a46:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a48:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a4a:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a4c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a50:	f7ff fda4 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
 8005a54:	e75c      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a56:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	e743      	b.n	80058e4 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a5c:	070d      	lsls	r5, r1, #28
 8005a5e:	f53f af6a 	bmi.w	8005936 <HAL_I2C_EV_IRQHandler+0x7e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a62:	078d      	lsls	r5, r1, #30
 8005a64:	f57f af67 	bpl.w	8005936 <HAL_I2C_EV_IRQHandler+0x7e>
 8005a68:	0585      	lsls	r5, r0, #22
 8005a6a:	f57f af64 	bpl.w	8005936 <HAL_I2C_EV_IRQHandler+0x7e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a6e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a74:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a76:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005a7a:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a7c:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a7e:	f000 8209 	beq.w	8005e94 <HAL_I2C_EV_IRQHandler+0x5dc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a82:	2200      	movs	r2, #0
 8005a84:	9209      	str	r2, [sp, #36]	; 0x24
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	e73e      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a92:	0612      	lsls	r2, r2, #24
 8005a94:	d527      	bpl.n	8005ae6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005a96:	0546      	lsls	r6, r0, #21
 8005a98:	d525      	bpl.n	8005ae6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005a9a:	bb3d      	cbnz	r5, 8005aec <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a9c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8005aa0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005aa2:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa4:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	f43f af32 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005aae:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005ab2:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8005ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005ab6:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	b292      	uxth	r2, r2
 8005abc:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005abe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	f47f af24 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005ac8:	2829      	cmp	r0, #41	; 0x29
 8005aca:	f47f af21 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ace:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad0:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad6:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ad8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ada:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005adc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ae0:	f7ff fd5a 	bl	8005598 <HAL_I2C_SlaveTxCpltCallback>
 8005ae4:	e714      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	f43f af12 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005aec:	0580      	lsls	r0, r0, #22
 8005aee:	f57f af0f 	bpl.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8005af2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005af4:	b292      	uxth	r2, r2
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	f43f af0a 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005afc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005afe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005b02:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8005b04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005b06:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005b0e:	e6ff      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	f43f aefd 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005b16:	0586      	lsls	r6, r0, #22
 8005b18:	f57f aefa 	bpl.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8005b1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	f43f aef5 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005b2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005b2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8005b34:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8005b36:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005b38:	6262      	str	r2, [r4, #36]	; 0x24
 8005b3a:	e6e9      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	0516      	lsls	r6, r2, #20
 8005b40:	f53f aee6 	bmi.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b44:	064d      	lsls	r5, r1, #25
 8005b46:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8005b4a:	f140 80af 	bpl.w	8005cac <HAL_I2C_EV_IRQHandler+0x3f4>
 8005b4e:	0541      	lsls	r1, r0, #21
 8005b50:	f140 80ac 	bpl.w	8005cac <HAL_I2C_EV_IRQHandler+0x3f4>
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	f040 80ac 	bne.w	8005cb2 <HAL_I2C_EV_IRQHandler+0x3fa>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b5a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005b5e:	2922      	cmp	r1, #34	; 0x22
 8005b60:	f47f aed6 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 8005b64:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8005b66:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8005b68:	2903      	cmp	r1, #3
 8005b6a:	f240 82ea 	bls.w	8006142 <HAL_I2C_EV_IRQHandler+0x88a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8005b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005b82:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8005b84:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8005b86:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8005b88:	f47f aec2 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	6853      	ldr	r3, [r2, #4]
 8005b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	e6bb      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b98:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ba2:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ba4:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	920b      	str	r2, [sp, #44]	; 0x2c
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	f042 0201 	orr.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bbc:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bbe:	b2cd      	uxtb	r5, r1
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bc0:	0511      	lsls	r1, r2, #20
 8005bc2:	d521      	bpl.n	8005c08 <HAL_I2C_EV_IRQHandler+0x350>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005bc4:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8005bc8:	2a22      	cmp	r2, #34	; 0x22
 8005bca:	f000 813e 	beq.w	8005e4a <HAL_I2C_EV_IRQHandler+0x592>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005bce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005bd0:	6802      	ldr	r2, [r0, #0]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005bd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	b11a      	cbz	r2, 8005be6 <HAL_I2C_EV_IRQHandler+0x32e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005be0:	f042 0204 	orr.w	r2, r2, #4
 8005be4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bec:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bee:	f7fe fbfd 	bl	80043ec <HAL_DMA_GetState>
 8005bf2:	2801      	cmp	r0, #1
 8005bf4:	d008      	beq.n	8005c08 <HAL_I2C_EV_IRQHandler+0x350>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005bf8:	4ba4      	ldr	r3, [pc, #656]	; (8005e8c <HAL_I2C_EV_IRQHandler+0x5d4>)
 8005bfa:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bfc:	f7fe fb0e 	bl	800421c <HAL_DMA_Abort_IT>
 8005c00:	b110      	cbz	r0, 8005c08 <HAL_I2C_EV_IRQHandler+0x350>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005c04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005c06:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8005c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	b313      	cbz	r3, 8005c54 <HAL_I2C_EV_IRQHandler+0x39c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	0752      	lsls	r2, r2, #29
 8005c14:	d50a      	bpl.n	8005c2c <HAL_I2C_EV_IRQHandler+0x374>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005c1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c20:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8005c22:	3a01      	subs	r2, #1
 8005c24:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8005c26:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8005c28:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005c2a:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	0656      	lsls	r6, r2, #25
 8005c30:	d509      	bpl.n	8005c46 <HAL_I2C_EV_IRQHandler+0x38e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005c38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005c3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005c40:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8005c42:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005c44:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8005c46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	b11b      	cbz	r3, 8005c54 <HAL_I2C_EV_IRQHandler+0x39c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 8095 	bne.w	8005d86 <HAL_I2C_EV_IRQHandler+0x4ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c5c:	2d2a      	cmp	r5, #42	; 0x2a
 8005c5e:	f000 8159 	beq.w	8005f14 <HAL_I2C_EV_IRQHandler+0x65c>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c62:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005c66:	2b28      	cmp	r3, #40	; 0x28
 8005c68:	f000 80dd 	beq.w	8005e26 <HAL_I2C_EV_IRQHandler+0x56e>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	d002      	beq.n	8005c78 <HAL_I2C_EV_IRQHandler+0x3c0>
 8005c72:	2d22      	cmp	r5, #34	; 0x22
 8005c74:	f47f ae4c 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c78:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c7c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c7e:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c88:	f7ff fc88 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
 8005c8c:	e640      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	f43f ae3e 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005c94:	0581      	lsls	r1, r0, #22
 8005c96:	f57f ae3b 	bpl.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005c9a:	2a10      	cmp	r2, #16
 8005c9c:	f000 8142 	beq.w	8005f24 <HAL_I2C_EV_IRQHandler+0x66c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ca0:	4620      	mov	r0, r4
}
 8005ca2:	b00c      	add	sp, #48	; 0x30
 8005ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ca8:	f7ff bc80 	b.w	80055ac <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cac:	2a00      	cmp	r2, #0
 8005cae:	f43f ae2f 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005cb2:	0586      	lsls	r6, r0, #22
 8005cb4:	f57f ae2c 	bpl.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8005cba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	2a04      	cmp	r2, #4
 8005cc2:	f000 8182 	beq.w	8005fca <HAL_I2C_EV_IRQHandler+0x712>
  else if (hi2c->XferCount == 3U)
 8005cc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	2a03      	cmp	r2, #3
 8005ccc:	f000 8184 	beq.w	8005fd8 <HAL_I2C_EV_IRQHandler+0x720>
  else if (hi2c->XferCount == 2U)
 8005cd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	2a02      	cmp	r2, #2
 8005cd6:	f000 81fc 	beq.w	80060d2 <HAL_I2C_EV_IRQHandler+0x81a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	700b      	strb	r3, [r1, #0]
 8005cde:	e725      	b.n	8005b2c <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ce0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005ce4:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ce6:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ce8:	bf16      	itet	ne
 8005cea:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cee:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005cf2:	b2d2      	uxtbne	r2, r2
 8005cf4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	f000 80e8 	beq.w	8005ece <HAL_I2C_EV_IRQHandler+0x616>
 8005cfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	f000 80e4 	beq.w	8005ece <HAL_I2C_EV_IRQHandler+0x616>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	e5ff      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d10:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d14:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d16:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	f000 8091 	beq.w	8005e40 <HAL_I2C_EV_IRQHandler+0x588>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005d1e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d1f0      	bne.n	8005d06 <HAL_I2C_EV_IRQHandler+0x44e>
 8005d24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d1ec      	bne.n	8005d06 <HAL_I2C_EV_IRQHandler+0x44e>
 8005d2c:	e5f0      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d34:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005d36:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d3a:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 8005d3c:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005d40:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d44:	bf54      	ite	pl
 8005d46:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d48:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8005d4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f7ff fc26 	bl	80055a0 <HAL_I2C_AddrCallback>
 8005d54:	e5dc      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 8005d56:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005d58:	b97a      	cbnz	r2, 8005d7a <HAL_I2C_EV_IRQHandler+0x4c2>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	e5d5      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d64:	2201      	movs	r2, #1
 8005d66:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005d68:	e620      	b.n	80059ac <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d6c:	11d2      	asrs	r2, r2, #7
 8005d6e:	f002 0206 	and.w	r2, r2, #6
 8005d72:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8005d76:	611a      	str	r2, [r3, #16]
 8005d78:	e5ca      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	611a      	str	r2, [r3, #16]
 8005d84:	e5c4      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d86:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d8a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d92:	2a10      	cmp	r2, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d94:	b2c9      	uxtb	r1, r1
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d96:	f000 809f 	beq.w	8005ed8 <HAL_I2C_EV_IRQHandler+0x620>
 8005d9a:	2a40      	cmp	r2, #64	; 0x40
 8005d9c:	f000 809c 	beq.w	8005ed8 <HAL_I2C_EV_IRQHandler+0x620>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005da0:	f001 0228 	and.w	r2, r1, #40	; 0x28
 8005da4:	2a28      	cmp	r2, #40	; 0x28
 8005da6:	f000 80e3 	beq.w	8005f70 <HAL_I2C_EV_IRQHandler+0x6b8>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	0510      	lsls	r0, r2, #20
 8005dae:	d407      	bmi.n	8005dc0 <HAL_I2C_EV_IRQHandler+0x508>
 8005db0:	2960      	cmp	r1, #96	; 0x60
 8005db2:	d005      	beq.n	8005dc0 <HAL_I2C_EV_IRQHandler+0x508>
      hi2c->State = HAL_I2C_STATE_READY;
 8005db4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db6:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005db8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8005dca:	f000 8091 	beq.w	8005ef0 <HAL_I2C_EV_IRQHandler+0x638>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005dce:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005dd0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dd6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005dd8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f000 810a 	beq.w	8005ff6 <HAL_I2C_EV_IRQHandler+0x73e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <HAL_I2C_EV_IRQHandler+0x5d4>)
 8005de4:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005de6:	f7fe fa19 	bl	800421c <HAL_DMA_Abort_IT>
 8005dea:	b150      	cbz	r0, 8005e02 <HAL_I2C_EV_IRQHandler+0x54a>
        __HAL_I2C_DISABLE(hi2c);
 8005dec:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dee:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8005df0:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005df2:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8005df4:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8005df8:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8005dfa:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e00:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8005e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e04:	0718      	lsls	r0, r3, #28
 8005e06:	d004      	beq.n	8005e12 <HAL_I2C_EV_IRQHandler+0x55a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	6853      	ldr	r3, [r2, #4]
 8005e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e10:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8005e12:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e18:	0751      	lsls	r1, r2, #29
  CurrentState = hi2c->State;
 8005e1a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e1c:	f57f ad78 	bpl.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 8005e20:	2b28      	cmp	r3, #40	; 0x28
 8005e22:	f47f ad75 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e26:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8005e28:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8005e2a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e30:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e3a:	f7ff fbb3 	bl	80055a4 <HAL_I2C_ListenCpltCallback>
 8005e3e:	e567      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005e40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	f47f af6b 	bne.w	8005d1e <HAL_I2C_EV_IRQHandler+0x466>
 8005e48:	e562      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e4c:	6802      	ldr	r2, [r0, #0]
 8005e4e:	6852      	ldr	r2, [r2, #4]
 8005e50:	b292      	uxth	r2, r2
 8005e52:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005e54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e56:	b292      	uxth	r2, r2
 8005e58:	b11a      	cbz	r2, 8005e62 <HAL_I2C_EV_IRQHandler+0x5aa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e5c:	f042 0204 	orr.w	r2, r2, #4
 8005e60:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e68:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e6a:	f7fe fabf 	bl	80043ec <HAL_DMA_GetState>
 8005e6e:	2801      	cmp	r0, #1
 8005e70:	f43f aeca 	beq.w	8005c08 <HAL_I2C_EV_IRQHandler+0x350>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_I2C_EV_IRQHandler+0x5d4>)
 8005e78:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e7a:	f7fe f9cf 	bl	800421c <HAL_DMA_Abort_IT>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f43f aec2 	beq.w	8005c08 <HAL_I2C_EV_IRQHandler+0x350>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e86:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005e88:	4798      	blx	r3
 8005e8a:	e6bd      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x350>
 8005e8c:	080057c1 	.word	0x080057c1
 8005e90:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e94:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005e96:	b911      	cbnz	r1, 8005e9e <HAL_I2C_EV_IRQHandler+0x5e6>
 8005e98:	2a40      	cmp	r2, #64	; 0x40
 8005e9a:	f000 80e4 	beq.w	8006066 <HAL_I2C_EV_IRQHandler+0x7ae>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005ea0:	b922      	cbnz	r2, 8005eac <HAL_I2C_EV_IRQHandler+0x5f4>
 8005ea2:	6921      	ldr	r1, [r4, #16]
 8005ea4:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8005ea8:	f000 80e4 	beq.w	8006074 <HAL_I2C_EV_IRQHandler+0x7bc>
      if (hi2c->XferCount == 0U)
 8005eac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005eae:	b292      	uxth	r2, r2
 8005eb0:	2a00      	cmp	r2, #0
 8005eb2:	d162      	bne.n	8005f7a <HAL_I2C_EV_IRQHandler+0x6c2>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb4:	9202      	str	r2, [sp, #8]
 8005eb6:	695a      	ldr	r2, [r3, #20]
 8005eb8:	9202      	str	r2, [sp, #8]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6523      	str	r3, [r4, #80]	; 0x50
 8005ecc:	e520      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	f47f af28 	bne.w	8005d26 <HAL_I2C_EV_IRQHandler+0x46e>
 8005ed6:	e51b      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ed8:	2922      	cmp	r1, #34	; 0x22
 8005eda:	f47f af61 	bne.w	8005da0 <HAL_I2C_EV_IRQHandler+0x4e8>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ee4:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	0515      	lsls	r5, r2, #20
 8005eea:	f53f af69 	bmi.w	8005dc0 <HAL_I2C_EV_IRQHandler+0x508>
 8005eee:	e761      	b.n	8005db4 <HAL_I2C_EV_IRQHandler+0x4fc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ef0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005ef4:	2960      	cmp	r1, #96	; 0x60
 8005ef6:	f000 809c 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x77a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	0655      	lsls	r5, r2, #25
 8005efe:	d505      	bpl.n	8005f0c <HAL_I2C_EV_IRQHandler+0x654>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f08:	3301      	adds	r3, #1
 8005f0a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7ff fba9 	bl	8005664 <HAL_I2C_ErrorCallback>
 8005f12:	e776      	b.n	8005e02 <HAL_I2C_EV_IRQHandler+0x54a>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f14:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f16:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f18:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f1e:	f7ff fb3d 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
 8005f22:	e69e      	b.n	8005c62 <HAL_I2C_EV_IRQHandler+0x3aa>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f26:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005f2a:	2a21      	cmp	r2, #33	; 0x21
 8005f2c:	f47f acf0 	bne.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount != 0U)
 8005f30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005f32:	b292      	uxth	r2, r2
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	f47f ade1 	bne.w	8005afc <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f3a:	2908      	cmp	r1, #8
 8005f3c:	d005      	beq.n	8005f4a <HAL_I2C_EV_IRQHandler+0x692>
 8005f3e:	2920      	cmp	r1, #32
 8005f40:	d003      	beq.n	8005f4a <HAL_I2C_EV_IRQHandler+0x692>
 8005f42:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8005f46:	f040 81dc 	bne.w	8006302 <HAL_I2C_EV_IRQHandler+0xa4a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f50:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f52:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f54:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5c:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f5e:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f60:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f62:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f66:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f6a:	f7ff fb11 	bl	8005590 <HAL_I2C_MasterTxCpltCallback>
 8005f6e:	e4cf      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f70:	2100      	movs	r1, #0
 8005f72:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8005f78:	e724      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x50c>
      else if (hi2c->XferCount == 1U)
 8005f7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	2a01      	cmp	r2, #1
 8005f80:	f000 8086 	beq.w	8006090 <HAL_I2C_EV_IRQHandler+0x7d8>
      else if (hi2c->XferCount == 2U)
 8005f84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005f86:	b292      	uxth	r2, r2
 8005f88:	2a02      	cmp	r2, #2
 8005f8a:	f000 8142 	beq.w	8006212 <HAL_I2C_EV_IRQHandler+0x95a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f94:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	0511      	lsls	r1, r2, #20
 8005f9a:	d50e      	bpl.n	8005fba <HAL_I2C_EV_IRQHandler+0x702>
 8005f9c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005fa0:	d007      	beq.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x6fa>
 8005fa2:	3801      	subs	r0, #1
 8005fa4:	281f      	cmp	r0, #31
 8005fa6:	d808      	bhi.n	8005fba <HAL_I2C_EV_IRQHandler+0x702>
 8005fa8:	4aab      	ldr	r2, [pc, #684]	; (8006258 <HAL_I2C_EV_IRQHandler+0x9a0>)
 8005faa:	fa22 f000 	lsr.w	r0, r2, r0
 8005fae:	07c2      	lsls	r2, r0, #31
 8005fb0:	d503      	bpl.n	8005fba <HAL_I2C_EV_IRQHandler+0x702>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fb8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	9208      	str	r2, [sp, #32]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	9208      	str	r2, [sp, #32]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	9308      	str	r3, [sp, #32]
 8005fc6:	9b08      	ldr	r3, [sp, #32]
 8005fc8:	e77e      	b.n	8005ec8 <HAL_I2C_EV_IRQHandler+0x610>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	700b      	strb	r3, [r1, #0]
 8005fd6:	e5a9      	b.n	8005b2c <HAL_I2C_EV_IRQHandler+0x274>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fd8:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005fda:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005fe2:	f43f ae7a 	beq.w	8005cda <HAL_I2C_EV_IRQHandler+0x422>
 8005fe6:	2802      	cmp	r0, #2
 8005fe8:	f43f ae77 	beq.w	8005cda <HAL_I2C_EV_IRQHandler+0x422>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e671      	b.n	8005cda <HAL_I2C_EV_IRQHandler+0x422>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ff6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ff8:	4b98      	ldr	r3, [pc, #608]	; (800625c <HAL_I2C_EV_IRQHandler+0x9a4>)
 8005ffa:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ffc:	f7fe f90e 	bl	800421c <HAL_DMA_Abort_IT>
 8006000:	2800      	cmp	r0, #0
 8006002:	f43f aefe 	beq.w	8005e02 <HAL_I2C_EV_IRQHandler+0x54a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	0652      	lsls	r2, r2, #25
 800600c:	d506      	bpl.n	800601c <HAL_I2C_EV_IRQHandler+0x764>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8006014:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	3201      	adds	r2, #1
 800601a:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800601c:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800601e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8006020:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8006024:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8006026:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006028:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 800602a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800602e:	4798      	blx	r3
 8006030:	e6e7      	b.n	8005e02 <HAL_I2C_EV_IRQHandler+0x54a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006032:	2120      	movs	r1, #32
 8006034:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006038:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	0656      	lsls	r6, r2, #25
 800603e:	d506      	bpl.n	800604e <HAL_I2C_EV_IRQHandler+0x796>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8006046:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	3201      	adds	r2, #1
 800604c:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff fbb0 	bl	80057bc <HAL_I2C_AbortCpltCallback>
 800605c:	e6d1      	b.n	8005e02 <HAL_I2C_EV_IRQHandler+0x54a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800605e:	2a21      	cmp	r2, #33	; 0x21
 8006060:	f43f ac8c 	beq.w	800597c <HAL_I2C_EV_IRQHandler+0xc4>
 8006064:	e486      	b.n	8005974 <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006066:	9100      	str	r1, [sp, #0]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	9200      	str	r2, [sp, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	e44d      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	9201      	str	r2, [sp, #4]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	9201      	str	r2, [sp, #4]
 800607e:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006086:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006088:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800608a:	3301      	adds	r3, #1
 800608c:	6523      	str	r3, [r4, #80]	; 0x50
 800608e:	e43f      	b.n	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006090:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8006094:	f000 8104 	beq.w	80062a0 <HAL_I2C_EV_IRQHandler+0x9e8>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006098:	2808      	cmp	r0, #8
 800609a:	f000 80f1 	beq.w	8006280 <HAL_I2C_EV_IRQHandler+0x9c8>
 800609e:	2820      	cmp	r0, #32
 80060a0:	f000 80ee 	beq.w	8006280 <HAL_I2C_EV_IRQHandler+0x9c8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060a4:	2d12      	cmp	r5, #18
 80060a6:	f000 80e8 	beq.w	800627a <HAL_I2C_EV_IRQHandler+0x9c2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060aa:	2810      	cmp	r0, #16
 80060ac:	d805      	bhi.n	80060ba <HAL_I2C_EV_IRQHandler+0x802>
 80060ae:	4a6c      	ldr	r2, [pc, #432]	; (8006260 <HAL_I2C_EV_IRQHandler+0x9a8>)
 80060b0:	fa22 f000 	lsr.w	r0, r2, r0
 80060b4:	07c2      	lsls	r2, r0, #31
 80060b6:	f100 811f 	bmi.w	80062f8 <HAL_I2C_EV_IRQHandler+0xa40>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c2:	2200      	movs	r2, #0
 80060c4:	9205      	str	r2, [sp, #20]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	9205      	str	r2, [sp, #20]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	9b05      	ldr	r3, [sp, #20]
 80060d0:	e6fa      	b.n	8005ec8 <HAL_I2C_EV_IRQHandler+0x610>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060d2:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d4:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060d6:	d071      	beq.n	80061bc <HAL_I2C_EV_IRQHandler+0x904>
 80060d8:	2810      	cmp	r0, #16
 80060da:	d06f      	beq.n	80061bc <HAL_I2C_EV_IRQHandler+0x904>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060dc:	2804      	cmp	r0, #4
 80060de:	f000 80fc 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0xa22>
 80060e2:	2802      	cmp	r0, #2
 80060e4:	f000 80f9 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0xa22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80060f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80060f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f6:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8006100:	1c51      	adds	r1, r2, #1
 8006102:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006104:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8006106:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006108:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800610a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800610c:	3b01      	subs	r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006112:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8006114:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 800611a:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 800611c:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800611e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006120:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006124:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	f000 80cd 	beq.w	80062c8 <HAL_I2C_EV_IRQHandler+0xa10>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800612e:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006130:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006132:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006136:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006138:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800613a:	f7ff fa2b 	bl	8005594 <HAL_I2C_MasterRxCpltCallback>
 800613e:	f7ff bbe7 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006142:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006144:	2802      	cmp	r0, #2
 8006146:	f43f abe3 	beq.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 800614a:	2901      	cmp	r1, #1
 800614c:	f63f abe0 	bhi.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006150:	4944      	ldr	r1, [pc, #272]	; (8006264 <HAL_I2C_EV_IRQHandler+0x9ac>)
  __IO uint32_t count = 0U;
 8006152:	920a      	str	r2, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006154:	680a      	ldr	r2, [r1, #0]
 8006156:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800615a:	fbb2 f2f1 	udiv	r2, r2, r1
 800615e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006162:	920a      	str	r2, [sp, #40]	; 0x28
    count--;
 8006164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006166:	3a01      	subs	r2, #1
 8006168:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 800616a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800616c:	2900      	cmp	r1, #0
 800616e:	f000 80ea 	beq.w	8006346 <HAL_I2C_EV_IRQHandler+0xa8e>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8006178:	d1f4      	bne.n	8006164 <HAL_I2C_EV_IRQHandler+0x8ac>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617a:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617c:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006182:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006184:	6859      	ldr	r1, [r3, #4]
 8006186:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800618a:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8006190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8006192:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006194:	3b01      	subs	r3, #1
 8006196:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8006198:	2020      	movs	r0, #32
        hi2c->XferCount--;
 800619a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800619c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 80061a4:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061a6:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 80061a8:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061aa:	d1c1      	bne.n	8006130 <HAL_I2C_EV_IRQHandler+0x878>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061b0:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 80061b2:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061b4:	f7ff fa54 	bl	8005660 <HAL_I2C_MemRxCpltCallback>
 80061b8:	f7ff bbaa 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e794      	b.n	80060ee <HAL_I2C_EV_IRQHandler+0x836>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061c4:	2d08      	cmp	r5, #8
 80061c6:	d005      	beq.n	80061d4 <HAL_I2C_EV_IRQHandler+0x91c>
 80061c8:	2d20      	cmp	r5, #32
 80061ca:	d003      	beq.n	80061d4 <HAL_I2C_EV_IRQHandler+0x91c>
 80061cc:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80061d0:	f040 80a8 	bne.w	8006324 <HAL_I2C_EV_IRQHandler+0xa6c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061dc:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061de:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80061e0:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80061e6:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061e8:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ee:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061f6:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 80061f8:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fa:	f000 808f 	beq.w	800631c <HAL_I2C_EV_IRQHandler+0xa64>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061fe:	f7ff f9c7 	bl	8005590 <HAL_I2C_MasterTxCpltCallback>
 8006202:	f7ff bb85 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	f7ff bb7f 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006212:	2810      	cmp	r0, #16
 8006214:	d928      	bls.n	8006268 <HAL_I2C_EV_IRQHandler+0x9b0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006224:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	0515      	lsls	r5, r2, #20
 800622a:	d50d      	bpl.n	8006248 <HAL_I2C_EV_IRQHandler+0x990>
 800622c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8006230:	d006      	beq.n	8006240 <HAL_I2C_EV_IRQHandler+0x988>
 8006232:	3801      	subs	r0, #1
 8006234:	281f      	cmp	r0, #31
 8006236:	d807      	bhi.n	8006248 <HAL_I2C_EV_IRQHandler+0x990>
 8006238:	4a07      	ldr	r2, [pc, #28]	; (8006258 <HAL_I2C_EV_IRQHandler+0x9a0>)
 800623a:	40c2      	lsrs	r2, r0
 800623c:	07d0      	lsls	r0, r2, #31
 800623e:	d503      	bpl.n	8006248 <HAL_I2C_EV_IRQHandler+0x990>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006246:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006248:	2200      	movs	r2, #0
 800624a:	9207      	str	r2, [sp, #28]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	9207      	str	r2, [sp, #28]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	9307      	str	r3, [sp, #28]
 8006254:	9b07      	ldr	r3, [sp, #28]
 8006256:	e637      	b.n	8005ec8 <HAL_I2C_EV_IRQHandler+0x610>
 8006258:	80008081 	.word	0x80008081
 800625c:	080057c1 	.word	0x080057c1
 8006260:	00010014 	.word	0x00010014
 8006264:	20000000 	.word	0x20000000
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006268:	4a45      	ldr	r2, [pc, #276]	; (8006380 <HAL_I2C_EV_IRQHandler+0xac8>)
 800626a:	40c2      	lsrs	r2, r0
 800626c:	07d6      	lsls	r6, r2, #31
 800626e:	d5d2      	bpl.n	8006216 <HAL_I2C_EV_IRQHandler+0x95e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e7d5      	b.n	8006226 <HAL_I2C_EV_IRQHandler+0x96e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800627a:	2801      	cmp	r0, #1
 800627c:	f43f af1d 	beq.w	80060ba <HAL_I2C_EV_IRQHandler+0x802>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006280:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006282:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006288:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628a:	9106      	str	r1, [sp, #24]
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	9206      	str	r2, [sp, #24]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	9206      	str	r2, [sp, #24]
 8006294:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e613      	b.n	8005ec8 <HAL_I2C_EV_IRQHandler+0x610>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a6:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80062ae:	d018      	beq.n	80062e2 <HAL_I2C_EV_IRQHandler+0xa2a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b0:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b2:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ba:	9103      	str	r1, [sp, #12]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	9203      	str	r2, [sp, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	9303      	str	r3, [sp, #12]
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	e5ff      	b.n	8005ec8 <HAL_I2C_EV_IRQHandler+0x610>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062ce:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80062d0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062d2:	f7ff f9c5 	bl	8005660 <HAL_I2C_MemRxCpltCallback>
 80062d6:	f7ff bb1b 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e705      	b.n	80060ee <HAL_I2C_EV_IRQHandler+0x836>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	9204      	str	r2, [sp, #16]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	9204      	str	r2, [sp, #16]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	9204      	str	r2, [sp, #16]
 80062ec:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e5e7      	b.n	8005ec8 <HAL_I2C_EV_IRQHandler+0x610>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e6df      	b.n	80060c2 <HAL_I2C_EV_IRQHandler+0x80a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006302:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006304:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006306:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 800630a:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800630c:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800630e:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006310:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006312:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006316:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 800631a:	e770      	b.n	80061fe <HAL_I2C_EV_IRQHandler+0x946>
        HAL_I2C_MemTxCpltCallback(hi2c);
 800631c:	f7ff f944 	bl	80055a8 <HAL_I2C_MemTxCpltCallback>
 8006320:	f7ff baf6 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006324:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006326:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006328:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800632c:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800632e:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006330:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006332:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006334:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006336:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800633a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800633e:	f7ff f927 	bl	8005590 <HAL_I2C_MasterTxCpltCallback>
 8006342:	f7ff bae5 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006346:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006348:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	f042 0220 	orr.w	r2, r2, #32
 800634e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006356:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 800635c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800635e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006360:	3b01      	subs	r3, #1
 8006362:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8006364:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8006366:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8006368:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800636a:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 800636c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8006370:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006372:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006376:	f7ff f975 	bl	8005664 <HAL_I2C_ErrorCallback>
 800637a:	f7ff bac9 	b.w	8005910 <HAL_I2C_EV_IRQHandler+0x58>
 800637e:	bf00      	nop
 8006380:	00010014 	.word	0x00010014

08006384 <HAL_I2C_ER_IRQHandler>:
{
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006386:	6803      	ldr	r3, [r0, #0]
 8006388:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800638a:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800638c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8006390:	b2ce      	uxtb	r6, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006392:	05e9      	lsls	r1, r5, #23
{
 8006394:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006396:	469c      	mov	ip, r3
 8006398:	f3c5 2040 	ubfx	r0, r5, #9, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800639c:	d57e      	bpl.n	800649c <HAL_I2C_ER_IRQHandler+0x118>
 800639e:	0a11      	lsrs	r1, r2, #8
 80063a0:	07cf      	lsls	r7, r1, #31
 80063a2:	d57b      	bpl.n	800649c <HAL_I2C_ER_IRQHandler+0x118>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063a8:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063aa:	2800      	cmp	r0, #0
 80063ac:	f040 8085 	bne.w	80064ba <HAL_I2C_ER_IRQHandler+0x136>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063b0:	0568      	lsls	r0, r5, #21
 80063b2:	f140 80da 	bpl.w	800656a <HAL_I2C_ER_IRQHandler+0x1e6>
    error |= HAL_I2C_ERROR_BERR;
 80063b6:	2701      	movs	r7, #1
    tmp2 = hi2c->XferCount;
 80063b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80063ba:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80063be:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80063c0:	2e20      	cmp	r6, #32
    tmp2 = hi2c->XferCount;
 80063c2:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 80063c4:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80063c6:	f000 80af 	beq.w	8006528 <HAL_I2C_ER_IRQHandler+0x1a4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063ce:	2e10      	cmp	r6, #16
      error |= HAL_I2C_ERROR_AF;
 80063d0:	f047 0704 	orr.w	r7, r7, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d4:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063d6:	d001      	beq.n	80063dc <HAL_I2C_ER_IRQHandler+0x58>
 80063d8:	2e40      	cmp	r6, #64	; 0x40
 80063da:	d103      	bne.n	80063e4 <HAL_I2C_ER_IRQHandler+0x60>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063e4:	052e      	lsls	r6, r5, #20
 80063e6:	469c      	mov	ip, r3
 80063e8:	d505      	bpl.n	80063f6 <HAL_I2C_ER_IRQHandler+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063ea:	f46f 6300 	mvn.w	r3, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 80063ee:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063f2:	f8cc 3014 	str.w	r3, [ip, #20]
    hi2c->ErrorCode |= error;
 80063f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063f8:	431f      	orrs	r7, r3
 80063fa:	6427      	str	r7, [r4, #64]	; 0x40
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006400:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8006404:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006406:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006408:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800640a:	d068      	beq.n	80064de <HAL_I2C_ER_IRQHandler+0x15a>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d066      	beq.n	80064de <HAL_I2C_ER_IRQHandler+0x15a>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006410:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8006414:	2b28      	cmp	r3, #40	; 0x28
 8006416:	f000 8082 	beq.w	800651e <HAL_I2C_ER_IRQHandler+0x19a>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800641a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800641e:	051d      	lsls	r5, r3, #20
 8006420:	d407      	bmi.n	8006432 <HAL_I2C_ER_IRQHandler+0xae>
 8006422:	2a60      	cmp	r2, #96	; 0x60
 8006424:	d005      	beq.n	8006432 <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 8006426:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006428:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800642a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800642e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8006432:	2300      	movs	r3, #0
 8006434:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006436:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800643a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800643e:	d05b      	beq.n	80064f8 <HAL_I2C_ER_IRQHandler+0x174>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006440:	f8dc 3004 	ldr.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006444:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800644a:	f8cc 3004 	str.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800644e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006452:	2b01      	cmp	r3, #1
 8006454:	f000 80ab 	beq.w	80065ae <HAL_I2C_ER_IRQHandler+0x22a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006458:	4b82      	ldr	r3, [pc, #520]	; (8006664 <HAL_I2C_ER_IRQHandler+0x2e0>)
 800645a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800645c:	f7fd fede 	bl	800421c <HAL_DMA_Abort_IT>
 8006460:	b150      	cbz	r0, 8006478 <HAL_I2C_ER_IRQHandler+0xf4>
        __HAL_I2C_DISABLE(hi2c);
 8006462:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006464:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8006466:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006468:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 800646a:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800646e:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8006470:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8006472:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006476:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8006478:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800647a:	071b      	lsls	r3, r3, #28
 800647c:	d004      	beq.n	8006488 <HAL_I2C_ER_IRQHandler+0x104>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	6853      	ldr	r3, [r2, #4]
 8006482:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006486:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8006488:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800648c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800648e:	0757      	lsls	r7, r2, #29
  CurrentState = hi2c->State;
 8006490:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006492:	d502      	bpl.n	800649a <HAL_I2C_ER_IRQHandler+0x116>
 8006494:	2b28      	cmp	r3, #40	; 0x28
 8006496:	f000 80a8 	beq.w	80065ea <HAL_I2C_ER_IRQHandler+0x266>
}
 800649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800649c:	b110      	cbz	r0, 80064a4 <HAL_I2C_ER_IRQHandler+0x120>
 800649e:	0a11      	lsrs	r1, r2, #8
 80064a0:	07cf      	lsls	r7, r1, #31
 80064a2:	d41a      	bmi.n	80064da <HAL_I2C_ER_IRQHandler+0x156>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064a4:	f3c5 2780 	ubfx	r7, r5, #10, #1
 80064a8:	b11f      	cbz	r7, 80064b2 <HAL_I2C_ER_IRQHandler+0x12e>
 80064aa:	05d1      	lsls	r1, r2, #23
 80064ac:	d5f5      	bpl.n	800649a <HAL_I2C_ER_IRQHandler+0x116>
 80064ae:	2700      	movs	r7, #0
 80064b0:	e782      	b.n	80063b8 <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064b2:	0529      	lsls	r1, r5, #20
 80064b4:	d5f1      	bpl.n	800649a <HAL_I2C_ER_IRQHandler+0x116>
 80064b6:	0a11      	lsrs	r1, r2, #8
 80064b8:	e008      	b.n	80064cc <HAL_I2C_ER_IRQHandler+0x148>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064ba:	2703      	movs	r7, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064c0:	0568      	lsls	r0, r5, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064c2:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064c4:	f53f af78 	bmi.w	80063b8 <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064c8:	052a      	lsls	r2, r5, #20
 80064ca:	d504      	bpl.n	80064d6 <HAL_I2C_ER_IRQHandler+0x152>
 80064cc:	07cb      	lsls	r3, r1, #31
 80064ce:	d48c      	bmi.n	80063ea <HAL_I2C_ER_IRQHandler+0x66>
  if (error != HAL_I2C_ERROR_NONE)
 80064d0:	2f00      	cmp	r7, #0
 80064d2:	d0e2      	beq.n	800649a <HAL_I2C_ER_IRQHandler+0x116>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	469c      	mov	ip, r3
 80064d8:	e78d      	b.n	80063f6 <HAL_I2C_ER_IRQHandler+0x72>
 80064da:	2702      	movs	r7, #2
 80064dc:	e7ee      	b.n	80064bc <HAL_I2C_ER_IRQHandler+0x138>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064de:	2a22      	cmp	r2, #34	; 0x22
 80064e0:	d196      	bne.n	8006410 <HAL_I2C_ER_IRQHandler+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80064e2:	f8dc 3000 	ldr.w	r3, [ip]
 80064e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ea:	f8cc 3000 	str.w	r3, [ip]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80064ee:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80064f2:	051e      	lsls	r6, r3, #20
 80064f4:	d49d      	bmi.n	8006432 <HAL_I2C_ER_IRQHandler+0xae>
 80064f6:	e796      	b.n	8006426 <HAL_I2C_ER_IRQHandler+0xa2>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064f8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80064fc:	2a60      	cmp	r2, #96	; 0x60
 80064fe:	d03b      	beq.n	8006578 <HAL_I2C_ER_IRQHandler+0x1f4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006500:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006504:	065a      	lsls	r2, r3, #25
 8006506:	d506      	bpl.n	8006516 <HAL_I2C_ER_IRQHandler+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800650a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800650e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006512:	3301      	adds	r3, #1
 8006514:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff f8a4 	bl	8005664 <HAL_I2C_ErrorCallback>
 800651c:	e7ac      	b.n	8006478 <HAL_I2C_ER_IRQHandler+0xf4>
    hi2c->PreviousState = I2C_STATE_NONE;
 800651e:	2200      	movs	r2, #0
 8006520:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8006526:	e786      	b.n	8006436 <HAL_I2C_ER_IRQHandler+0xb2>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006528:	b9ca      	cbnz	r2, 800655e <HAL_I2C_ER_IRQHandler+0x1da>
 800652a:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 800652e:	2a21      	cmp	r2, #33	; 0x21
 8006530:	d003      	beq.n	800653a <HAL_I2C_ER_IRQHandler+0x1b6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006532:	2928      	cmp	r1, #40	; 0x28
 8006534:	d113      	bne.n	800655e <HAL_I2C_ER_IRQHandler+0x1da>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006536:	2821      	cmp	r0, #33	; 0x21
 8006538:	d111      	bne.n	800655e <HAL_I2C_ER_IRQHandler+0x1da>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800653a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800653e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006540:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006542:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006544:	d05e      	beq.n	8006604 <HAL_I2C_ER_IRQHandler+0x280>
 8006546:	2920      	cmp	r1, #32
 8006548:	d05c      	beq.n	8006604 <HAL_I2C_ER_IRQHandler+0x280>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800654a:	2a21      	cmp	r2, #33	; 0x21
 800654c:	d073      	beq.n	8006636 <HAL_I2C_ER_IRQHandler+0x2b2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800654e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006552:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006554:	052d      	lsls	r5, r5, #20
 8006556:	d5bb      	bpl.n	80064d0 <HAL_I2C_ER_IRQHandler+0x14c>
 8006558:	f8d4 c000 	ldr.w	ip, [r4]
 800655c:	e745      	b.n	80063ea <HAL_I2C_ER_IRQHandler+0x66>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      error |= HAL_I2C_ERROR_AF;
 8006562:	f047 0704 	orr.w	r7, r7, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006566:	615a      	str	r2, [r3, #20]
 8006568:	e73c      	b.n	80063e4 <HAL_I2C_ER_IRQHandler+0x60>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800656a:	052a      	lsls	r2, r5, #20
    error |= HAL_I2C_ERROR_BERR;
 800656c:	f04f 0701 	mov.w	r7, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006570:	f53f af3b 	bmi.w	80063ea <HAL_I2C_ER_IRQHandler+0x66>
 8006574:	469c      	mov	ip, r3
 8006576:	e73e      	b.n	80063f6 <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->State = HAL_I2C_STATE_READY;
 8006578:	2220      	movs	r2, #32
 800657a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800657e:	6423      	str	r3, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006580:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006584:	0659      	lsls	r1, r3, #25
 8006586:	d508      	bpl.n	800659a <HAL_I2C_ER_IRQHandler+0x216>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800658a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800658e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006592:	f8d4 c000 	ldr.w	ip, [r4]
 8006596:	3301      	adds	r3, #1
 8006598:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800659a:	f8dc 3000 	ldr.w	r3, [ip]
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	f8cc 3000 	str.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 80065a6:	4620      	mov	r0, r4
 80065a8:	f7ff f908 	bl	80057bc <HAL_I2C_AbortCpltCallback>
 80065ac:	e764      	b.n	8006478 <HAL_I2C_ER_IRQHandler+0xf4>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80065b0:	4b2c      	ldr	r3, [pc, #176]	; (8006664 <HAL_I2C_ER_IRQHandler+0x2e0>)
 80065b2:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065b4:	f7fd fe32 	bl	800421c <HAL_DMA_Abort_IT>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	f43f af5d 	beq.w	8006478 <HAL_I2C_ER_IRQHandler+0xf4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	0650      	lsls	r0, r2, #25
 80065c4:	d506      	bpl.n	80065d4 <HAL_I2C_ER_IRQHandler+0x250>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80065cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	3201      	adds	r2, #1
 80065d2:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80065d4:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80065d8:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80065dc:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80065de:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 80065e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065e6:	4798      	blx	r3
 80065e8:	e746      	b.n	8006478 <HAL_I2C_ER_IRQHandler+0xf4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065ea:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <HAL_I2C_ER_IRQHandler+0x2e4>)
 80065ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80065ee:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80065f4:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80065f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80065fe:	f7fe ffd1 	bl	80055a4 <HAL_I2C_ListenCpltCallback>
}
 8006602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006604:	2a28      	cmp	r2, #40	; 0x28
 8006606:	d1a0      	bne.n	800654a <HAL_I2C_ER_IRQHandler+0x1c6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006608:	4a17      	ldr	r2, [pc, #92]	; (8006668 <HAL_I2C_ER_IRQHandler+0x2e4>)
 800660a:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800660c:	685a      	ldr	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800660e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006616:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006618:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	400a      	ands	r2, r1
 800661e:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006620:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8006622:	2320      	movs	r3, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8006624:	6321      	str	r1, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006626:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8006628:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800662c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8006630:	f7fe ffb8 	bl	80055a4 <HAL_I2C_ListenCpltCallback>
 8006634:	e78e      	b.n	8006554 <HAL_I2C_ER_IRQHandler+0x1d0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006636:	490c      	ldr	r1, [pc, #48]	; (8006668 <HAL_I2C_ER_IRQHandler+0x2e4>)
 8006638:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 800663a:	2020      	movs	r0, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800663c:	2100      	movs	r1, #0
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800663e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006640:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006644:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006648:	685a      	ldr	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800664e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006652:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006654:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	400a      	ands	r2, r1
 800665a:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800665c:	4620      	mov	r0, r4
 800665e:	f7fe ff9b 	bl	8005598 <HAL_I2C_SlaveTxCpltCallback>
 8006662:	e777      	b.n	8006554 <HAL_I2C_ER_IRQHandler+0x1d0>
 8006664:	080057c1 	.word	0x080057c1
 8006668:	ffff0000 	.word	0xffff0000

0800666c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800666c:	2800      	cmp	r0, #0
 800666e:	f000 8132 	beq.w	80068d6 <HAL_RCC_OscConfig+0x26a>
{
 8006672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006676:	6803      	ldr	r3, [r0, #0]
 8006678:	07dd      	lsls	r5, r3, #31
{
 800667a:	b082      	sub	sp, #8
 800667c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	d52f      	bpl.n	80066e0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006680:	49ac      	ldr	r1, [pc, #688]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 8006682:	688a      	ldr	r2, [r1, #8]
 8006684:	f002 020c 	and.w	r2, r2, #12
 8006688:	2a04      	cmp	r2, #4
 800668a:	f000 80ea 	beq.w	8006862 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668e:	688a      	ldr	r2, [r1, #8]
 8006690:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006694:	2a08      	cmp	r2, #8
 8006696:	f000 80e0 	beq.w	800685a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a0:	f000 80e9 	beq.w	8006876 <HAL_RCC_OscConfig+0x20a>
 80066a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a8:	f000 8178 	beq.w	800699c <HAL_RCC_OscConfig+0x330>
 80066ac:	4da1      	ldr	r5, [pc, #644]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 80066ae:	682a      	ldr	r2, [r5, #0]
 80066b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	682a      	ldr	r2, [r5, #0]
 80066b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066bc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f040 80de 	bne.w	8006880 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c4:	f7fd fbf4 	bl	8003eb0 <HAL_GetTick>
 80066c8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ca:	e005      	b.n	80066d8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066cc:	f7fd fbf0 	bl	8003eb0 <HAL_GetTick>
 80066d0:	1b80      	subs	r0, r0, r6
 80066d2:	2864      	cmp	r0, #100	; 0x64
 80066d4:	f200 80f2 	bhi.w	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	039b      	lsls	r3, r3, #14
 80066dc:	d4f6      	bmi.n	80066cc <HAL_RCC_OscConfig+0x60>
 80066de:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066e0:	079f      	lsls	r7, r3, #30
 80066e2:	d475      	bmi.n	80067d0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e4:	071a      	lsls	r2, r3, #28
 80066e6:	d515      	bpl.n	8006714 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066e8:	6963      	ldr	r3, [r4, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80a5 	beq.w	800683a <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f0:	4b91      	ldr	r3, [pc, #580]	; (8006938 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066f2:	4d90      	ldr	r5, [pc, #576]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80066f8:	f7fd fbda 	bl	8003eb0 <HAL_GetTick>
 80066fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fe:	e005      	b.n	800670c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006700:	f7fd fbd6 	bl	8003eb0 <HAL_GetTick>
 8006704:	1b80      	subs	r0, r0, r6
 8006706:	2802      	cmp	r0, #2
 8006708:	f200 80d8 	bhi.w	80068bc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800670e:	079b      	lsls	r3, r3, #30
 8006710:	d5f6      	bpl.n	8006700 <HAL_RCC_OscConfig+0x94>
 8006712:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006714:	0758      	lsls	r0, r3, #29
 8006716:	d53b      	bpl.n	8006790 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006718:	4a86      	ldr	r2, [pc, #536]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 800671a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800671c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8006720:	f040 80db 	bne.w	80068da <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672c:	6413      	str	r3, [r2, #64]	; 0x40
 800672e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006738:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673a:	4d80      	ldr	r5, [pc, #512]	; (800693c <HAL_RCC_OscConfig+0x2d0>)
 800673c:	682a      	ldr	r2, [r5, #0]
 800673e:	05d1      	lsls	r1, r2, #23
 8006740:	f140 80ac 	bpl.w	800689c <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006744:	68a3      	ldr	r3, [r4, #8]
 8006746:	2b01      	cmp	r3, #1
 8006748:	f000 80c9 	beq.w	80068de <HAL_RCC_OscConfig+0x272>
 800674c:	2b05      	cmp	r3, #5
 800674e:	f000 812f 	beq.w	80069b0 <HAL_RCC_OscConfig+0x344>
 8006752:	4d78      	ldr	r5, [pc, #480]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 8006754:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	672a      	str	r2, [r5, #112]	; 0x70
 800675c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800675e:	f022 0204 	bic.w	r2, r2, #4
 8006762:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 80bf 	bne.w	80068e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676a:	f7fd fba1 	bl	8003eb0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800676e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006772:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006774:	e006      	b.n	8006784 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fd fb9b 	bl	8003eb0 <HAL_GetTick>
 800677a:	eba0 0008 	sub.w	r0, r0, r8
 800677e:	42b8      	cmp	r0, r7
 8006780:	f200 809c 	bhi.w	80068bc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006784:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006786:	0798      	lsls	r0, r3, #30
 8006788:	d4f5      	bmi.n	8006776 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800678a:	2e00      	cmp	r6, #0
 800678c:	f040 80dc 	bne.w	8006948 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006790:	69a0      	ldr	r0, [r4, #24]
 8006792:	b1c8      	cbz	r0, 80067c8 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006794:	4d67      	ldr	r5, [pc, #412]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 8006796:	68aa      	ldr	r2, [r5, #8]
 8006798:	f002 020c 	and.w	r2, r2, #12
 800679c:	2a08      	cmp	r2, #8
 800679e:	f000 80d9 	beq.w	8006954 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a2:	4a67      	ldr	r2, [pc, #412]	; (8006940 <HAL_RCC_OscConfig+0x2d4>)
 80067a4:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067a6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80067a8:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067aa:	f000 810b 	beq.w	80069c4 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ae:	f7fd fb7f 	bl	8003eb0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80067b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b6:	e004      	b.n	80067c2 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fd fb7a 	bl	8003eb0 <HAL_GetTick>
 80067bc:	1b40      	subs	r0, r0, r5
 80067be:	2802      	cmp	r0, #2
 80067c0:	d87c      	bhi.n	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	019b      	lsls	r3, r3, #6
 80067c6:	d4f7      	bmi.n	80067b8 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80067c8:	2000      	movs	r0, #0
}
 80067ca:	b002      	add	sp, #8
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067d0:	4a58      	ldr	r2, [pc, #352]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 80067d2:	6891      	ldr	r1, [r2, #8]
 80067d4:	f011 0f0c 	tst.w	r1, #12
 80067d8:	d024      	beq.n	8006824 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067da:	6891      	ldr	r1, [r2, #8]
 80067dc:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067e0:	2908      	cmp	r1, #8
 80067e2:	d01c      	beq.n	800681e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067e4:	68e3      	ldr	r3, [r4, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8092 	beq.w	8006910 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 80067ec:	4b55      	ldr	r3, [pc, #340]	; (8006944 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ee:	4d51      	ldr	r5, [pc, #324]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80067f4:	f7fd fb5c 	bl	8003eb0 <HAL_GetTick>
 80067f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fa:	e004      	b.n	8006806 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067fc:	f7fd fb58 	bl	8003eb0 <HAL_GetTick>
 8006800:	1b80      	subs	r0, r0, r6
 8006802:	2802      	cmp	r0, #2
 8006804:	d85a      	bhi.n	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	0798      	lsls	r0, r3, #30
 800680a:	d5f7      	bpl.n	80067fc <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	6922      	ldr	r2, [r4, #16]
 8006810:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006814:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	e762      	b.n	80066e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800681e:	6852      	ldr	r2, [r2, #4]
 8006820:	0256      	lsls	r6, r2, #9
 8006822:	d4df      	bmi.n	80067e4 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006824:	4a43      	ldr	r2, [pc, #268]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	0795      	lsls	r5, r2, #30
 800682a:	d54b      	bpl.n	80068c4 <HAL_RCC_OscConfig+0x258>
 800682c:	68e2      	ldr	r2, [r4, #12]
 800682e:	2a01      	cmp	r2, #1
 8006830:	d048      	beq.n	80068c4 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8006832:	2001      	movs	r0, #1
}
 8006834:	b002      	add	sp, #8
 8006836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800683a:	4a3f      	ldr	r2, [pc, #252]	; (8006938 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800683c:	4d3d      	ldr	r5, [pc, #244]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800683e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006840:	f7fd fb36 	bl	8003eb0 <HAL_GetTick>
 8006844:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006846:	e004      	b.n	8006852 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006848:	f7fd fb32 	bl	8003eb0 <HAL_GetTick>
 800684c:	1b80      	subs	r0, r0, r6
 800684e:	2802      	cmp	r0, #2
 8006850:	d834      	bhi.n	80068bc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006852:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006854:	079f      	lsls	r7, r3, #30
 8006856:	d4f7      	bmi.n	8006848 <HAL_RCC_OscConfig+0x1dc>
 8006858:	e75b      	b.n	8006712 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800685a:	684a      	ldr	r2, [r1, #4]
 800685c:	0250      	lsls	r0, r2, #9
 800685e:	f57f af1c 	bpl.w	800669a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006862:	4a34      	ldr	r2, [pc, #208]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	0391      	lsls	r1, r2, #14
 8006868:	f57f af3a 	bpl.w	80066e0 <HAL_RCC_OscConfig+0x74>
 800686c:	6862      	ldr	r2, [r4, #4]
 800686e:	2a00      	cmp	r2, #0
 8006870:	f47f af36 	bne.w	80066e0 <HAL_RCC_OscConfig+0x74>
 8006874:	e7dd      	b.n	8006832 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006876:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 8006878:	6813      	ldr	r3, [r2, #0]
 800687a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800687e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006880:	f7fd fb16 	bl	8003eb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006884:	4d2b      	ldr	r5, [pc, #172]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8006886:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006888:	e004      	b.n	8006894 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800688a:	f7fd fb11 	bl	8003eb0 <HAL_GetTick>
 800688e:	1b80      	subs	r0, r0, r6
 8006890:	2864      	cmp	r0, #100	; 0x64
 8006892:	d813      	bhi.n	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	039a      	lsls	r2, r3, #14
 8006898:	d5f7      	bpl.n	800688a <HAL_RCC_OscConfig+0x21e>
 800689a:	e720      	b.n	80066de <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800689c:	682a      	ldr	r2, [r5, #0]
 800689e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a2:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80068a4:	f7fd fb04 	bl	8003eb0 <HAL_GetTick>
 80068a8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	05da      	lsls	r2, r3, #23
 80068ae:	f53f af49 	bmi.w	8006744 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fd fafd 	bl	8003eb0 <HAL_GetTick>
 80068b6:	1bc0      	subs	r0, r0, r7
 80068b8:	2802      	cmp	r0, #2
 80068ba:	d9f6      	bls.n	80068aa <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 80068bc:	2003      	movs	r0, #3
}
 80068be:	b002      	add	sp, #8
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c4:	491b      	ldr	r1, [pc, #108]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 80068c6:	6920      	ldr	r0, [r4, #16]
 80068c8:	680a      	ldr	r2, [r1, #0]
 80068ca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80068ce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80068d2:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d4:	e706      	b.n	80066e4 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
}
 80068d8:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80068da:	2600      	movs	r6, #0
 80068dc:	e72d      	b.n	800673a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068de:	4a15      	ldr	r2, [pc, #84]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
 80068e0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80068e8:	f7fd fae2 	bl	8003eb0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ec:	4d11      	ldr	r5, [pc, #68]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80068ee:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	e005      	b.n	8006902 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fd fadb 	bl	8003eb0 <HAL_GetTick>
 80068fa:	eba0 0008 	sub.w	r0, r0, r8
 80068fe:	42b8      	cmp	r0, r7
 8006900:	d8dc      	bhi.n	80068bc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006902:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006904:	079b      	lsls	r3, r3, #30
 8006906:	d5f6      	bpl.n	80068f6 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8006908:	2e00      	cmp	r6, #0
 800690a:	f43f af41 	beq.w	8006790 <HAL_RCC_OscConfig+0x124>
 800690e:	e01b      	b.n	8006948 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8006910:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006912:	4d08      	ldr	r5, [pc, #32]	; (8006934 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8006914:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006916:	f7fd facb 	bl	8003eb0 <HAL_GetTick>
 800691a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800691c:	e004      	b.n	8006928 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800691e:	f7fd fac7 	bl	8003eb0 <HAL_GetTick>
 8006922:	1b80      	subs	r0, r0, r6
 8006924:	2802      	cmp	r0, #2
 8006926:	d8c9      	bhi.n	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	0799      	lsls	r1, r3, #30
 800692c:	d4f7      	bmi.n	800691e <HAL_RCC_OscConfig+0x2b2>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	e6d8      	b.n	80066e4 <HAL_RCC_OscConfig+0x78>
 8006932:	bf00      	nop
 8006934:	40023800 	.word	0x40023800
 8006938:	42470e80 	.word	0x42470e80
 800693c:	40007000 	.word	0x40007000
 8006940:	42470060 	.word	0x42470060
 8006944:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8006948:	4a35      	ldr	r2, [pc, #212]	; (8006a20 <HAL_RCC_OscConfig+0x3b4>)
 800694a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800694c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
 8006952:	e71d      	b.n	8006790 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006954:	2801      	cmp	r0, #1
 8006956:	f43f af6d 	beq.w	8006834 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800695a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695c:	69e2      	ldr	r2, [r4, #28]
 800695e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006962:	4291      	cmp	r1, r2
 8006964:	f47f af65 	bne.w	8006832 <HAL_RCC_OscConfig+0x1c6>
 8006968:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800696a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696e:	4291      	cmp	r1, r2
 8006970:	f47f af5f 	bne.w	8006832 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006974:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006978:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800697a:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800697c:	428a      	cmp	r2, r1
 800697e:	f47f af58 	bne.w	8006832 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006982:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006984:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006988:	4291      	cmp	r1, r2
 800698a:	f47f af52 	bne.w	8006832 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800698e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006990:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8006994:	1a18      	subs	r0, r3, r0
 8006996:	bf18      	it	ne
 8006998:	2001      	movne	r0, #1
 800699a:	e74b      	b.n	8006834 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699c:	4b20      	ldr	r3, [pc, #128]	; (8006a20 <HAL_RCC_OscConfig+0x3b4>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e767      	b.n	8006880 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b0:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <HAL_RCC_OscConfig+0x3b4>)
 80069b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069b4:	f042 0204 	orr.w	r2, r2, #4
 80069b8:	671a      	str	r2, [r3, #112]	; 0x70
 80069ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70
 80069c2:	e791      	b.n	80068e8 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80069c4:	f7fd fa74 	bl	8003eb0 <HAL_GetTick>
 80069c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ca:	e005      	b.n	80069d8 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069cc:	f7fd fa70 	bl	8003eb0 <HAL_GetTick>
 80069d0:	1b80      	subs	r0, r0, r6
 80069d2:	2802      	cmp	r0, #2
 80069d4:	f63f af72 	bhi.w	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	0199      	lsls	r1, r3, #6
 80069dc:	d4f6      	bmi.n	80069cc <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069de:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80069e2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80069e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e8:	4c0d      	ldr	r4, [pc, #52]	; (8006a20 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ea:	4333      	orrs	r3, r6
 80069ec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80069f0:	0852      	lsrs	r2, r2, #1
 80069f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80069f6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80069f8:	490a      	ldr	r1, [pc, #40]	; (8006a24 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80069fe:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006a02:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8006a04:	f7fd fa54 	bl	8003eb0 <HAL_GetTick>
 8006a08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a0a:	e005      	b.n	8006a18 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0c:	f7fd fa50 	bl	8003eb0 <HAL_GetTick>
 8006a10:	1b40      	subs	r0, r0, r5
 8006a12:	2802      	cmp	r0, #2
 8006a14:	f63f af52 	bhi.w	80068bc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	019a      	lsls	r2, r3, #6
 8006a1c:	d5f6      	bpl.n	8006a0c <HAL_RCC_OscConfig+0x3a0>
 8006a1e:	e6d3      	b.n	80067c8 <HAL_RCC_OscConfig+0x15c>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	42470060 	.word	0x42470060

08006a28 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a28:	4917      	ldr	r1, [pc, #92]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8006a2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a2c:	688b      	ldr	r3, [r1, #8]
 8006a2e:	f003 030c 	and.w	r3, r3, #12
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d01b      	beq.n	8006a6e <HAL_RCC_GetSysClockFreq+0x46>
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d117      	bne.n	8006a6a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a3c:	684b      	ldr	r3, [r1, #4]
 8006a3e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a46:	d114      	bne.n	8006a72 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a48:	6849      	ldr	r1, [r1, #4]
 8006a4a:	4810      	ldr	r0, [pc, #64]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x64>)
 8006a4c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006a50:	fba1 0100 	umull	r0, r1, r1, r0
 8006a54:	f7fa f8c4 	bl	8000be0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x60>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006a60:	3301      	adds	r3, #1
 8006a62:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006a64:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006a68:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8006a6a:	4808      	ldr	r0, [pc, #32]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8006a6c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8006a6e:	4808      	ldr	r0, [pc, #32]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8006a70:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a72:	684b      	ldr	r3, [r1, #4]
 8006a74:	4806      	ldr	r0, [pc, #24]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x68>)
 8006a76:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006a7a:	fba3 0100 	umull	r0, r1, r3, r0
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f7fa f8ae 	bl	8000be0 <__aeabi_uldivmod>
 8006a84:	e7e8      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x30>
 8006a86:	bf00      	nop
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	00f42400 	.word	0x00f42400
 8006a90:	00b71b00 	.word	0x00b71b00

08006a94 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006a94:	b160      	cbz	r0, 8006ab0 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a96:	4a49      	ldr	r2, [pc, #292]	; (8006bbc <HAL_RCC_ClockConfig+0x128>)
 8006a98:	6813      	ldr	r3, [r2, #0]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	428b      	cmp	r3, r1
 8006aa0:	d208      	bcs.n	8006ab4 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa2:	b2cb      	uxtb	r3, r1
 8006aa4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	428b      	cmp	r3, r1
 8006aae:	d001      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8006ab0:	2001      	movs	r0, #1
}
 8006ab2:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab4:	6803      	ldr	r3, [r0, #0]
{
 8006ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aba:	079d      	lsls	r5, r3, #30
 8006abc:	d514      	bpl.n	8006ae8 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abe:	075c      	lsls	r4, r3, #29
 8006ac0:	d504      	bpl.n	8006acc <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac2:	4c3f      	ldr	r4, [pc, #252]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006ac4:	68a2      	ldr	r2, [r4, #8]
 8006ac6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8006aca:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006acc:	071a      	lsls	r2, r3, #28
 8006ace:	d504      	bpl.n	8006ada <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad0:	4c3b      	ldr	r4, [pc, #236]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006ad2:	68a2      	ldr	r2, [r4, #8]
 8006ad4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8006ad8:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ada:	4c39      	ldr	r4, [pc, #228]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006adc:	6885      	ldr	r5, [r0, #8]
 8006ade:	68a2      	ldr	r2, [r4, #8]
 8006ae0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006ae4:	432a      	orrs	r2, r5
 8006ae6:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae8:	07df      	lsls	r7, r3, #31
 8006aea:	4604      	mov	r4, r0
 8006aec:	460d      	mov	r5, r1
 8006aee:	d522      	bpl.n	8006b36 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af0:	6842      	ldr	r2, [r0, #4]
 8006af2:	2a01      	cmp	r2, #1
 8006af4:	d057      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af6:	1e93      	subs	r3, r2, #2
 8006af8:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006afa:	4b31      	ldr	r3, [pc, #196]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006afe:	d959      	bls.n	8006bb4 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	0799      	lsls	r1, r3, #30
 8006b02:	d525      	bpl.n	8006b50 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b04:	4e2e      	ldr	r6, [pc, #184]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006b06:	68b3      	ldr	r3, [r6, #8]
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006b10:	f7fd f9ce 	bl	8003eb0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b14:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006b18:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1a:	e005      	b.n	8006b28 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b1c:	f7fd f9c8 	bl	8003eb0 <HAL_GetTick>
 8006b20:	eba0 0008 	sub.w	r0, r0, r8
 8006b24:	42b8      	cmp	r0, r7
 8006b26:	d843      	bhi.n	8006bb0 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b28:	68b3      	ldr	r3, [r6, #8]
 8006b2a:	6862      	ldr	r2, [r4, #4]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
 8006b30:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006b34:	d1f2      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b36:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <HAL_RCC_ClockConfig+0x128>)
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	42ab      	cmp	r3, r5
 8006b40:	d909      	bls.n	8006b56 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b42:	b2eb      	uxtb	r3, r5
 8006b44:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	d002      	beq.n	8006b56 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8006b50:	2001      	movs	r0, #1
}
 8006b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	075a      	lsls	r2, r3, #29
 8006b5a:	d506      	bpl.n	8006b6a <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b5c:	4918      	ldr	r1, [pc, #96]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006b5e:	68e0      	ldr	r0, [r4, #12]
 8006b60:	688a      	ldr	r2, [r1, #8]
 8006b62:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006b66:	4302      	orrs	r2, r0
 8006b68:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6a:	071b      	lsls	r3, r3, #28
 8006b6c:	d412      	bmi.n	8006b94 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b6e:	f7ff ff5b 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 8006b72:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006b74:	4c13      	ldr	r4, [pc, #76]	; (8006bc4 <HAL_RCC_ClockConfig+0x130>)
 8006b76:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8006b78:	4913      	ldr	r1, [pc, #76]	; (8006bc8 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b7a:	4a14      	ldr	r2, [pc, #80]	; (8006bcc <HAL_RCC_ClockConfig+0x138>)
 8006b7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006b80:	5ce3      	ldrb	r3, [r4, r3]
 8006b82:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8006b86:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b88:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8006b8a:	f7fd f947 	bl	8003e1c <HAL_InitTick>
  return HAL_OK;
 8006b8e:	2000      	movs	r0, #0
}
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006b96:	6921      	ldr	r1, [r4, #16]
 8006b98:	6893      	ldr	r3, [r2, #8]
 8006b9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006b9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006ba2:	6093      	str	r3, [r2, #8]
 8006ba4:	e7e3      	b.n	8006b6e <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_RCC_ClockConfig+0x12c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	039e      	lsls	r6, r3, #14
 8006bac:	d4aa      	bmi.n	8006b04 <HAL_RCC_ClockConfig+0x70>
 8006bae:	e7cf      	b.n	8006b50 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8006bb0:	2003      	movs	r0, #3
 8006bb2:	e7ed      	b.n	8006b90 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb4:	0198      	lsls	r0, r3, #6
 8006bb6:	d4a5      	bmi.n	8006b04 <HAL_RCC_ClockConfig+0x70>
 8006bb8:	e7ca      	b.n	8006b50 <HAL_RCC_ClockConfig+0xbc>
 8006bba:	bf00      	nop
 8006bbc:	40023c00 	.word	0x40023c00
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	08009cb0 	.word	0x08009cb0
 8006bc8:	20000008 	.word	0x20000008
 8006bcc:	20000000 	.word	0x20000000

08006bd0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006bd2:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006bd6:	4905      	ldr	r1, [pc, #20]	; (8006bec <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bd8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006bdc:	6808      	ldr	r0, [r1, #0]
 8006bde:	5cd3      	ldrb	r3, [r2, r3]
}
 8006be0:	40d8      	lsrs	r0, r3
 8006be2:	4770      	bx	lr
 8006be4:	40023800 	.word	0x40023800
 8006be8:	08009cc0 	.word	0x08009cc0
 8006bec:	20000000 	.word	0x20000000

08006bf0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006bf2:	4a05      	ldr	r2, [pc, #20]	; (8006c08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006bf6:	4905      	ldr	r1, [pc, #20]	; (8006c0c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bf8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006bfc:	6808      	ldr	r0, [r1, #0]
 8006bfe:	5cd3      	ldrb	r3, [r2, r3]
}
 8006c00:	40d8      	lsrs	r0, r3
 8006c02:	4770      	bx	lr
 8006c04:	40023800 	.word	0x40023800
 8006c08:	08009cc0 	.word	0x08009cc0
 8006c0c:	20000000 	.word	0x20000000

08006c10 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d05c      	beq.n	8006cce <HAL_TIM_Base_Init+0xbe>
{
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c20:	b3bb      	cbz	r3, 8006c92 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c22:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c24:	4e3a      	ldr	r6, [pc, #232]	; (8006d10 <HAL_TIM_Base_Init+0x100>)
 8006c26:	69a5      	ldr	r5, [r4, #24]
 8006c28:	68e0      	ldr	r0, [r4, #12]
 8006c2a:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c32:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8006c34:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c36:	d04c      	beq.n	8006cd2 <HAL_TIM_Base_Init+0xc2>
 8006c38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006c3c:	d058      	beq.n	8006cf0 <HAL_TIM_Base_Init+0xe0>
 8006c3e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8006c42:	42b2      	cmp	r2, r6
 8006c44:	d02a      	beq.n	8006c9c <HAL_TIM_Base_Init+0x8c>
 8006c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c4a:	42b2      	cmp	r2, r6
 8006c4c:	d026      	beq.n	8006c9c <HAL_TIM_Base_Init+0x8c>
 8006c4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c52:	42b2      	cmp	r2, r6
 8006c54:	d022      	beq.n	8006c9c <HAL_TIM_Base_Init+0x8c>
 8006c56:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8006c5a:	42b2      	cmp	r2, r6
 8006c5c:	d01e      	beq.n	8006c9c <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c5e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8006c62:	42b2      	cmp	r2, r6
 8006c64:	d013      	beq.n	8006c8e <HAL_TIM_Base_Init+0x7e>
 8006c66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c6a:	42b2      	cmp	r2, r6
 8006c6c:	d00f      	beq.n	8006c8e <HAL_TIM_Base_Init+0x7e>
 8006c6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c72:	42b2      	cmp	r2, r6
 8006c74:	d00b      	beq.n	8006c8e <HAL_TIM_Base_Init+0x7e>
 8006c76:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8006c7a:	42b2      	cmp	r2, r6
 8006c7c:	d007      	beq.n	8006c8e <HAL_TIM_Base_Init+0x7e>
 8006c7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c82:	42b2      	cmp	r2, r6
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_Base_Init+0x7e>
 8006c86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c8a:	42b2      	cmp	r2, r6
 8006c8c:	d138      	bne.n	8006d00 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8e:	6926      	ldr	r6, [r4, #16]
 8006c90:	e033      	b.n	8006cfa <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8006c92:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006c96:	f7fc ff81 	bl	8003b9c <HAL_TIM_Base_MspInit>
 8006c9a:	e7c2      	b.n	8006c22 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8006c9c:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c9e:	4f1d      	ldr	r7, [pc, #116]	; (8006d14 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ca4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cac:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb2:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb4:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8006cb6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cba:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cbc:	d101      	bne.n	8006cc2 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbe:	6963      	ldr	r3, [r4, #20]
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8006cc6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006cce:	2001      	movs	r0, #1
}
 8006cd0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006cd2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cd4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cda:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006ce8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cea:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cec:	6291      	str	r1, [r2, #40]	; 0x28
 8006cee:	e7e6      	b.n	8006cbe <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8006cf0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cf2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cf8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfe:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d04:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006d06:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d08:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d0a:	6291      	str	r1, [r2, #40]	; 0x28
 8006d0c:	e7d9      	b.n	8006cc2 <HAL_TIM_Base_Init+0xb2>
 8006d0e:	bf00      	nop
 8006d10:	40010000 	.word	0x40010000
 8006d14:	40010400 	.word	0x40010400

08006d18 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d20:	6893      	ldr	r3, [r2, #8]
 8006d22:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006d38:	2000      	movs	r0, #0
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006d3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d05a      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8006d46:	6803      	ldr	r3, [r0, #0]
{
 8006d48:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006d4e:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006d50:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d52:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006d56:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8006d5a:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8006d5c:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8006d5e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8006d62:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006d64:	d074      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x114>
 8006d66:	d94a      	bls.n	8006dfe <HAL_TIM_ConfigClockSource+0xc2>
 8006d68:	2c60      	cmp	r4, #96	; 0x60
 8006d6a:	d02d      	beq.n	8006dc8 <HAL_TIM_ConfigClockSource+0x8c>
 8006d6c:	d956      	bls.n	8006e1c <HAL_TIM_ConfigClockSource+0xe0>
 8006d6e:	2c70      	cmp	r4, #112	; 0x70
 8006d70:	d01a      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0x6c>
 8006d72:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8006d76:	d10e      	bne.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d78:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8006d7c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8006d7e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d80:	432a      	orrs	r2, r5
 8006d82:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d86:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d8a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d94:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8006d96:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006d9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006da2:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006da4:	4618      	mov	r0, r3
}
 8006da6:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8006dac:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8006dae:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006db0:	432a      	orrs	r2, r5
 8006db2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dba:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8006dbc:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006dbe:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dc0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006dc4:	609a      	str	r2, [r3, #8]
      break;
 8006dc6:	e7e6      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dca:	684d      	ldr	r5, [r1, #4]
 8006dcc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dce:	f024 0410 	bic.w	r4, r4, #16
 8006dd2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dd8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006de0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006de4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006de8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dea:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006dec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006df2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006df6:	609a      	str	r2, [r3, #8]
 8006df8:	e7cd      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8006dfa:	2002      	movs	r0, #2
}
 8006dfc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006dfe:	2c10      	cmp	r4, #16
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0xd0>
 8006e02:	d93d      	bls.n	8006e80 <HAL_TIM_ConfigClockSource+0x144>
 8006e04:	2c20      	cmp	r4, #32
 8006e06:	d001      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0xd0>
 8006e08:	2c30      	cmp	r4, #48	; 0x30
 8006e0a:	d1c4      	bne.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8006e0c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e16:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8006e18:	609c      	str	r4, [r3, #8]
 8006e1a:	e7bc      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006e1c:	2c50      	cmp	r4, #80	; 0x50
 8006e1e:	d1ba      	bne.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8006e20:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e22:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e24:	684c      	ldr	r4, [r1, #4]
 8006e26:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e28:	f026 0601 	bic.w	r6, r6, #1
 8006e2c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e30:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e38:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006e3c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e40:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006e42:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e48:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006e4c:	609a      	str	r2, [r3, #8]
 8006e4e:	e7a2      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8006e50:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e52:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e54:	684c      	ldr	r4, [r1, #4]
 8006e56:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e58:	f026 0601 	bic.w	r6, r6, #1
 8006e5c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e60:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e68:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006e6c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006e72:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e78:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006e7c:	609a      	str	r2, [r3, #8]
 8006e7e:	e78a      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	d0c3      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0xd0>
 8006e84:	e787      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5a>
 8006e86:	bf00      	nop

08006e88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d03a      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e90:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e92:	2202      	movs	r2, #2
{
 8006e94:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8006e96:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006e9a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e9c:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9e:	4d1b      	ldr	r5, [pc, #108]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8006ea0:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea6:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea8:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8006eaa:	f04f 0601 	mov.w	r6, #1
 8006eae:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8006eb2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb4:	d019      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d016      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006ebc:	4a14      	ldr	r2, [pc, #80]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006ed2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006eda:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8006ee2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d104      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eea:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eec:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ef2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006ef4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006efc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006f00:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006f02:	4618      	mov	r0, r3
}
 8006f04:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006f06:	2002      	movs	r0, #2
}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40000400 	.word	0x40000400

08006f14 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f000 8093 	beq.w	8007040 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8006f1e:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f24:	4604      	mov	r4, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8085 	beq.w	8007036 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f2c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f2e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8006f30:	2224      	movs	r2, #36	; 0x24
 8006f32:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006f36:	68d8      	ldr	r0, [r3, #12]
 8006f38:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f3c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006f40:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f42:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f44:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f46:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006f4a:	4329      	orrs	r1, r5
 8006f4c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006f4e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f50:	6965      	ldr	r5, [r4, #20]
 8006f52:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8006f54:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f58:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006f5a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f5e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006f60:	430a      	orrs	r2, r1
 8006f62:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	69a1      	ldr	r1, [r4, #24]
 8006f68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f6c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f72:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f74:	4a36      	ldr	r2, [pc, #216]	; (8007050 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f76:	d034      	beq.n	8006fe2 <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d063      	beq.n	8007044 <HAL_UART_Init+0x130>
 8006f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d05f      	beq.n	8007044 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7ff fe24 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	4d32      	ldr	r5, [pc, #200]	; (8007054 <HAL_UART_Init+0x140>)
 8006f8c:	2219      	movs	r2, #25
 8006f8e:	fba0 0102 	umull	r0, r1, r0, r2
 8006f92:	009a      	lsls	r2, r3, #2
 8006f94:	0f9b      	lsrs	r3, r3, #30
 8006f96:	f7f9 fe23 	bl	8000be0 <__aeabi_uldivmod>
 8006f9a:	fba5 2100 	umull	r2, r1, r5, r0
 8006f9e:	0949      	lsrs	r1, r1, #5
 8006fa0:	2264      	movs	r2, #100	; 0x64
 8006fa2:	fb02 0211 	mls	r2, r2, r1, r0
 8006fa6:	0112      	lsls	r2, r2, #4
 8006fa8:	3232      	adds	r2, #50	; 0x32
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	fba5 0202 	umull	r0, r2, r5, r2
 8006fb0:	0109      	lsls	r1, r1, #4
 8006fb2:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8006fb6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fc6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006fc8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fca:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006fcc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006fce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8006fd4:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006fd8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d031      	beq.n	800704a <HAL_UART_Init+0x136>
 8006fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d02d      	beq.n	800704a <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fee:	f7ff fdef 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	1892      	adds	r2, r2, r2
 8006ff8:	f04f 0119 	mov.w	r1, #25
 8006ffc:	eb46 0306 	adc.w	r3, r6, r6
 8007000:	fba0 0101 	umull	r0, r1, r0, r1
 8007004:	f7f9 fdec 	bl	8000be0 <__aeabi_uldivmod>
 8007008:	4e12      	ldr	r6, [pc, #72]	; (8007054 <HAL_UART_Init+0x140>)
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	fba6 2100 	umull	r2, r1, r6, r0
 8007010:	094d      	lsrs	r5, r1, #5
 8007012:	2264      	movs	r2, #100	; 0x64
 8007014:	fb02 0215 	mls	r2, r2, r5, r0
 8007018:	00d2      	lsls	r2, r2, #3
 800701a:	3232      	adds	r2, #50	; 0x32
 800701c:	fba6 1202 	umull	r1, r2, r6, r2
 8007020:	0952      	lsrs	r2, r2, #5
 8007022:	f002 0107 	and.w	r1, r2, #7
 8007026:	0052      	lsls	r2, r2, #1
 8007028:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800702c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007030:	440a      	add	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	e7c0      	b.n	8006fb8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8007036:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800703a:	f7fc fdc7 	bl	8003bcc <HAL_UART_MspInit>
 800703e:	e775      	b.n	8006f2c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8007040:	2001      	movs	r0, #1
}
 8007042:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8007044:	f7ff fdd4 	bl	8006bf0 <HAL_RCC_GetPCLK2Freq>
 8007048:	e79e      	b.n	8006f88 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 800704a:	f7ff fdd1 	bl	8006bf0 <HAL_RCC_GetPCLK2Freq>
 800704e:	e7d0      	b.n	8006ff2 <HAL_UART_Init+0xde>
 8007050:	40011000 	.word	0x40011000
 8007054:	51eb851f 	.word	0x51eb851f

08007058 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007058:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800705c:	2b20      	cmp	r3, #32
 800705e:	d120      	bne.n	80070a2 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8007060:	b309      	cbz	r1, 80070a6 <HAL_UART_Receive_IT+0x4e>
 8007062:	b302      	cbz	r2, 80070a6 <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8007064:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007068:	2b01      	cmp	r3, #1
 800706a:	d01a      	beq.n	80070a2 <HAL_UART_Receive_IT+0x4a>
{
 800706c:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007070:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 8007072:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007074:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007078:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800707c:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 800707e:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007080:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 8007084:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 8007086:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800708a:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800708c:	6962      	ldr	r2, [r4, #20]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007094:	68e2      	ldr	r2, [r4, #12]
 8007096:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 800709a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800709c:	60e2      	str	r2, [r4, #12]
}
 800709e:	bc30      	pop	{r4, r5}
 80070a0:	4770      	bx	lr
    return HAL_BUSY;
 80070a2:	2002      	movs	r0, #2
}
 80070a4:	4770      	bx	lr
      return HAL_ERROR;
 80070a6:	2001      	movs	r0, #1
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop

080070ac <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 80070ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d12d      	bne.n	8007110 <HAL_UART_Transmit_DMA+0x64>
{
 80070b4:	b570      	push	{r4, r5, r6, lr}
    if ((pData == NULL) || (Size == 0U))
 80070b6:	b349      	cbz	r1, 800710c <HAL_UART_Transmit_DMA+0x60>
 80070b8:	b342      	cbz	r2, 800710c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80070ba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d028      	beq.n	8007114 <HAL_UART_Transmit_DMA+0x68>
 80070c2:	4604      	mov	r4, r0
 80070c4:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
    __HAL_LOCK(huart);
 80070c8:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
 80070cc:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ce:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d0:	2621      	movs	r6, #33	; 0x21
    huart->TxXferCount = Size;
 80070d2:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d6:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070da:	4e0f      	ldr	r6, [pc, #60]	; (8007118 <HAL_UART_Transmit_DMA+0x6c>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070dc:	6822      	ldr	r2, [r4, #0]
    huart->TxXferSize = Size;
 80070de:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 80070e0:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070e2:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070e4:	4e0d      	ldr	r6, [pc, #52]	; (800711c <HAL_UART_Transmit_DMA+0x70>)
 80070e6:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070e8:	4e0d      	ldr	r6, [pc, #52]	; (8007120 <HAL_UART_Transmit_DMA+0x74>)
    huart->hdmatx->XferAbortCallback = NULL;
 80070ea:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070ec:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070ee:	3204      	adds	r2, #4
 80070f0:	f7fd f856 	bl	80041a0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070fa:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070fc:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80070fe:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8007106:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007108:	615a      	str	r2, [r3, #20]
}
 800710a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800710c:	2001      	movs	r0, #1
}
 800710e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007110:	2002      	movs	r0, #2
}
 8007112:	4770      	bx	lr
    return HAL_BUSY;
 8007114:	2002      	movs	r0, #2
}
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	08007125 	.word	0x08007125
 800711c:	08007155 	.word	0x08007155
 8007120:	080071d1 	.word	0x080071d1

08007124 <UART_DMATransmitCplt>:
{
 8007124:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007126:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007128:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007130:	d10a      	bne.n	8007148 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007132:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8007134:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007136:	6953      	ldr	r3, [r2, #20]
 8007138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713c:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800713e:	68d3      	ldr	r3, [r2, #12]
 8007140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007144:	60d3      	str	r3, [r2, #12]
}
 8007146:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007148:	f7fc f88e 	bl	8003268 <HAL_UART_TxCpltCallback>
}
 800714c:	bd08      	pop	{r3, pc}
 800714e:	bf00      	nop

08007150 <HAL_UART_TxHalfCpltCallback>:
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop

08007154 <UART_DMATxHalfCplt>:
{
 8007154:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007156:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007158:	f7ff fffa 	bl	8007150 <HAL_UART_TxHalfCpltCallback>
}
 800715c:	bd08      	pop	{r3, pc}
 800715e:	bf00      	nop

08007160 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007160:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007162:	6884      	ldr	r4, [r0, #8]
 8007164:	6901      	ldr	r1, [r0, #16]
 8007166:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007168:	6802      	ldr	r2, [r0, #0]
 800716a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800716e:	d020      	beq.n	80071b2 <UART_Receive_IT.part.1+0x52>
 8007170:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007172:	6852      	ldr	r2, [r2, #4]
 8007174:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007176:	b9c9      	cbnz	r1, 80071ac <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007178:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800717a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800717c:	3b01      	subs	r3, #1
 800717e:	b29b      	uxth	r3, r3
 8007180:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007182:	b98b      	cbnz	r3, 80071a8 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007184:	6802      	ldr	r2, [r0, #0]
 8007186:	68d1      	ldr	r1, [r2, #12]
 8007188:	f021 0120 	bic.w	r1, r1, #32
 800718c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800718e:	68d1      	ldr	r1, [r2, #12]
 8007190:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007194:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007196:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007198:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800719a:	f021 0101 	bic.w	r1, r1, #1
 800719e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80071a0:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80071a4:	f7fc f87e 	bl	80032a4 <HAL_UART_RxCpltCallback>
}
 80071a8:	2000      	movs	r0, #0
 80071aa:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071b0:	e7e2      	b.n	8007178 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071b2:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071b4:	b929      	cbnz	r1, 80071c2 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071ba:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 80071be:	6283      	str	r3, [r0, #40]	; 0x28
 80071c0:	e7db      	b.n	800717a <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 80071c8:	6283      	str	r3, [r0, #40]	; 0x28
 80071ca:	e7d6      	b.n	800717a <UART_Receive_IT.part.1+0x1a>

080071cc <HAL_UART_ErrorCallback>:
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop

080071d0 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80071d2:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071d4:	6803      	ldr	r3, [r0, #0]
 80071d6:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071d8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 80071dc:	2a21      	cmp	r2, #33	; 0x21
 80071de:	d01b      	beq.n	8007218 <UART_DMAError+0x48>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071e0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071e2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80071e6:	2a22      	cmp	r2, #34	; 0x22
 80071e8:	d006      	beq.n	80071f8 <UART_DMAError+0x28>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80071ec:	f043 0310 	orr.w	r3, r3, #16
 80071f0:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80071f2:	f7ff ffeb 	bl	80071cc <HAL_UART_ErrorCallback>
}
 80071f6:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071f8:	064a      	lsls	r2, r1, #25
 80071fa:	d5f6      	bpl.n	80071ea <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80071fc:	2200      	movs	r2, #0
 80071fe:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007206:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007208:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800720a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
 8007216:	e7e8      	b.n	80071ea <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007218:	0609      	lsls	r1, r1, #24
 800721a:	d5e1      	bpl.n	80071e0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800721c:	2200      	movs	r2, #0
 800721e:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007220:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007222:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007224:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007228:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800722a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 800722e:	e7d7      	b.n	80071e0 <UART_DMAError+0x10>

08007230 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
{
 8007234:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8007236:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007238:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800723a:	6959      	ldr	r1, [r3, #20]
{
 800723c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800723e:	d046      	beq.n	80072ce <HAL_UART_IRQHandler+0x9e>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007240:	f011 0101 	ands.w	r1, r1, #1
 8007244:	d04c      	beq.n	80072e0 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007246:	07d0      	lsls	r0, r2, #31
 8007248:	d505      	bpl.n	8007256 <HAL_UART_IRQHandler+0x26>
 800724a:	05ee      	lsls	r6, r5, #23
 800724c:	d503      	bpl.n	8007256 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007250:	f040 0001 	orr.w	r0, r0, #1
 8007254:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007256:	0750      	lsls	r0, r2, #29
 8007258:	d574      	bpl.n	8007344 <HAL_UART_IRQHandler+0x114>
 800725a:	b129      	cbz	r1, 8007268 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800725c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725e:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007260:	f040 0002 	orr.w	r0, r0, #2
 8007264:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007266:	d471      	bmi.n	800734c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007268:	0716      	lsls	r6, r2, #28
 800726a:	d503      	bpl.n	8007274 <HAL_UART_IRQHandler+0x44>
 800726c:	06a8      	lsls	r0, r5, #26
 800726e:	d472      	bmi.n	8007356 <HAL_UART_IRQHandler+0x126>
 8007270:	2900      	cmp	r1, #0
 8007272:	d170      	bne.n	8007356 <HAL_UART_IRQHandler+0x126>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007274:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007276:	2900      	cmp	r1, #0
 8007278:	d031      	beq.n	80072de <HAL_UART_IRQHandler+0xae>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800727a:	0696      	lsls	r6, r2, #26
 800727c:	d501      	bpl.n	8007282 <HAL_UART_IRQHandler+0x52>
 800727e:	06a8      	lsls	r0, r5, #26
 8007280:	d472      	bmi.n	8007368 <HAL_UART_IRQHandler+0x138>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007282:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007284:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007286:	0709      	lsls	r1, r1, #28
 8007288:	d402      	bmi.n	8007290 <HAL_UART_IRQHandler+0x60>
 800728a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800728e:	d078      	beq.n	8007382 <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007296:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007298:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800729a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80072a2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	0652      	lsls	r2, r2, #25
 80072aa:	d559      	bpl.n	8007360 <HAL_UART_IRQHandler+0x130>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ac:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80072ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d052      	beq.n	8007360 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ba:	4b3a      	ldr	r3, [pc, #232]	; (80073a4 <HAL_UART_IRQHandler+0x174>)
 80072bc:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072be:	f7fc ffad 	bl	800421c <HAL_DMA_Abort_IT>
 80072c2:	b160      	cbz	r0, 80072de <HAL_UART_IRQHandler+0xae>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80072c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80072cc:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ce:	0691      	lsls	r1, r2, #26
 80072d0:	d509      	bpl.n	80072e6 <HAL_UART_IRQHandler+0xb6>
 80072d2:	06ae      	lsls	r6, r5, #26
 80072d4:	d507      	bpl.n	80072e6 <HAL_UART_IRQHandler+0xb6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80072da:	2b22      	cmp	r3, #34	; 0x22
 80072dc:	d04d      	beq.n	800737a <HAL_UART_IRQHandler+0x14a>
}
 80072de:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072e0:	f415 7f90 	tst.w	r5, #288	; 0x120
 80072e4:	d1af      	bne.n	8007246 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072e6:	0616      	lsls	r6, r2, #24
 80072e8:	d40e      	bmi.n	8007308 <HAL_UART_IRQHandler+0xd8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072ea:	0651      	lsls	r1, r2, #25
 80072ec:	d5f7      	bpl.n	80072de <HAL_UART_IRQHandler+0xae>
 80072ee:	066a      	lsls	r2, r5, #25
 80072f0:	d5f5      	bpl.n	80072de <HAL_UART_IRQHandler+0xae>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072f2:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80072f4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072fa:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80072fc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80072fe:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007302:	f7fb ffb1 	bl	8003268 <HAL_UART_TxCpltCallback>
}
 8007306:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007308:	0628      	lsls	r0, r5, #24
 800730a:	d5ee      	bpl.n	80072ea <HAL_UART_IRQHandler+0xba>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800730c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007310:	2a21      	cmp	r2, #33	; 0x21
 8007312:	d1e4      	bne.n	80072de <HAL_UART_IRQHandler+0xae>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007314:	68a1      	ldr	r1, [r4, #8]
 8007316:	6a22      	ldr	r2, [r4, #32]
 8007318:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800731c:	d036      	beq.n	800738c <HAL_UART_IRQHandler+0x15c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800731e:	1c51      	adds	r1, r2, #1
 8007320:	6221      	str	r1, [r4, #32]
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8007326:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007328:	3a01      	subs	r2, #1
 800732a:	b292      	uxth	r2, r2
 800732c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800732e:	2a00      	cmp	r2, #0
 8007330:	d1d5      	bne.n	80072de <HAL_UART_IRQHandler+0xae>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007338:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007340:	60da      	str	r2, [r3, #12]
}
 8007342:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007344:	0790      	lsls	r0, r2, #30
 8007346:	d58f      	bpl.n	8007268 <HAL_UART_IRQHandler+0x38>
 8007348:	2900      	cmp	r1, #0
 800734a:	d08d      	beq.n	8007268 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800734c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800734e:	f040 0004 	orr.w	r0, r0, #4
 8007352:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007354:	e788      	b.n	8007268 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007356:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007358:	f041 0108 	orr.w	r1, r1, #8
 800735c:	63e1      	str	r1, [r4, #60]	; 0x3c
 800735e:	e789      	b.n	8007274 <HAL_UART_IRQHandler+0x44>
            HAL_UART_ErrorCallback(huart);
 8007360:	4620      	mov	r0, r4
 8007362:	f7ff ff33 	bl	80071cc <HAL_UART_ErrorCallback>
}
 8007366:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007368:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 800736c:	2a22      	cmp	r2, #34	; 0x22
 800736e:	d188      	bne.n	8007282 <HAL_UART_IRQHandler+0x52>
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fef5 	bl	8007160 <UART_Receive_IT.part.1>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	e783      	b.n	8007282 <HAL_UART_IRQHandler+0x52>
}
 800737a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800737e:	f7ff beef 	b.w	8007160 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff ff22 	bl	80071cc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800738a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800738c:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800738e:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007390:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007394:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007396:	b910      	cbnz	r0, 800739e <HAL_UART_IRQHandler+0x16e>
        huart->pTxBuffPtr += 2U;
 8007398:	3202      	adds	r2, #2
 800739a:	6222      	str	r2, [r4, #32]
 800739c:	e7c3      	b.n	8007326 <HAL_UART_IRQHandler+0xf6>
        huart->pTxBuffPtr += 1U;
 800739e:	3201      	adds	r2, #1
 80073a0:	6222      	str	r2, [r4, #32]
 80073a2:	e7c0      	b.n	8007326 <HAL_UART_IRQHandler+0xf6>
 80073a4:	080073a9 	.word	0x080073a9

080073a8 <UART_DMAAbortOnError>:
{
 80073a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80073ac:	2200      	movs	r2, #0
 80073ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80073b0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80073b2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80073b4:	f7ff ff0a 	bl	80071cc <HAL_UART_ErrorCallback>
}
 80073b8:	bd08      	pop	{r3, pc}
 80073ba:	bf00      	nop

080073bc <arm_mat_trans_f32>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	f8b0 c000 	ldrh.w	ip, [r0]
 80073c4:	884a      	ldrh	r2, [r1, #2]
 80073c6:	6844      	ldr	r4, [r0, #4]
 80073c8:	8843      	ldrh	r3, [r0, #2]
 80073ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80073ce:	4562      	cmp	r2, ip
 80073d0:	b083      	sub	sp, #12
 80073d2:	d15f      	bne.n	8007494 <arm_mat_trans_f32+0xd8>
 80073d4:	f8b1 e000 	ldrh.w	lr, [r1]
 80073d8:	459e      	cmp	lr, r3
 80073da:	d15b      	bne.n	8007494 <arm_mat_trans_f32+0xd8>
 80073dc:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80073e0:	f00e 0303 	and.w	r3, lr, #3
 80073e4:	461a      	mov	r2, r3
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f103 0902 	add.w	r9, r3, #2
 80073f2:	3a01      	subs	r2, #1
 80073f4:	3301      	adds	r3, #1
 80073f6:	ea4f 170c 	mov.w	r7, ip, lsl #4
 80073fa:	fb03 f707 	mul.w	r7, r3, r7
 80073fe:	b292      	uxth	r2, r2
 8007400:	3201      	adds	r2, #1
 8007402:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 8007406:	463b      	mov	r3, r7
 8007408:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800740c:	4647      	mov	r7, r8
 800740e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8007412:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007416:	2600      	movs	r6, #0
 8007418:	4698      	mov	r8, r3
 800741a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 800741e:	b3bf      	cbz	r7, 8007490 <arm_mat_trans_f32+0xd4>
 8007420:	f104 0210 	add.w	r2, r4, #16
 8007424:	eb04 0509 	add.w	r5, r4, r9
 8007428:	4603      	mov	r3, r0
 800742a:	ed52 7a04 	vldr	s15, [r2, #-16]
 800742e:	edc3 7a00 	vstr	s15, [r3]
 8007432:	ed52 7a03 	vldr	s15, [r2, #-12]
 8007436:	440b      	add	r3, r1
 8007438:	edc3 7a00 	vstr	s15, [r3]
 800743c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8007440:	440b      	add	r3, r1
 8007442:	edc3 7a00 	vstr	s15, [r3]
 8007446:	ed52 7a01 	vldr	s15, [r2, #-4]
 800744a:	3210      	adds	r2, #16
 800744c:	440b      	add	r3, r1
 800744e:	42aa      	cmp	r2, r5
 8007450:	edc3 7a00 	vstr	s15, [r3]
 8007454:	440b      	add	r3, r1
 8007456:	d1e8      	bne.n	800742a <arm_mat_trans_f32+0x6e>
 8007458:	eb04 030b 	add.w	r3, r4, fp
 800745c:	4440      	add	r0, r8
 800745e:	9a01      	ldr	r2, [sp, #4]
 8007460:	b182      	cbz	r2, 8007484 <arm_mat_trans_f32+0xc8>
 8007462:	eb03 040e 	add.w	r4, r3, lr
 8007466:	f853 2b04 	ldr.w	r2, [r3], #4
 800746a:	6002      	str	r2, [r0, #0]
 800746c:	42a3      	cmp	r3, r4
 800746e:	4408      	add	r0, r1
 8007470:	d1f9      	bne.n	8007466 <arm_mat_trans_f32+0xaa>
 8007472:	3601      	adds	r6, #1
 8007474:	b2b6      	uxth	r6, r6
 8007476:	4566      	cmp	r6, ip
 8007478:	d1cf      	bne.n	800741a <arm_mat_trans_f32+0x5e>
 800747a:	2000      	movs	r0, #0
 800747c:	b240      	sxtb	r0, r0
 800747e:	b003      	add	sp, #12
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	3601      	adds	r6, #1
 8007486:	b2b6      	uxth	r6, r6
 8007488:	4566      	cmp	r6, ip
 800748a:	461c      	mov	r4, r3
 800748c:	d1c5      	bne.n	800741a <arm_mat_trans_f32+0x5e>
 800748e:	e7f4      	b.n	800747a <arm_mat_trans_f32+0xbe>
 8007490:	4623      	mov	r3, r4
 8007492:	e7e4      	b.n	800745e <arm_mat_trans_f32+0xa2>
 8007494:	20fd      	movs	r0, #253	; 0xfd
 8007496:	b240      	sxtb	r0, r0
 8007498:	b003      	add	sp, #12
 800749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	bf00      	nop

080074a0 <arm_mat_sub_f32>:
 80074a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a2:	e891 0090 	ldmia.w	r1, {r4, r7}
 80074a6:	6803      	ldr	r3, [r0, #0]
 80074a8:	6846      	ldr	r6, [r0, #4]
 80074aa:	6855      	ldr	r5, [r2, #4]
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d14f      	bne.n	8007550 <arm_mat_sub_f32+0xb0>
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d14c      	bne.n	8007550 <arm_mat_sub_f32+0xb0>
 80074b6:	8842      	ldrh	r2, [r0, #2]
 80074b8:	8803      	ldrh	r3, [r0, #0]
 80074ba:	fb03 f002 	mul.w	r0, r3, r2
 80074be:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 80074c2:	d033      	beq.n	800752c <arm_mat_sub_f32+0x8c>
 80074c4:	f106 0110 	add.w	r1, r6, #16
 80074c8:	f107 0210 	add.w	r2, r7, #16
 80074cc:	f105 0310 	add.w	r3, r5, #16
 80074d0:	4674      	mov	r4, lr
 80074d2:	ed51 6a03 	vldr	s13, [r1, #-12]
 80074d6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80074da:	ed51 7a04 	vldr	s15, [r1, #-16]
 80074de:	ed52 5a04 	vldr	s11, [r2, #-16]
 80074e2:	ed11 7a02 	vldr	s14, [r1, #-8]
 80074e6:	ed12 6a02 	vldr	s12, [r2, #-8]
 80074ea:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80074ee:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80074f2:	ed43 6a03 	vstr	s13, [r3, #-12]
 80074f6:	ed43 7a04 	vstr	s15, [r3, #-16]
 80074fa:	ed51 7a01 	vldr	s15, [r1, #-4]
 80074fe:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007502:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007506:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800750a:	3c01      	subs	r4, #1
 800750c:	ed03 7a02 	vstr	s14, [r3, #-8]
 8007510:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007514:	f101 0110 	add.w	r1, r1, #16
 8007518:	f102 0210 	add.w	r2, r2, #16
 800751c:	f103 0310 	add.w	r3, r3, #16
 8007520:	d1d7      	bne.n	80074d2 <arm_mat_sub_f32+0x32>
 8007522:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8007526:	441e      	add	r6, r3
 8007528:	441f      	add	r7, r3
 800752a:	441d      	add	r5, r3
 800752c:	f010 0303 	ands.w	r3, r0, #3
 8007530:	bf18      	it	ne
 8007532:	462a      	movne	r2, r5
 8007534:	d009      	beq.n	800754a <arm_mat_sub_f32+0xaa>
 8007536:	ecf6 7a01 	vldmia	r6!, {s15}
 800753a:	ecb7 7a01 	vldmia	r7!, {s14}
 800753e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007542:	3b01      	subs	r3, #1
 8007544:	ece2 7a01 	vstmia	r2!, {s15}
 8007548:	d1f5      	bne.n	8007536 <arm_mat_sub_f32+0x96>
 800754a:	2000      	movs	r0, #0
 800754c:	b240      	sxtb	r0, r0
 800754e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007550:	20fd      	movs	r0, #253	; 0xfd
 8007552:	b240      	sxtb	r0, r0
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007556:	bf00      	nop

08007558 <arm_mat_mult_f32>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	8843      	ldrh	r3, [r0, #2]
 800755e:	880d      	ldrh	r5, [r1, #0]
 8007560:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007564:	6854      	ldr	r4, [r2, #4]
 8007566:	8800      	ldrh	r0, [r0, #0]
 8007568:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800756c:	b087      	sub	sp, #28
 800756e:	429d      	cmp	r5, r3
 8007570:	9003      	str	r0, [sp, #12]
 8007572:	9404      	str	r4, [sp, #16]
 8007574:	f040 808d 	bne.w	8007692 <arm_mat_mult_f32+0x13a>
 8007578:	8813      	ldrh	r3, [r2, #0]
 800757a:	4283      	cmp	r3, r0
 800757c:	f040 8089 	bne.w	8007692 <arm_mat_mult_f32+0x13a>
 8007580:	8853      	ldrh	r3, [r2, #2]
 8007582:	4543      	cmp	r3, r8
 8007584:	f040 8085 	bne.w	8007692 <arm_mat_mult_f32+0x13a>
 8007588:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 800758c:	f005 0303 	and.w	r3, r5, #3
 8007590:	461a      	mov	r2, r3
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007598:	b29b      	uxth	r3, r3
 800759a:	3301      	adds	r3, #1
 800759c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80075a0:	fb0b fb03 	mul.w	fp, fp, r3
 80075a4:	3a01      	subs	r2, #1
 80075a6:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 80075aa:	00ab      	lsls	r3, r5, #2
 80075ac:	b292      	uxth	r2, r2
 80075ae:	9305      	str	r3, [sp, #20]
 80075b0:	2300      	movs	r3, #0
 80075b2:	3201      	adds	r2, #1
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	460b      	mov	r3, r1
 80075b8:	684c      	ldr	r4, [r1, #4]
 80075ba:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80075be:	4651      	mov	r1, sl
 80075c0:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80075c4:	46da      	mov	sl, fp
 80075c6:	469b      	mov	fp, r3
 80075c8:	9b04      	ldr	r3, [sp, #16]
 80075ca:	9a02      	ldr	r2, [sp, #8]
 80075cc:	2600      	movs	r6, #0
 80075ce:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80075d2:	f10c 0510 	add.w	r5, ip, #16
 80075d6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800769c <arm_mat_mult_f32+0x144>
 80075da:	2900      	cmp	r1, #0
 80075dc:	d057      	beq.n	800768e <arm_mat_mult_f32+0x136>
 80075de:	f10e 0210 	add.w	r2, lr, #16
 80075e2:	4623      	mov	r3, r4
 80075e4:	ed52 5a04 	vldr	s11, [r2, #-16]
 80075e8:	edd3 6a00 	vldr	s13, [r3]
 80075ec:	ed12 7a03 	vldr	s14, [r2, #-12]
 80075f0:	ed12 5a02 	vldr	s10, [r2, #-8]
 80075f4:	ed12 6a01 	vldr	s12, [r2, #-4]
 80075f8:	4403      	add	r3, r0
 80075fa:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80075fe:	edd3 6a00 	vldr	s13, [r3]
 8007602:	4403      	add	r3, r0
 8007604:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007608:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800760c:	edd3 6a00 	vldr	s13, [r3]
 8007610:	4403      	add	r3, r0
 8007612:	ee77 5a27 	vadd.f32	s11, s14, s15
 8007616:	ee65 7a26 	vmul.f32	s15, s10, s13
 800761a:	edd3 6a00 	vldr	s13, [r3]
 800761e:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8007622:	3210      	adds	r2, #16
 8007624:	ee66 7a26 	vmul.f32	s15, s12, s13
 8007628:	42aa      	cmp	r2, r5
 800762a:	4403      	add	r3, r0
 800762c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007630:	d1d8      	bne.n	80075e4 <arm_mat_mult_f32+0x8c>
 8007632:	4454      	add	r4, sl
 8007634:	4663      	mov	r3, ip
 8007636:	9a01      	ldr	r2, [sp, #4]
 8007638:	b162      	cbz	r2, 8007654 <arm_mat_mult_f32+0xfc>
 800763a:	eb03 0209 	add.w	r2, r3, r9
 800763e:	ecf3 6a01 	vldmia	r3!, {s13}
 8007642:	ed94 7a00 	vldr	s14, [r4]
 8007646:	ee26 7a87 	vmul.f32	s14, s13, s14
 800764a:	4293      	cmp	r3, r2
 800764c:	4404      	add	r4, r0
 800764e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007652:	d1f4      	bne.n	800763e <arm_mat_mult_f32+0xe6>
 8007654:	ece7 7a01 	vstmia	r7!, {s15}
 8007658:	3601      	adds	r6, #1
 800765a:	b2b6      	uxth	r6, r6
 800765c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007660:	4546      	cmp	r6, r8
 8007662:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8007666:	d1b6      	bne.n	80075d6 <arm_mat_mult_f32+0x7e>
 8007668:	9a03      	ldr	r2, [sp, #12]
 800766a:	9c02      	ldr	r4, [sp, #8]
 800766c:	9d05      	ldr	r5, [sp, #20]
 800766e:	3a01      	subs	r2, #1
 8007670:	4434      	add	r4, r6
 8007672:	b2a4      	uxth	r4, r4
 8007674:	b292      	uxth	r2, r2
 8007676:	9402      	str	r4, [sp, #8]
 8007678:	9203      	str	r2, [sp, #12]
 800767a:	44ae      	add	lr, r5
 800767c:	44ac      	add	ip, r5
 800767e:	461c      	mov	r4, r3
 8007680:	2a00      	cmp	r2, #0
 8007682:	d1a1      	bne.n	80075c8 <arm_mat_mult_f32+0x70>
 8007684:	4610      	mov	r0, r2
 8007686:	b240      	sxtb	r0, r0
 8007688:	b007      	add	sp, #28
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	4673      	mov	r3, lr
 8007690:	e7d1      	b.n	8007636 <arm_mat_mult_f32+0xde>
 8007692:	20fd      	movs	r0, #253	; 0xfd
 8007694:	b240      	sxtb	r0, r0
 8007696:	b007      	add	sp, #28
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	00000000 	.word	0x00000000

080076a0 <arm_mat_inverse_f32>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	8803      	ldrh	r3, [r0, #0]
 80076a6:	8844      	ldrh	r4, [r0, #2]
 80076a8:	6845      	ldr	r5, [r0, #4]
 80076aa:	684a      	ldr	r2, [r1, #4]
 80076ac:	b089      	sub	sp, #36	; 0x24
 80076ae:	429c      	cmp	r4, r3
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	9501      	str	r5, [sp, #4]
 80076b4:	d004      	beq.n	80076c0 <arm_mat_inverse_f32+0x20>
 80076b6:	20fd      	movs	r0, #253	; 0xfd
 80076b8:	b240      	sxtb	r0, r0
 80076ba:	b009      	add	sp, #36	; 0x24
 80076bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c0:	880a      	ldrh	r2, [r1, #0]
 80076c2:	884b      	ldrh	r3, [r1, #2]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d1f6      	bne.n	80076b6 <arm_mat_inverse_f32+0x16>
 80076c8:	429c      	cmp	r4, r3
 80076ca:	d1f4      	bne.n	80076b6 <arm_mat_inverse_f32+0x16>
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	f000 80e4 	beq.w	800789a <arm_mat_inverse_f32+0x1fa>
 80076d2:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
 80076d6:	4623      	mov	r3, r4
 80076d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	1e67      	subs	r7, r4, #1
 80076e2:	9007      	str	r0, [sp, #28]
 80076e4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80076e8:	9e02      	ldr	r6, [sp, #8]
 80076ea:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80076ee:	4654      	mov	r4, sl
 80076f0:	4698      	mov	r8, r3
 80076f2:	e007      	b.n	8007704 <arm_mat_inverse_f32+0x64>
 80076f4:	f000 fa8d 	bl	8007c12 <memset>
 80076f8:	444e      	add	r6, r9
 80076fa:	3401      	adds	r4, #1
 80076fc:	f1a9 0904 	sub.w	r9, r9, #4
 8007700:	f10a 0a04 	add.w	sl, sl, #4
 8007704:	4652      	mov	r2, sl
 8007706:	4630      	mov	r0, r6
 8007708:	2100      	movs	r1, #0
 800770a:	b114      	cbz	r4, 8007712 <arm_mat_inverse_f32+0x72>
 800770c:	f000 fa81 	bl	8007c12 <memset>
 8007710:	4456      	add	r6, sl
 8007712:	f8c6 b000 	str.w	fp, [r6]
 8007716:	42bc      	cmp	r4, r7
 8007718:	f106 0604 	add.w	r6, r6, #4
 800771c:	464a      	mov	r2, r9
 800771e:	4630      	mov	r0, r6
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	d1e6      	bne.n	80076f4 <arm_mat_inverse_f32+0x54>
 8007726:	4643      	mov	r3, r8
 8007728:	009e      	lsls	r6, r3, #2
 800772a:	46a0      	mov	r8, r4
 800772c:	2700      	movs	r7, #0
 800772e:	461c      	mov	r4, r3
 8007730:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007734:	f8cd 800c 	str.w	r8, [sp, #12]
 8007738:	1d33      	adds	r3, r6, #4
 800773a:	9306      	str	r3, [sp, #24]
 800773c:	46b1      	mov	r9, r6
 800773e:	9705      	str	r7, [sp, #20]
 8007740:	46a6      	mov	lr, r4
 8007742:	42bc      	cmp	r4, r7
 8007744:	edd5 6a00 	vldr	s13, [r5]
 8007748:	f000 80be 	beq.w	80078c8 <arm_mat_inverse_f32+0x228>
 800774c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8007918 <arm_mat_inverse_f32+0x278>
 8007750:	463a      	mov	r2, r7
 8007752:	462b      	mov	r3, r5
 8007754:	edd3 7a00 	vldr	s15, [r3]
 8007758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007760:	bfd8      	it	le
 8007762:	eef1 7a67 	vnegle.f32	s15, s15
 8007766:	eef4 7a47 	vcmp.f32	s15, s14
 800776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776e:	f102 0201 	add.w	r2, r2, #1
 8007772:	bfc8      	it	gt
 8007774:	eeb0 7a67 	vmovgt.f32	s14, s15
 8007778:	4294      	cmp	r4, r2
 800777a:	4433      	add	r3, r6
 800777c:	d1ea      	bne.n	8007754 <arm_mat_inverse_f32+0xb4>
 800777e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007786:	f000 809f 	beq.w	80078c8 <arm_mat_inverse_f32+0x228>
 800778a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	bfd4      	ite	le
 8007794:	eef1 7a66 	vnegle.f32	s15, s13
 8007798:	eef0 7a66 	vmovgt.f32	s15, s13
 800779c:	eef4 7a47 	vcmp.f32	s15, s14
 80077a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a4:	d010      	beq.n	80077c8 <arm_mat_inverse_f32+0x128>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	b173      	cbz	r3, 80077c8 <arm_mat_inverse_f32+0x128>
 80077aa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80077ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b2:	eef1 7a66 	vneg.f32	s15, s13
 80077b6:	bfc8      	it	gt
 80077b8:	eef0 7a66 	vmovgt.f32	s15, s13
 80077bc:	eef4 7a47 	vcmp.f32	s15, s14
 80077c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c4:	f000 8084 	beq.w	80078d0 <arm_mat_inverse_f32+0x230>
 80077c8:	9b05      	ldr	r3, [sp, #20]
 80077ca:	b933      	cbnz	r3, 80077da <arm_mat_inverse_f32+0x13a>
 80077cc:	eef5 6a40 	vcmp.f32	s13, #0.0
 80077d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d4:	d078      	beq.n	80078c8 <arm_mat_inverse_f32+0x228>
 80077d6:	2300      	movs	r3, #0
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	eb0c 0306 	add.w	r3, ip, r6
 80077de:	9304      	str	r3, [sp, #16]
 80077e0:	4672      	mov	r2, lr
 80077e2:	462b      	mov	r3, r5
 80077e4:	edd3 7a00 	vldr	s15, [r3]
 80077e8:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80077ec:	3a01      	subs	r2, #1
 80077ee:	ece3 7a01 	vstmia	r3!, {s15}
 80077f2:	d1f7      	bne.n	80077e4 <arm_mat_inverse_f32+0x144>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4663      	mov	r3, ip
 80077f8:	edd3 7a00 	vldr	s15, [r3]
 80077fc:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8007800:	3901      	subs	r1, #1
 8007802:	ece3 7a01 	vstmia	r3!, {s15}
 8007806:	d1f7      	bne.n	80077f8 <arm_mat_inverse_f32+0x158>
 8007808:	9802      	ldr	r0, [sp, #8]
 800780a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800780e:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8007812:	42b9      	cmp	r1, r7
 8007814:	d07c      	beq.n	8007910 <arm_mat_inverse_f32+0x270>
 8007816:	eddb 6a00 	vldr	s13, [fp]
 800781a:	4672      	mov	r2, lr
 800781c:	46aa      	mov	sl, r5
 800781e:	465b      	mov	r3, fp
 8007820:	ecfa 7a01 	vldmia	sl!, {s15}
 8007824:	ed93 7a00 	vldr	s14, [r3]
 8007828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800782c:	3a01      	subs	r2, #1
 800782e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007832:	ece3 7a01 	vstmia	r3!, {s15}
 8007836:	d1f3      	bne.n	8007820 <arm_mat_inverse_f32+0x180>
 8007838:	44cb      	add	fp, r9
 800783a:	4622      	mov	r2, r4
 800783c:	46e2      	mov	sl, ip
 800783e:	4603      	mov	r3, r0
 8007840:	ecfa 7a01 	vldmia	sl!, {s15}
 8007844:	ed93 7a00 	vldr	s14, [r3]
 8007848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800784c:	3a01      	subs	r2, #1
 800784e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007852:	ece3 7a01 	vstmia	r3!, {s15}
 8007856:	d1f3      	bne.n	8007840 <arm_mat_inverse_f32+0x1a0>
 8007858:	4430      	add	r0, r6
 800785a:	3101      	adds	r1, #1
 800785c:	428c      	cmp	r4, r1
 800785e:	44c3      	add	fp, r8
 8007860:	d1d7      	bne.n	8007812 <arm_mat_inverse_f32+0x172>
 8007862:	9b01      	ldr	r3, [sp, #4]
 8007864:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007868:	3304      	adds	r3, #4
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	9b06      	ldr	r3, [sp, #24]
 800786e:	441d      	add	r5, r3
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	f1be 0e01 	subs.w	lr, lr, #1
 8007876:	f103 33ff 	add.w	r3, r3, #4294967295
 800787a:	f107 0701 	add.w	r7, r7, #1
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	f1a9 0904 	sub.w	r9, r9, #4
 8007884:	f47f af5d 	bne.w	8007742 <arm_mat_inverse_f32+0xa2>
 8007888:	9b05      	ldr	r3, [sp, #20]
 800788a:	b9fb      	cbnz	r3, 80078cc <arm_mat_inverse_f32+0x22c>
 800788c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8007890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007894:	d11a      	bne.n	80078cc <arm_mat_inverse_f32+0x22c>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	685d      	ldr	r5, [r3, #4]
 800789a:	fb04 f404 	mul.w	r4, r4, r4
 800789e:	b19c      	cbz	r4, 80078c8 <arm_mat_inverse_f32+0x228>
 80078a0:	edd5 7a00 	vldr	s15, [r5]
 80078a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ac:	d10e      	bne.n	80078cc <arm_mat_inverse_f32+0x22c>
 80078ae:	3504      	adds	r5, #4
 80078b0:	2300      	movs	r3, #0
 80078b2:	e006      	b.n	80078c2 <arm_mat_inverse_f32+0x222>
 80078b4:	ecf5 7a01 	vldmia	r5!, {s15}
 80078b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c0:	d104      	bne.n	80078cc <arm_mat_inverse_f32+0x22c>
 80078c2:	3301      	adds	r3, #1
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d1f5      	bne.n	80078b4 <arm_mat_inverse_f32+0x214>
 80078c8:	20fb      	movs	r0, #251	; 0xfb
 80078ca:	e6f5      	b.n	80076b8 <arm_mat_inverse_f32+0x18>
 80078cc:	2000      	movs	r0, #0
 80078ce:	e6f3      	b.n	80076b8 <arm_mat_inverse_f32+0x18>
 80078d0:	9b01      	ldr	r3, [sp, #4]
 80078d2:	4671      	mov	r1, lr
 80078d4:	462a      	mov	r2, r5
 80078d6:	6810      	ldr	r0, [r2, #0]
 80078d8:	f8d3 8000 	ldr.w	r8, [r3]
 80078dc:	f842 8b04 	str.w	r8, [r2], #4
 80078e0:	3901      	subs	r1, #1
 80078e2:	f843 0b04 	str.w	r0, [r3], #4
 80078e6:	d1f6      	bne.n	80078d6 <arm_mat_inverse_f32+0x236>
 80078e8:	eb0c 0306 	add.w	r3, ip, r6
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	4619      	mov	r1, r3
 80078f0:	4622      	mov	r2, r4
 80078f2:	4663      	mov	r3, ip
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	f8d3 8000 	ldr.w	r8, [r3]
 80078fa:	f841 8b04 	str.w	r8, [r1], #4
 80078fe:	3a01      	subs	r2, #1
 8007900:	f843 0b04 	str.w	r0, [r3], #4
 8007904:	d1f6      	bne.n	80078f4 <arm_mat_inverse_f32+0x254>
 8007906:	2301      	movs	r3, #1
 8007908:	edd5 6a00 	vldr	s13, [r5]
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	e767      	b.n	80077e0 <arm_mat_inverse_f32+0x140>
 8007910:	44cb      	add	fp, r9
 8007912:	4430      	add	r0, r6
 8007914:	e7a1      	b.n	800785a <arm_mat_inverse_f32+0x1ba>
 8007916:	bf00      	nop
 8007918:	00000000 	.word	0x00000000

0800791c <arm_mat_init_f32>:
 800791c:	8001      	strh	r1, [r0, #0]
 800791e:	8042      	strh	r2, [r0, #2]
 8007920:	6043      	str	r3, [r0, #4]
 8007922:	4770      	bx	lr

08007924 <_ZdlPvj>:
 8007924:	f000 b800 	b.w	8007928 <_ZdlPv>

08007928 <_ZdlPv>:
 8007928:	f000 b960 	b.w	8007bec <free>

0800792c <sqrt>:
 800792c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007930:	ed2d 8b02 	vpush	{d8}
 8007934:	b08b      	sub	sp, #44	; 0x2c
 8007936:	ec55 4b10 	vmov	r4, r5, d0
 800793a:	f000 f851 	bl	80079e0 <__ieee754_sqrt>
 800793e:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <sqrt+0xac>)
 8007940:	eeb0 8a40 	vmov.f32	s16, s0
 8007944:	eef0 8a60 	vmov.f32	s17, s1
 8007948:	f993 6000 	ldrsb.w	r6, [r3]
 800794c:	1c73      	adds	r3, r6, #1
 800794e:	d02a      	beq.n	80079a6 <sqrt+0x7a>
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	4620      	mov	r0, r4
 8007956:	4629      	mov	r1, r5
 8007958:	f7f9 f894 	bl	8000a84 <__aeabi_dcmpun>
 800795c:	4607      	mov	r7, r0
 800795e:	bb10      	cbnz	r0, 80079a6 <sqrt+0x7a>
 8007960:	f04f 0800 	mov.w	r8, #0
 8007964:	f04f 0900 	mov.w	r9, #0
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4620      	mov	r0, r4
 800796e:	4629      	mov	r1, r5
 8007970:	f7f9 f860 	bl	8000a34 <__aeabi_dcmplt>
 8007974:	b1b8      	cbz	r0, 80079a6 <sqrt+0x7a>
 8007976:	2301      	movs	r3, #1
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4b18      	ldr	r3, [pc, #96]	; (80079dc <sqrt+0xb0>)
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	9708      	str	r7, [sp, #32]
 8007980:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007984:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007988:	b9b6      	cbnz	r6, 80079b8 <sqrt+0x8c>
 800798a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800798e:	4668      	mov	r0, sp
 8007990:	f000 f8d6 	bl	8007b40 <matherr>
 8007994:	b1d0      	cbz	r0, 80079cc <sqrt+0xa0>
 8007996:	9b08      	ldr	r3, [sp, #32]
 8007998:	b11b      	cbz	r3, 80079a2 <sqrt+0x76>
 800799a:	f000 f8db 	bl	8007b54 <__errno>
 800799e:	9b08      	ldr	r3, [sp, #32]
 80079a0:	6003      	str	r3, [r0, #0]
 80079a2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80079a6:	eeb0 0a48 	vmov.f32	s0, s16
 80079aa:	eef0 0a68 	vmov.f32	s1, s17
 80079ae:	b00b      	add	sp, #44	; 0x2c
 80079b0:	ecbd 8b02 	vpop	{d8}
 80079b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f8 fef0 	bl	80007a4 <__aeabi_ddiv>
 80079c4:	2e02      	cmp	r6, #2
 80079c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079ca:	d1e0      	bne.n	800798e <sqrt+0x62>
 80079cc:	f000 f8c2 	bl	8007b54 <__errno>
 80079d0:	2321      	movs	r3, #33	; 0x21
 80079d2:	6003      	str	r3, [r0, #0]
 80079d4:	e7df      	b.n	8007996 <sqrt+0x6a>
 80079d6:	bf00      	nop
 80079d8:	2000000c 	.word	0x2000000c
 80079dc:	08009cd0 	.word	0x08009cd0

080079e0 <__ieee754_sqrt>:
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	4955      	ldr	r1, [pc, #340]	; (8007b3c <__ieee754_sqrt+0x15c>)
 80079e6:	ec55 4b10 	vmov	r4, r5, d0
 80079ea:	43a9      	bics	r1, r5
 80079ec:	462b      	mov	r3, r5
 80079ee:	462a      	mov	r2, r5
 80079f0:	d112      	bne.n	8007a18 <__ieee754_sqrt+0x38>
 80079f2:	ee10 2a10 	vmov	r2, s0
 80079f6:	ee10 0a10 	vmov	r0, s0
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fda8 	bl	8000550 <__aeabi_dmul>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4620      	mov	r0, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	f7f8 fbec 	bl	80001e4 <__adddf3>
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	460d      	mov	r5, r1
 8007a10:	ec45 4b10 	vmov	d0, r4, r5
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	ee10 0a10 	vmov	r0, s0
 8007a1e:	4621      	mov	r1, r4
 8007a20:	dc0f      	bgt.n	8007a42 <__ieee754_sqrt+0x62>
 8007a22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a26:	4330      	orrs	r0, r6
 8007a28:	d0f2      	beq.n	8007a10 <__ieee754_sqrt+0x30>
 8007a2a:	b155      	cbz	r5, 8007a42 <__ieee754_sqrt+0x62>
 8007a2c:	ee10 2a10 	vmov	r2, s0
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fbd4 	bl	80001e0 <__aeabi_dsub>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	f7f8 feb2 	bl	80007a4 <__aeabi_ddiv>
 8007a40:	e7e4      	b.n	8007a0c <__ieee754_sqrt+0x2c>
 8007a42:	151b      	asrs	r3, r3, #20
 8007a44:	d073      	beq.n	8007b2e <__ieee754_sqrt+0x14e>
 8007a46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a4a:	07dd      	lsls	r5, r3, #31
 8007a4c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a50:	bf48      	it	mi
 8007a52:	0fc8      	lsrmi	r0, r1, #31
 8007a54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a58:	bf44      	itt	mi
 8007a5a:	0049      	lslmi	r1, r1, #1
 8007a5c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007a60:	2500      	movs	r5, #0
 8007a62:	1058      	asrs	r0, r3, #1
 8007a64:	0fcb      	lsrs	r3, r1, #31
 8007a66:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007a6a:	0049      	lsls	r1, r1, #1
 8007a6c:	2316      	movs	r3, #22
 8007a6e:	462c      	mov	r4, r5
 8007a70:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007a74:	19a7      	adds	r7, r4, r6
 8007a76:	4297      	cmp	r7, r2
 8007a78:	bfde      	ittt	le
 8007a7a:	19bc      	addle	r4, r7, r6
 8007a7c:	1bd2      	suble	r2, r2, r7
 8007a7e:	19ad      	addle	r5, r5, r6
 8007a80:	0fcf      	lsrs	r7, r1, #31
 8007a82:	3b01      	subs	r3, #1
 8007a84:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007a88:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a90:	d1f0      	bne.n	8007a74 <__ieee754_sqrt+0x94>
 8007a92:	f04f 0c20 	mov.w	ip, #32
 8007a96:	469e      	mov	lr, r3
 8007a98:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a9c:	42a2      	cmp	r2, r4
 8007a9e:	eb06 070e 	add.w	r7, r6, lr
 8007aa2:	dc02      	bgt.n	8007aaa <__ieee754_sqrt+0xca>
 8007aa4:	d112      	bne.n	8007acc <__ieee754_sqrt+0xec>
 8007aa6:	428f      	cmp	r7, r1
 8007aa8:	d810      	bhi.n	8007acc <__ieee754_sqrt+0xec>
 8007aaa:	2f00      	cmp	r7, #0
 8007aac:	eb07 0e06 	add.w	lr, r7, r6
 8007ab0:	da42      	bge.n	8007b38 <__ieee754_sqrt+0x158>
 8007ab2:	f1be 0f00 	cmp.w	lr, #0
 8007ab6:	db3f      	blt.n	8007b38 <__ieee754_sqrt+0x158>
 8007ab8:	f104 0801 	add.w	r8, r4, #1
 8007abc:	1b12      	subs	r2, r2, r4
 8007abe:	428f      	cmp	r7, r1
 8007ac0:	bf88      	it	hi
 8007ac2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ac6:	1bc9      	subs	r1, r1, r7
 8007ac8:	4433      	add	r3, r6
 8007aca:	4644      	mov	r4, r8
 8007acc:	0052      	lsls	r2, r2, #1
 8007ace:	f1bc 0c01 	subs.w	ip, ip, #1
 8007ad2:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007ad6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ada:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007ade:	d1dd      	bne.n	8007a9c <__ieee754_sqrt+0xbc>
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	d006      	beq.n	8007af2 <__ieee754_sqrt+0x112>
 8007ae4:	1c5c      	adds	r4, r3, #1
 8007ae6:	bf13      	iteet	ne
 8007ae8:	3301      	addne	r3, #1
 8007aea:	3501      	addeq	r5, #1
 8007aec:	4663      	moveq	r3, ip
 8007aee:	f023 0301 	bicne.w	r3, r3, #1
 8007af2:	106a      	asrs	r2, r5, #1
 8007af4:	085b      	lsrs	r3, r3, #1
 8007af6:	07e9      	lsls	r1, r5, #31
 8007af8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007afc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007b00:	bf48      	it	mi
 8007b02:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007b06:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007b0a:	461c      	mov	r4, r3
 8007b0c:	e780      	b.n	8007a10 <__ieee754_sqrt+0x30>
 8007b0e:	0aca      	lsrs	r2, r1, #11
 8007b10:	3815      	subs	r0, #21
 8007b12:	0549      	lsls	r1, r1, #21
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	d0fa      	beq.n	8007b0e <__ieee754_sqrt+0x12e>
 8007b18:	02d6      	lsls	r6, r2, #11
 8007b1a:	d50a      	bpl.n	8007b32 <__ieee754_sqrt+0x152>
 8007b1c:	f1c3 0420 	rsb	r4, r3, #32
 8007b20:	fa21 f404 	lsr.w	r4, r1, r4
 8007b24:	1e5d      	subs	r5, r3, #1
 8007b26:	4099      	lsls	r1, r3
 8007b28:	4322      	orrs	r2, r4
 8007b2a:	1b43      	subs	r3, r0, r5
 8007b2c:	e78b      	b.n	8007a46 <__ieee754_sqrt+0x66>
 8007b2e:	4618      	mov	r0, r3
 8007b30:	e7f0      	b.n	8007b14 <__ieee754_sqrt+0x134>
 8007b32:	0052      	lsls	r2, r2, #1
 8007b34:	3301      	adds	r3, #1
 8007b36:	e7ef      	b.n	8007b18 <__ieee754_sqrt+0x138>
 8007b38:	46a0      	mov	r8, r4
 8007b3a:	e7bf      	b.n	8007abc <__ieee754_sqrt+0xdc>
 8007b3c:	7ff00000 	.word	0x7ff00000

08007b40 <matherr>:
 8007b40:	2000      	movs	r0, #0
 8007b42:	4770      	bx	lr

08007b44 <atof>:
 8007b44:	2100      	movs	r1, #0
 8007b46:	f000 bf67 	b.w	8008a18 <strtod>

08007b4a <atoi>:
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	f001 b847 	b.w	8008be0 <strtol>
	...

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	; (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000010 	.word	0x20000010

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4e0d      	ldr	r6, [pc, #52]	; (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	; (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1ba4      	subs	r4, r4, r6
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	42a5      	cmp	r5, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4e0b      	ldr	r6, [pc, #44]	; (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	; (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f001 fff2 	bl	8009b5c <_init>
 8007b78:	1ba4      	subs	r4, r4, r6
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2500      	movs	r5, #0
 8007b7e:	42a5      	cmp	r5, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b88:	4798      	blx	r3
 8007b8a:	3501      	adds	r5, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b92:	4798      	blx	r3
 8007b94:	3501      	adds	r5, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	08009f70 	.word	0x08009f70
 8007b9c:	08009f70 	.word	0x08009f70
 8007ba0:	08009f70 	.word	0x08009f70
 8007ba4:	08009f78 	.word	0x08009f78

08007ba8 <__itoa>:
 8007ba8:	1e93      	subs	r3, r2, #2
 8007baa:	2b22      	cmp	r3, #34	; 0x22
 8007bac:	b510      	push	{r4, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	d904      	bls.n	8007bbc <__itoa+0x14>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	700b      	strb	r3, [r1, #0]
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bd10      	pop	{r4, pc}
 8007bbc:	2a0a      	cmp	r2, #10
 8007bbe:	d109      	bne.n	8007bd4 <__itoa+0x2c>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	da07      	bge.n	8007bd4 <__itoa+0x2c>
 8007bc4:	232d      	movs	r3, #45	; 0x2d
 8007bc6:	700b      	strb	r3, [r1, #0]
 8007bc8:	4240      	negs	r0, r0
 8007bca:	2101      	movs	r1, #1
 8007bcc:	4421      	add	r1, r4
 8007bce:	f001 f81d 	bl	8008c0c <__utoa>
 8007bd2:	e7f1      	b.n	8007bb8 <__itoa+0x10>
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	e7f9      	b.n	8007bcc <__itoa+0x24>

08007bd8 <itoa>:
 8007bd8:	f7ff bfe6 	b.w	8007ba8 <__itoa>

08007bdc <malloc>:
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <malloc+0xc>)
 8007bde:	4601      	mov	r1, r0
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	f000 b86d 	b.w	8007cc0 <_malloc_r>
 8007be6:	bf00      	nop
 8007be8:	20000010 	.word	0x20000010

08007bec <free>:
 8007bec:	4b02      	ldr	r3, [pc, #8]	; (8007bf8 <free+0xc>)
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f000 b817 	b.w	8007c24 <_free_r>
 8007bf6:	bf00      	nop
 8007bf8:	20000010 	.word	0x20000010

08007bfc <memcpy>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	1e43      	subs	r3, r0, #1
 8007c00:	440a      	add	r2, r1
 8007c02:	4291      	cmp	r1, r2
 8007c04:	d100      	bne.n	8007c08 <memcpy+0xc>
 8007c06:	bd10      	pop	{r4, pc}
 8007c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c10:	e7f7      	b.n	8007c02 <memcpy+0x6>

08007c12 <memset>:
 8007c12:	4402      	add	r2, r0
 8007c14:	4603      	mov	r3, r0
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d100      	bne.n	8007c1c <memset+0xa>
 8007c1a:	4770      	bx	lr
 8007c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8007c20:	e7f9      	b.n	8007c16 <memset+0x4>
	...

08007c24 <_free_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4605      	mov	r5, r0
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d045      	beq.n	8007cb8 <_free_r+0x94>
 8007c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c30:	1f0c      	subs	r4, r1, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfb8      	it	lt
 8007c36:	18e4      	addlt	r4, r4, r3
 8007c38:	f001 fb63 	bl	8009302 <__malloc_lock>
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <_free_r+0x98>)
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	4610      	mov	r0, r2
 8007c42:	b933      	cbnz	r3, 8007c52 <_free_r+0x2e>
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6014      	str	r4, [r2, #0]
 8007c48:	4628      	mov	r0, r5
 8007c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c4e:	f001 bb59 	b.w	8009304 <__malloc_unlock>
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	d90c      	bls.n	8007c70 <_free_r+0x4c>
 8007c56:	6821      	ldr	r1, [r4, #0]
 8007c58:	1862      	adds	r2, r4, r1
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	bf04      	itt	eq
 8007c5e:	681a      	ldreq	r2, [r3, #0]
 8007c60:	685b      	ldreq	r3, [r3, #4]
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	bf04      	itt	eq
 8007c66:	1852      	addeq	r2, r2, r1
 8007c68:	6022      	streq	r2, [r4, #0]
 8007c6a:	6004      	str	r4, [r0, #0]
 8007c6c:	e7ec      	b.n	8007c48 <_free_r+0x24>
 8007c6e:	4613      	mov	r3, r2
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	b10a      	cbz	r2, 8007c78 <_free_r+0x54>
 8007c74:	42a2      	cmp	r2, r4
 8007c76:	d9fa      	bls.n	8007c6e <_free_r+0x4a>
 8007c78:	6819      	ldr	r1, [r3, #0]
 8007c7a:	1858      	adds	r0, r3, r1
 8007c7c:	42a0      	cmp	r0, r4
 8007c7e:	d10b      	bne.n	8007c98 <_free_r+0x74>
 8007c80:	6820      	ldr	r0, [r4, #0]
 8007c82:	4401      	add	r1, r0
 8007c84:	1858      	adds	r0, r3, r1
 8007c86:	4282      	cmp	r2, r0
 8007c88:	6019      	str	r1, [r3, #0]
 8007c8a:	d1dd      	bne.n	8007c48 <_free_r+0x24>
 8007c8c:	6810      	ldr	r0, [r2, #0]
 8007c8e:	6852      	ldr	r2, [r2, #4]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	4401      	add	r1, r0
 8007c94:	6019      	str	r1, [r3, #0]
 8007c96:	e7d7      	b.n	8007c48 <_free_r+0x24>
 8007c98:	d902      	bls.n	8007ca0 <_free_r+0x7c>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	e7d3      	b.n	8007c48 <_free_r+0x24>
 8007ca0:	6820      	ldr	r0, [r4, #0]
 8007ca2:	1821      	adds	r1, r4, r0
 8007ca4:	428a      	cmp	r2, r1
 8007ca6:	bf04      	itt	eq
 8007ca8:	6811      	ldreq	r1, [r2, #0]
 8007caa:	6852      	ldreq	r2, [r2, #4]
 8007cac:	6062      	str	r2, [r4, #4]
 8007cae:	bf04      	itt	eq
 8007cb0:	1809      	addeq	r1, r1, r0
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	605c      	str	r4, [r3, #4]
 8007cb6:	e7c7      	b.n	8007c48 <_free_r+0x24>
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	200017bc 	.word	0x200017bc

08007cc0 <_malloc_r>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	1ccd      	adds	r5, r1, #3
 8007cc4:	f025 0503 	bic.w	r5, r5, #3
 8007cc8:	3508      	adds	r5, #8
 8007cca:	2d0c      	cmp	r5, #12
 8007ccc:	bf38      	it	cc
 8007cce:	250c      	movcc	r5, #12
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	db01      	blt.n	8007cda <_malloc_r+0x1a>
 8007cd6:	42a9      	cmp	r1, r5
 8007cd8:	d903      	bls.n	8007ce2 <_malloc_r+0x22>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	6033      	str	r3, [r6, #0]
 8007cde:	2000      	movs	r0, #0
 8007ce0:	bd70      	pop	{r4, r5, r6, pc}
 8007ce2:	f001 fb0e 	bl	8009302 <__malloc_lock>
 8007ce6:	4a21      	ldr	r2, [pc, #132]	; (8007d6c <_malloc_r+0xac>)
 8007ce8:	6814      	ldr	r4, [r2, #0]
 8007cea:	4621      	mov	r1, r4
 8007cec:	b991      	cbnz	r1, 8007d14 <_malloc_r+0x54>
 8007cee:	4c20      	ldr	r4, [pc, #128]	; (8007d70 <_malloc_r+0xb0>)
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	b91b      	cbnz	r3, 8007cfc <_malloc_r+0x3c>
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 f83d 	bl	8007d74 <_sbrk_r>
 8007cfa:	6020      	str	r0, [r4, #0]
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f000 f838 	bl	8007d74 <_sbrk_r>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d124      	bne.n	8007d52 <_malloc_r+0x92>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f001 faf9 	bl	8009304 <__malloc_unlock>
 8007d12:	e7e4      	b.n	8007cde <_malloc_r+0x1e>
 8007d14:	680b      	ldr	r3, [r1, #0]
 8007d16:	1b5b      	subs	r3, r3, r5
 8007d18:	d418      	bmi.n	8007d4c <_malloc_r+0x8c>
 8007d1a:	2b0b      	cmp	r3, #11
 8007d1c:	d90f      	bls.n	8007d3e <_malloc_r+0x7e>
 8007d1e:	600b      	str	r3, [r1, #0]
 8007d20:	50cd      	str	r5, [r1, r3]
 8007d22:	18cc      	adds	r4, r1, r3
 8007d24:	4630      	mov	r0, r6
 8007d26:	f001 faed 	bl	8009304 <__malloc_unlock>
 8007d2a:	f104 000b 	add.w	r0, r4, #11
 8007d2e:	1d23      	adds	r3, r4, #4
 8007d30:	f020 0007 	bic.w	r0, r0, #7
 8007d34:	1ac3      	subs	r3, r0, r3
 8007d36:	d0d3      	beq.n	8007ce0 <_malloc_r+0x20>
 8007d38:	425a      	negs	r2, r3
 8007d3a:	50e2      	str	r2, [r4, r3]
 8007d3c:	e7d0      	b.n	8007ce0 <_malloc_r+0x20>
 8007d3e:	428c      	cmp	r4, r1
 8007d40:	684b      	ldr	r3, [r1, #4]
 8007d42:	bf16      	itet	ne
 8007d44:	6063      	strne	r3, [r4, #4]
 8007d46:	6013      	streq	r3, [r2, #0]
 8007d48:	460c      	movne	r4, r1
 8007d4a:	e7eb      	b.n	8007d24 <_malloc_r+0x64>
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	6849      	ldr	r1, [r1, #4]
 8007d50:	e7cc      	b.n	8007cec <_malloc_r+0x2c>
 8007d52:	1cc4      	adds	r4, r0, #3
 8007d54:	f024 0403 	bic.w	r4, r4, #3
 8007d58:	42a0      	cmp	r0, r4
 8007d5a:	d005      	beq.n	8007d68 <_malloc_r+0xa8>
 8007d5c:	1a21      	subs	r1, r4, r0
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f808 	bl	8007d74 <_sbrk_r>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0cf      	beq.n	8007d08 <_malloc_r+0x48>
 8007d68:	6025      	str	r5, [r4, #0]
 8007d6a:	e7db      	b.n	8007d24 <_malloc_r+0x64>
 8007d6c:	200017bc 	.word	0x200017bc
 8007d70:	200017c0 	.word	0x200017c0

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4c06      	ldr	r4, [pc, #24]	; (8007d90 <_sbrk_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	6023      	str	r3, [r4, #0]
 8007d80:	f7fb fff2 	bl	8003d68 <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	602b      	str	r3, [r5, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	200017c8 	.word	0x200017c8

08007d94 <strcat>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4603      	mov	r3, r0
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	1c5c      	adds	r4, r3, #1
 8007d9c:	b93a      	cbnz	r2, 8007dae <strcat+0x1a>
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007da4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007da8:	2a00      	cmp	r2, #0
 8007daa:	d1f9      	bne.n	8007da0 <strcat+0xc>
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	4623      	mov	r3, r4
 8007db0:	e7f2      	b.n	8007d98 <strcat+0x4>

08007db2 <strcpy>:
 8007db2:	4603      	mov	r3, r0
 8007db4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007db8:	f803 2b01 	strb.w	r2, [r3], #1
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d1f9      	bne.n	8007db4 <strcpy+0x2>
 8007dc0:	4770      	bx	lr

08007dc2 <strstr>:
 8007dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc4:	7803      	ldrb	r3, [r0, #0]
 8007dc6:	b17b      	cbz	r3, 8007de8 <strstr+0x26>
 8007dc8:	4604      	mov	r4, r0
 8007dca:	7823      	ldrb	r3, [r4, #0]
 8007dcc:	4620      	mov	r0, r4
 8007dce:	1c66      	adds	r6, r4, #1
 8007dd0:	b17b      	cbz	r3, 8007df2 <strstr+0x30>
 8007dd2:	1e4a      	subs	r2, r1, #1
 8007dd4:	1e63      	subs	r3, r4, #1
 8007dd6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007dda:	b14d      	cbz	r5, 8007df0 <strstr+0x2e>
 8007ddc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007de0:	42af      	cmp	r7, r5
 8007de2:	4634      	mov	r4, r6
 8007de4:	d0f7      	beq.n	8007dd6 <strstr+0x14>
 8007de6:	e7f0      	b.n	8007dca <strstr+0x8>
 8007de8:	780b      	ldrb	r3, [r1, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf18      	it	ne
 8007dee:	2000      	movne	r0, #0
 8007df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df2:	4618      	mov	r0, r3
 8007df4:	e7fc      	b.n	8007df0 <strstr+0x2e>

08007df6 <sulp>:
 8007df6:	b570      	push	{r4, r5, r6, lr}
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	ec45 4b10 	vmov	d0, r4, r5
 8007e00:	4616      	mov	r6, r2
 8007e02:	f001 fd4b 	bl	800989c <__ulp>
 8007e06:	ec51 0b10 	vmov	r0, r1, d0
 8007e0a:	b17e      	cbz	r6, 8007e2c <sulp+0x36>
 8007e0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dd09      	ble.n	8007e2c <sulp+0x36>
 8007e18:	051b      	lsls	r3, r3, #20
 8007e1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e1e:	2400      	movs	r4, #0
 8007e20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	f7f8 fb92 	bl	8000550 <__aeabi_dmul>
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e30 <_strtod_l>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	461f      	mov	r7, r3
 8007e36:	b0a1      	sub	sp, #132	; 0x84
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4681      	mov	r9, r0
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	460e      	mov	r6, r1
 8007e40:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e42:	931c      	str	r3, [sp, #112]	; 0x70
 8007e44:	f001 fa49 	bl	80092da <__localeconv_l>
 8007e48:	4680      	mov	r8, r0
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	f7f8 f9bc 	bl	80001c8 <strlen>
 8007e50:	f04f 0a00 	mov.w	sl, #0
 8007e54:	4604      	mov	r4, r0
 8007e56:	f04f 0b00 	mov.w	fp, #0
 8007e5a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	2a0d      	cmp	r2, #13
 8007e62:	d832      	bhi.n	8007eca <_strtod_l+0x9a>
 8007e64:	2a09      	cmp	r2, #9
 8007e66:	d236      	bcs.n	8007ed6 <_strtod_l+0xa6>
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d03e      	beq.n	8007eea <_strtod_l+0xba>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007e72:	782b      	ldrb	r3, [r5, #0]
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	f040 80ac 	bne.w	8007fd2 <_strtod_l+0x1a2>
 8007e7a:	786b      	ldrb	r3, [r5, #1]
 8007e7c:	2b58      	cmp	r3, #88	; 0x58
 8007e7e:	d001      	beq.n	8007e84 <_strtod_l+0x54>
 8007e80:	2b78      	cmp	r3, #120	; 0x78
 8007e82:	d167      	bne.n	8007f54 <_strtod_l+0x124>
 8007e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	ab1c      	add	r3, sp, #112	; 0x70
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	9702      	str	r7, [sp, #8]
 8007e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e90:	4a88      	ldr	r2, [pc, #544]	; (80080b4 <_strtod_l+0x284>)
 8007e92:	a91b      	add	r1, sp, #108	; 0x6c
 8007e94:	4648      	mov	r0, r9
 8007e96:	f000 ff46 	bl	8008d26 <__gethex>
 8007e9a:	f010 0407 	ands.w	r4, r0, #7
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	d005      	beq.n	8007eae <_strtod_l+0x7e>
 8007ea2:	2c06      	cmp	r4, #6
 8007ea4:	d12b      	bne.n	8007efe <_strtod_l+0xce>
 8007ea6:	3501      	adds	r5, #1
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	951b      	str	r5, [sp, #108]	; 0x6c
 8007eac:	930d      	str	r3, [sp, #52]	; 0x34
 8007eae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 859a 	bne.w	80089ea <_strtod_l+0xbba>
 8007eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb8:	b1e3      	cbz	r3, 8007ef4 <_strtod_l+0xc4>
 8007eba:	4652      	mov	r2, sl
 8007ebc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ec0:	ec43 2b10 	vmov	d0, r2, r3
 8007ec4:	b021      	add	sp, #132	; 0x84
 8007ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eca:	2a2b      	cmp	r2, #43	; 0x2b
 8007ecc:	d015      	beq.n	8007efa <_strtod_l+0xca>
 8007ece:	2a2d      	cmp	r2, #45	; 0x2d
 8007ed0:	d004      	beq.n	8007edc <_strtod_l+0xac>
 8007ed2:	2a20      	cmp	r2, #32
 8007ed4:	d1ca      	bne.n	8007e6c <_strtod_l+0x3c>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	931b      	str	r3, [sp, #108]	; 0x6c
 8007eda:	e7bf      	b.n	8007e5c <_strtod_l+0x2c>
 8007edc:	2201      	movs	r2, #1
 8007ede:	920d      	str	r2, [sp, #52]	; 0x34
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1c2      	bne.n	8007e70 <_strtod_l+0x40>
 8007eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eec:	961b      	str	r6, [sp, #108]	; 0x6c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 8579 	bne.w	80089e6 <_strtod_l+0xbb6>
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	465b      	mov	r3, fp
 8007ef8:	e7e2      	b.n	8007ec0 <_strtod_l+0x90>
 8007efa:	2200      	movs	r2, #0
 8007efc:	e7ef      	b.n	8007ede <_strtod_l+0xae>
 8007efe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f00:	b13a      	cbz	r2, 8007f12 <_strtod_l+0xe2>
 8007f02:	2135      	movs	r1, #53	; 0x35
 8007f04:	a81e      	add	r0, sp, #120	; 0x78
 8007f06:	f001 fdc1 	bl	8009a8c <__copybits>
 8007f0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f0c:	4648      	mov	r0, r9
 8007f0e:	f001 fa2e 	bl	800936e <_Bfree>
 8007f12:	3c01      	subs	r4, #1
 8007f14:	2c04      	cmp	r4, #4
 8007f16:	d806      	bhi.n	8007f26 <_strtod_l+0xf6>
 8007f18:	e8df f004 	tbb	[pc, r4]
 8007f1c:	1714030a 	.word	0x1714030a
 8007f20:	0a          	.byte	0x0a
 8007f21:	00          	.byte	0x00
 8007f22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007f26:	0730      	lsls	r0, r6, #28
 8007f28:	d5c1      	bpl.n	8007eae <_strtod_l+0x7e>
 8007f2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007f2e:	e7be      	b.n	8007eae <_strtod_l+0x7e>
 8007f30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007f34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007f36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f42:	e7f0      	b.n	8007f26 <_strtod_l+0xf6>
 8007f44:	f8df b170 	ldr.w	fp, [pc, #368]	; 80080b8 <_strtod_l+0x288>
 8007f48:	e7ed      	b.n	8007f26 <_strtod_l+0xf6>
 8007f4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007f4e:	f04f 3aff 	mov.w	sl, #4294967295
 8007f52:	e7e8      	b.n	8007f26 <_strtod_l+0xf6>
 8007f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b30      	cmp	r3, #48	; 0x30
 8007f5e:	d0f9      	beq.n	8007f54 <_strtod_l+0x124>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0a4      	beq.n	8007eae <_strtod_l+0x7e>
 8007f64:	2301      	movs	r3, #1
 8007f66:	2500      	movs	r5, #0
 8007f68:	9306      	str	r3, [sp, #24]
 8007f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f6c:	9308      	str	r3, [sp, #32]
 8007f6e:	9507      	str	r5, [sp, #28]
 8007f70:	9505      	str	r5, [sp, #20]
 8007f72:	220a      	movs	r2, #10
 8007f74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007f76:	7807      	ldrb	r7, [r0, #0]
 8007f78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007f7c:	b2d9      	uxtb	r1, r3
 8007f7e:	2909      	cmp	r1, #9
 8007f80:	d929      	bls.n	8007fd6 <_strtod_l+0x1a6>
 8007f82:	4622      	mov	r2, r4
 8007f84:	f8d8 1000 	ldr.w	r1, [r8]
 8007f88:	f001 fdc9 	bl	8009b1e <strncmp>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d031      	beq.n	8007ff4 <_strtod_l+0x1c4>
 8007f90:	2000      	movs	r0, #0
 8007f92:	9c05      	ldr	r4, [sp, #20]
 8007f94:	9004      	str	r0, [sp, #16]
 8007f96:	463b      	mov	r3, r7
 8007f98:	4602      	mov	r2, r0
 8007f9a:	2b65      	cmp	r3, #101	; 0x65
 8007f9c:	d001      	beq.n	8007fa2 <_strtod_l+0x172>
 8007f9e:	2b45      	cmp	r3, #69	; 0x45
 8007fa0:	d114      	bne.n	8007fcc <_strtod_l+0x19c>
 8007fa2:	b924      	cbnz	r4, 8007fae <_strtod_l+0x17e>
 8007fa4:	b910      	cbnz	r0, 8007fac <_strtod_l+0x17c>
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d09e      	beq.n	8007eea <_strtod_l+0xba>
 8007fac:	2400      	movs	r4, #0
 8007fae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007fb0:	1c73      	adds	r3, r6, #1
 8007fb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fb4:	7873      	ldrb	r3, [r6, #1]
 8007fb6:	2b2b      	cmp	r3, #43	; 0x2b
 8007fb8:	d078      	beq.n	80080ac <_strtod_l+0x27c>
 8007fba:	2b2d      	cmp	r3, #45	; 0x2d
 8007fbc:	d070      	beq.n	80080a0 <_strtod_l+0x270>
 8007fbe:	f04f 0c00 	mov.w	ip, #0
 8007fc2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007fc6:	2f09      	cmp	r7, #9
 8007fc8:	d97c      	bls.n	80080c4 <_strtod_l+0x294>
 8007fca:	961b      	str	r6, [sp, #108]	; 0x6c
 8007fcc:	f04f 0e00 	mov.w	lr, #0
 8007fd0:	e09a      	b.n	8008108 <_strtod_l+0x2d8>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e7c7      	b.n	8007f66 <_strtod_l+0x136>
 8007fd6:	9905      	ldr	r1, [sp, #20]
 8007fd8:	2908      	cmp	r1, #8
 8007fda:	bfdd      	ittte	le
 8007fdc:	9907      	ldrle	r1, [sp, #28]
 8007fde:	fb02 3301 	mlale	r3, r2, r1, r3
 8007fe2:	9307      	strle	r3, [sp, #28]
 8007fe4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	3001      	adds	r0, #1
 8007fec:	3301      	adds	r3, #1
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	901b      	str	r0, [sp, #108]	; 0x6c
 8007ff2:	e7bf      	b.n	8007f74 <_strtod_l+0x144>
 8007ff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ff6:	191a      	adds	r2, r3, r4
 8007ff8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ffa:	9a05      	ldr	r2, [sp, #20]
 8007ffc:	5d1b      	ldrb	r3, [r3, r4]
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	d037      	beq.n	8008072 <_strtod_l+0x242>
 8008002:	9c05      	ldr	r4, [sp, #20]
 8008004:	4602      	mov	r2, r0
 8008006:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800800a:	2909      	cmp	r1, #9
 800800c:	d913      	bls.n	8008036 <_strtod_l+0x206>
 800800e:	2101      	movs	r1, #1
 8008010:	9104      	str	r1, [sp, #16]
 8008012:	e7c2      	b.n	8007f9a <_strtod_l+0x16a>
 8008014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	921b      	str	r2, [sp, #108]	; 0x6c
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	3001      	adds	r0, #1
 800801e:	2b30      	cmp	r3, #48	; 0x30
 8008020:	d0f8      	beq.n	8008014 <_strtod_l+0x1e4>
 8008022:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008026:	2a08      	cmp	r2, #8
 8008028:	f200 84e4 	bhi.w	80089f4 <_strtod_l+0xbc4>
 800802c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800802e:	9208      	str	r2, [sp, #32]
 8008030:	4602      	mov	r2, r0
 8008032:	2000      	movs	r0, #0
 8008034:	4604      	mov	r4, r0
 8008036:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800803a:	f100 0101 	add.w	r1, r0, #1
 800803e:	d012      	beq.n	8008066 <_strtod_l+0x236>
 8008040:	440a      	add	r2, r1
 8008042:	eb00 0c04 	add.w	ip, r0, r4
 8008046:	4621      	mov	r1, r4
 8008048:	270a      	movs	r7, #10
 800804a:	458c      	cmp	ip, r1
 800804c:	d113      	bne.n	8008076 <_strtod_l+0x246>
 800804e:	1821      	adds	r1, r4, r0
 8008050:	2908      	cmp	r1, #8
 8008052:	f104 0401 	add.w	r4, r4, #1
 8008056:	4404      	add	r4, r0
 8008058:	dc19      	bgt.n	800808e <_strtod_l+0x25e>
 800805a:	9b07      	ldr	r3, [sp, #28]
 800805c:	210a      	movs	r1, #10
 800805e:	fb01 e303 	mla	r3, r1, r3, lr
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	2100      	movs	r1, #0
 8008066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008068:	1c58      	adds	r0, r3, #1
 800806a:	901b      	str	r0, [sp, #108]	; 0x6c
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	4608      	mov	r0, r1
 8008070:	e7c9      	b.n	8008006 <_strtod_l+0x1d6>
 8008072:	9805      	ldr	r0, [sp, #20]
 8008074:	e7d3      	b.n	800801e <_strtod_l+0x1ee>
 8008076:	2908      	cmp	r1, #8
 8008078:	f101 0101 	add.w	r1, r1, #1
 800807c:	dc03      	bgt.n	8008086 <_strtod_l+0x256>
 800807e:	9b07      	ldr	r3, [sp, #28]
 8008080:	437b      	muls	r3, r7
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	e7e1      	b.n	800804a <_strtod_l+0x21a>
 8008086:	2910      	cmp	r1, #16
 8008088:	bfd8      	it	le
 800808a:	437d      	mulle	r5, r7
 800808c:	e7dd      	b.n	800804a <_strtod_l+0x21a>
 800808e:	2c10      	cmp	r4, #16
 8008090:	bfdc      	itt	le
 8008092:	210a      	movle	r1, #10
 8008094:	fb01 e505 	mlale	r5, r1, r5, lr
 8008098:	e7e4      	b.n	8008064 <_strtod_l+0x234>
 800809a:	2301      	movs	r3, #1
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	e781      	b.n	8007fa4 <_strtod_l+0x174>
 80080a0:	f04f 0c01 	mov.w	ip, #1
 80080a4:	1cb3      	adds	r3, r6, #2
 80080a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80080a8:	78b3      	ldrb	r3, [r6, #2]
 80080aa:	e78a      	b.n	8007fc2 <_strtod_l+0x192>
 80080ac:	f04f 0c00 	mov.w	ip, #0
 80080b0:	e7f8      	b.n	80080a4 <_strtod_l+0x274>
 80080b2:	bf00      	nop
 80080b4:	08009ce4 	.word	0x08009ce4
 80080b8:	7ff00000 	.word	0x7ff00000
 80080bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080be:	1c5f      	adds	r7, r3, #1
 80080c0:	971b      	str	r7, [sp, #108]	; 0x6c
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b30      	cmp	r3, #48	; 0x30
 80080c6:	d0f9      	beq.n	80080bc <_strtod_l+0x28c>
 80080c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80080cc:	2f08      	cmp	r7, #8
 80080ce:	f63f af7d 	bhi.w	8007fcc <_strtod_l+0x19c>
 80080d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80080d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080d8:	930a      	str	r3, [sp, #40]	; 0x28
 80080da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080dc:	1c5f      	adds	r7, r3, #1
 80080de:	971b      	str	r7, [sp, #108]	; 0x6c
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80080e6:	f1b8 0f09 	cmp.w	r8, #9
 80080ea:	d937      	bls.n	800815c <_strtod_l+0x32c>
 80080ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080ee:	1a7f      	subs	r7, r7, r1
 80080f0:	2f08      	cmp	r7, #8
 80080f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80080f6:	dc37      	bgt.n	8008168 <_strtod_l+0x338>
 80080f8:	45be      	cmp	lr, r7
 80080fa:	bfa8      	it	ge
 80080fc:	46be      	movge	lr, r7
 80080fe:	f1bc 0f00 	cmp.w	ip, #0
 8008102:	d001      	beq.n	8008108 <_strtod_l+0x2d8>
 8008104:	f1ce 0e00 	rsb	lr, lr, #0
 8008108:	2c00      	cmp	r4, #0
 800810a:	d151      	bne.n	80081b0 <_strtod_l+0x380>
 800810c:	2800      	cmp	r0, #0
 800810e:	f47f aece 	bne.w	8007eae <_strtod_l+0x7e>
 8008112:	9a06      	ldr	r2, [sp, #24]
 8008114:	2a00      	cmp	r2, #0
 8008116:	f47f aeca 	bne.w	8007eae <_strtod_l+0x7e>
 800811a:	9a04      	ldr	r2, [sp, #16]
 800811c:	2a00      	cmp	r2, #0
 800811e:	f47f aee4 	bne.w	8007eea <_strtod_l+0xba>
 8008122:	2b4e      	cmp	r3, #78	; 0x4e
 8008124:	d027      	beq.n	8008176 <_strtod_l+0x346>
 8008126:	dc21      	bgt.n	800816c <_strtod_l+0x33c>
 8008128:	2b49      	cmp	r3, #73	; 0x49
 800812a:	f47f aede 	bne.w	8007eea <_strtod_l+0xba>
 800812e:	49a0      	ldr	r1, [pc, #640]	; (80083b0 <_strtod_l+0x580>)
 8008130:	a81b      	add	r0, sp, #108	; 0x6c
 8008132:	f001 f82b 	bl	800918c <__match>
 8008136:	2800      	cmp	r0, #0
 8008138:	f43f aed7 	beq.w	8007eea <_strtod_l+0xba>
 800813c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800813e:	499d      	ldr	r1, [pc, #628]	; (80083b4 <_strtod_l+0x584>)
 8008140:	3b01      	subs	r3, #1
 8008142:	a81b      	add	r0, sp, #108	; 0x6c
 8008144:	931b      	str	r3, [sp, #108]	; 0x6c
 8008146:	f001 f821 	bl	800918c <__match>
 800814a:	b910      	cbnz	r0, 8008152 <_strtod_l+0x322>
 800814c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800814e:	3301      	adds	r3, #1
 8008150:	931b      	str	r3, [sp, #108]	; 0x6c
 8008152:	f8df b274 	ldr.w	fp, [pc, #628]	; 80083c8 <_strtod_l+0x598>
 8008156:	f04f 0a00 	mov.w	sl, #0
 800815a:	e6a8      	b.n	8007eae <_strtod_l+0x7e>
 800815c:	210a      	movs	r1, #10
 800815e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008162:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008166:	e7b8      	b.n	80080da <_strtod_l+0x2aa>
 8008168:	46be      	mov	lr, r7
 800816a:	e7c8      	b.n	80080fe <_strtod_l+0x2ce>
 800816c:	2b69      	cmp	r3, #105	; 0x69
 800816e:	d0de      	beq.n	800812e <_strtod_l+0x2fe>
 8008170:	2b6e      	cmp	r3, #110	; 0x6e
 8008172:	f47f aeba 	bne.w	8007eea <_strtod_l+0xba>
 8008176:	4990      	ldr	r1, [pc, #576]	; (80083b8 <_strtod_l+0x588>)
 8008178:	a81b      	add	r0, sp, #108	; 0x6c
 800817a:	f001 f807 	bl	800918c <__match>
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f aeb3 	beq.w	8007eea <_strtod_l+0xba>
 8008184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b28      	cmp	r3, #40	; 0x28
 800818a:	d10e      	bne.n	80081aa <_strtod_l+0x37a>
 800818c:	aa1e      	add	r2, sp, #120	; 0x78
 800818e:	498b      	ldr	r1, [pc, #556]	; (80083bc <_strtod_l+0x58c>)
 8008190:	a81b      	add	r0, sp, #108	; 0x6c
 8008192:	f001 f80f 	bl	80091b4 <__hexnan>
 8008196:	2805      	cmp	r0, #5
 8008198:	d107      	bne.n	80081aa <_strtod_l+0x37a>
 800819a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800819c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80081a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80081a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80081a8:	e681      	b.n	8007eae <_strtod_l+0x7e>
 80081aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 80083d0 <_strtod_l+0x5a0>
 80081ae:	e7d2      	b.n	8008156 <_strtod_l+0x326>
 80081b0:	ebae 0302 	sub.w	r3, lr, r2
 80081b4:	9306      	str	r3, [sp, #24]
 80081b6:	9b05      	ldr	r3, [sp, #20]
 80081b8:	9807      	ldr	r0, [sp, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bf08      	it	eq
 80081be:	4623      	moveq	r3, r4
 80081c0:	2c10      	cmp	r4, #16
 80081c2:	9305      	str	r3, [sp, #20]
 80081c4:	46a0      	mov	r8, r4
 80081c6:	bfa8      	it	ge
 80081c8:	f04f 0810 	movge.w	r8, #16
 80081cc:	f7f8 f946 	bl	800045c <__aeabi_ui2d>
 80081d0:	2c09      	cmp	r4, #9
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	dc13      	bgt.n	8008200 <_strtod_l+0x3d0>
 80081d8:	9b06      	ldr	r3, [sp, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f43f ae67 	beq.w	8007eae <_strtod_l+0x7e>
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	dd7a      	ble.n	80082da <_strtod_l+0x4aa>
 80081e4:	2b16      	cmp	r3, #22
 80081e6:	dc61      	bgt.n	80082ac <_strtod_l+0x47c>
 80081e8:	4a75      	ldr	r2, [pc, #468]	; (80083c0 <_strtod_l+0x590>)
 80081ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80081ee:	e9de 0100 	ldrd	r0, r1, [lr]
 80081f2:	4652      	mov	r2, sl
 80081f4:	465b      	mov	r3, fp
 80081f6:	f7f8 f9ab 	bl	8000550 <__aeabi_dmul>
 80081fa:	4682      	mov	sl, r0
 80081fc:	468b      	mov	fp, r1
 80081fe:	e656      	b.n	8007eae <_strtod_l+0x7e>
 8008200:	4b6f      	ldr	r3, [pc, #444]	; (80083c0 <_strtod_l+0x590>)
 8008202:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008206:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800820a:	f7f8 f9a1 	bl	8000550 <__aeabi_dmul>
 800820e:	4606      	mov	r6, r0
 8008210:	4628      	mov	r0, r5
 8008212:	460f      	mov	r7, r1
 8008214:	f7f8 f922 	bl	800045c <__aeabi_ui2d>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f7 ffe0 	bl	80001e4 <__adddf3>
 8008224:	2c0f      	cmp	r4, #15
 8008226:	4682      	mov	sl, r0
 8008228:	468b      	mov	fp, r1
 800822a:	ddd5      	ble.n	80081d8 <_strtod_l+0x3a8>
 800822c:	9b06      	ldr	r3, [sp, #24]
 800822e:	eba4 0808 	sub.w	r8, r4, r8
 8008232:	4498      	add	r8, r3
 8008234:	f1b8 0f00 	cmp.w	r8, #0
 8008238:	f340 8096 	ble.w	8008368 <_strtod_l+0x538>
 800823c:	f018 030f 	ands.w	r3, r8, #15
 8008240:	d00a      	beq.n	8008258 <_strtod_l+0x428>
 8008242:	495f      	ldr	r1, [pc, #380]	; (80083c0 <_strtod_l+0x590>)
 8008244:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008248:	4652      	mov	r2, sl
 800824a:	465b      	mov	r3, fp
 800824c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008250:	f7f8 f97e 	bl	8000550 <__aeabi_dmul>
 8008254:	4682      	mov	sl, r0
 8008256:	468b      	mov	fp, r1
 8008258:	f038 080f 	bics.w	r8, r8, #15
 800825c:	d073      	beq.n	8008346 <_strtod_l+0x516>
 800825e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008262:	dd47      	ble.n	80082f4 <_strtod_l+0x4c4>
 8008264:	2400      	movs	r4, #0
 8008266:	46a0      	mov	r8, r4
 8008268:	9407      	str	r4, [sp, #28]
 800826a:	9405      	str	r4, [sp, #20]
 800826c:	2322      	movs	r3, #34	; 0x22
 800826e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80083c8 <_strtod_l+0x598>
 8008272:	f8c9 3000 	str.w	r3, [r9]
 8008276:	f04f 0a00 	mov.w	sl, #0
 800827a:	9b07      	ldr	r3, [sp, #28]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f43f ae16 	beq.w	8007eae <_strtod_l+0x7e>
 8008282:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008284:	4648      	mov	r0, r9
 8008286:	f001 f872 	bl	800936e <_Bfree>
 800828a:	9905      	ldr	r1, [sp, #20]
 800828c:	4648      	mov	r0, r9
 800828e:	f001 f86e 	bl	800936e <_Bfree>
 8008292:	4641      	mov	r1, r8
 8008294:	4648      	mov	r0, r9
 8008296:	f001 f86a 	bl	800936e <_Bfree>
 800829a:	9907      	ldr	r1, [sp, #28]
 800829c:	4648      	mov	r0, r9
 800829e:	f001 f866 	bl	800936e <_Bfree>
 80082a2:	4621      	mov	r1, r4
 80082a4:	4648      	mov	r0, r9
 80082a6:	f001 f862 	bl	800936e <_Bfree>
 80082aa:	e600      	b.n	8007eae <_strtod_l+0x7e>
 80082ac:	9a06      	ldr	r2, [sp, #24]
 80082ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80082b2:	4293      	cmp	r3, r2
 80082b4:	dbba      	blt.n	800822c <_strtod_l+0x3fc>
 80082b6:	4d42      	ldr	r5, [pc, #264]	; (80083c0 <_strtod_l+0x590>)
 80082b8:	f1c4 040f 	rsb	r4, r4, #15
 80082bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80082c0:	4652      	mov	r2, sl
 80082c2:	465b      	mov	r3, fp
 80082c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c8:	f7f8 f942 	bl	8000550 <__aeabi_dmul>
 80082cc:	9b06      	ldr	r3, [sp, #24]
 80082ce:	1b1c      	subs	r4, r3, r4
 80082d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80082d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082d8:	e78d      	b.n	80081f6 <_strtod_l+0x3c6>
 80082da:	f113 0f16 	cmn.w	r3, #22
 80082de:	dba5      	blt.n	800822c <_strtod_l+0x3fc>
 80082e0:	4a37      	ldr	r2, [pc, #220]	; (80083c0 <_strtod_l+0x590>)
 80082e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80082e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80082ea:	4650      	mov	r0, sl
 80082ec:	4659      	mov	r1, fp
 80082ee:	f7f8 fa59 	bl	80007a4 <__aeabi_ddiv>
 80082f2:	e782      	b.n	80081fa <_strtod_l+0x3ca>
 80082f4:	2300      	movs	r3, #0
 80082f6:	4e33      	ldr	r6, [pc, #204]	; (80083c4 <_strtod_l+0x594>)
 80082f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80082fc:	4650      	mov	r0, sl
 80082fe:	4659      	mov	r1, fp
 8008300:	461d      	mov	r5, r3
 8008302:	f1b8 0f01 	cmp.w	r8, #1
 8008306:	dc21      	bgt.n	800834c <_strtod_l+0x51c>
 8008308:	b10b      	cbz	r3, 800830e <_strtod_l+0x4de>
 800830a:	4682      	mov	sl, r0
 800830c:	468b      	mov	fp, r1
 800830e:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <_strtod_l+0x594>)
 8008310:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008314:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008318:	4652      	mov	r2, sl
 800831a:	465b      	mov	r3, fp
 800831c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008320:	f7f8 f916 	bl	8000550 <__aeabi_dmul>
 8008324:	4b28      	ldr	r3, [pc, #160]	; (80083c8 <_strtod_l+0x598>)
 8008326:	460a      	mov	r2, r1
 8008328:	400b      	ands	r3, r1
 800832a:	4928      	ldr	r1, [pc, #160]	; (80083cc <_strtod_l+0x59c>)
 800832c:	428b      	cmp	r3, r1
 800832e:	4682      	mov	sl, r0
 8008330:	d898      	bhi.n	8008264 <_strtod_l+0x434>
 8008332:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008336:	428b      	cmp	r3, r1
 8008338:	bf86      	itte	hi
 800833a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80083d4 <_strtod_l+0x5a4>
 800833e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008342:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008346:	2300      	movs	r3, #0
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	e077      	b.n	800843c <_strtod_l+0x60c>
 800834c:	f018 0f01 	tst.w	r8, #1
 8008350:	d006      	beq.n	8008360 <_strtod_l+0x530>
 8008352:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f8 f8f9 	bl	8000550 <__aeabi_dmul>
 800835e:	2301      	movs	r3, #1
 8008360:	3501      	adds	r5, #1
 8008362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008366:	e7cc      	b.n	8008302 <_strtod_l+0x4d2>
 8008368:	d0ed      	beq.n	8008346 <_strtod_l+0x516>
 800836a:	f1c8 0800 	rsb	r8, r8, #0
 800836e:	f018 020f 	ands.w	r2, r8, #15
 8008372:	d00a      	beq.n	800838a <_strtod_l+0x55a>
 8008374:	4b12      	ldr	r3, [pc, #72]	; (80083c0 <_strtod_l+0x590>)
 8008376:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800837a:	4650      	mov	r0, sl
 800837c:	4659      	mov	r1, fp
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f8 fa0f 	bl	80007a4 <__aeabi_ddiv>
 8008386:	4682      	mov	sl, r0
 8008388:	468b      	mov	fp, r1
 800838a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800838e:	d0da      	beq.n	8008346 <_strtod_l+0x516>
 8008390:	f1b8 0f1f 	cmp.w	r8, #31
 8008394:	dd20      	ble.n	80083d8 <_strtod_l+0x5a8>
 8008396:	2400      	movs	r4, #0
 8008398:	46a0      	mov	r8, r4
 800839a:	9407      	str	r4, [sp, #28]
 800839c:	9405      	str	r4, [sp, #20]
 800839e:	2322      	movs	r3, #34	; 0x22
 80083a0:	f04f 0a00 	mov.w	sl, #0
 80083a4:	f04f 0b00 	mov.w	fp, #0
 80083a8:	f8c9 3000 	str.w	r3, [r9]
 80083ac:	e765      	b.n	800827a <_strtod_l+0x44a>
 80083ae:	bf00      	nop
 80083b0:	08009cd5 	.word	0x08009cd5
 80083b4:	08009cd8 	.word	0x08009cd8
 80083b8:	08009cde 	.word	0x08009cde
 80083bc:	08009cf8 	.word	0x08009cf8
 80083c0:	08009d90 	.word	0x08009d90
 80083c4:	08009d68 	.word	0x08009d68
 80083c8:	7ff00000 	.word	0x7ff00000
 80083cc:	7ca00000 	.word	0x7ca00000
 80083d0:	fff80000 	.word	0xfff80000
 80083d4:	7fefffff 	.word	0x7fefffff
 80083d8:	f018 0310 	ands.w	r3, r8, #16
 80083dc:	bf18      	it	ne
 80083de:	236a      	movne	r3, #106	; 0x6a
 80083e0:	4da0      	ldr	r5, [pc, #640]	; (8008664 <_strtod_l+0x834>)
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	4650      	mov	r0, sl
 80083e6:	4659      	mov	r1, fp
 80083e8:	2300      	movs	r3, #0
 80083ea:	f1b8 0f00 	cmp.w	r8, #0
 80083ee:	f300 810a 	bgt.w	8008606 <_strtod_l+0x7d6>
 80083f2:	b10b      	cbz	r3, 80083f8 <_strtod_l+0x5c8>
 80083f4:	4682      	mov	sl, r0
 80083f6:	468b      	mov	fp, r1
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	b1bb      	cbz	r3, 800842c <_strtod_l+0x5fc>
 80083fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008400:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008404:	2b00      	cmp	r3, #0
 8008406:	4659      	mov	r1, fp
 8008408:	dd10      	ble.n	800842c <_strtod_l+0x5fc>
 800840a:	2b1f      	cmp	r3, #31
 800840c:	f340 8107 	ble.w	800861e <_strtod_l+0x7ee>
 8008410:	2b34      	cmp	r3, #52	; 0x34
 8008412:	bfde      	ittt	le
 8008414:	3b20      	suble	r3, #32
 8008416:	f04f 32ff 	movle.w	r2, #4294967295
 800841a:	fa02 f303 	lslle.w	r3, r2, r3
 800841e:	f04f 0a00 	mov.w	sl, #0
 8008422:	bfcc      	ite	gt
 8008424:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008428:	ea03 0b01 	andle.w	fp, r3, r1
 800842c:	2200      	movs	r2, #0
 800842e:	2300      	movs	r3, #0
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	f7f8 faf4 	bl	8000a20 <__aeabi_dcmpeq>
 8008438:	2800      	cmp	r0, #0
 800843a:	d1ac      	bne.n	8008396 <_strtod_l+0x566>
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	9a05      	ldr	r2, [sp, #20]
 8008442:	9908      	ldr	r1, [sp, #32]
 8008444:	4623      	mov	r3, r4
 8008446:	4648      	mov	r0, r9
 8008448:	f000 ffe3 	bl	8009412 <__s2b>
 800844c:	9007      	str	r0, [sp, #28]
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f af08 	beq.w	8008264 <_strtod_l+0x434>
 8008454:	9a06      	ldr	r2, [sp, #24]
 8008456:	9b06      	ldr	r3, [sp, #24]
 8008458:	2a00      	cmp	r2, #0
 800845a:	f1c3 0300 	rsb	r3, r3, #0
 800845e:	bfa8      	it	ge
 8008460:	2300      	movge	r3, #0
 8008462:	930e      	str	r3, [sp, #56]	; 0x38
 8008464:	2400      	movs	r4, #0
 8008466:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800846a:	9316      	str	r3, [sp, #88]	; 0x58
 800846c:	46a0      	mov	r8, r4
 800846e:	9b07      	ldr	r3, [sp, #28]
 8008470:	4648      	mov	r0, r9
 8008472:	6859      	ldr	r1, [r3, #4]
 8008474:	f000 ff47 	bl	8009306 <_Balloc>
 8008478:	9005      	str	r0, [sp, #20]
 800847a:	2800      	cmp	r0, #0
 800847c:	f43f aef6 	beq.w	800826c <_strtod_l+0x43c>
 8008480:	9b07      	ldr	r3, [sp, #28]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	3202      	adds	r2, #2
 8008486:	f103 010c 	add.w	r1, r3, #12
 800848a:	0092      	lsls	r2, r2, #2
 800848c:	300c      	adds	r0, #12
 800848e:	f7ff fbb5 	bl	8007bfc <memcpy>
 8008492:	aa1e      	add	r2, sp, #120	; 0x78
 8008494:	a91d      	add	r1, sp, #116	; 0x74
 8008496:	ec4b ab10 	vmov	d0, sl, fp
 800849a:	4648      	mov	r0, r9
 800849c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80084a0:	f001 fa72 	bl	8009988 <__d2b>
 80084a4:	901c      	str	r0, [sp, #112]	; 0x70
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f aee0 	beq.w	800826c <_strtod_l+0x43c>
 80084ac:	2101      	movs	r1, #1
 80084ae:	4648      	mov	r0, r9
 80084b0:	f001 f83b 	bl	800952a <__i2b>
 80084b4:	4680      	mov	r8, r0
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f43f aed8 	beq.w	800826c <_strtod_l+0x43c>
 80084bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80084be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	bfab      	itete	ge
 80084c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80084c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80084c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80084ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80084cc:	bfac      	ite	ge
 80084ce:	18f7      	addge	r7, r6, r3
 80084d0:	1b9d      	sublt	r5, r3, r6
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	1af6      	subs	r6, r6, r3
 80084d6:	4416      	add	r6, r2
 80084d8:	4b63      	ldr	r3, [pc, #396]	; (8008668 <_strtod_l+0x838>)
 80084da:	3e01      	subs	r6, #1
 80084dc:	429e      	cmp	r6, r3
 80084de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084e2:	f280 80af 	bge.w	8008644 <_strtod_l+0x814>
 80084e6:	1b9b      	subs	r3, r3, r6
 80084e8:	2b1f      	cmp	r3, #31
 80084ea:	eba2 0203 	sub.w	r2, r2, r3
 80084ee:	f04f 0101 	mov.w	r1, #1
 80084f2:	f300 809b 	bgt.w	800862c <_strtod_l+0x7fc>
 80084f6:	fa01 f303 	lsl.w	r3, r1, r3
 80084fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80084fc:	2300      	movs	r3, #0
 80084fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008500:	18be      	adds	r6, r7, r2
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	42b7      	cmp	r7, r6
 8008506:	4415      	add	r5, r2
 8008508:	441d      	add	r5, r3
 800850a:	463b      	mov	r3, r7
 800850c:	bfa8      	it	ge
 800850e:	4633      	movge	r3, r6
 8008510:	42ab      	cmp	r3, r5
 8008512:	bfa8      	it	ge
 8008514:	462b      	movge	r3, r5
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfc2      	ittt	gt
 800851a:	1af6      	subgt	r6, r6, r3
 800851c:	1aed      	subgt	r5, r5, r3
 800851e:	1aff      	subgt	r7, r7, r3
 8008520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008522:	b1bb      	cbz	r3, 8008554 <_strtod_l+0x724>
 8008524:	4641      	mov	r1, r8
 8008526:	461a      	mov	r2, r3
 8008528:	4648      	mov	r0, r9
 800852a:	f001 f89d 	bl	8009668 <__pow5mult>
 800852e:	4680      	mov	r8, r0
 8008530:	2800      	cmp	r0, #0
 8008532:	f43f ae9b 	beq.w	800826c <_strtod_l+0x43c>
 8008536:	4601      	mov	r1, r0
 8008538:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800853a:	4648      	mov	r0, r9
 800853c:	f000 fffe 	bl	800953c <__multiply>
 8008540:	900c      	str	r0, [sp, #48]	; 0x30
 8008542:	2800      	cmp	r0, #0
 8008544:	f43f ae92 	beq.w	800826c <_strtod_l+0x43c>
 8008548:	991c      	ldr	r1, [sp, #112]	; 0x70
 800854a:	4648      	mov	r0, r9
 800854c:	f000 ff0f 	bl	800936e <_Bfree>
 8008550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008552:	931c      	str	r3, [sp, #112]	; 0x70
 8008554:	2e00      	cmp	r6, #0
 8008556:	dc7a      	bgt.n	800864e <_strtod_l+0x81e>
 8008558:	9b06      	ldr	r3, [sp, #24]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd08      	ble.n	8008570 <_strtod_l+0x740>
 800855e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008560:	9905      	ldr	r1, [sp, #20]
 8008562:	4648      	mov	r0, r9
 8008564:	f001 f880 	bl	8009668 <__pow5mult>
 8008568:	9005      	str	r0, [sp, #20]
 800856a:	2800      	cmp	r0, #0
 800856c:	f43f ae7e 	beq.w	800826c <_strtod_l+0x43c>
 8008570:	2d00      	cmp	r5, #0
 8008572:	dd08      	ble.n	8008586 <_strtod_l+0x756>
 8008574:	462a      	mov	r2, r5
 8008576:	9905      	ldr	r1, [sp, #20]
 8008578:	4648      	mov	r0, r9
 800857a:	f001 f8c3 	bl	8009704 <__lshift>
 800857e:	9005      	str	r0, [sp, #20]
 8008580:	2800      	cmp	r0, #0
 8008582:	f43f ae73 	beq.w	800826c <_strtod_l+0x43c>
 8008586:	2f00      	cmp	r7, #0
 8008588:	dd08      	ble.n	800859c <_strtod_l+0x76c>
 800858a:	4641      	mov	r1, r8
 800858c:	463a      	mov	r2, r7
 800858e:	4648      	mov	r0, r9
 8008590:	f001 f8b8 	bl	8009704 <__lshift>
 8008594:	4680      	mov	r8, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f ae68 	beq.w	800826c <_strtod_l+0x43c>
 800859c:	9a05      	ldr	r2, [sp, #20]
 800859e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085a0:	4648      	mov	r0, r9
 80085a2:	f001 f91d 	bl	80097e0 <__mdiff>
 80085a6:	4604      	mov	r4, r0
 80085a8:	2800      	cmp	r0, #0
 80085aa:	f43f ae5f 	beq.w	800826c <_strtod_l+0x43c>
 80085ae:	68c3      	ldr	r3, [r0, #12]
 80085b0:	930c      	str	r3, [sp, #48]	; 0x30
 80085b2:	2300      	movs	r3, #0
 80085b4:	60c3      	str	r3, [r0, #12]
 80085b6:	4641      	mov	r1, r8
 80085b8:	f001 f8f8 	bl	80097ac <__mcmp>
 80085bc:	2800      	cmp	r0, #0
 80085be:	da55      	bge.n	800866c <_strtod_l+0x83c>
 80085c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c2:	b9e3      	cbnz	r3, 80085fe <_strtod_l+0x7ce>
 80085c4:	f1ba 0f00 	cmp.w	sl, #0
 80085c8:	d119      	bne.n	80085fe <_strtod_l+0x7ce>
 80085ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085ce:	b9b3      	cbnz	r3, 80085fe <_strtod_l+0x7ce>
 80085d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085d4:	0d1b      	lsrs	r3, r3, #20
 80085d6:	051b      	lsls	r3, r3, #20
 80085d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80085dc:	d90f      	bls.n	80085fe <_strtod_l+0x7ce>
 80085de:	6963      	ldr	r3, [r4, #20]
 80085e0:	b913      	cbnz	r3, 80085e8 <_strtod_l+0x7b8>
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	dd0a      	ble.n	80085fe <_strtod_l+0x7ce>
 80085e8:	4621      	mov	r1, r4
 80085ea:	2201      	movs	r2, #1
 80085ec:	4648      	mov	r0, r9
 80085ee:	f001 f889 	bl	8009704 <__lshift>
 80085f2:	4641      	mov	r1, r8
 80085f4:	4604      	mov	r4, r0
 80085f6:	f001 f8d9 	bl	80097ac <__mcmp>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	dc67      	bgt.n	80086ce <_strtod_l+0x89e>
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d171      	bne.n	80086e8 <_strtod_l+0x8b8>
 8008604:	e63d      	b.n	8008282 <_strtod_l+0x452>
 8008606:	f018 0f01 	tst.w	r8, #1
 800860a:	d004      	beq.n	8008616 <_strtod_l+0x7e6>
 800860c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008610:	f7f7 ff9e 	bl	8000550 <__aeabi_dmul>
 8008614:	2301      	movs	r3, #1
 8008616:	ea4f 0868 	mov.w	r8, r8, asr #1
 800861a:	3508      	adds	r5, #8
 800861c:	e6e5      	b.n	80083ea <_strtod_l+0x5ba>
 800861e:	f04f 32ff 	mov.w	r2, #4294967295
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	ea03 0a0a 	and.w	sl, r3, sl
 800862a:	e6ff      	b.n	800842c <_strtod_l+0x5fc>
 800862c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008630:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008634:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008638:	36e2      	adds	r6, #226	; 0xe2
 800863a:	fa01 f306 	lsl.w	r3, r1, r6
 800863e:	930a      	str	r3, [sp, #40]	; 0x28
 8008640:	910f      	str	r1, [sp, #60]	; 0x3c
 8008642:	e75d      	b.n	8008500 <_strtod_l+0x6d0>
 8008644:	2300      	movs	r3, #0
 8008646:	930a      	str	r3, [sp, #40]	; 0x28
 8008648:	2301      	movs	r3, #1
 800864a:	930f      	str	r3, [sp, #60]	; 0x3c
 800864c:	e758      	b.n	8008500 <_strtod_l+0x6d0>
 800864e:	4632      	mov	r2, r6
 8008650:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008652:	4648      	mov	r0, r9
 8008654:	f001 f856 	bl	8009704 <__lshift>
 8008658:	901c      	str	r0, [sp, #112]	; 0x70
 800865a:	2800      	cmp	r0, #0
 800865c:	f47f af7c 	bne.w	8008558 <_strtod_l+0x728>
 8008660:	e604      	b.n	800826c <_strtod_l+0x43c>
 8008662:	bf00      	nop
 8008664:	08009d10 	.word	0x08009d10
 8008668:	fffffc02 	.word	0xfffffc02
 800866c:	465d      	mov	r5, fp
 800866e:	f040 8086 	bne.w	800877e <_strtod_l+0x94e>
 8008672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008674:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008678:	b32a      	cbz	r2, 80086c6 <_strtod_l+0x896>
 800867a:	4aaf      	ldr	r2, [pc, #700]	; (8008938 <_strtod_l+0xb08>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d153      	bne.n	8008728 <_strtod_l+0x8f8>
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	4650      	mov	r0, sl
 8008684:	b1d3      	cbz	r3, 80086bc <_strtod_l+0x88c>
 8008686:	4aad      	ldr	r2, [pc, #692]	; (800893c <_strtod_l+0xb0c>)
 8008688:	402a      	ands	r2, r5
 800868a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800868e:	f04f 31ff 	mov.w	r1, #4294967295
 8008692:	d816      	bhi.n	80086c2 <_strtod_l+0x892>
 8008694:	0d12      	lsrs	r2, r2, #20
 8008696:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800869a:	fa01 f303 	lsl.w	r3, r1, r3
 800869e:	4298      	cmp	r0, r3
 80086a0:	d142      	bne.n	8008728 <_strtod_l+0x8f8>
 80086a2:	4ba7      	ldr	r3, [pc, #668]	; (8008940 <_strtod_l+0xb10>)
 80086a4:	429d      	cmp	r5, r3
 80086a6:	d102      	bne.n	80086ae <_strtod_l+0x87e>
 80086a8:	3001      	adds	r0, #1
 80086aa:	f43f addf 	beq.w	800826c <_strtod_l+0x43c>
 80086ae:	4ba3      	ldr	r3, [pc, #652]	; (800893c <_strtod_l+0xb0c>)
 80086b0:	402b      	ands	r3, r5
 80086b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80086b6:	f04f 0a00 	mov.w	sl, #0
 80086ba:	e7a0      	b.n	80085fe <_strtod_l+0x7ce>
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295
 80086c0:	e7ed      	b.n	800869e <_strtod_l+0x86e>
 80086c2:	460b      	mov	r3, r1
 80086c4:	e7eb      	b.n	800869e <_strtod_l+0x86e>
 80086c6:	bb7b      	cbnz	r3, 8008728 <_strtod_l+0x8f8>
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	d12c      	bne.n	8008728 <_strtod_l+0x8f8>
 80086ce:	9904      	ldr	r1, [sp, #16]
 80086d0:	4a9a      	ldr	r2, [pc, #616]	; (800893c <_strtod_l+0xb0c>)
 80086d2:	465b      	mov	r3, fp
 80086d4:	b1f1      	cbz	r1, 8008714 <_strtod_l+0x8e4>
 80086d6:	ea02 010b 	and.w	r1, r2, fp
 80086da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80086de:	dc19      	bgt.n	8008714 <_strtod_l+0x8e4>
 80086e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80086e4:	f77f ae5b 	ble.w	800839e <_strtod_l+0x56e>
 80086e8:	4a96      	ldr	r2, [pc, #600]	; (8008944 <_strtod_l+0xb14>)
 80086ea:	2300      	movs	r3, #0
 80086ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80086f0:	4650      	mov	r0, sl
 80086f2:	4659      	mov	r1, fp
 80086f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80086f8:	f7f7 ff2a 	bl	8000550 <__aeabi_dmul>
 80086fc:	4682      	mov	sl, r0
 80086fe:	468b      	mov	fp, r1
 8008700:	2900      	cmp	r1, #0
 8008702:	f47f adbe 	bne.w	8008282 <_strtod_l+0x452>
 8008706:	2800      	cmp	r0, #0
 8008708:	f47f adbb 	bne.w	8008282 <_strtod_l+0x452>
 800870c:	2322      	movs	r3, #34	; 0x22
 800870e:	f8c9 3000 	str.w	r3, [r9]
 8008712:	e5b6      	b.n	8008282 <_strtod_l+0x452>
 8008714:	4013      	ands	r3, r2
 8008716:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800871a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800871e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008722:	f04f 3aff 	mov.w	sl, #4294967295
 8008726:	e76a      	b.n	80085fe <_strtod_l+0x7ce>
 8008728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872a:	b193      	cbz	r3, 8008752 <_strtod_l+0x922>
 800872c:	422b      	tst	r3, r5
 800872e:	f43f af66 	beq.w	80085fe <_strtod_l+0x7ce>
 8008732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008734:	9a04      	ldr	r2, [sp, #16]
 8008736:	4650      	mov	r0, sl
 8008738:	4659      	mov	r1, fp
 800873a:	b173      	cbz	r3, 800875a <_strtod_l+0x92a>
 800873c:	f7ff fb5b 	bl	8007df6 <sulp>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008748:	f7f7 fd4c 	bl	80001e4 <__adddf3>
 800874c:	4682      	mov	sl, r0
 800874e:	468b      	mov	fp, r1
 8008750:	e755      	b.n	80085fe <_strtod_l+0x7ce>
 8008752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008754:	ea13 0f0a 	tst.w	r3, sl
 8008758:	e7e9      	b.n	800872e <_strtod_l+0x8fe>
 800875a:	f7ff fb4c 	bl	8007df6 <sulp>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008766:	f7f7 fd3b 	bl	80001e0 <__aeabi_dsub>
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	4682      	mov	sl, r0
 8008770:	468b      	mov	fp, r1
 8008772:	f7f8 f955 	bl	8000a20 <__aeabi_dcmpeq>
 8008776:	2800      	cmp	r0, #0
 8008778:	f47f ae11 	bne.w	800839e <_strtod_l+0x56e>
 800877c:	e73f      	b.n	80085fe <_strtod_l+0x7ce>
 800877e:	4641      	mov	r1, r8
 8008780:	4620      	mov	r0, r4
 8008782:	f001 f950 	bl	8009a26 <__ratio>
 8008786:	ec57 6b10 	vmov	r6, r7, d0
 800878a:	2200      	movs	r2, #0
 800878c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008790:	ee10 0a10 	vmov	r0, s0
 8008794:	4639      	mov	r1, r7
 8008796:	f7f8 f957 	bl	8000a48 <__aeabi_dcmple>
 800879a:	2800      	cmp	r0, #0
 800879c:	d077      	beq.n	800888e <_strtod_l+0xa5e>
 800879e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d04a      	beq.n	800883a <_strtod_l+0xa0a>
 80087a4:	4b68      	ldr	r3, [pc, #416]	; (8008948 <_strtod_l+0xb18>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80087ac:	4f66      	ldr	r7, [pc, #408]	; (8008948 <_strtod_l+0xb18>)
 80087ae:	2600      	movs	r6, #0
 80087b0:	4b62      	ldr	r3, [pc, #392]	; (800893c <_strtod_l+0xb0c>)
 80087b2:	402b      	ands	r3, r5
 80087b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80087b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087b8:	4b64      	ldr	r3, [pc, #400]	; (800894c <_strtod_l+0xb1c>)
 80087ba:	429a      	cmp	r2, r3
 80087bc:	f040 80ce 	bne.w	800895c <_strtod_l+0xb2c>
 80087c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80087cc:	ec4b ab10 	vmov	d0, sl, fp
 80087d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80087d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087d8:	f001 f860 	bl	800989c <__ulp>
 80087dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087e0:	ec53 2b10 	vmov	r2, r3, d0
 80087e4:	f7f7 feb4 	bl	8000550 <__aeabi_dmul>
 80087e8:	4652      	mov	r2, sl
 80087ea:	465b      	mov	r3, fp
 80087ec:	f7f7 fcfa 	bl	80001e4 <__adddf3>
 80087f0:	460b      	mov	r3, r1
 80087f2:	4952      	ldr	r1, [pc, #328]	; (800893c <_strtod_l+0xb0c>)
 80087f4:	4a56      	ldr	r2, [pc, #344]	; (8008950 <_strtod_l+0xb20>)
 80087f6:	4019      	ands	r1, r3
 80087f8:	4291      	cmp	r1, r2
 80087fa:	4682      	mov	sl, r0
 80087fc:	d95b      	bls.n	80088b6 <_strtod_l+0xa86>
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008804:	4293      	cmp	r3, r2
 8008806:	d103      	bne.n	8008810 <_strtod_l+0x9e0>
 8008808:	9b08      	ldr	r3, [sp, #32]
 800880a:	3301      	adds	r3, #1
 800880c:	f43f ad2e 	beq.w	800826c <_strtod_l+0x43c>
 8008810:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008940 <_strtod_l+0xb10>
 8008814:	f04f 3aff 	mov.w	sl, #4294967295
 8008818:	991c      	ldr	r1, [sp, #112]	; 0x70
 800881a:	4648      	mov	r0, r9
 800881c:	f000 fda7 	bl	800936e <_Bfree>
 8008820:	9905      	ldr	r1, [sp, #20]
 8008822:	4648      	mov	r0, r9
 8008824:	f000 fda3 	bl	800936e <_Bfree>
 8008828:	4641      	mov	r1, r8
 800882a:	4648      	mov	r0, r9
 800882c:	f000 fd9f 	bl	800936e <_Bfree>
 8008830:	4621      	mov	r1, r4
 8008832:	4648      	mov	r0, r9
 8008834:	f000 fd9b 	bl	800936e <_Bfree>
 8008838:	e619      	b.n	800846e <_strtod_l+0x63e>
 800883a:	f1ba 0f00 	cmp.w	sl, #0
 800883e:	d11a      	bne.n	8008876 <_strtod_l+0xa46>
 8008840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008844:	b9eb      	cbnz	r3, 8008882 <_strtod_l+0xa52>
 8008846:	2200      	movs	r2, #0
 8008848:	4b3f      	ldr	r3, [pc, #252]	; (8008948 <_strtod_l+0xb18>)
 800884a:	4630      	mov	r0, r6
 800884c:	4639      	mov	r1, r7
 800884e:	f7f8 f8f1 	bl	8000a34 <__aeabi_dcmplt>
 8008852:	b9c8      	cbnz	r0, 8008888 <_strtod_l+0xa58>
 8008854:	4630      	mov	r0, r6
 8008856:	4639      	mov	r1, r7
 8008858:	2200      	movs	r2, #0
 800885a:	4b3e      	ldr	r3, [pc, #248]	; (8008954 <_strtod_l+0xb24>)
 800885c:	f7f7 fe78 	bl	8000550 <__aeabi_dmul>
 8008860:	4606      	mov	r6, r0
 8008862:	460f      	mov	r7, r1
 8008864:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008868:	9618      	str	r6, [sp, #96]	; 0x60
 800886a:	9319      	str	r3, [sp, #100]	; 0x64
 800886c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008870:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008874:	e79c      	b.n	80087b0 <_strtod_l+0x980>
 8008876:	f1ba 0f01 	cmp.w	sl, #1
 800887a:	d102      	bne.n	8008882 <_strtod_l+0xa52>
 800887c:	2d00      	cmp	r5, #0
 800887e:	f43f ad8e 	beq.w	800839e <_strtod_l+0x56e>
 8008882:	2200      	movs	r2, #0
 8008884:	4b34      	ldr	r3, [pc, #208]	; (8008958 <_strtod_l+0xb28>)
 8008886:	e78f      	b.n	80087a8 <_strtod_l+0x978>
 8008888:	2600      	movs	r6, #0
 800888a:	4f32      	ldr	r7, [pc, #200]	; (8008954 <_strtod_l+0xb24>)
 800888c:	e7ea      	b.n	8008864 <_strtod_l+0xa34>
 800888e:	4b31      	ldr	r3, [pc, #196]	; (8008954 <_strtod_l+0xb24>)
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	2200      	movs	r2, #0
 8008896:	f7f7 fe5b 	bl	8000550 <__aeabi_dmul>
 800889a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800889c:	4606      	mov	r6, r0
 800889e:	460f      	mov	r7, r1
 80088a0:	b933      	cbnz	r3, 80088b0 <_strtod_l+0xa80>
 80088a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088a6:	9010      	str	r0, [sp, #64]	; 0x40
 80088a8:	9311      	str	r3, [sp, #68]	; 0x44
 80088aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088ae:	e7df      	b.n	8008870 <_strtod_l+0xa40>
 80088b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80088b4:	e7f9      	b.n	80088aa <_strtod_l+0xa7a>
 80088b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1ab      	bne.n	8008818 <_strtod_l+0x9e8>
 80088c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088c4:	0d1b      	lsrs	r3, r3, #20
 80088c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088c8:	051b      	lsls	r3, r3, #20
 80088ca:	429a      	cmp	r2, r3
 80088cc:	465d      	mov	r5, fp
 80088ce:	d1a3      	bne.n	8008818 <_strtod_l+0x9e8>
 80088d0:	4639      	mov	r1, r7
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7f8 f8ec 	bl	8000ab0 <__aeabi_d2iz>
 80088d8:	f7f7 fdd0 	bl	800047c <__aeabi_i2d>
 80088dc:	460b      	mov	r3, r1
 80088de:	4602      	mov	r2, r0
 80088e0:	4639      	mov	r1, r7
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7f7 fc7c 	bl	80001e0 <__aeabi_dsub>
 80088e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	b933      	cbnz	r3, 80088fe <_strtod_l+0xace>
 80088f0:	f1ba 0f00 	cmp.w	sl, #0
 80088f4:	d103      	bne.n	80088fe <_strtod_l+0xace>
 80088f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	d06d      	beq.n	80089da <_strtod_l+0xbaa>
 80088fe:	a30a      	add	r3, pc, #40	; (adr r3, 8008928 <_strtod_l+0xaf8>)
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f8 f894 	bl	8000a34 <__aeabi_dcmplt>
 800890c:	2800      	cmp	r0, #0
 800890e:	f47f acb8 	bne.w	8008282 <_strtod_l+0x452>
 8008912:	a307      	add	r3, pc, #28	; (adr r3, 8008930 <_strtod_l+0xb00>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f8a8 	bl	8000a70 <__aeabi_dcmpgt>
 8008920:	2800      	cmp	r0, #0
 8008922:	f43f af79 	beq.w	8008818 <_strtod_l+0x9e8>
 8008926:	e4ac      	b.n	8008282 <_strtod_l+0x452>
 8008928:	94a03595 	.word	0x94a03595
 800892c:	3fdfffff 	.word	0x3fdfffff
 8008930:	35afe535 	.word	0x35afe535
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	000fffff 	.word	0x000fffff
 800893c:	7ff00000 	.word	0x7ff00000
 8008940:	7fefffff 	.word	0x7fefffff
 8008944:	39500000 	.word	0x39500000
 8008948:	3ff00000 	.word	0x3ff00000
 800894c:	7fe00000 	.word	0x7fe00000
 8008950:	7c9fffff 	.word	0x7c9fffff
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	bff00000 	.word	0xbff00000
 800895c:	9b04      	ldr	r3, [sp, #16]
 800895e:	b333      	cbz	r3, 80089ae <_strtod_l+0xb7e>
 8008960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008962:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008966:	d822      	bhi.n	80089ae <_strtod_l+0xb7e>
 8008968:	a327      	add	r3, pc, #156	; (adr r3, 8008a08 <_strtod_l+0xbd8>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	4630      	mov	r0, r6
 8008970:	4639      	mov	r1, r7
 8008972:	f7f8 f869 	bl	8000a48 <__aeabi_dcmple>
 8008976:	b1a0      	cbz	r0, 80089a2 <_strtod_l+0xb72>
 8008978:	4639      	mov	r1, r7
 800897a:	4630      	mov	r0, r6
 800897c:	f7f8 f8c0 	bl	8000b00 <__aeabi_d2uiz>
 8008980:	2800      	cmp	r0, #0
 8008982:	bf08      	it	eq
 8008984:	2001      	moveq	r0, #1
 8008986:	f7f7 fd69 	bl	800045c <__aeabi_ui2d>
 800898a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	bb03      	cbnz	r3, 80089d4 <_strtod_l+0xba4>
 8008992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008996:	9012      	str	r0, [sp, #72]	; 0x48
 8008998:	9313      	str	r3, [sp, #76]	; 0x4c
 800899a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800899e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80089a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80089b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80089b6:	f000 ff71 	bl	800989c <__ulp>
 80089ba:	4650      	mov	r0, sl
 80089bc:	ec53 2b10 	vmov	r2, r3, d0
 80089c0:	4659      	mov	r1, fp
 80089c2:	f7f7 fdc5 	bl	8000550 <__aeabi_dmul>
 80089c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089ca:	f7f7 fc0b 	bl	80001e4 <__adddf3>
 80089ce:	4682      	mov	sl, r0
 80089d0:	468b      	mov	fp, r1
 80089d2:	e772      	b.n	80088ba <_strtod_l+0xa8a>
 80089d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80089d8:	e7df      	b.n	800899a <_strtod_l+0xb6a>
 80089da:	a30d      	add	r3, pc, #52	; (adr r3, 8008a10 <_strtod_l+0xbe0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f8 f828 	bl	8000a34 <__aeabi_dcmplt>
 80089e4:	e79c      	b.n	8008920 <_strtod_l+0xaf0>
 80089e6:	2300      	movs	r3, #0
 80089e8:	930d      	str	r3, [sp, #52]	; 0x34
 80089ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	f7ff ba61 	b.w	8007eb6 <_strtod_l+0x86>
 80089f4:	2b65      	cmp	r3, #101	; 0x65
 80089f6:	f04f 0200 	mov.w	r2, #0
 80089fa:	f43f ab4e 	beq.w	800809a <_strtod_l+0x26a>
 80089fe:	2101      	movs	r1, #1
 8008a00:	4614      	mov	r4, r2
 8008a02:	9104      	str	r1, [sp, #16]
 8008a04:	f7ff bacb 	b.w	8007f9e <_strtod_l+0x16e>
 8008a08:	ffc00000 	.word	0xffc00000
 8008a0c:	41dfffff 	.word	0x41dfffff
 8008a10:	94a03595 	.word	0x94a03595
 8008a14:	3fcfffff 	.word	0x3fcfffff

08008a18 <strtod>:
 8008a18:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <strtod+0x20>)
 8008a1a:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <strtod+0x24>)
 8008a1c:	b410      	push	{r4}
 8008a1e:	681c      	ldr	r4, [r3, #0]
 8008a20:	6a23      	ldr	r3, [r4, #32]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bf08      	it	eq
 8008a26:	4613      	moveq	r3, r2
 8008a28:	460a      	mov	r2, r1
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a32:	f7ff b9fd 	b.w	8007e30 <_strtod_l>
 8008a36:	bf00      	nop
 8008a38:	20000010 	.word	0x20000010
 8008a3c:	20000074 	.word	0x20000074

08008a40 <strtok>:
 8008a40:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <strtok+0x50>)
 8008a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	681d      	ldr	r5, [r3, #0]
 8008a48:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	b9b4      	cbnz	r4, 8008a7e <strtok+0x3e>
 8008a50:	2050      	movs	r0, #80	; 0x50
 8008a52:	f7ff f8c3 	bl	8007bdc <malloc>
 8008a56:	65a8      	str	r0, [r5, #88]	; 0x58
 8008a58:	e9c0 4400 	strd	r4, r4, [r0]
 8008a5c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a60:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a64:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008a68:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008a6c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008a70:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008a74:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008a78:	6184      	str	r4, [r0, #24]
 8008a7a:	7704      	strb	r4, [r0, #28]
 8008a7c:	6244      	str	r4, [r0, #36]	; 0x24
 8008a7e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008a80:	4639      	mov	r1, r7
 8008a82:	4630      	mov	r0, r6
 8008a84:	2301      	movs	r3, #1
 8008a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	f000 b803 	b.w	8008a94 <__strtok_r>
 8008a8e:	bf00      	nop
 8008a90:	20000010 	.word	0x20000010

08008a94 <__strtok_r>:
 8008a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a96:	b918      	cbnz	r0, 8008aa0 <__strtok_r+0xc>
 8008a98:	6810      	ldr	r0, [r2, #0]
 8008a9a:	b908      	cbnz	r0, 8008aa0 <__strtok_r+0xc>
 8008a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008aa8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008aac:	b91e      	cbnz	r6, 8008ab6 <__strtok_r+0x22>
 8008aae:	b96d      	cbnz	r5, 8008acc <__strtok_r+0x38>
 8008ab0:	6015      	str	r5, [r2, #0]
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	e7f2      	b.n	8008a9c <__strtok_r+0x8>
 8008ab6:	42b5      	cmp	r5, r6
 8008ab8:	d1f6      	bne.n	8008aa8 <__strtok_r+0x14>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1ef      	bne.n	8008a9e <__strtok_r+0xa>
 8008abe:	6014      	str	r4, [r2, #0]
 8008ac0:	7003      	strb	r3, [r0, #0]
 8008ac2:	e7eb      	b.n	8008a9c <__strtok_r+0x8>
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	e00d      	b.n	8008ae4 <__strtok_r+0x50>
 8008ac8:	b926      	cbnz	r6, 8008ad4 <__strtok_r+0x40>
 8008aca:	461c      	mov	r4, r3
 8008acc:	4623      	mov	r3, r4
 8008ace:	460f      	mov	r7, r1
 8008ad0:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008ad4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008ad8:	42b5      	cmp	r5, r6
 8008ada:	d1f5      	bne.n	8008ac8 <__strtok_r+0x34>
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	d0f1      	beq.n	8008ac4 <__strtok_r+0x30>
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	7021      	strb	r1, [r4, #0]
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	e7d9      	b.n	8008a9c <__strtok_r+0x8>

08008ae8 <_strtol_l.isra.0>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	4680      	mov	r8, r0
 8008aee:	4689      	mov	r9, r1
 8008af0:	4692      	mov	sl, r2
 8008af2:	461e      	mov	r6, r3
 8008af4:	460f      	mov	r7, r1
 8008af6:	463d      	mov	r5, r7
 8008af8:	9808      	ldr	r0, [sp, #32]
 8008afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008afe:	f000 fbe9 	bl	80092d4 <__locale_ctype_ptr_l>
 8008b02:	4420      	add	r0, r4
 8008b04:	7843      	ldrb	r3, [r0, #1]
 8008b06:	f013 0308 	ands.w	r3, r3, #8
 8008b0a:	d132      	bne.n	8008b72 <_strtol_l.isra.0+0x8a>
 8008b0c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b0e:	d132      	bne.n	8008b76 <_strtol_l.isra.0+0x8e>
 8008b10:	787c      	ldrb	r4, [r7, #1]
 8008b12:	1cbd      	adds	r5, r7, #2
 8008b14:	2201      	movs	r2, #1
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d05d      	beq.n	8008bd6 <_strtol_l.isra.0+0xee>
 8008b1a:	2e10      	cmp	r6, #16
 8008b1c:	d109      	bne.n	8008b32 <_strtol_l.isra.0+0x4a>
 8008b1e:	2c30      	cmp	r4, #48	; 0x30
 8008b20:	d107      	bne.n	8008b32 <_strtol_l.isra.0+0x4a>
 8008b22:	782b      	ldrb	r3, [r5, #0]
 8008b24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b28:	2b58      	cmp	r3, #88	; 0x58
 8008b2a:	d14f      	bne.n	8008bcc <_strtol_l.isra.0+0xe4>
 8008b2c:	786c      	ldrb	r4, [r5, #1]
 8008b2e:	2610      	movs	r6, #16
 8008b30:	3502      	adds	r5, #2
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	bf14      	ite	ne
 8008b36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008b3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008b3e:	2700      	movs	r7, #0
 8008b40:	fbb1 fcf6 	udiv	ip, r1, r6
 8008b44:	4638      	mov	r0, r7
 8008b46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008b4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d817      	bhi.n	8008b82 <_strtol_l.isra.0+0x9a>
 8008b52:	461c      	mov	r4, r3
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	dd23      	ble.n	8008ba0 <_strtol_l.isra.0+0xb8>
 8008b58:	1c7b      	adds	r3, r7, #1
 8008b5a:	d007      	beq.n	8008b6c <_strtol_l.isra.0+0x84>
 8008b5c:	4584      	cmp	ip, r0
 8008b5e:	d31c      	bcc.n	8008b9a <_strtol_l.isra.0+0xb2>
 8008b60:	d101      	bne.n	8008b66 <_strtol_l.isra.0+0x7e>
 8008b62:	45a6      	cmp	lr, r4
 8008b64:	db19      	blt.n	8008b9a <_strtol_l.isra.0+0xb2>
 8008b66:	fb00 4006 	mla	r0, r0, r6, r4
 8008b6a:	2701      	movs	r7, #1
 8008b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b70:	e7eb      	b.n	8008b4a <_strtol_l.isra.0+0x62>
 8008b72:	462f      	mov	r7, r5
 8008b74:	e7bf      	b.n	8008af6 <_strtol_l.isra.0+0xe>
 8008b76:	2c2b      	cmp	r4, #43	; 0x2b
 8008b78:	bf04      	itt	eq
 8008b7a:	1cbd      	addeq	r5, r7, #2
 8008b7c:	787c      	ldrbeq	r4, [r7, #1]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	e7c9      	b.n	8008b16 <_strtol_l.isra.0+0x2e>
 8008b82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008b86:	2b19      	cmp	r3, #25
 8008b88:	d801      	bhi.n	8008b8e <_strtol_l.isra.0+0xa6>
 8008b8a:	3c37      	subs	r4, #55	; 0x37
 8008b8c:	e7e2      	b.n	8008b54 <_strtol_l.isra.0+0x6c>
 8008b8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008b92:	2b19      	cmp	r3, #25
 8008b94:	d804      	bhi.n	8008ba0 <_strtol_l.isra.0+0xb8>
 8008b96:	3c57      	subs	r4, #87	; 0x57
 8008b98:	e7dc      	b.n	8008b54 <_strtol_l.isra.0+0x6c>
 8008b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b9e:	e7e5      	b.n	8008b6c <_strtol_l.isra.0+0x84>
 8008ba0:	1c7b      	adds	r3, r7, #1
 8008ba2:	d108      	bne.n	8008bb6 <_strtol_l.isra.0+0xce>
 8008ba4:	2322      	movs	r3, #34	; 0x22
 8008ba6:	f8c8 3000 	str.w	r3, [r8]
 8008baa:	4608      	mov	r0, r1
 8008bac:	f1ba 0f00 	cmp.w	sl, #0
 8008bb0:	d107      	bne.n	8008bc2 <_strtol_l.isra.0+0xda>
 8008bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb6:	b102      	cbz	r2, 8008bba <_strtol_l.isra.0+0xd2>
 8008bb8:	4240      	negs	r0, r0
 8008bba:	f1ba 0f00 	cmp.w	sl, #0
 8008bbe:	d0f8      	beq.n	8008bb2 <_strtol_l.isra.0+0xca>
 8008bc0:	b10f      	cbz	r7, 8008bc6 <_strtol_l.isra.0+0xde>
 8008bc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8008bc6:	f8ca 9000 	str.w	r9, [sl]
 8008bca:	e7f2      	b.n	8008bb2 <_strtol_l.isra.0+0xca>
 8008bcc:	2430      	movs	r4, #48	; 0x30
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	d1af      	bne.n	8008b32 <_strtol_l.isra.0+0x4a>
 8008bd2:	2608      	movs	r6, #8
 8008bd4:	e7ad      	b.n	8008b32 <_strtol_l.isra.0+0x4a>
 8008bd6:	2c30      	cmp	r4, #48	; 0x30
 8008bd8:	d0a3      	beq.n	8008b22 <_strtol_l.isra.0+0x3a>
 8008bda:	260a      	movs	r6, #10
 8008bdc:	e7a9      	b.n	8008b32 <_strtol_l.isra.0+0x4a>
	...

08008be0 <strtol>:
 8008be0:	4b08      	ldr	r3, [pc, #32]	; (8008c04 <strtol+0x24>)
 8008be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	4d08      	ldr	r5, [pc, #32]	; (8008c08 <strtol+0x28>)
 8008be8:	6a23      	ldr	r3, [r4, #32]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	bf08      	it	eq
 8008bee:	462b      	moveq	r3, r5
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	460a      	mov	r2, r1
 8008bf6:	4601      	mov	r1, r0
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f7ff ff75 	bl	8008ae8 <_strtol_l.isra.0>
 8008bfe:	b003      	add	sp, #12
 8008c00:	bd30      	pop	{r4, r5, pc}
 8008c02:	bf00      	nop
 8008c04:	20000010 	.word	0x20000010
 8008c08:	20000074 	.word	0x20000074

08008c0c <__utoa>:
 8008c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <__utoa+0x78>)
 8008c10:	b08b      	sub	sp, #44	; 0x2c
 8008c12:	4605      	mov	r5, r0
 8008c14:	460c      	mov	r4, r1
 8008c16:	466e      	mov	r6, sp
 8008c18:	f103 0c20 	add.w	ip, r3, #32
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	6859      	ldr	r1, [r3, #4]
 8008c20:	4637      	mov	r7, r6
 8008c22:	c703      	stmia	r7!, {r0, r1}
 8008c24:	3308      	adds	r3, #8
 8008c26:	4563      	cmp	r3, ip
 8008c28:	463e      	mov	r6, r7
 8008c2a:	d1f7      	bne.n	8008c1c <__utoa+0x10>
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	713b      	strb	r3, [r7, #4]
 8008c32:	1e93      	subs	r3, r2, #2
 8008c34:	2b22      	cmp	r3, #34	; 0x22
 8008c36:	6038      	str	r0, [r7, #0]
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	d904      	bls.n	8008c48 <__utoa+0x3c>
 8008c3e:	7023      	strb	r3, [r4, #0]
 8008c40:	461c      	mov	r4, r3
 8008c42:	4620      	mov	r0, r4
 8008c44:	b00b      	add	sp, #44	; 0x2c
 8008c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c48:	1e66      	subs	r6, r4, #1
 8008c4a:	fbb5 f0f2 	udiv	r0, r5, r2
 8008c4e:	af0a      	add	r7, sp, #40	; 0x28
 8008c50:	fb02 5510 	mls	r5, r2, r0, r5
 8008c54:	443d      	add	r5, r7
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008c5c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008c60:	4605      	mov	r5, r0
 8008c62:	b968      	cbnz	r0, 8008c80 <__utoa+0x74>
 8008c64:	5460      	strb	r0, [r4, r1]
 8008c66:	4423      	add	r3, r4
 8008c68:	4622      	mov	r2, r4
 8008c6a:	1b19      	subs	r1, r3, r4
 8008c6c:	1b10      	subs	r0, r2, r4
 8008c6e:	4281      	cmp	r1, r0
 8008c70:	dde7      	ble.n	8008c42 <__utoa+0x36>
 8008c72:	7811      	ldrb	r1, [r2, #0]
 8008c74:	7818      	ldrb	r0, [r3, #0]
 8008c76:	f802 0b01 	strb.w	r0, [r2], #1
 8008c7a:	f803 1901 	strb.w	r1, [r3], #-1
 8008c7e:	e7f4      	b.n	8008c6a <__utoa+0x5e>
 8008c80:	460b      	mov	r3, r1
 8008c82:	e7e2      	b.n	8008c4a <__utoa+0x3e>
 8008c84:	08009d38 	.word	0x08009d38

08008c88 <rshift>:
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	6906      	ldr	r6, [r0, #16]
 8008c8c:	114b      	asrs	r3, r1, #5
 8008c8e:	429e      	cmp	r6, r3
 8008c90:	f100 0414 	add.w	r4, r0, #20
 8008c94:	dd30      	ble.n	8008cf8 <rshift+0x70>
 8008c96:	f011 011f 	ands.w	r1, r1, #31
 8008c9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008c9e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ca2:	d108      	bne.n	8008cb6 <rshift+0x2e>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	42b2      	cmp	r2, r6
 8008ca8:	460b      	mov	r3, r1
 8008caa:	d211      	bcs.n	8008cd0 <rshift+0x48>
 8008cac:	f852 3b04 	ldr.w	r3, [r2], #4
 8008cb0:	f841 3b04 	str.w	r3, [r1], #4
 8008cb4:	e7f7      	b.n	8008ca6 <rshift+0x1e>
 8008cb6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008cba:	f1c1 0c20 	rsb	ip, r1, #32
 8008cbe:	40cd      	lsrs	r5, r1
 8008cc0:	3204      	adds	r2, #4
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	42b2      	cmp	r2, r6
 8008cc6:	4617      	mov	r7, r2
 8008cc8:	d30c      	bcc.n	8008ce4 <rshift+0x5c>
 8008cca:	601d      	str	r5, [r3, #0]
 8008ccc:	b105      	cbz	r5, 8008cd0 <rshift+0x48>
 8008cce:	3304      	adds	r3, #4
 8008cd0:	1b1a      	subs	r2, r3, r4
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cd8:	bf08      	it	eq
 8008cda:	2300      	moveq	r3, #0
 8008cdc:	6102      	str	r2, [r0, #16]
 8008cde:	bf08      	it	eq
 8008ce0:	6143      	streq	r3, [r0, #20]
 8008ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce4:	683f      	ldr	r7, [r7, #0]
 8008ce6:	fa07 f70c 	lsl.w	r7, r7, ip
 8008cea:	433d      	orrs	r5, r7
 8008cec:	f843 5b04 	str.w	r5, [r3], #4
 8008cf0:	f852 5b04 	ldr.w	r5, [r2], #4
 8008cf4:	40cd      	lsrs	r5, r1
 8008cf6:	e7e5      	b.n	8008cc4 <rshift+0x3c>
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	e7e9      	b.n	8008cd0 <rshift+0x48>

08008cfc <__hexdig_fun>:
 8008cfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d00:	2b09      	cmp	r3, #9
 8008d02:	d802      	bhi.n	8008d0a <__hexdig_fun+0xe>
 8008d04:	3820      	subs	r0, #32
 8008d06:	b2c0      	uxtb	r0, r0
 8008d08:	4770      	bx	lr
 8008d0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d801      	bhi.n	8008d16 <__hexdig_fun+0x1a>
 8008d12:	3847      	subs	r0, #71	; 0x47
 8008d14:	e7f7      	b.n	8008d06 <__hexdig_fun+0xa>
 8008d16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	d801      	bhi.n	8008d22 <__hexdig_fun+0x26>
 8008d1e:	3827      	subs	r0, #39	; 0x27
 8008d20:	e7f1      	b.n	8008d06 <__hexdig_fun+0xa>
 8008d22:	2000      	movs	r0, #0
 8008d24:	4770      	bx	lr

08008d26 <__gethex>:
 8008d26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	b08b      	sub	sp, #44	; 0x2c
 8008d2c:	468a      	mov	sl, r1
 8008d2e:	9002      	str	r0, [sp, #8]
 8008d30:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008d32:	9306      	str	r3, [sp, #24]
 8008d34:	4690      	mov	r8, r2
 8008d36:	f000 fad0 	bl	80092da <__localeconv_l>
 8008d3a:	6803      	ldr	r3, [r0, #0]
 8008d3c:	9303      	str	r3, [sp, #12]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f7 fa42 	bl	80001c8 <strlen>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	9001      	str	r0, [sp, #4]
 8008d48:	4403      	add	r3, r0
 8008d4a:	f04f 0b00 	mov.w	fp, #0
 8008d4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d52:	9307      	str	r3, [sp, #28]
 8008d54:	f8da 3000 	ldr.w	r3, [sl]
 8008d58:	3302      	adds	r3, #2
 8008d5a:	461f      	mov	r7, r3
 8008d5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d60:	2830      	cmp	r0, #48	; 0x30
 8008d62:	d06c      	beq.n	8008e3e <__gethex+0x118>
 8008d64:	f7ff ffca 	bl	8008cfc <__hexdig_fun>
 8008d68:	4604      	mov	r4, r0
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d16a      	bne.n	8008e44 <__gethex+0x11e>
 8008d6e:	9a01      	ldr	r2, [sp, #4]
 8008d70:	9903      	ldr	r1, [sp, #12]
 8008d72:	4638      	mov	r0, r7
 8008d74:	f000 fed3 	bl	8009b1e <strncmp>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d166      	bne.n	8008e4a <__gethex+0x124>
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	5cf8      	ldrb	r0, [r7, r3]
 8008d80:	18fe      	adds	r6, r7, r3
 8008d82:	f7ff ffbb 	bl	8008cfc <__hexdig_fun>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d062      	beq.n	8008e50 <__gethex+0x12a>
 8008d8a:	4633      	mov	r3, r6
 8008d8c:	7818      	ldrb	r0, [r3, #0]
 8008d8e:	2830      	cmp	r0, #48	; 0x30
 8008d90:	461f      	mov	r7, r3
 8008d92:	f103 0301 	add.w	r3, r3, #1
 8008d96:	d0f9      	beq.n	8008d8c <__gethex+0x66>
 8008d98:	f7ff ffb0 	bl	8008cfc <__hexdig_fun>
 8008d9c:	fab0 f580 	clz	r5, r0
 8008da0:	096d      	lsrs	r5, r5, #5
 8008da2:	4634      	mov	r4, r6
 8008da4:	f04f 0b01 	mov.w	fp, #1
 8008da8:	463a      	mov	r2, r7
 8008daa:	4616      	mov	r6, r2
 8008dac:	3201      	adds	r2, #1
 8008dae:	7830      	ldrb	r0, [r6, #0]
 8008db0:	f7ff ffa4 	bl	8008cfc <__hexdig_fun>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d1f8      	bne.n	8008daa <__gethex+0x84>
 8008db8:	9a01      	ldr	r2, [sp, #4]
 8008dba:	9903      	ldr	r1, [sp, #12]
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 feae 	bl	8009b1e <strncmp>
 8008dc2:	b950      	cbnz	r0, 8008dda <__gethex+0xb4>
 8008dc4:	b954      	cbnz	r4, 8008ddc <__gethex+0xb6>
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	18f4      	adds	r4, r6, r3
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4616      	mov	r6, r2
 8008dce:	3201      	adds	r2, #1
 8008dd0:	7830      	ldrb	r0, [r6, #0]
 8008dd2:	f7ff ff93 	bl	8008cfc <__hexdig_fun>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d1f8      	bne.n	8008dcc <__gethex+0xa6>
 8008dda:	b10c      	cbz	r4, 8008de0 <__gethex+0xba>
 8008ddc:	1ba4      	subs	r4, r4, r6
 8008dde:	00a4      	lsls	r4, r4, #2
 8008de0:	7833      	ldrb	r3, [r6, #0]
 8008de2:	2b50      	cmp	r3, #80	; 0x50
 8008de4:	d001      	beq.n	8008dea <__gethex+0xc4>
 8008de6:	2b70      	cmp	r3, #112	; 0x70
 8008de8:	d140      	bne.n	8008e6c <__gethex+0x146>
 8008dea:	7873      	ldrb	r3, [r6, #1]
 8008dec:	2b2b      	cmp	r3, #43	; 0x2b
 8008dee:	d031      	beq.n	8008e54 <__gethex+0x12e>
 8008df0:	2b2d      	cmp	r3, #45	; 0x2d
 8008df2:	d033      	beq.n	8008e5c <__gethex+0x136>
 8008df4:	1c71      	adds	r1, r6, #1
 8008df6:	f04f 0900 	mov.w	r9, #0
 8008dfa:	7808      	ldrb	r0, [r1, #0]
 8008dfc:	f7ff ff7e 	bl	8008cfc <__hexdig_fun>
 8008e00:	1e43      	subs	r3, r0, #1
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b18      	cmp	r3, #24
 8008e06:	d831      	bhi.n	8008e6c <__gethex+0x146>
 8008e08:	f1a0 0210 	sub.w	r2, r0, #16
 8008e0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e10:	f7ff ff74 	bl	8008cfc <__hexdig_fun>
 8008e14:	1e43      	subs	r3, r0, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b18      	cmp	r3, #24
 8008e1a:	d922      	bls.n	8008e62 <__gethex+0x13c>
 8008e1c:	f1b9 0f00 	cmp.w	r9, #0
 8008e20:	d000      	beq.n	8008e24 <__gethex+0xfe>
 8008e22:	4252      	negs	r2, r2
 8008e24:	4414      	add	r4, r2
 8008e26:	f8ca 1000 	str.w	r1, [sl]
 8008e2a:	b30d      	cbz	r5, 8008e70 <__gethex+0x14a>
 8008e2c:	f1bb 0f00 	cmp.w	fp, #0
 8008e30:	bf0c      	ite	eq
 8008e32:	2706      	moveq	r7, #6
 8008e34:	2700      	movne	r7, #0
 8008e36:	4638      	mov	r0, r7
 8008e38:	b00b      	add	sp, #44	; 0x2c
 8008e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3e:	f10b 0b01 	add.w	fp, fp, #1
 8008e42:	e78a      	b.n	8008d5a <__gethex+0x34>
 8008e44:	2500      	movs	r5, #0
 8008e46:	462c      	mov	r4, r5
 8008e48:	e7ae      	b.n	8008da8 <__gethex+0x82>
 8008e4a:	463e      	mov	r6, r7
 8008e4c:	2501      	movs	r5, #1
 8008e4e:	e7c7      	b.n	8008de0 <__gethex+0xba>
 8008e50:	4604      	mov	r4, r0
 8008e52:	e7fb      	b.n	8008e4c <__gethex+0x126>
 8008e54:	f04f 0900 	mov.w	r9, #0
 8008e58:	1cb1      	adds	r1, r6, #2
 8008e5a:	e7ce      	b.n	8008dfa <__gethex+0xd4>
 8008e5c:	f04f 0901 	mov.w	r9, #1
 8008e60:	e7fa      	b.n	8008e58 <__gethex+0x132>
 8008e62:	230a      	movs	r3, #10
 8008e64:	fb03 0202 	mla	r2, r3, r2, r0
 8008e68:	3a10      	subs	r2, #16
 8008e6a:	e7cf      	b.n	8008e0c <__gethex+0xe6>
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	e7da      	b.n	8008e26 <__gethex+0x100>
 8008e70:	1bf3      	subs	r3, r6, r7
 8008e72:	3b01      	subs	r3, #1
 8008e74:	4629      	mov	r1, r5
 8008e76:	2b07      	cmp	r3, #7
 8008e78:	dc49      	bgt.n	8008f0e <__gethex+0x1e8>
 8008e7a:	9802      	ldr	r0, [sp, #8]
 8008e7c:	f000 fa43 	bl	8009306 <_Balloc>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	f100 0914 	add.w	r9, r0, #20
 8008e86:	f04f 0b00 	mov.w	fp, #0
 8008e8a:	f1c3 0301 	rsb	r3, r3, #1
 8008e8e:	4605      	mov	r5, r0
 8008e90:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e94:	46da      	mov	sl, fp
 8008e96:	9308      	str	r3, [sp, #32]
 8008e98:	42b7      	cmp	r7, r6
 8008e9a:	d33b      	bcc.n	8008f14 <__gethex+0x1ee>
 8008e9c:	9804      	ldr	r0, [sp, #16]
 8008e9e:	f840 ab04 	str.w	sl, [r0], #4
 8008ea2:	eba0 0009 	sub.w	r0, r0, r9
 8008ea6:	1080      	asrs	r0, r0, #2
 8008ea8:	6128      	str	r0, [r5, #16]
 8008eaa:	0147      	lsls	r7, r0, #5
 8008eac:	4650      	mov	r0, sl
 8008eae:	f000 faee 	bl	800948e <__hi0bits>
 8008eb2:	f8d8 6000 	ldr.w	r6, [r8]
 8008eb6:	1a3f      	subs	r7, r7, r0
 8008eb8:	42b7      	cmp	r7, r6
 8008eba:	dd64      	ble.n	8008f86 <__gethex+0x260>
 8008ebc:	1bbf      	subs	r7, r7, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 fdfd 	bl	8009ac0 <__any_on>
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	b178      	cbz	r0, 8008eea <__gethex+0x1c4>
 8008eca:	1e7b      	subs	r3, r7, #1
 8008ecc:	1159      	asrs	r1, r3, #5
 8008ece:	f003 021f 	and.w	r2, r3, #31
 8008ed2:	f04f 0a01 	mov.w	sl, #1
 8008ed6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008eda:	fa0a f202 	lsl.w	r2, sl, r2
 8008ede:	420a      	tst	r2, r1
 8008ee0:	d003      	beq.n	8008eea <__gethex+0x1c4>
 8008ee2:	4553      	cmp	r3, sl
 8008ee4:	dc46      	bgt.n	8008f74 <__gethex+0x24e>
 8008ee6:	f04f 0a02 	mov.w	sl, #2
 8008eea:	4639      	mov	r1, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7ff fecb 	bl	8008c88 <rshift>
 8008ef2:	443c      	add	r4, r7
 8008ef4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	da52      	bge.n	8008fa2 <__gethex+0x27c>
 8008efc:	4629      	mov	r1, r5
 8008efe:	9802      	ldr	r0, [sp, #8]
 8008f00:	f000 fa35 	bl	800936e <_Bfree>
 8008f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f06:	2300      	movs	r3, #0
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	27a3      	movs	r7, #163	; 0xa3
 8008f0c:	e793      	b.n	8008e36 <__gethex+0x110>
 8008f0e:	3101      	adds	r1, #1
 8008f10:	105b      	asrs	r3, r3, #1
 8008f12:	e7b0      	b.n	8008e76 <__gethex+0x150>
 8008f14:	1e73      	subs	r3, r6, #1
 8008f16:	9305      	str	r3, [sp, #20]
 8008f18:	9a07      	ldr	r2, [sp, #28]
 8008f1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d018      	beq.n	8008f54 <__gethex+0x22e>
 8008f22:	f1bb 0f20 	cmp.w	fp, #32
 8008f26:	d107      	bne.n	8008f38 <__gethex+0x212>
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	f8c3 a000 	str.w	sl, [r3]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	f04f 0a00 	mov.w	sl, #0
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	46d3      	mov	fp, sl
 8008f38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f3c:	f7ff fede 	bl	8008cfc <__hexdig_fun>
 8008f40:	f000 000f 	and.w	r0, r0, #15
 8008f44:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f48:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f4c:	f10b 0b04 	add.w	fp, fp, #4
 8008f50:	9b05      	ldr	r3, [sp, #20]
 8008f52:	e00d      	b.n	8008f70 <__gethex+0x24a>
 8008f54:	9b05      	ldr	r3, [sp, #20]
 8008f56:	9a08      	ldr	r2, [sp, #32]
 8008f58:	4413      	add	r3, r2
 8008f5a:	42bb      	cmp	r3, r7
 8008f5c:	d3e1      	bcc.n	8008f22 <__gethex+0x1fc>
 8008f5e:	4618      	mov	r0, r3
 8008f60:	9a01      	ldr	r2, [sp, #4]
 8008f62:	9903      	ldr	r1, [sp, #12]
 8008f64:	9309      	str	r3, [sp, #36]	; 0x24
 8008f66:	f000 fdda 	bl	8009b1e <strncmp>
 8008f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1d8      	bne.n	8008f22 <__gethex+0x1fc>
 8008f70:	461e      	mov	r6, r3
 8008f72:	e791      	b.n	8008e98 <__gethex+0x172>
 8008f74:	1eb9      	subs	r1, r7, #2
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 fda2 	bl	8009ac0 <__any_on>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d0b2      	beq.n	8008ee6 <__gethex+0x1c0>
 8008f80:	f04f 0a03 	mov.w	sl, #3
 8008f84:	e7b1      	b.n	8008eea <__gethex+0x1c4>
 8008f86:	da09      	bge.n	8008f9c <__gethex+0x276>
 8008f88:	1bf7      	subs	r7, r6, r7
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	463a      	mov	r2, r7
 8008f8e:	9802      	ldr	r0, [sp, #8]
 8008f90:	f000 fbb8 	bl	8009704 <__lshift>
 8008f94:	1be4      	subs	r4, r4, r7
 8008f96:	4605      	mov	r5, r0
 8008f98:	f100 0914 	add.w	r9, r0, #20
 8008f9c:	f04f 0a00 	mov.w	sl, #0
 8008fa0:	e7a8      	b.n	8008ef4 <__gethex+0x1ce>
 8008fa2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fa6:	42a0      	cmp	r0, r4
 8008fa8:	dd6a      	ble.n	8009080 <__gethex+0x35a>
 8008faa:	1b04      	subs	r4, r0, r4
 8008fac:	42a6      	cmp	r6, r4
 8008fae:	dc2e      	bgt.n	800900e <__gethex+0x2e8>
 8008fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d022      	beq.n	8008ffe <__gethex+0x2d8>
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d024      	beq.n	8009006 <__gethex+0x2e0>
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d115      	bne.n	8008fec <__gethex+0x2c6>
 8008fc0:	42a6      	cmp	r6, r4
 8008fc2:	d113      	bne.n	8008fec <__gethex+0x2c6>
 8008fc4:	2e01      	cmp	r6, #1
 8008fc6:	dc0b      	bgt.n	8008fe0 <__gethex+0x2ba>
 8008fc8:	9a06      	ldr	r2, [sp, #24]
 8008fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	612b      	str	r3, [r5, #16]
 8008fd4:	f8c9 3000 	str.w	r3, [r9]
 8008fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fda:	2762      	movs	r7, #98	; 0x62
 8008fdc:	601d      	str	r5, [r3, #0]
 8008fde:	e72a      	b.n	8008e36 <__gethex+0x110>
 8008fe0:	1e71      	subs	r1, r6, #1
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 fd6c 	bl	8009ac0 <__any_on>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d1ed      	bne.n	8008fc8 <__gethex+0x2a2>
 8008fec:	4629      	mov	r1, r5
 8008fee:	9802      	ldr	r0, [sp, #8]
 8008ff0:	f000 f9bd 	bl	800936e <_Bfree>
 8008ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	2750      	movs	r7, #80	; 0x50
 8008ffc:	e71b      	b.n	8008e36 <__gethex+0x110>
 8008ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0e1      	beq.n	8008fc8 <__gethex+0x2a2>
 8009004:	e7f2      	b.n	8008fec <__gethex+0x2c6>
 8009006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1dd      	bne.n	8008fc8 <__gethex+0x2a2>
 800900c:	e7ee      	b.n	8008fec <__gethex+0x2c6>
 800900e:	1e67      	subs	r7, r4, #1
 8009010:	f1ba 0f00 	cmp.w	sl, #0
 8009014:	d131      	bne.n	800907a <__gethex+0x354>
 8009016:	b127      	cbz	r7, 8009022 <__gethex+0x2fc>
 8009018:	4639      	mov	r1, r7
 800901a:	4628      	mov	r0, r5
 800901c:	f000 fd50 	bl	8009ac0 <__any_on>
 8009020:	4682      	mov	sl, r0
 8009022:	117a      	asrs	r2, r7, #5
 8009024:	2301      	movs	r3, #1
 8009026:	f007 071f 	and.w	r7, r7, #31
 800902a:	fa03 f707 	lsl.w	r7, r3, r7
 800902e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009032:	4621      	mov	r1, r4
 8009034:	421f      	tst	r7, r3
 8009036:	4628      	mov	r0, r5
 8009038:	bf18      	it	ne
 800903a:	f04a 0a02 	orrne.w	sl, sl, #2
 800903e:	1b36      	subs	r6, r6, r4
 8009040:	f7ff fe22 	bl	8008c88 <rshift>
 8009044:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009048:	2702      	movs	r7, #2
 800904a:	f1ba 0f00 	cmp.w	sl, #0
 800904e:	d048      	beq.n	80090e2 <__gethex+0x3bc>
 8009050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d015      	beq.n	8009084 <__gethex+0x35e>
 8009058:	2b03      	cmp	r3, #3
 800905a:	d017      	beq.n	800908c <__gethex+0x366>
 800905c:	2b01      	cmp	r3, #1
 800905e:	d109      	bne.n	8009074 <__gethex+0x34e>
 8009060:	f01a 0f02 	tst.w	sl, #2
 8009064:	d006      	beq.n	8009074 <__gethex+0x34e>
 8009066:	f8d9 3000 	ldr.w	r3, [r9]
 800906a:	ea4a 0a03 	orr.w	sl, sl, r3
 800906e:	f01a 0f01 	tst.w	sl, #1
 8009072:	d10e      	bne.n	8009092 <__gethex+0x36c>
 8009074:	f047 0710 	orr.w	r7, r7, #16
 8009078:	e033      	b.n	80090e2 <__gethex+0x3bc>
 800907a:	f04f 0a01 	mov.w	sl, #1
 800907e:	e7d0      	b.n	8009022 <__gethex+0x2fc>
 8009080:	2701      	movs	r7, #1
 8009082:	e7e2      	b.n	800904a <__gethex+0x324>
 8009084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009086:	f1c3 0301 	rsb	r3, r3, #1
 800908a:	9315      	str	r3, [sp, #84]	; 0x54
 800908c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0f0      	beq.n	8009074 <__gethex+0x34e>
 8009092:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009096:	f105 0314 	add.w	r3, r5, #20
 800909a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800909e:	eb03 010a 	add.w	r1, r3, sl
 80090a2:	f04f 0c00 	mov.w	ip, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090b0:	d01c      	beq.n	80090ec <__gethex+0x3c6>
 80090b2:	3201      	adds	r2, #1
 80090b4:	6002      	str	r2, [r0, #0]
 80090b6:	2f02      	cmp	r7, #2
 80090b8:	f105 0314 	add.w	r3, r5, #20
 80090bc:	d138      	bne.n	8009130 <__gethex+0x40a>
 80090be:	f8d8 2000 	ldr.w	r2, [r8]
 80090c2:	3a01      	subs	r2, #1
 80090c4:	42b2      	cmp	r2, r6
 80090c6:	d10a      	bne.n	80090de <__gethex+0x3b8>
 80090c8:	1171      	asrs	r1, r6, #5
 80090ca:	2201      	movs	r2, #1
 80090cc:	f006 061f 	and.w	r6, r6, #31
 80090d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090d4:	fa02 f606 	lsl.w	r6, r2, r6
 80090d8:	421e      	tst	r6, r3
 80090da:	bf18      	it	ne
 80090dc:	4617      	movne	r7, r2
 80090de:	f047 0720 	orr.w	r7, r7, #32
 80090e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090e4:	601d      	str	r5, [r3, #0]
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	601c      	str	r4, [r3, #0]
 80090ea:	e6a4      	b.n	8008e36 <__gethex+0x110>
 80090ec:	4299      	cmp	r1, r3
 80090ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80090f2:	d8d8      	bhi.n	80090a6 <__gethex+0x380>
 80090f4:	68ab      	ldr	r3, [r5, #8]
 80090f6:	4599      	cmp	r9, r3
 80090f8:	db12      	blt.n	8009120 <__gethex+0x3fa>
 80090fa:	6869      	ldr	r1, [r5, #4]
 80090fc:	9802      	ldr	r0, [sp, #8]
 80090fe:	3101      	adds	r1, #1
 8009100:	f000 f901 	bl	8009306 <_Balloc>
 8009104:	692a      	ldr	r2, [r5, #16]
 8009106:	3202      	adds	r2, #2
 8009108:	f105 010c 	add.w	r1, r5, #12
 800910c:	4683      	mov	fp, r0
 800910e:	0092      	lsls	r2, r2, #2
 8009110:	300c      	adds	r0, #12
 8009112:	f7fe fd73 	bl	8007bfc <memcpy>
 8009116:	4629      	mov	r1, r5
 8009118:	9802      	ldr	r0, [sp, #8]
 800911a:	f000 f928 	bl	800936e <_Bfree>
 800911e:	465d      	mov	r5, fp
 8009120:	692b      	ldr	r3, [r5, #16]
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009128:	612a      	str	r2, [r5, #16]
 800912a:	2201      	movs	r2, #1
 800912c:	615a      	str	r2, [r3, #20]
 800912e:	e7c2      	b.n	80090b6 <__gethex+0x390>
 8009130:	692a      	ldr	r2, [r5, #16]
 8009132:	454a      	cmp	r2, r9
 8009134:	dd0b      	ble.n	800914e <__gethex+0x428>
 8009136:	2101      	movs	r1, #1
 8009138:	4628      	mov	r0, r5
 800913a:	f7ff fda5 	bl	8008c88 <rshift>
 800913e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009142:	3401      	adds	r4, #1
 8009144:	42a3      	cmp	r3, r4
 8009146:	f6ff aed9 	blt.w	8008efc <__gethex+0x1d6>
 800914a:	2701      	movs	r7, #1
 800914c:	e7c7      	b.n	80090de <__gethex+0x3b8>
 800914e:	f016 061f 	ands.w	r6, r6, #31
 8009152:	d0fa      	beq.n	800914a <__gethex+0x424>
 8009154:	449a      	add	sl, r3
 8009156:	f1c6 0620 	rsb	r6, r6, #32
 800915a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800915e:	f000 f996 	bl	800948e <__hi0bits>
 8009162:	42b0      	cmp	r0, r6
 8009164:	dbe7      	blt.n	8009136 <__gethex+0x410>
 8009166:	e7f0      	b.n	800914a <__gethex+0x424>

08009168 <L_shift>:
 8009168:	f1c2 0208 	rsb	r2, r2, #8
 800916c:	0092      	lsls	r2, r2, #2
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	f1c2 0620 	rsb	r6, r2, #32
 8009174:	6843      	ldr	r3, [r0, #4]
 8009176:	6804      	ldr	r4, [r0, #0]
 8009178:	fa03 f506 	lsl.w	r5, r3, r6
 800917c:	432c      	orrs	r4, r5
 800917e:	40d3      	lsrs	r3, r2
 8009180:	6004      	str	r4, [r0, #0]
 8009182:	f840 3f04 	str.w	r3, [r0, #4]!
 8009186:	4288      	cmp	r0, r1
 8009188:	d3f4      	bcc.n	8009174 <L_shift+0xc>
 800918a:	bd70      	pop	{r4, r5, r6, pc}

0800918c <__match>:
 800918c:	b530      	push	{r4, r5, lr}
 800918e:	6803      	ldr	r3, [r0, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009196:	b914      	cbnz	r4, 800919e <__match+0x12>
 8009198:	6003      	str	r3, [r0, #0]
 800919a:	2001      	movs	r0, #1
 800919c:	bd30      	pop	{r4, r5, pc}
 800919e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80091a6:	2d19      	cmp	r5, #25
 80091a8:	bf98      	it	ls
 80091aa:	3220      	addls	r2, #32
 80091ac:	42a2      	cmp	r2, r4
 80091ae:	d0f0      	beq.n	8009192 <__match+0x6>
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7f3      	b.n	800919c <__match+0x10>

080091b4 <__hexnan>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	680b      	ldr	r3, [r1, #0]
 80091ba:	6801      	ldr	r1, [r0, #0]
 80091bc:	115f      	asrs	r7, r3, #5
 80091be:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80091c2:	f013 031f 	ands.w	r3, r3, #31
 80091c6:	b087      	sub	sp, #28
 80091c8:	bf18      	it	ne
 80091ca:	3704      	addne	r7, #4
 80091cc:	2500      	movs	r5, #0
 80091ce:	1f3e      	subs	r6, r7, #4
 80091d0:	4682      	mov	sl, r0
 80091d2:	4690      	mov	r8, r2
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	f847 5c04 	str.w	r5, [r7, #-4]
 80091da:	46b1      	mov	r9, r6
 80091dc:	4634      	mov	r4, r6
 80091de:	9502      	str	r5, [sp, #8]
 80091e0:	46ab      	mov	fp, r5
 80091e2:	784a      	ldrb	r2, [r1, #1]
 80091e4:	1c4b      	adds	r3, r1, #1
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	b342      	cbz	r2, 800923c <__hexnan+0x88>
 80091ea:	4610      	mov	r0, r2
 80091ec:	9105      	str	r1, [sp, #20]
 80091ee:	9204      	str	r2, [sp, #16]
 80091f0:	f7ff fd84 	bl	8008cfc <__hexdig_fun>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d143      	bne.n	8009280 <__hexnan+0xcc>
 80091f8:	9a04      	ldr	r2, [sp, #16]
 80091fa:	9905      	ldr	r1, [sp, #20]
 80091fc:	2a20      	cmp	r2, #32
 80091fe:	d818      	bhi.n	8009232 <__hexnan+0x7e>
 8009200:	9b02      	ldr	r3, [sp, #8]
 8009202:	459b      	cmp	fp, r3
 8009204:	dd13      	ble.n	800922e <__hexnan+0x7a>
 8009206:	454c      	cmp	r4, r9
 8009208:	d206      	bcs.n	8009218 <__hexnan+0x64>
 800920a:	2d07      	cmp	r5, #7
 800920c:	dc04      	bgt.n	8009218 <__hexnan+0x64>
 800920e:	462a      	mov	r2, r5
 8009210:	4649      	mov	r1, r9
 8009212:	4620      	mov	r0, r4
 8009214:	f7ff ffa8 	bl	8009168 <L_shift>
 8009218:	4544      	cmp	r4, r8
 800921a:	d944      	bls.n	80092a6 <__hexnan+0xf2>
 800921c:	2300      	movs	r3, #0
 800921e:	f1a4 0904 	sub.w	r9, r4, #4
 8009222:	f844 3c04 	str.w	r3, [r4, #-4]
 8009226:	f8cd b008 	str.w	fp, [sp, #8]
 800922a:	464c      	mov	r4, r9
 800922c:	461d      	mov	r5, r3
 800922e:	9903      	ldr	r1, [sp, #12]
 8009230:	e7d7      	b.n	80091e2 <__hexnan+0x2e>
 8009232:	2a29      	cmp	r2, #41	; 0x29
 8009234:	d14a      	bne.n	80092cc <__hexnan+0x118>
 8009236:	3102      	adds	r1, #2
 8009238:	f8ca 1000 	str.w	r1, [sl]
 800923c:	f1bb 0f00 	cmp.w	fp, #0
 8009240:	d044      	beq.n	80092cc <__hexnan+0x118>
 8009242:	454c      	cmp	r4, r9
 8009244:	d206      	bcs.n	8009254 <__hexnan+0xa0>
 8009246:	2d07      	cmp	r5, #7
 8009248:	dc04      	bgt.n	8009254 <__hexnan+0xa0>
 800924a:	462a      	mov	r2, r5
 800924c:	4649      	mov	r1, r9
 800924e:	4620      	mov	r0, r4
 8009250:	f7ff ff8a 	bl	8009168 <L_shift>
 8009254:	4544      	cmp	r4, r8
 8009256:	d928      	bls.n	80092aa <__hexnan+0xf6>
 8009258:	4643      	mov	r3, r8
 800925a:	f854 2b04 	ldr.w	r2, [r4], #4
 800925e:	f843 2b04 	str.w	r2, [r3], #4
 8009262:	42a6      	cmp	r6, r4
 8009264:	d2f9      	bcs.n	800925a <__hexnan+0xa6>
 8009266:	2200      	movs	r2, #0
 8009268:	f843 2b04 	str.w	r2, [r3], #4
 800926c:	429e      	cmp	r6, r3
 800926e:	d2fb      	bcs.n	8009268 <__hexnan+0xb4>
 8009270:	6833      	ldr	r3, [r6, #0]
 8009272:	b91b      	cbnz	r3, 800927c <__hexnan+0xc8>
 8009274:	4546      	cmp	r6, r8
 8009276:	d127      	bne.n	80092c8 <__hexnan+0x114>
 8009278:	2301      	movs	r3, #1
 800927a:	6033      	str	r3, [r6, #0]
 800927c:	2005      	movs	r0, #5
 800927e:	e026      	b.n	80092ce <__hexnan+0x11a>
 8009280:	3501      	adds	r5, #1
 8009282:	2d08      	cmp	r5, #8
 8009284:	f10b 0b01 	add.w	fp, fp, #1
 8009288:	dd06      	ble.n	8009298 <__hexnan+0xe4>
 800928a:	4544      	cmp	r4, r8
 800928c:	d9cf      	bls.n	800922e <__hexnan+0x7a>
 800928e:	2300      	movs	r3, #0
 8009290:	f844 3c04 	str.w	r3, [r4, #-4]
 8009294:	2501      	movs	r5, #1
 8009296:	3c04      	subs	r4, #4
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	f000 000f 	and.w	r0, r0, #15
 800929e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092a2:	6020      	str	r0, [r4, #0]
 80092a4:	e7c3      	b.n	800922e <__hexnan+0x7a>
 80092a6:	2508      	movs	r5, #8
 80092a8:	e7c1      	b.n	800922e <__hexnan+0x7a>
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0df      	beq.n	8009270 <__hexnan+0xbc>
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295
 80092b4:	f1c3 0320 	rsb	r3, r3, #32
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
 80092bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80092c0:	401a      	ands	r2, r3
 80092c2:	f847 2c04 	str.w	r2, [r7, #-4]
 80092c6:	e7d3      	b.n	8009270 <__hexnan+0xbc>
 80092c8:	3e04      	subs	r6, #4
 80092ca:	e7d1      	b.n	8009270 <__hexnan+0xbc>
 80092cc:	2004      	movs	r0, #4
 80092ce:	b007      	add	sp, #28
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092d4 <__locale_ctype_ptr_l>:
 80092d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80092d8:	4770      	bx	lr

080092da <__localeconv_l>:
 80092da:	30f0      	adds	r0, #240	; 0xf0
 80092dc:	4770      	bx	lr

080092de <__ascii_mbtowc>:
 80092de:	b082      	sub	sp, #8
 80092e0:	b901      	cbnz	r1, 80092e4 <__ascii_mbtowc+0x6>
 80092e2:	a901      	add	r1, sp, #4
 80092e4:	b142      	cbz	r2, 80092f8 <__ascii_mbtowc+0x1a>
 80092e6:	b14b      	cbz	r3, 80092fc <__ascii_mbtowc+0x1e>
 80092e8:	7813      	ldrb	r3, [r2, #0]
 80092ea:	600b      	str	r3, [r1, #0]
 80092ec:	7812      	ldrb	r2, [r2, #0]
 80092ee:	1c10      	adds	r0, r2, #0
 80092f0:	bf18      	it	ne
 80092f2:	2001      	movne	r0, #1
 80092f4:	b002      	add	sp, #8
 80092f6:	4770      	bx	lr
 80092f8:	4610      	mov	r0, r2
 80092fa:	e7fb      	b.n	80092f4 <__ascii_mbtowc+0x16>
 80092fc:	f06f 0001 	mvn.w	r0, #1
 8009300:	e7f8      	b.n	80092f4 <__ascii_mbtowc+0x16>

08009302 <__malloc_lock>:
 8009302:	4770      	bx	lr

08009304 <__malloc_unlock>:
 8009304:	4770      	bx	lr

08009306 <_Balloc>:
 8009306:	b570      	push	{r4, r5, r6, lr}
 8009308:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800930a:	4604      	mov	r4, r0
 800930c:	460e      	mov	r6, r1
 800930e:	b93d      	cbnz	r5, 8009320 <_Balloc+0x1a>
 8009310:	2010      	movs	r0, #16
 8009312:	f7fe fc63 	bl	8007bdc <malloc>
 8009316:	6260      	str	r0, [r4, #36]	; 0x24
 8009318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800931c:	6005      	str	r5, [r0, #0]
 800931e:	60c5      	str	r5, [r0, #12]
 8009320:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009322:	68eb      	ldr	r3, [r5, #12]
 8009324:	b183      	cbz	r3, 8009348 <_Balloc+0x42>
 8009326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800932e:	b9b8      	cbnz	r0, 8009360 <_Balloc+0x5a>
 8009330:	2101      	movs	r1, #1
 8009332:	fa01 f506 	lsl.w	r5, r1, r6
 8009336:	1d6a      	adds	r2, r5, #5
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fbe1 	bl	8009b02 <_calloc_r>
 8009340:	b160      	cbz	r0, 800935c <_Balloc+0x56>
 8009342:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009346:	e00e      	b.n	8009366 <_Balloc+0x60>
 8009348:	2221      	movs	r2, #33	; 0x21
 800934a:	2104      	movs	r1, #4
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fbd8 	bl	8009b02 <_calloc_r>
 8009352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009354:	60e8      	str	r0, [r5, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e4      	bne.n	8009326 <_Balloc+0x20>
 800935c:	2000      	movs	r0, #0
 800935e:	bd70      	pop	{r4, r5, r6, pc}
 8009360:	6802      	ldr	r2, [r0, #0]
 8009362:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009366:	2300      	movs	r3, #0
 8009368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800936c:	e7f7      	b.n	800935e <_Balloc+0x58>

0800936e <_Bfree>:
 800936e:	b570      	push	{r4, r5, r6, lr}
 8009370:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009372:	4606      	mov	r6, r0
 8009374:	460d      	mov	r5, r1
 8009376:	b93c      	cbnz	r4, 8009388 <_Bfree+0x1a>
 8009378:	2010      	movs	r0, #16
 800937a:	f7fe fc2f 	bl	8007bdc <malloc>
 800937e:	6270      	str	r0, [r6, #36]	; 0x24
 8009380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009384:	6004      	str	r4, [r0, #0]
 8009386:	60c4      	str	r4, [r0, #12]
 8009388:	b13d      	cbz	r5, 800939a <_Bfree+0x2c>
 800938a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800938c:	686a      	ldr	r2, [r5, #4]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009394:	6029      	str	r1, [r5, #0]
 8009396:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800939a:	bd70      	pop	{r4, r5, r6, pc}

0800939c <__multadd>:
 800939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	690d      	ldr	r5, [r1, #16]
 80093a2:	461f      	mov	r7, r3
 80093a4:	4606      	mov	r6, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	f101 0c14 	add.w	ip, r1, #20
 80093ac:	2300      	movs	r3, #0
 80093ae:	f8dc 0000 	ldr.w	r0, [ip]
 80093b2:	b281      	uxth	r1, r0
 80093b4:	fb02 7101 	mla	r1, r2, r1, r7
 80093b8:	0c0f      	lsrs	r7, r1, #16
 80093ba:	0c00      	lsrs	r0, r0, #16
 80093bc:	fb02 7000 	mla	r0, r2, r0, r7
 80093c0:	b289      	uxth	r1, r1
 80093c2:	3301      	adds	r3, #1
 80093c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80093c8:	429d      	cmp	r5, r3
 80093ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80093ce:	f84c 1b04 	str.w	r1, [ip], #4
 80093d2:	dcec      	bgt.n	80093ae <__multadd+0x12>
 80093d4:	b1d7      	cbz	r7, 800940c <__multadd+0x70>
 80093d6:	68a3      	ldr	r3, [r4, #8]
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dc12      	bgt.n	8009402 <__multadd+0x66>
 80093dc:	6861      	ldr	r1, [r4, #4]
 80093de:	4630      	mov	r0, r6
 80093e0:	3101      	adds	r1, #1
 80093e2:	f7ff ff90 	bl	8009306 <_Balloc>
 80093e6:	6922      	ldr	r2, [r4, #16]
 80093e8:	3202      	adds	r2, #2
 80093ea:	f104 010c 	add.w	r1, r4, #12
 80093ee:	4680      	mov	r8, r0
 80093f0:	0092      	lsls	r2, r2, #2
 80093f2:	300c      	adds	r0, #12
 80093f4:	f7fe fc02 	bl	8007bfc <memcpy>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ffb7 	bl	800936e <_Bfree>
 8009400:	4644      	mov	r4, r8
 8009402:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009406:	3501      	adds	r5, #1
 8009408:	615f      	str	r7, [r3, #20]
 800940a:	6125      	str	r5, [r4, #16]
 800940c:	4620      	mov	r0, r4
 800940e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009412 <__s2b>:
 8009412:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009416:	460c      	mov	r4, r1
 8009418:	4615      	mov	r5, r2
 800941a:	461f      	mov	r7, r3
 800941c:	2209      	movs	r2, #9
 800941e:	3308      	adds	r3, #8
 8009420:	4606      	mov	r6, r0
 8009422:	fb93 f3f2 	sdiv	r3, r3, r2
 8009426:	2100      	movs	r1, #0
 8009428:	2201      	movs	r2, #1
 800942a:	429a      	cmp	r2, r3
 800942c:	db20      	blt.n	8009470 <__s2b+0x5e>
 800942e:	4630      	mov	r0, r6
 8009430:	f7ff ff69 	bl	8009306 <_Balloc>
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	6143      	str	r3, [r0, #20]
 8009438:	2d09      	cmp	r5, #9
 800943a:	f04f 0301 	mov.w	r3, #1
 800943e:	6103      	str	r3, [r0, #16]
 8009440:	dd19      	ble.n	8009476 <__s2b+0x64>
 8009442:	f104 0809 	add.w	r8, r4, #9
 8009446:	46c1      	mov	r9, r8
 8009448:	442c      	add	r4, r5
 800944a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800944e:	4601      	mov	r1, r0
 8009450:	3b30      	subs	r3, #48	; 0x30
 8009452:	220a      	movs	r2, #10
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ffa1 	bl	800939c <__multadd>
 800945a:	45a1      	cmp	r9, r4
 800945c:	d1f5      	bne.n	800944a <__s2b+0x38>
 800945e:	eb08 0405 	add.w	r4, r8, r5
 8009462:	3c08      	subs	r4, #8
 8009464:	1b2d      	subs	r5, r5, r4
 8009466:	1963      	adds	r3, r4, r5
 8009468:	42bb      	cmp	r3, r7
 800946a:	db07      	blt.n	800947c <__s2b+0x6a>
 800946c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009470:	0052      	lsls	r2, r2, #1
 8009472:	3101      	adds	r1, #1
 8009474:	e7d9      	b.n	800942a <__s2b+0x18>
 8009476:	340a      	adds	r4, #10
 8009478:	2509      	movs	r5, #9
 800947a:	e7f3      	b.n	8009464 <__s2b+0x52>
 800947c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009480:	4601      	mov	r1, r0
 8009482:	3b30      	subs	r3, #48	; 0x30
 8009484:	220a      	movs	r2, #10
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ff88 	bl	800939c <__multadd>
 800948c:	e7eb      	b.n	8009466 <__s2b+0x54>

0800948e <__hi0bits>:
 800948e:	0c02      	lsrs	r2, r0, #16
 8009490:	0412      	lsls	r2, r2, #16
 8009492:	4603      	mov	r3, r0
 8009494:	b9b2      	cbnz	r2, 80094c4 <__hi0bits+0x36>
 8009496:	0403      	lsls	r3, r0, #16
 8009498:	2010      	movs	r0, #16
 800949a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800949e:	bf04      	itt	eq
 80094a0:	021b      	lsleq	r3, r3, #8
 80094a2:	3008      	addeq	r0, #8
 80094a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80094a8:	bf04      	itt	eq
 80094aa:	011b      	lsleq	r3, r3, #4
 80094ac:	3004      	addeq	r0, #4
 80094ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80094b2:	bf04      	itt	eq
 80094b4:	009b      	lsleq	r3, r3, #2
 80094b6:	3002      	addeq	r0, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db06      	blt.n	80094ca <__hi0bits+0x3c>
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	d503      	bpl.n	80094c8 <__hi0bits+0x3a>
 80094c0:	3001      	adds	r0, #1
 80094c2:	4770      	bx	lr
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7e8      	b.n	800949a <__hi0bits+0xc>
 80094c8:	2020      	movs	r0, #32
 80094ca:	4770      	bx	lr

080094cc <__lo0bits>:
 80094cc:	6803      	ldr	r3, [r0, #0]
 80094ce:	f013 0207 	ands.w	r2, r3, #7
 80094d2:	4601      	mov	r1, r0
 80094d4:	d00b      	beq.n	80094ee <__lo0bits+0x22>
 80094d6:	07da      	lsls	r2, r3, #31
 80094d8:	d423      	bmi.n	8009522 <__lo0bits+0x56>
 80094da:	0798      	lsls	r0, r3, #30
 80094dc:	bf49      	itett	mi
 80094de:	085b      	lsrmi	r3, r3, #1
 80094e0:	089b      	lsrpl	r3, r3, #2
 80094e2:	2001      	movmi	r0, #1
 80094e4:	600b      	strmi	r3, [r1, #0]
 80094e6:	bf5c      	itt	pl
 80094e8:	600b      	strpl	r3, [r1, #0]
 80094ea:	2002      	movpl	r0, #2
 80094ec:	4770      	bx	lr
 80094ee:	b298      	uxth	r0, r3
 80094f0:	b9a8      	cbnz	r0, 800951e <__lo0bits+0x52>
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	2010      	movs	r0, #16
 80094f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094fa:	bf04      	itt	eq
 80094fc:	0a1b      	lsreq	r3, r3, #8
 80094fe:	3008      	addeq	r0, #8
 8009500:	071a      	lsls	r2, r3, #28
 8009502:	bf04      	itt	eq
 8009504:	091b      	lsreq	r3, r3, #4
 8009506:	3004      	addeq	r0, #4
 8009508:	079a      	lsls	r2, r3, #30
 800950a:	bf04      	itt	eq
 800950c:	089b      	lsreq	r3, r3, #2
 800950e:	3002      	addeq	r0, #2
 8009510:	07da      	lsls	r2, r3, #31
 8009512:	d402      	bmi.n	800951a <__lo0bits+0x4e>
 8009514:	085b      	lsrs	r3, r3, #1
 8009516:	d006      	beq.n	8009526 <__lo0bits+0x5a>
 8009518:	3001      	adds	r0, #1
 800951a:	600b      	str	r3, [r1, #0]
 800951c:	4770      	bx	lr
 800951e:	4610      	mov	r0, r2
 8009520:	e7e9      	b.n	80094f6 <__lo0bits+0x2a>
 8009522:	2000      	movs	r0, #0
 8009524:	4770      	bx	lr
 8009526:	2020      	movs	r0, #32
 8009528:	4770      	bx	lr

0800952a <__i2b>:
 800952a:	b510      	push	{r4, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	2101      	movs	r1, #1
 8009530:	f7ff fee9 	bl	8009306 <_Balloc>
 8009534:	2201      	movs	r2, #1
 8009536:	6144      	str	r4, [r0, #20]
 8009538:	6102      	str	r2, [r0, #16]
 800953a:	bd10      	pop	{r4, pc}

0800953c <__multiply>:
 800953c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4614      	mov	r4, r2
 8009542:	690a      	ldr	r2, [r1, #16]
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	429a      	cmp	r2, r3
 8009548:	bfb8      	it	lt
 800954a:	460b      	movlt	r3, r1
 800954c:	4688      	mov	r8, r1
 800954e:	bfbc      	itt	lt
 8009550:	46a0      	movlt	r8, r4
 8009552:	461c      	movlt	r4, r3
 8009554:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009558:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800955c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009560:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009564:	eb07 0609 	add.w	r6, r7, r9
 8009568:	42b3      	cmp	r3, r6
 800956a:	bfb8      	it	lt
 800956c:	3101      	addlt	r1, #1
 800956e:	f7ff feca 	bl	8009306 <_Balloc>
 8009572:	f100 0514 	add.w	r5, r0, #20
 8009576:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800957a:	462b      	mov	r3, r5
 800957c:	2200      	movs	r2, #0
 800957e:	4573      	cmp	r3, lr
 8009580:	d316      	bcc.n	80095b0 <__multiply+0x74>
 8009582:	f104 0214 	add.w	r2, r4, #20
 8009586:	f108 0114 	add.w	r1, r8, #20
 800958a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800958e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	9b00      	ldr	r3, [sp, #0]
 8009596:	9201      	str	r2, [sp, #4]
 8009598:	4293      	cmp	r3, r2
 800959a:	d80c      	bhi.n	80095b6 <__multiply+0x7a>
 800959c:	2e00      	cmp	r6, #0
 800959e:	dd03      	ble.n	80095a8 <__multiply+0x6c>
 80095a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d05d      	beq.n	8009664 <__multiply+0x128>
 80095a8:	6106      	str	r6, [r0, #16]
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	f843 2b04 	str.w	r2, [r3], #4
 80095b4:	e7e3      	b.n	800957e <__multiply+0x42>
 80095b6:	f8b2 b000 	ldrh.w	fp, [r2]
 80095ba:	f1bb 0f00 	cmp.w	fp, #0
 80095be:	d023      	beq.n	8009608 <__multiply+0xcc>
 80095c0:	4689      	mov	r9, r1
 80095c2:	46ac      	mov	ip, r5
 80095c4:	f04f 0800 	mov.w	r8, #0
 80095c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80095cc:	f8dc a000 	ldr.w	sl, [ip]
 80095d0:	b2a3      	uxth	r3, r4
 80095d2:	fa1f fa8a 	uxth.w	sl, sl
 80095d6:	fb0b a303 	mla	r3, fp, r3, sl
 80095da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80095de:	f8dc 4000 	ldr.w	r4, [ip]
 80095e2:	4443      	add	r3, r8
 80095e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095e8:	fb0b 840a 	mla	r4, fp, sl, r8
 80095ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80095f0:	46e2      	mov	sl, ip
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095f8:	454f      	cmp	r7, r9
 80095fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095fe:	f84a 3b04 	str.w	r3, [sl], #4
 8009602:	d82b      	bhi.n	800965c <__multiply+0x120>
 8009604:	f8cc 8004 	str.w	r8, [ip, #4]
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800960e:	3204      	adds	r2, #4
 8009610:	f1ba 0f00 	cmp.w	sl, #0
 8009614:	d020      	beq.n	8009658 <__multiply+0x11c>
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	4689      	mov	r9, r1
 800961a:	46a8      	mov	r8, r5
 800961c:	f04f 0b00 	mov.w	fp, #0
 8009620:	f8b9 c000 	ldrh.w	ip, [r9]
 8009624:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009628:	fb0a 440c 	mla	r4, sl, ip, r4
 800962c:	445c      	add	r4, fp
 800962e:	46c4      	mov	ip, r8
 8009630:	b29b      	uxth	r3, r3
 8009632:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009636:	f84c 3b04 	str.w	r3, [ip], #4
 800963a:	f859 3b04 	ldr.w	r3, [r9], #4
 800963e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009642:	0c1b      	lsrs	r3, r3, #16
 8009644:	fb0a b303 	mla	r3, sl, r3, fp
 8009648:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800964c:	454f      	cmp	r7, r9
 800964e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009652:	d805      	bhi.n	8009660 <__multiply+0x124>
 8009654:	f8c8 3004 	str.w	r3, [r8, #4]
 8009658:	3504      	adds	r5, #4
 800965a:	e79b      	b.n	8009594 <__multiply+0x58>
 800965c:	46d4      	mov	ip, sl
 800965e:	e7b3      	b.n	80095c8 <__multiply+0x8c>
 8009660:	46e0      	mov	r8, ip
 8009662:	e7dd      	b.n	8009620 <__multiply+0xe4>
 8009664:	3e01      	subs	r6, #1
 8009666:	e799      	b.n	800959c <__multiply+0x60>

08009668 <__pow5mult>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	4615      	mov	r5, r2
 800966e:	f012 0203 	ands.w	r2, r2, #3
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	d007      	beq.n	8009688 <__pow5mult+0x20>
 8009678:	3a01      	subs	r2, #1
 800967a:	4c21      	ldr	r4, [pc, #132]	; (8009700 <__pow5mult+0x98>)
 800967c:	2300      	movs	r3, #0
 800967e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009682:	f7ff fe8b 	bl	800939c <__multadd>
 8009686:	4607      	mov	r7, r0
 8009688:	10ad      	asrs	r5, r5, #2
 800968a:	d035      	beq.n	80096f8 <__pow5mult+0x90>
 800968c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800968e:	b93c      	cbnz	r4, 80096a0 <__pow5mult+0x38>
 8009690:	2010      	movs	r0, #16
 8009692:	f7fe faa3 	bl	8007bdc <malloc>
 8009696:	6270      	str	r0, [r6, #36]	; 0x24
 8009698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800969c:	6004      	str	r4, [r0, #0]
 800969e:	60c4      	str	r4, [r0, #12]
 80096a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096a8:	b94c      	cbnz	r4, 80096be <__pow5mult+0x56>
 80096aa:	f240 2171 	movw	r1, #625	; 0x271
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ff3b 	bl	800952a <__i2b>
 80096b4:	2300      	movs	r3, #0
 80096b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ba:	4604      	mov	r4, r0
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	f04f 0800 	mov.w	r8, #0
 80096c2:	07eb      	lsls	r3, r5, #31
 80096c4:	d50a      	bpl.n	80096dc <__pow5mult+0x74>
 80096c6:	4639      	mov	r1, r7
 80096c8:	4622      	mov	r2, r4
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7ff ff36 	bl	800953c <__multiply>
 80096d0:	4639      	mov	r1, r7
 80096d2:	4681      	mov	r9, r0
 80096d4:	4630      	mov	r0, r6
 80096d6:	f7ff fe4a 	bl	800936e <_Bfree>
 80096da:	464f      	mov	r7, r9
 80096dc:	106d      	asrs	r5, r5, #1
 80096de:	d00b      	beq.n	80096f8 <__pow5mult+0x90>
 80096e0:	6820      	ldr	r0, [r4, #0]
 80096e2:	b938      	cbnz	r0, 80096f4 <__pow5mult+0x8c>
 80096e4:	4622      	mov	r2, r4
 80096e6:	4621      	mov	r1, r4
 80096e8:	4630      	mov	r0, r6
 80096ea:	f7ff ff27 	bl	800953c <__multiply>
 80096ee:	6020      	str	r0, [r4, #0]
 80096f0:	f8c0 8000 	str.w	r8, [r0]
 80096f4:	4604      	mov	r4, r0
 80096f6:	e7e4      	b.n	80096c2 <__pow5mult+0x5a>
 80096f8:	4638      	mov	r0, r7
 80096fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fe:	bf00      	nop
 8009700:	08009e58 	.word	0x08009e58

08009704 <__lshift>:
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	6849      	ldr	r1, [r1, #4]
 8009712:	eb0a 0903 	add.w	r9, sl, r3
 8009716:	68a3      	ldr	r3, [r4, #8]
 8009718:	4607      	mov	r7, r0
 800971a:	4616      	mov	r6, r2
 800971c:	f109 0501 	add.w	r5, r9, #1
 8009720:	42ab      	cmp	r3, r5
 8009722:	db32      	blt.n	800978a <__lshift+0x86>
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff fdee 	bl	8009306 <_Balloc>
 800972a:	2300      	movs	r3, #0
 800972c:	4680      	mov	r8, r0
 800972e:	f100 0114 	add.w	r1, r0, #20
 8009732:	461a      	mov	r2, r3
 8009734:	4553      	cmp	r3, sl
 8009736:	db2b      	blt.n	8009790 <__lshift+0x8c>
 8009738:	6920      	ldr	r0, [r4, #16]
 800973a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800973e:	f104 0314 	add.w	r3, r4, #20
 8009742:	f016 021f 	ands.w	r2, r6, #31
 8009746:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800974a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800974e:	d025      	beq.n	800979c <__lshift+0x98>
 8009750:	f1c2 0e20 	rsb	lr, r2, #32
 8009754:	2000      	movs	r0, #0
 8009756:	681e      	ldr	r6, [r3, #0]
 8009758:	468a      	mov	sl, r1
 800975a:	4096      	lsls	r6, r2
 800975c:	4330      	orrs	r0, r6
 800975e:	f84a 0b04 	str.w	r0, [sl], #4
 8009762:	f853 0b04 	ldr.w	r0, [r3], #4
 8009766:	459c      	cmp	ip, r3
 8009768:	fa20 f00e 	lsr.w	r0, r0, lr
 800976c:	d814      	bhi.n	8009798 <__lshift+0x94>
 800976e:	6048      	str	r0, [r1, #4]
 8009770:	b108      	cbz	r0, 8009776 <__lshift+0x72>
 8009772:	f109 0502 	add.w	r5, r9, #2
 8009776:	3d01      	subs	r5, #1
 8009778:	4638      	mov	r0, r7
 800977a:	f8c8 5010 	str.w	r5, [r8, #16]
 800977e:	4621      	mov	r1, r4
 8009780:	f7ff fdf5 	bl	800936e <_Bfree>
 8009784:	4640      	mov	r0, r8
 8009786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978a:	3101      	adds	r1, #1
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	e7c7      	b.n	8009720 <__lshift+0x1c>
 8009790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009794:	3301      	adds	r3, #1
 8009796:	e7cd      	b.n	8009734 <__lshift+0x30>
 8009798:	4651      	mov	r1, sl
 800979a:	e7dc      	b.n	8009756 <__lshift+0x52>
 800979c:	3904      	subs	r1, #4
 800979e:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80097a6:	459c      	cmp	ip, r3
 80097a8:	d8f9      	bhi.n	800979e <__lshift+0x9a>
 80097aa:	e7e4      	b.n	8009776 <__lshift+0x72>

080097ac <__mcmp>:
 80097ac:	6903      	ldr	r3, [r0, #16]
 80097ae:	690a      	ldr	r2, [r1, #16]
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	b530      	push	{r4, r5, lr}
 80097b4:	d10c      	bne.n	80097d0 <__mcmp+0x24>
 80097b6:	0092      	lsls	r2, r2, #2
 80097b8:	3014      	adds	r0, #20
 80097ba:	3114      	adds	r1, #20
 80097bc:	1884      	adds	r4, r0, r2
 80097be:	4411      	add	r1, r2
 80097c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097c8:	4295      	cmp	r5, r2
 80097ca:	d003      	beq.n	80097d4 <__mcmp+0x28>
 80097cc:	d305      	bcc.n	80097da <__mcmp+0x2e>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4618      	mov	r0, r3
 80097d2:	bd30      	pop	{r4, r5, pc}
 80097d4:	42a0      	cmp	r0, r4
 80097d6:	d3f3      	bcc.n	80097c0 <__mcmp+0x14>
 80097d8:	e7fa      	b.n	80097d0 <__mcmp+0x24>
 80097da:	f04f 33ff 	mov.w	r3, #4294967295
 80097de:	e7f7      	b.n	80097d0 <__mcmp+0x24>

080097e0 <__mdiff>:
 80097e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	460d      	mov	r5, r1
 80097e6:	4607      	mov	r7, r0
 80097e8:	4611      	mov	r1, r2
 80097ea:	4628      	mov	r0, r5
 80097ec:	4614      	mov	r4, r2
 80097ee:	f7ff ffdd 	bl	80097ac <__mcmp>
 80097f2:	1e06      	subs	r6, r0, #0
 80097f4:	d108      	bne.n	8009808 <__mdiff+0x28>
 80097f6:	4631      	mov	r1, r6
 80097f8:	4638      	mov	r0, r7
 80097fa:	f7ff fd84 	bl	8009306 <_Balloc>
 80097fe:	2301      	movs	r3, #1
 8009800:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009808:	bfa4      	itt	ge
 800980a:	4623      	movge	r3, r4
 800980c:	462c      	movge	r4, r5
 800980e:	4638      	mov	r0, r7
 8009810:	6861      	ldr	r1, [r4, #4]
 8009812:	bfa6      	itte	ge
 8009814:	461d      	movge	r5, r3
 8009816:	2600      	movge	r6, #0
 8009818:	2601      	movlt	r6, #1
 800981a:	f7ff fd74 	bl	8009306 <_Balloc>
 800981e:	692b      	ldr	r3, [r5, #16]
 8009820:	60c6      	str	r6, [r0, #12]
 8009822:	6926      	ldr	r6, [r4, #16]
 8009824:	f105 0914 	add.w	r9, r5, #20
 8009828:	f104 0214 	add.w	r2, r4, #20
 800982c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009830:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009834:	f100 0514 	add.w	r5, r0, #20
 8009838:	f04f 0e00 	mov.w	lr, #0
 800983c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009840:	f859 4b04 	ldr.w	r4, [r9], #4
 8009844:	fa1e f18a 	uxtah	r1, lr, sl
 8009848:	b2a3      	uxth	r3, r4
 800984a:	1ac9      	subs	r1, r1, r3
 800984c:	0c23      	lsrs	r3, r4, #16
 800984e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009852:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009856:	b289      	uxth	r1, r1
 8009858:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800985c:	45c8      	cmp	r8, r9
 800985e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009862:	4694      	mov	ip, r2
 8009864:	f845 3b04 	str.w	r3, [r5], #4
 8009868:	d8e8      	bhi.n	800983c <__mdiff+0x5c>
 800986a:	45bc      	cmp	ip, r7
 800986c:	d304      	bcc.n	8009878 <__mdiff+0x98>
 800986e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009872:	b183      	cbz	r3, 8009896 <__mdiff+0xb6>
 8009874:	6106      	str	r6, [r0, #16]
 8009876:	e7c5      	b.n	8009804 <__mdiff+0x24>
 8009878:	f85c 1b04 	ldr.w	r1, [ip], #4
 800987c:	fa1e f381 	uxtah	r3, lr, r1
 8009880:	141a      	asrs	r2, r3, #16
 8009882:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009886:	b29b      	uxth	r3, r3
 8009888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800988c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009890:	f845 3b04 	str.w	r3, [r5], #4
 8009894:	e7e9      	b.n	800986a <__mdiff+0x8a>
 8009896:	3e01      	subs	r6, #1
 8009898:	e7e9      	b.n	800986e <__mdiff+0x8e>
	...

0800989c <__ulp>:
 800989c:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <__ulp+0x4c>)
 800989e:	ee10 2a90 	vmov	r2, s1
 80098a2:	401a      	ands	r2, r3
 80098a4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dd04      	ble.n	80098b6 <__ulp+0x1a>
 80098ac:	2000      	movs	r0, #0
 80098ae:	4619      	mov	r1, r3
 80098b0:	ec41 0b10 	vmov	d0, r0, r1
 80098b4:	4770      	bx	lr
 80098b6:	425b      	negs	r3, r3
 80098b8:	151b      	asrs	r3, r3, #20
 80098ba:	2b13      	cmp	r3, #19
 80098bc:	f04f 0000 	mov.w	r0, #0
 80098c0:	f04f 0100 	mov.w	r1, #0
 80098c4:	dc04      	bgt.n	80098d0 <__ulp+0x34>
 80098c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80098ca:	fa42 f103 	asr.w	r1, r2, r3
 80098ce:	e7ef      	b.n	80098b0 <__ulp+0x14>
 80098d0:	3b14      	subs	r3, #20
 80098d2:	2b1e      	cmp	r3, #30
 80098d4:	f04f 0201 	mov.w	r2, #1
 80098d8:	bfda      	itte	le
 80098da:	f1c3 031f 	rsble	r3, r3, #31
 80098de:	fa02 f303 	lslle.w	r3, r2, r3
 80098e2:	4613      	movgt	r3, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	e7e3      	b.n	80098b0 <__ulp+0x14>
 80098e8:	7ff00000 	.word	0x7ff00000

080098ec <__b2d>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	6905      	ldr	r5, [r0, #16]
 80098f0:	f100 0714 	add.w	r7, r0, #20
 80098f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80098f8:	1f2e      	subs	r6, r5, #4
 80098fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80098fe:	4620      	mov	r0, r4
 8009900:	f7ff fdc5 	bl	800948e <__hi0bits>
 8009904:	f1c0 0320 	rsb	r3, r0, #32
 8009908:	280a      	cmp	r0, #10
 800990a:	600b      	str	r3, [r1, #0]
 800990c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009984 <__b2d+0x98>
 8009910:	dc14      	bgt.n	800993c <__b2d+0x50>
 8009912:	f1c0 0e0b 	rsb	lr, r0, #11
 8009916:	fa24 f10e 	lsr.w	r1, r4, lr
 800991a:	42b7      	cmp	r7, r6
 800991c:	ea41 030c 	orr.w	r3, r1, ip
 8009920:	bf34      	ite	cc
 8009922:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009926:	2100      	movcs	r1, #0
 8009928:	3015      	adds	r0, #21
 800992a:	fa04 f000 	lsl.w	r0, r4, r0
 800992e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009932:	ea40 0201 	orr.w	r2, r0, r1
 8009936:	ec43 2b10 	vmov	d0, r2, r3
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	42b7      	cmp	r7, r6
 800993e:	bf3a      	itte	cc
 8009940:	f1a5 0608 	subcc.w	r6, r5, #8
 8009944:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009948:	2100      	movcs	r1, #0
 800994a:	380b      	subs	r0, #11
 800994c:	d015      	beq.n	800997a <__b2d+0x8e>
 800994e:	4084      	lsls	r4, r0
 8009950:	f1c0 0520 	rsb	r5, r0, #32
 8009954:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009958:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800995c:	42be      	cmp	r6, r7
 800995e:	fa21 fc05 	lsr.w	ip, r1, r5
 8009962:	ea44 030c 	orr.w	r3, r4, ip
 8009966:	bf8c      	ite	hi
 8009968:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800996c:	2400      	movls	r4, #0
 800996e:	fa01 f000 	lsl.w	r0, r1, r0
 8009972:	40ec      	lsrs	r4, r5
 8009974:	ea40 0204 	orr.w	r2, r0, r4
 8009978:	e7dd      	b.n	8009936 <__b2d+0x4a>
 800997a:	ea44 030c 	orr.w	r3, r4, ip
 800997e:	460a      	mov	r2, r1
 8009980:	e7d9      	b.n	8009936 <__b2d+0x4a>
 8009982:	bf00      	nop
 8009984:	3ff00000 	.word	0x3ff00000

08009988 <__d2b>:
 8009988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800998c:	460e      	mov	r6, r1
 800998e:	2101      	movs	r1, #1
 8009990:	ec59 8b10 	vmov	r8, r9, d0
 8009994:	4615      	mov	r5, r2
 8009996:	f7ff fcb6 	bl	8009306 <_Balloc>
 800999a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800999e:	4607      	mov	r7, r0
 80099a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099a4:	bb34      	cbnz	r4, 80099f4 <__d2b+0x6c>
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	f1b8 0300 	subs.w	r3, r8, #0
 80099ac:	d027      	beq.n	80099fe <__d2b+0x76>
 80099ae:	a802      	add	r0, sp, #8
 80099b0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80099b4:	f7ff fd8a 	bl	80094cc <__lo0bits>
 80099b8:	9900      	ldr	r1, [sp, #0]
 80099ba:	b1f0      	cbz	r0, 80099fa <__d2b+0x72>
 80099bc:	9a01      	ldr	r2, [sp, #4]
 80099be:	f1c0 0320 	rsb	r3, r0, #32
 80099c2:	fa02 f303 	lsl.w	r3, r2, r3
 80099c6:	430b      	orrs	r3, r1
 80099c8:	40c2      	lsrs	r2, r0
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	9201      	str	r2, [sp, #4]
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	61bb      	str	r3, [r7, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bf14      	ite	ne
 80099d6:	2102      	movne	r1, #2
 80099d8:	2101      	moveq	r1, #1
 80099da:	6139      	str	r1, [r7, #16]
 80099dc:	b1c4      	cbz	r4, 8009a10 <__d2b+0x88>
 80099de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099e2:	4404      	add	r4, r0
 80099e4:	6034      	str	r4, [r6, #0]
 80099e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099ea:	6028      	str	r0, [r5, #0]
 80099ec:	4638      	mov	r0, r7
 80099ee:	b003      	add	sp, #12
 80099f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099f8:	e7d5      	b.n	80099a6 <__d2b+0x1e>
 80099fa:	6179      	str	r1, [r7, #20]
 80099fc:	e7e7      	b.n	80099ce <__d2b+0x46>
 80099fe:	a801      	add	r0, sp, #4
 8009a00:	f7ff fd64 	bl	80094cc <__lo0bits>
 8009a04:	9b01      	ldr	r3, [sp, #4]
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	2101      	movs	r1, #1
 8009a0a:	6139      	str	r1, [r7, #16]
 8009a0c:	3020      	adds	r0, #32
 8009a0e:	e7e5      	b.n	80099dc <__d2b+0x54>
 8009a10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009a14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a18:	6030      	str	r0, [r6, #0]
 8009a1a:	6918      	ldr	r0, [r3, #16]
 8009a1c:	f7ff fd37 	bl	800948e <__hi0bits>
 8009a20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a24:	e7e1      	b.n	80099ea <__d2b+0x62>

08009a26 <__ratio>:
 8009a26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	4688      	mov	r8, r1
 8009a2c:	4669      	mov	r1, sp
 8009a2e:	4681      	mov	r9, r0
 8009a30:	f7ff ff5c 	bl	80098ec <__b2d>
 8009a34:	a901      	add	r1, sp, #4
 8009a36:	4640      	mov	r0, r8
 8009a38:	ec57 6b10 	vmov	r6, r7, d0
 8009a3c:	f7ff ff56 	bl	80098ec <__b2d>
 8009a40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a48:	eba3 0c02 	sub.w	ip, r3, r2
 8009a4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a56:	ec5b ab10 	vmov	sl, fp, d0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bfce      	itee	gt
 8009a5e:	463a      	movgt	r2, r7
 8009a60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a64:	465a      	movle	r2, fp
 8009a66:	4659      	mov	r1, fp
 8009a68:	463d      	mov	r5, r7
 8009a6a:	bfd4      	ite	le
 8009a6c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009a70:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009a74:	4630      	mov	r0, r6
 8009a76:	ee10 2a10 	vmov	r2, s0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f7f6 fe91 	bl	80007a4 <__aeabi_ddiv>
 8009a82:	ec41 0b10 	vmov	d0, r0, r1
 8009a86:	b003      	add	sp, #12
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a8c <__copybits>:
 8009a8c:	3901      	subs	r1, #1
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	1149      	asrs	r1, r1, #5
 8009a92:	6914      	ldr	r4, [r2, #16]
 8009a94:	3101      	adds	r1, #1
 8009a96:	f102 0314 	add.w	r3, r2, #20
 8009a9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	d303      	bcc.n	8009ab0 <__copybits+0x24>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	428a      	cmp	r2, r1
 8009aac:	d305      	bcc.n	8009aba <__copybits+0x2e>
 8009aae:	bd10      	pop	{r4, pc}
 8009ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab4:	f840 2b04 	str.w	r2, [r0], #4
 8009ab8:	e7f3      	b.n	8009aa2 <__copybits+0x16>
 8009aba:	f842 3b04 	str.w	r3, [r2], #4
 8009abe:	e7f4      	b.n	8009aaa <__copybits+0x1e>

08009ac0 <__any_on>:
 8009ac0:	f100 0214 	add.w	r2, r0, #20
 8009ac4:	6900      	ldr	r0, [r0, #16]
 8009ac6:	114b      	asrs	r3, r1, #5
 8009ac8:	4298      	cmp	r0, r3
 8009aca:	b510      	push	{r4, lr}
 8009acc:	db11      	blt.n	8009af2 <__any_on+0x32>
 8009ace:	dd0a      	ble.n	8009ae6 <__any_on+0x26>
 8009ad0:	f011 011f 	ands.w	r1, r1, #31
 8009ad4:	d007      	beq.n	8009ae6 <__any_on+0x26>
 8009ad6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ada:	fa24 f001 	lsr.w	r0, r4, r1
 8009ade:	fa00 f101 	lsl.w	r1, r0, r1
 8009ae2:	428c      	cmp	r4, r1
 8009ae4:	d10b      	bne.n	8009afe <__any_on+0x3e>
 8009ae6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d803      	bhi.n	8009af6 <__any_on+0x36>
 8009aee:	2000      	movs	r0, #0
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	4603      	mov	r3, r0
 8009af4:	e7f7      	b.n	8009ae6 <__any_on+0x26>
 8009af6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009afa:	2900      	cmp	r1, #0
 8009afc:	d0f5      	beq.n	8009aea <__any_on+0x2a>
 8009afe:	2001      	movs	r0, #1
 8009b00:	e7f6      	b.n	8009af0 <__any_on+0x30>

08009b02 <_calloc_r>:
 8009b02:	b538      	push	{r3, r4, r5, lr}
 8009b04:	fb02 f401 	mul.w	r4, r2, r1
 8009b08:	4621      	mov	r1, r4
 8009b0a:	f7fe f8d9 	bl	8007cc0 <_malloc_r>
 8009b0e:	4605      	mov	r5, r0
 8009b10:	b118      	cbz	r0, 8009b1a <_calloc_r+0x18>
 8009b12:	4622      	mov	r2, r4
 8009b14:	2100      	movs	r1, #0
 8009b16:	f7fe f87c 	bl	8007c12 <memset>
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}

08009b1e <strncmp>:
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	b16a      	cbz	r2, 8009b3e <strncmp+0x20>
 8009b22:	3901      	subs	r1, #1
 8009b24:	1884      	adds	r4, r0, r2
 8009b26:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d103      	bne.n	8009b3a <strncmp+0x1c>
 8009b32:	42a0      	cmp	r0, r4
 8009b34:	d001      	beq.n	8009b3a <strncmp+0x1c>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1f5      	bne.n	8009b26 <strncmp+0x8>
 8009b3a:	1a98      	subs	r0, r3, r2
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	4610      	mov	r0, r2
 8009b40:	e7fc      	b.n	8009b3c <strncmp+0x1e>

08009b42 <__ascii_wctomb>:
 8009b42:	b149      	cbz	r1, 8009b58 <__ascii_wctomb+0x16>
 8009b44:	2aff      	cmp	r2, #255	; 0xff
 8009b46:	bf85      	ittet	hi
 8009b48:	238a      	movhi	r3, #138	; 0x8a
 8009b4a:	6003      	strhi	r3, [r0, #0]
 8009b4c:	700a      	strbls	r2, [r1, #0]
 8009b4e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b52:	bf98      	it	ls
 8009b54:	2001      	movls	r0, #1
 8009b56:	4770      	bx	lr
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4770      	bx	lr

08009b5c <_init>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	bf00      	nop
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr

08009b68 <_fini>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr
